<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en-US" xml:lang="en-US">
  <head>
    <title>Chapter_10</title>
    <!-- kobo-style -->
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="../../stylesheet.css"/>
<link rel="stylesheet" type="text/css" href="../../page_styles.css"/>
</head>
  <body id="Chapter_10" class="calibre">
<div class="calibre1" id="_idContainer052">
<h1 class="chapternumber"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1.1">10</span></h1>
<h1 class="chaptertitle" id="_idParaDest-182"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.2.1">JavaScript Interop</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.3.1">In this chapter, we will take a look at JavaScript. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.3.2">In specific scenarios, we still need to use JavaScript, or we will want to use an existing library that relies on JavaScript. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.3.3">Blazor uses JavaScript to update </span><a id="_idIndexMarker417" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.4.1">the </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.5.1">Document Object Model</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.6.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.7.1">DOM</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.1">), download files, and access local storage on the client.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.9.1">So, there are, and always will be, cases when we need to communicate with JavaScript or have JavaScript communicate with us. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.9.2">Don’t worry, the Blazor community is an amazing one, so chances are someone has already built the interop we need.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.10.1">In this chapter, we will cover the following topics:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.11.1">Why do we need JavaScript?</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.12.1">.NET to JavaScript</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.13.1">JavaScript to .NET</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.14.1">Implementing an existing JavaScript library</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.15.1">JavaScript interop in WebAssembly</span></li>
</ul>
<h1 class="heading" id="_idParaDest-183"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.16.1">Technical requirements</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.17.1">Ensure you have followed the previous chapters or use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.18.1">Chapter09</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.19.1"> folder as a starting point.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.20.1">You can find the source code for this chapter’s result at </span><a href="https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter10" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.21.1">https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter10</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.22.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.23.1">If you are jumping into this chapter using the code from GitHub, make sure you have added the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.24.1">Auth0</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.25.1"> account information in the settings files. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.25.2">You can find the instructions in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.26.1">Chapter 8</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.27.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.28.1">Authentication and Authorization</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.29.1">.</span></p>
<h1 class="heading" id="_idParaDest-184"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.30.1">Why do we need JavaScript?</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.31.1">Many say Blazor is the </span><a id="_idIndexMarker418" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.32.1">JavaScript killer, but the truth is that Blazor needs JavaScript to work. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.32.2">Some events only get triggered in JavaScript, and if we want to use those events, we need to make an interop.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.33.1">I jokingly say that I have never written so much JavaScript as when I started developing with Blazor. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.33.2">it’s not that bad.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.34.1">I have written a couple of libraries that require JavaScript to work. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.34.2">They are called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.35.1">Blazm.Components</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.36.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.37.1">Blazm.Bluetooth</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.38.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.39.1">The first one is a grid component that uses JavaScript interop to trigger C# code (JavaScript to .NET) when the window is resized, to remove columns if they can’t fit inside the window.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.40.1">When that is triggered, the C# code calls JavaScript to get the size of the columns based on the client width, which only the web browser knows, and based on that answer, it removes columns if needed.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.41.1">The second one, </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.42.1">Blazm.Bluetooth</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.43.1">, makes it possible to interact with Bluetooth devices using Web Bluetooth, which is a web standard accessible through JavaScript.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.44.1">It uses two-way communication; Bluetooth events can trigger C# code, and C# code can iterate over devices and send data to them. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.44.2">They are both open source, so if you are interested in looking at a real-world project, you can check them out on my GitHub: </span><a href="https://github.com/EngstromJimmy" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.45.1">https://github.com/EngstromJimmy</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.46.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.47.1">As mentioned earlier, in most cases, I would argue that we won’t need to write JavaScript ourselves. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.47.2">The Blazor community is very big, so chances are that someone has already written what we need. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.47.3">But we don’t need to be afraid of using JavaScript either. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.47.4">Next, we will look at different ways to add JavaScript calls to our Blazor project.</span></p>
<h1 class="heading" id="_idParaDest-185"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.48.1">.NET to JavaScript</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.49.1">Calling JavaScript from .NET is pretty simple. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.49.2">There are</span><a id="_idIndexMarker419" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.50.1"> two ways of doing this:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.51.1">Global JavaScript</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.52.1">JavaScript isolation</span></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.53.1">We will go through both ways to see what the difference is.</span></p>
<h2 class="heading1" id="_idParaDest-186"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.54.1">Global JavaScript (the old way)</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.55.1">To access the JavaScript </span><a id="_idIndexMarker420" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.56.1">method, we need to make it accessible. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.56.2">One way is to </span><a id="_idIndexMarker421" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.57.1">define it globally through the JavaScript window object. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.57.2">This is a bad practice since it is accessible by all scripts and could replace the functionality in other scripts (if we accidentally use the same names).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.58.1">What we can do, for example, is use scopes, create an object in global space, and put our variables and methods on that object so that we lower the risk a bit, at least.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.59.1">Using a scope could look something like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.60.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.61.1">script</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.62.1">&gt;</span></span>
<span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.63.1">window</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.64.1">.</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.65.1">myscope</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.66.1"> = {};
</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.67.1">window</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.68.1">.</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.69.1">myscope</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.70.1">.</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.71.1">methodName</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.72.1"> = </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.73.1">() =&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.74.1"> { </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.75.1">alert</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.76.1">(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.77.1">"this has been called"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.78.1">); }
</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.79.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.80.1">script</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.81.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.82.1">We create an object with the name </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.83.1">myscope</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.84.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.84.2">Then, we declare a method on that object called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.85.1">methodName</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.86.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.86.2">In this example, there is no code in the method; this only demonstrates how it could be done.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.87.1">Then, to call the method from C#, we would call it using </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.88.1">JSRuntime</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.89.1"> like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.90.1">@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.91.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.92.1"> jsRuntime.InvokeVoidAsync(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.93.1">"myscope.methodName"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.94.1">);
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.95.1">There are two different methods we can use to call JavaScript:</span></p>
<ul class="calibre4">
<li class="bulletlist"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.96.1">InvokeVoidAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.97.1">, which calls JavaScript but doesn’t expect a return value</span></li>
<li class="bulletlist1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.98.1">InvokeAsync&lt;T&gt;</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.99.1">, which calls JavaScript and expects a return value of type </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.100.1">T</span></code></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.101.1">We can also send in parameters to our JavaScript method if we want. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.101.2">We also need to refer to JavaScript, and JavaScript must be stored in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.102.1">wwwroot</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.103.1"> folder.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.104.1">The other way is JavaScript isolation, which uses the methods described here, but with modules.</span></p>
<h2 class="heading1" id="_idParaDest-187"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.105.1">JavaScript Isolation</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.106.1">In .NET 5, we got a new way to </span><a id="_idIndexMarker422" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.107.1">add JavaScript using JavaScript</span><a id="_idIndexMarker423" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.108.1"> Isolation, which is a much nicer way to call JavaScript. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.108.2">It doesn’t use global methods, and it doesn’t require us to refer to the JavaScript file.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.109.1">This is awesome for component vendors and end users because JavaScript will be loaded when needed. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.109.2">It will only be loaded once (Blazor handles that for us), and we don’t need to add a reference to the JavaScript file, which makes it easier to start and use a library.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.110.1">So, let’s implement that instead.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.111.1">Isolated JavaScript can be stored in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.112.1">wwwroot</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.113.1"> folder, but since an update in .NET 6, we can add them in the same way we add isolated CSS. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.113.2">Add them to your component’s folder and name it, adding </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.114.1">.js</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.115.1"> to the end (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.116.1">mycomponent.razor.js</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.117.1">).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.118.1">Let’s do just that!</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.119.1">In our project, we can delete categories and components. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.119.2">Let’s implement a simple JavaScript call to reveal a prompt to make sure that the user wants to delete the category or tag. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.119.3">But we have talked about doing things in a reusable way, so let’s do that:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.120.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.121.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.122.1"> project, select the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.123.1">ReusableComponents/BlogButton.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.124.1"> file, create a new JavaScript file, and name the file </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.125.1">BlogButton.razor.js</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.126.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.127.1">Open the new file (it is located under </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.128.1">BlogButton.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.129.1"> in the solution explorer) and add the following code:
        </span><pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.130.1">export function </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.131.1">showConfirm</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.132.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.133.1">message</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.134.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.135.1"> {
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.136.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.137.1"> confirm(message);
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.138.1">JavaScript Isolation uses the standard </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.139.1">EcmaScript</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.140.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.141.1">ES</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.142.1">) modules</span><a id="_idIndexMarker424" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.143.1"> and can be loaded on demand. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.143.2">The methods it exposes are only accessible through that object and not globally, as with the </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.144.1">old</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.145.1"> way.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.146.1">Open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.147.1">BlogButton.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.148.1"> and inject </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.149.1">IJSRuntime</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.150.1"> at the top of the file:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.151.1">@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.152.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.153.1">code</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.154.1"> section, let’s add a method that will call JavaScript:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.155.1">    IJSObjectReference jsmodule;
    [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.156.1">Parameter</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.157.1">]
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.158.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.159.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.160.1">? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.160.2">ConfirmMessage { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.161.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.162.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.163.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.164.1">; } = </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.165.1">null</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.166.1">;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.167.1">private</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.168.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.169.1"> Task&lt;</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.170.1">bool</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.171.1">&gt; </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.172.1">ShouldExecute</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.173.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.174.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.175.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.176.1"> (ConfirmMessage != </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.177.1">null</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.178.1">)
        {
            jsmodule = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.179.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.180.1"> jsRuntime.InvokeAsync&lt;IJSObjectReference&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.181.1">"import"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.182.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.183.1">"/_content/SharedComponents/ReusableComponents/BlogButton.razor.js"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.184.1">);
            </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.185.1">return</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.186.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.187.1"> jsmodule.InvokeAsync&lt;</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.188.1">bool</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.189.1">&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.190.1">"showConfirm"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.191.1">, ConfirmMessage);
        }
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.192.1">else</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.193.1">
        {
            </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.194.1">return</span></span> <span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.195.1">true</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.196.1">;
        }
    }
</span></code></pre>
<p class="normal1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.197.1">IJSObjectReference</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.198.1"> is a reference to the specific script that we will import further down. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.198.2">It has access to the exported methods in our JavaScript, and nothing else.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.199.1">We run </span><a id="_idIndexMarker425" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.200.1">the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.201.1">Import</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.202.1"> command and send the filename</span><a id="_idIndexMarker426" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.203.1"> as a parameter. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.203.2">This will run the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.204.1">let mymodule = import("/_content/SharedComponents/ReusableComponents/BlogButton.razor.js")</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.205.1"> JavaScript command and return the module. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.205.2">We also add a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.206.1">ConfirmMessage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.207.1"> parameter so we know that if we have a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.208.1">ConfirmMessage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.209.1"> we should show a confirm message.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.210.1">Then, in our </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.211.1">OnButtonClick</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.212.1"> method, we first check whether we </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.213.1">shoudExecute</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.214.1"> the method or not. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.214.2">Change it to the following:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.215.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.216.1"> (OnClick.HasDelegate &amp;&amp; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.217.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.218.1"> ShouldExecute())
 {
     </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.219.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.220.1"> OnClick.InvokeAsync(args);
 }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.221.1">Now, we can use our button to confirm whether we want to delete the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.222.1">Category</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.223.1"> or </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.224.1">Tag</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.225.1">.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="5"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.226.1">Open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.227.1">ItemList.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.228.1">, and let’s add our </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.229.1">BlogButton</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.230.1"> to the component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.230.2">Inside the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.1">Virtualize</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.232.1"> component, change the content to the following:
    </span><pre class="programlisting"><code class="hljs-code"> <span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.233.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.234.1">tr</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.235.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.236.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.237.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.238.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.239.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.240.1">BlogButton</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.241.1">OnClick</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.242.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.243.1">"@(()=&gt; {SelectEvent.InvokeAsync(item); })"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.244.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.245.1"> Select</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.246.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.247.1">BlogButton</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.248.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.249.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.250.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.251.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.252.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.253.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.254.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.255.1">@ItemTemplate(item)</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.256.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.257.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.258.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.259.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.260.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.261.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.262.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.263.1">BlogButton</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.264.1">ConfirmMessage</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.265.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.266.1">"Are you sure you want to delete this item?"</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.267.1">Type</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.268.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.269.1">"BlogButton.ButtonType.Delete"</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.270.1">OnClick</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.271.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.272.1">"@(()=&gt; {DeleteEvent.InvokeAsync(item);})"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.273.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.274.1"> Delete</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.275.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.276.1">BlogButton</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.277.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.278.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.279.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.280.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.281.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.282.1">tr</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.283.1">&gt;</span></span>
</code></pre></li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.284.1">Instead of just </span><a id="_idIndexMarker427" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.285.1">calling our </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.286.1">Delete</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.287.1"> event callback, we first call our new</span><a id="_idIndexMarker428" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.288.1"> method. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.288.2">Let JavaScript confirm that you really want to delete it, and if so, then run the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.289.1">Delete</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.290.1"> event callback.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.291.1">This is a simple implementation of JavaScript.</span></p>
<h1 class="heading" id="_idParaDest-188"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.292.1">JavaScript to .NET</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.293.1">What </span><a id="_idIndexMarker429" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.294.1">about the other way around? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.294.2">I would argue that calling .NET code from JavaScript isn’t a very common scenario, and if we find ourselves in that scenario, we might want to think about what we are doing.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.295.1">As Blazor developers, we should avoid using JavaScript as much as possible.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.296.1">I am not bashing JavaScript in any way, but I see this often happen where developers kind of shoehorn what they’ve used before into their Blazor projects.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.297.1">They are solving things with JavaScript that are easy to do with an </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.298.1">if</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.299.1"> statement in Blazor. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.299.2">So, that’s why I think it’s essential to think about when to use JavaScript and when not to use JavaScript.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.300.1">There are, of course, times when JavaScript is the only option, and as I mentioned earlier, </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.301.1">Blazm</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.302.1"> uses communication both ways.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.303.1">There are three ways of doing a callback from JavaScript to .NET code:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.304.1">A static .NET method call</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.305.1">An instance method call</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.306.1">A component instance method call</span></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.307.1">Let’s take a closer look at them.</span></p>
<h2 class="heading1" id="_idParaDest-189"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.308.1">Static .NET method call</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.309.1">To call a .NET function</span><a id="_idIndexMarker430" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.310.1"> from JavaScript, we can make the function static, and we also need to add the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.311.1">JSInvokable</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.312.1"> attribute to the method.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.313.1">We can add a function such as this in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.314.1">code</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.315.1"> section of a Razor component, or inside a class:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.316.1">[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.317.1">JSInvokable</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.318.1">]
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.319.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.320.1">static</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.321.1"> Task&lt;</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.322.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.323.1">[]&gt; ReturnArrayAsync()
{
   </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.324.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.325.1"> Task.FromResult(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.326.1">new</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.327.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.328.1">[] { </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.329.1">1</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.330.1">, </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.331.1">2</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.332.1">, </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.333.1">3</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.334.1"> });
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.335.1">In the JavaScript file, we can call that function using the following code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.336.1">DotNet.invokeMethodAsync(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.337.1">'BlazorWebAssemblySample'</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.338.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.339.1">'ReturnArrayAsync'</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.340.1">)
      .then(data =&gt; {
        data.push(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.341.1">4</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.342.1">);
          console.log(data);
      });
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.343.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.344.1">DotNet</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.345.1"> object comes from the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.346.1">Blazor.js</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.347.1"> or </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.348.1">blazor.server.js</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.349.1"> file.</span></p>
<p class="normal1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.350.1">BlazorWebAssemblySample</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.351.1"> is the name of the assembly, and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.352.1">ReturnArrayAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.353.1"> is the name of the static .NET function.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.354.1">It is also possible to specify the name of the function in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.355.1">JSInvokeable</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.356.1"> attribute if we don’t want it to be the same as the method name like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.357.1">[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.358.1">JSInvokable(</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.359.1">"DifferentMethodName"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.361.1">]
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.362.1">In this sample, JavaScript calls back to .NET code, which returns an </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.363.1">int</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.364.1"> array.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.365.1">It is returned as a promise in the JavaScript file that we are waiting for, and then (using the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.366.1">then</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.367.1"> operator) we continue with the execution, adding a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.368.1">4</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.369.1"> to the array and then outputting the values in the console.</span></p>
<h2 class="heading1" id="_idParaDest-190"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.370.1">Instance method call</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.371.1">This method is a bit tricky; we</span><a id="_idIndexMarker431" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.372.1"> need to pass an instance of the .NET object to call it (this is the method that </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.373.1">Blazm.Bluetooth</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.374.1"> is using).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.375.1">First, we need a class that will handle the method call:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.376.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.377.1"> Microsoft.JSInterop;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.378.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.379.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.380.1">HelloHelper</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.381.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.382.1">public</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.383.1">HelloHelper</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.384.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.385.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.386.1"> name</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.387.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.388.1">
    {
        Name = name;
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.389.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.390.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.391.1"> Name { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.392.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.393.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.394.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.395.1">; }
    [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.396.1">JSInvokable</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.397.1">]
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.398.1">public</span></span><span> </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.399.1">string</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.400.1">SayHello</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.401.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.402.1"> =&gt; </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.403.1">$"Hello, </span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.404.1">{Name}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.405.1">!"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.406.1">;
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.407.1">This class takes a string (a name) in the constructor and a method called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.408.1">SayHello</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.409.1"> that returns a string containing </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.410.1">"Hello,"</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.411.1"> and the name we supplied when we created the instance.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.412.1">So, we need to create an instance of that class, supply a name, and create </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.413.1">DotNetObjectReference&lt;T&gt;</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.414.1">, which will give JavaScript access to the instance.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.415.1">But first, we need JavaScript that can call the .NET function:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.416.1">export function </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.417.1">sayHello</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.418.1"> (</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.419.1">dotnetHelper</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.420.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.421.1"> {
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.422.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.423.1"> dotnetHelper.invokeMethodAsync(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.424.1">'SayHello'</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.425.1">).then(r =&gt; alert(r));
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.426.1">In this case, we are using the export syntax, and we export a function called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.427.1">sayHello</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.428.1">, which takes an instance of </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.429.1">DotNetObjectReference</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.430.1"> called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.431.1">dotnetHelper</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.432.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.433.1">In that instance, we invoke the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.434.1">SayHello</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.435.1"> method, which is the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.436.1">SayHello</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.437.1"> method on the .NET object. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.437.2">In this case, it will reference an instance of the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.438.1">HelloHelper</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.439.1"> class.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.440.1">We also need to call the JavaScript method, and we can do that from a class or, in this case, from a component:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.441.1">@page </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.442.1">"/interop"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.443.1"> @using Microsoft.JSInterop
@inject IJSRuntime jsRuntime
@implements IDisposable
&lt;button type=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.444.1">"button"</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.445.1">class</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.446.1">=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.447.1">"btn btn-primary"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.448.1"> @onclick=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.449.1">"async ()=&gt; { await TriggerNetInstanceMethod(); }"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.450.1">&gt;    Trigger .NET instance method HelloHelper.SayHello &lt;/button&gt;
@code {
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.451.1">private</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.452.1"> DotNetObjectReference&lt;HelloHelper&gt; objRef;
    
    IJSObjectReference jsmodule;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.453.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.454.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.455.1"> ValueTask&lt;</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.456.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.457.1">&gt;</span></span>
<span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.458.1">TriggerNetInstanceMethod</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.459.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.460.1">
    {
        objRef = DotNetObjectReference.Create(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.461.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.462.1"> HelloHelper(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.463.1">"Bruce Wayne"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.464.1">));
        jsmodule = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.465.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.466.1"> jsRuntime. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.466.2">InvokeAsync&lt;IJSObjectReference&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.467.1">"import"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.468.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.469.1">"/_content/MyBlog.Shared/Interop.razor.js"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.470.1">);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.471.1">return</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.472.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.473.1"> jsmodule.InvokeAsync&lt;</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.474.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.475.1">&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.476.1">"sayHello"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.477.1">, objRef);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.478.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.479.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.480.1">Dispose</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.481.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.482.1">
    {
        objRef?.Dispose();
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.483.1">Let’s go</span><a id="_idIndexMarker432" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.484.1"> through the class. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.484.2">We inject </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.485.1">IJSRuntime</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.486.1"> because we need one to call the JavaScript function. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.486.2">To avoid any memory leaks, we also have to make sure to implement </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.487.1">IDisposable</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.488.1"> interface, and toward the bottom of the file, we make sure to dispose of the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.489.1">DotNetObjectReference</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.490.1"> instance.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.491.1">We create a private variable of the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.492.1">DotNetObjectReference&lt;HelloHelper&gt;</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.493.1"> type, which is going to contain our reference to our </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.494.1">HelloHelper</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.495.1"> instance. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.495.2">We create </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.496.1">IJSObjectReference</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.497.1"> so that we can load our JavaScript function.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.498.1">Then, we create an instance of </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.499.1">DotNetObjectReference.Create(new HelloHelper("Bruce Wayne"))</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.500.1"> of our reference to a new instance of the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.501.1">HelloHelper</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.502.1"> class, which we supply with the name </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.503.1">"Bruce Wayne"</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.504.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.505.1">Now, we have </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.506.1">objRef</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.507.1">, which we will send to the JavaScript method, but first, we load the JavaScript module, and then we call </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.508.1">JavaScriptMethod</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.509.1"> and pass in the reference to our </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.510.1">HelloHelper</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.511.1"> instance. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.511.2">Now, the JavaScript </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.512.1">sayHello</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.513.1"> method will run </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.514.1">hellohelperref.invokeMethodAsync('SayHello')</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.515.1">, which will make a call to </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.516.1">SayHelloHelper</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.517.1"> and get back a string with </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.518.1">"Hello, Bruce Wayne"</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.519.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.520.1">There are </span><a id="_idIndexMarker433" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.521.1">two more ways that we can use to call .NET functions from JavaScript. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.521.2">We can call a method on a component instance where we can trigger an action, but it is not a recommended approach for Blazor Server. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.521.3">We can also call a method on a component instance by using a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.522.1">helper</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.523.1"> class.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.524.1">Since calling .NET from JavaScript is rare, we won’t go into the two examples. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.524.2">Instead, we’ll dive into things to think about when implementing an existing JavaScript library.</span></p>
<h1 class="heading" id="_idParaDest-191"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.525.1">Implementing an existing JavaScript library</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.526.1">The best</span><a id="_idIndexMarker434" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.527.1"> approach, in my opinion, is to avoid porting JavaScript libraries. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.527.2">Blazor needs to keep the DOM and the render tree in sync, and having JavaScript manipulate the DOM can jeopardize that.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.528.1">Most component vendors, such as Telerik, Synfusion, Radzen, and, of course, </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.529.1">Blazm</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.530.1">, have native components. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.530.2">They don’t just wrap JavaScript but are explicitly written for Blazor in C#. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.530.3">Even though the components use JavaScript in some capacity, the goal is to keep that to a minimum.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.531.1">So, if you are a library maintainer, my recommendation would be to write a native Blazor version of the library, keep JavaScript to a minimum, and, most importantly, not force Blazor developers to write JavaScript to use your components.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.532.1">Some components will be unable to use JavaScript implementations since they need to manipulate the DOM.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.533.1">Blazor is pretty smart when syncing the DOM and render tree, but try to avoid manipulating the DOM. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.533.2">If you need to use JavaScript for something, make sure to put an HTML tag outside the manipulation area, and Blazor will then keep track of that tag and not think about what is inside the tag.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.534.1">Since we started using Blazor at my workplace very early, many vendors had not yet come out with Blazor components. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.534.2">We needed a graph component fast. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.534.3">On our previous website (before Blazor), we used a component</span><a id="_idIndexMarker435" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.535.1"> called </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.536.1">Highcharts</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.537.1">.</span></p>
<p class="normal1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.538.1">Highcharts</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.539.1"> is free to use for non-commercial projects. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.539.2">When building our wrapper, we had a couple of things we wanted to ensure. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.539.3">We wanted the component to work in a similar way to the existing one, and we wanted it to be as simple to use as possible.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.540.1">Let’s walk through what we did.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.541.1">First, we added a reference to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.542.1">Highcharts</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.543.1"> JavaScript:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.544.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.545.1">script</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.546.1">src</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.547.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.548.1">"https://code.highcharts.com/highcharts.js"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.549.1">&gt;&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.550.1">script</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.551.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.552.1">Then, we added a JavaScript file as follows:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.553.1">export</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.554.1">function</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.555.1">loadHighchart</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.556.1">(</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.557.1">id, json</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.558.1">) {
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.559.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.560.1"> obj = </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.561.1">looseJsonParse</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.562.1">(json);
    </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.563.1">Highcharts</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.564.1">.</span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.565.1">chart</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.566.1">(id, obj);
};
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.567.1">export</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.568.1">function</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.569.1">looseJsonParse</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.570.1">(</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.571.1">obj</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.572.1">) {
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.573.1">return</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.574.1">Function</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.575.1">(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.576.1">'"use strict";return ('</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.577.1"> + obj + </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.578.1">'</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.579.1">)'</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.580.1">)();
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.581.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.582.1">loadHighchart</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.583.1"> method takes </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.584.1">id</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.585.1"> of the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.586.1">div</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.587.1"> tag, which should be converted into a chart, and the JSON for configuration.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.588.1">There is also a method that converts the JSON into a JSON object so that it can be passed into the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.589.1">chart</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.590.1"> method.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.591.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.592.1">Highchart</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.593.1"> Razor</span><a id="_idIndexMarker436" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.594.1"> component looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.595.1">@using Microsoft.JSInterop
@inject Microsoft.JSInterop.IJSRuntime jsruntime
&lt;div&gt;
    &lt;div id=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.596.1">"@id"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.597.1">&gt;&lt;/div&gt;
&lt;/div&gt;
@code
{
    [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.598.1">Parameter</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.599.1">] </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.600.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.601.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.602.1"> Json { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.603.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.604.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.605.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.606.1">; }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.607.1">private</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.608.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.609.1"> id { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.610.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.611.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.612.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.613.1">; } = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.614.1">"Highchart"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.615.1"> + Guid.NewGuid().ToString();
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.616.1">protected</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.617.1">override</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.618.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.619.1">OnParametersSet</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.620.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.621.1">
    {
        StateHasChanged();
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.622.1">base</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.623.1">.OnParametersSet();
    }
    IJSObjectReference jsmodule;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.624.1">protected</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.625.1">async</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.626.1">override</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.627.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.628.1">OnAfterRenderAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.629.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.630.1">bool</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.631.1"> firstRender</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.632.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.633.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.634.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.635.1"> (!</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.636.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.637.1">.IsNullOrEmpty(Json))
        {
            jsmodule = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.638.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.639.1"> jsruntime.InvokeAsync&lt;IJSObjectReference&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.640.1">"import"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.641.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.642.1">"/_content/Components/SharedComponents/HighChart.razor.js"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.643.1">);
            </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.644.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.645.1"> jsmodule.InvokeAsync&lt;</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.646.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.647.1">&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.648.1">"loadHighchart"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.649.1">, </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.650.1">new</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.651.1">object</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.652.1">[] { id, Json });
        }
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.653.1">await</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.654.1">base</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.655.1">.OnAfterRenderAsync(firstRender);
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.656.1">The important thing to notice here is that we have two nested </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.657.1">div</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.658.1"> tags: one on the outside that we want Blazor to track and one on the inside that Highcharts will add things to.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.659.1">We pass a JSON parameter in the JSON for the configuration and then call our JavaScript function. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.659.2">We run our JavaScript interop in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.660.1">OnAfterRenderAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.661.1"> method because, otherwise, it would throw an exception, as you may recall from </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.662.1">Chapter 4</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.663.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.664.1">Understanding Basic Blazor Components</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.665.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.666.1">Now, the only</span><a id="_idIndexMarker437" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.667.1"> thing left to do is to use the component, and that looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.668.1">@rendermode InteractiveServer @page </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.669.1">"/HighChartTest"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.670.1">
&lt;HighChart Json=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.671.1">"@chartjson"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.672.1">&gt;
&lt;/HighChart&gt;
@code {
    </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.673.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.674.1"> chartjson = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.675.1">@" {</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.676.1">    chart: { type: 'pie'},</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.677.1">    series: [{</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.678.1">        data: [{</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.679.1">            name: 'Does not look like Pacman',</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.680.1">            color:'black',</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.681.1">            y: 20,</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.682.1">        }, {</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.683.1">            name: 'Looks like Pacman',</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.684.1">            color:'yellow',</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.685.1">            y: 80</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.686.1">        }]</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.687.1">    }]</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.688.1">}"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.689.1">;
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.690.1">This test code</span><a id="_idIndexMarker438" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.691.1"> will show a pie chart that looks like </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.692.1">Figure 10.1</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.693.1">:</span></p>
<figure class="mediaobject"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.694.1"><img alt="A yellow and black pie chart  Description automatically generated" src="../Images/B21849_10_01.png" class="calibre5"/></span></figure>
<p class="packt_figref"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.695.1">Figure 10.1: Chart example</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.696.1">We have now gone through how we got a JavaScript library to work with Blazor, so this is an option if there is something we need.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.697.1">As mentioned, component vendors are investing in Blazor, so chances are that they have what we need, so we might not need to invest time in creating our own component library.</span></p>
<h1 class="heading" id="_idParaDest-192"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.698.1">JavaScript interop in WebAssembly</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.699.1">All the things </span><a id="_idIndexMarker439" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.700.1">mentioned so far in this chapter will work great for Blazor Server and Blazor WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.701.1">But with Blazor WebAssembly, we have direct access to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.702.1">JSRuntime</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.703.1"> (since all the code is running inside the browser). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.703.2">Direct access will give us a really big performance boost. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.703.3">For most applications, we are doing one or two JavaScript calls. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.703.4">Performance is not really going to be a problem. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.703.5">Some applications are more JavaScript-heavy though and would benefit from using the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.704.1">JSRuntime</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.705.1"> directly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.706.1">We have had direct access to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.707.1">JSRuntime</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.708.1"> using the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.709.1">IJSInProcessRuntime</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.710.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.711.1">IJSUnmarshalledRuntime</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.712.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.712.2">But with .NET 7, both are now obsolete, and we have gotten a nicer syntax.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.713.1">In the GitHub repository, I have added a couple of files to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.714.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.715.1"> project if you want to try the code.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.716.1">We will start by looking at calling JavaScript from .NET. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.716.2">Please note that since our project is prerendering on the server, these code samples will not work (since they don’t work when running on the server). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.716.3">These samples must run in a WebAssembly-only project or disable the prerendering. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.716.4">They are included in the source code on GitHub for reference. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.717.1">To be able to </span><a id="_idIndexMarker440" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.718.1">use these features, we need to enable them in the project file by enabling </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.719.1">AllowUnsafeBlocks</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.720.1">:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.721.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.722.1">PropertyGroup</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.723.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.724.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.725.1">AllowUnsafeBlocks</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.726.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.727.1">true</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.728.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.729.1">AllowUnsafeBlocks</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.730.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.731.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.732.1">PropertyGroup</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.733.1">&gt;</span></span>
</code></pre>
<h2 class="heading1" id="_idParaDest-193"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.734.1">.NET to JavaScript</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.735.1">To show the</span><a id="_idIndexMarker441" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.736.1"> difference, the following sample is the same </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.737.1">ShowAlert</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.738.1"> function as earlier in the chapter.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.739.1">The Razor file looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.740.1">@page </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.741.1">"/nettojswasm"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.742.1">
@using System.Runtime.InteropServices.JavaScript
&lt;h3&gt;This </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.743.1">is</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.744.1"> a demo how to call JavaScript </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.745.1">from</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.746.1"> .NET&lt;/h3&gt;
&lt;button @onclick=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.747.1">"ShowAlert"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.748.1">&gt;Show Alert&lt;/button&gt;
@code {
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.749.1">protected</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.750.1">async</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.751.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.752.1">ShowAlert</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.753.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.754.1">
    {
        ShowAlert(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.755.1">"Hello from .NET"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.756.1">);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.757.1">protected</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.758.1">override</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.759.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.760.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.761.1">OnInitializedAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.762.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.763.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.764.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.765.1"> JSHost.ImportAsync(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.766.1">"</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.767.1">nettojs"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.768.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.769.1">"../JSInteropSamples/NetToJS.razor.js"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.770.1">);
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.771.1">We are using </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.772.1">JSHost</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.773.1"> to import the JavaScript and give it the name </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.774.1">"nettojs"</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.775.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.775.2">A source generator generates the implementation for calling the JavaScript, and to be sure that it can pick up what it should do, we need to add some code in a code-behind. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.775.3">We will go into more depth on</span><a id="_idIndexMarker442" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.776.1"> source generators in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.777.1">Chapter 17</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.778.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.779.1">Examining Source Generators</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.780.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.780.2">The code-behind looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.781.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.782.1"> System.Runtime.InteropServices.JavaScript;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.783.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.784.1">BlazorWebAssembly.Client.JSInteropSamples</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.785.1">;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.786.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.787.1">partial</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.788.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.789.1">NetToJS</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.790.1">
{
    [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.791.1">JSImport(</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.792.1">"showAlert"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.793.1">, </span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.794.1">"nettojs"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.795.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.796.1">]
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.797.1">internal</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.798.1">static</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.799.1">partial</span></span><span> </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.800.1">string</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.801.1">ShowAlert</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.802.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.803.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.804.1"> message</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.805.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.806.1">;
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.807.1">The JavaScript file looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.808.1">export</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.809.1">function</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.810.1">showAlert</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.811.1">(</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.812.1">message</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.813.1">) {
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.814.1">return</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.815.1">alert</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.816.1">(message);
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.817.1">We add a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.818.1">JSImport</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.819.1"> attribute to a method, which will automatically be mapped to the JavaScript call.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.820.1">This is a </span><a id="_idIndexMarker443" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.821.1">much nicer implementation, I think, and a lot faster.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.822.1">Next, we will look at calling .NET from JavaScript.</span></p>
<h2 class="heading1" id="_idParaDest-194"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.823.1">JavaScript to .NET</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.824.1">When calling a .NET method</span><a id="_idIndexMarker444" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.825.1"> from JavaScript, a new attribute makes that possible called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.826.1">JSExport</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.827.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.828.1">The Razor file implementation looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.829.1">@page "/jstostaticnetwasm"
@using System.Runtime.InteropServices.JavaScript
</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.830.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.831.1">h3</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.832.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.833.1">This is a demo how to call .NET from JavaScript</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.834.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.835.1">h3</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.836.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.837.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.838.1">button</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.839.1"> @</span></span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.840.1">onclick</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.841.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.842.1">"ShowMessage"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.843.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.844.1">Show alert with message</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.845.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.846.1">button</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.847.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.848.1">
@code {
    protected override async Task OnInitializedAsync()
    {
        await JSHost.ImportAsync("jstonet", "../JSInteropSamples/JSToStaticNET.razor.js");
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.849.1">Calling </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.850.1">JSHost.ImportAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.851.1"> is not necessary for the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.852.1">JSExport</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.853.1"> part of the demo, but we need it to call JavaScript so that we can make the .NET call from JavaScript.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.854.1">Similarly, here </span><a id="_idIndexMarker445" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.855.1">we need to have the methods in a code-behind class that looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.856.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.857.1"> System.Runtime.InteropServices.JavaScript;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.858.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.859.1"> System.Runtime.Versioning;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.860.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.861.1">BlazorWebAssembly.Client.JSInteropSamples</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.862.1">;
[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.863.1">SupportedOSPlatform(</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.864.1">"browser"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.865.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.866.1">]
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.867.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.868.1">partial</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.869.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.870.1">JSToStaticNET</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.871.1">
{
    [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.872.1">JSExport</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.873.1">]
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.874.1">internal</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.875.1">static</span></span><span> </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.876.1">string</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.877.1">GetAMessageFromNET</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.878.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.879.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.880.1">return</span></span> <span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.881.1">"This is a message from .NET"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.882.1">;
    }
    [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.883.1">JSImport(</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.884.1">"showMessage"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.885.1">, </span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.886.1">"jstonet"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.887.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.888.1">]
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.889.1">internal</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.890.1">static</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.891.1">partial</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.892.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.893.1">ShowMessage</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.894.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.895.1">;
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.896.1">Here, we are using the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.897.1">SupportedOSPlatform</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.898.1"> attribute to ensure that this code can only run on a browser.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.899.1">The JavaScript portion of this demo looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.900.1">export</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.901.1">async</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.902.1">function</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.903.1">setMessage</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.904.1">() {
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.905.1">const</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.906.1"> { getAssemblyExports } = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.907.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.908.1"> globalThis.</span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.909.1">getDotnetRuntime</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.910.1">(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.911.1">0</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.912.1">);
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.913.1">var</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.914.1">exports</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.915.1"> = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.916.1">await</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.917.1">getAssemblyExports</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.918.1">(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.919.1">"BlazorWebAssembly.Client.dll"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.920.1">);
    </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.921.1">alert</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.922.1">(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.923.1">exports</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.924.1">.</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.925.1">BlazorWebAssembly</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.926.1">.</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.927.1">Client</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.928.1">.</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.929.1">JSInteropSamples</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.930.1">.</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.931.1">JSToStaticNET</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.932.1">.</span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.933.1">GetAMessageFromNET</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.934.1">());
}
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.935.1">export</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.936.1">async</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.937.1">function</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.938.1">showMessage</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.939.1">() {
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.940.1">await</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.941.1">setMessage</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.942.1">();
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.943.1">We call the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.944.1">showMessage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.945.1"> JavaScript function from .NET, and it will then call the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.946.1">setMessage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.947.1"> function.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.948.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.949.1">setMessage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.950.1"> function uses the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.951.1">globalThis</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.952.1"> object to access the .NET runtime and get access to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.953.1">getAssemblyExports</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.954.1"> method.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.955.1">It will </span><a id="_idIndexMarker446" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.956.1">retrieve all the exports for our assembly and then run the method. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.956.2">The .NET method will return the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.957.1">"This is a message from .NET"</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.958.1"> string and show the string in an alert box.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.959.1">Even though I prefer not to make any JavaScript calls in my Blazor applications, I love having the power to bridge between .NET code and JavaScript code with ease.</span></p>
<h1 class="heading" id="_idParaDest-195"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.960.1">Summary</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.961.1">This chapter taught us about calling JavaScript from .NET and calling .NET from JavaScript. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.961.2">In most cases, we won’t need to do JavaScript calls, and chances are that the Blazor community or component vendors have solved the problem for us.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.962.1">We also looked at how we can port an existing library if needed.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.963.1">In the next chapter, we will continue to look at state management.</span></p>
<h1 class="heading" id="_idParaDest-196"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.964.1">Join our community on Discord </span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.965.1">Join our community’s Discord space for discussions with the author and other readers: </span></p>
<p class="normal1"><a href="https://packt.link/WebDevBlazor3e" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.966.1">https://packt.link/WebDevBlazor3e</span></span></a></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.967.1"><img alt="" role="presentation" src="../Images/QR_Code2668029180838459906.png" class="calibre5"/></span></p>
</div>
</body>
</html>
