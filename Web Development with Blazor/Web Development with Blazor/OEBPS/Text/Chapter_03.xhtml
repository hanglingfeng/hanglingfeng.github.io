<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en-US" xml:lang="en-US">
  <head>
    <title>Chapter_03</title>
    <!-- kobo-style -->
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="../../stylesheet.css"/>
<link rel="stylesheet" type="text/css" href="../../page_styles.css"/>
</head>
  <body id="Chapter_03" class="calibre">
<div class="calibre1" id="_idContainer032">
<h1 class="chapternumber"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1.1">3</span></h1>
<div class="calibre13"></div><h1 class="chaptertitle" id="_idParaDest-52"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.2.1">Managing State – Part 1</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.3.1">In this chapter, we will start looking at managing state. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.3.2">There is also a continuation of this chapter in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.4.1">Chapter 11</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.5.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.6.1">Managing State – Part 2</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.7.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.1">There are many different ways of managing state or persisting data. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.2">As soon as we leave a component, the state is gone. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.3">If we click the counter button from the sample pages, see the counter count up and then navigate away, we don’t know how many times we’ll need to click the counter button and have to start over. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.4">You can’t imagine how many times I have clicked that counter button over the years. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.5">It is such a simple yet powerful demo of Blazor and was a part of Steve’s original demo back in 2017.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.9.1">To get started quickly, I have split this chapter in two. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.9.2">In this chapter, we are focusing on data access, and we will come back to more state management in the second part. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.9.3">Since this book focuses on Blazor, we will not explore how to connect to databases but create simple JSON storage instead.</span></p>
<div class="note">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.10.1">In the first edition, we used Entity Framework to connect to a database, but there were people who were not used to working with Entity Framework, and they got stuck pretty fast. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.10.2">Using Entity Framework is a book all in itself, so I have opted not to include that in this book to remove any added complexity.</span></p>
</div>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.11.1">In the repo on GitHub, you can find more examples of storing data in databases such as </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.12.1">RavenDB</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.13.1"> or </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.14.1">MSSQL</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.15.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.16.1">We will use a common pattern </span><a id="_idIndexMarker101" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.17.1">called the </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.18.1">repository pattern</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.19.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.20.1">We will also create an API to access the data from the JSON repository.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.21.1">By the end of this chapter, you will have learned how to create a JSON repository and an API.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.22.1">We will cover the following main topics:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.23.1">Creating a data project</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.24.1">Adding the API to Blazor</span></li>
</ul>
<h1 class="heading" id="_idParaDest-53"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.25.1">Technical requirements</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.26.1">Make sure you have followed the previous chapters or use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.27.1">Chapter02</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.28.1"> folder on GitHub as the starting point.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.29.1">You can find the source code for this chapter’s result at </span><a href="https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter03" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.30.1">https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter03</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.31.1">.</span></p>
<h1 class="heading" id="_idParaDest-54"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.32.1">Creating a data project</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.33.1">There are many ways </span><a id="_idIndexMarker102" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.34.1">of persisting data: document databases, relational databases, and files, to name a few. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.34.2">To avoid complexity in the book, we will use the simplest way of creating blog posts for our project by storing them as JSON in a folder.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.35.1">To save our blog posts, we will use JSON files stored in a folder, and to do so, we need to create a new project.</span></p>
<h2 class="heading1" id="_idParaDest-55"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.36.1">Creating a new project</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.37.1">We can create a new project from within Visual Studio (to be honest, that’s how I would do it), but to get to know the .NET CLI, let’s do it from the command line instead.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.38.1">To create a new project, follow these steps:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.39.1">Open a PowerShell prompt.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.40.1">Navigate to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.41.1">MyBlog</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.42.1"> folder.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.43.1">Create a class library (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.44.1">classlib</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.45.1">) by typing the following command:
        </span><pre class="programlisting1"><code class="hljs-con"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.46.1">dotnet new classlib -o Data
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.47.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.48.1">dotnet</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.49.1"> tool should now have created a folder called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.50.1">Data</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.51.1">.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="4"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.52.1">We also need to create a project where we can put our models:
        </span><pre class="programlisting1"><code class="hljs-con"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.53.1">dotnet new classlib -o Data.Models
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.54.1">Add the new projects to our solution by running the following command:
        </span><pre class="programlisting1"><code class="hljs-con"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.55.1">dotnet sln add Data
dotnet sln add Data.Models
</span></code></pre>
</li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.56.1">It will look for any solution in the current folder.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.57.1">We call the projects </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.58.1">Data</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.59.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.60.1">Data.Models</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.61.1"> so their purpose will be easy to understand and they will be easy to find.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.62.1">The default project </span><a id="_idIndexMarker103" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.63.1">has a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.64.1">class1.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.65.1"> file – feel free to delete the file.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.66.1">The next step is to create data classes to store our information.</span></p>
<h2 class="heading1" id="_idParaDest-56"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.67.1">Creating data classes</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.68.1">Now we need to create a class</span><a id="_idIndexMarker104" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.69.1"> for our blog post. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.69.2">To do that, we will go back to Visual Studio:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.70.1">Open the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.71.1">MyBlog</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.72.1"> solution in Visual Studio (if it is not already open).
    </span><p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.73.1">We should now have a new project called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.74.1">Data</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.75.1"> in our solution. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.75.2">We might get a popup asking if we want to reload the solution; click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.76.1">Reload</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.77.1"> if so.</span></p></li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="2"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.78.1">Right-click on the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.79.1">Data.Models</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.80.1"> project and select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.81.1">Add</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.82.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.83.1">Class</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.84.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.84.2">Name the class </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.85.1">BlogPost.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.86.1"> and click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.87.1">Add</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.88.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.89.1">Right-click on the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.90.1">Data.Models</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.91.1"> project and select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.92.1">Add</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.93.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.94.1">Class</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.95.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.95.2">Name the class </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.96.1">Category.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.97.1"> and click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.98.1">Add</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.99.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.100.1">Right-click on the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.101.1">Data.Models</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.102.1"> project and select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.103.1">Add</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.104.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.105.1">Class</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.106.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.106.2">Name the class </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.107.1">Tag.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.108.1"> and click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.109.1">Add</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.110.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.111.1">Right-click on the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.112.1">Data.Models</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.113.1"> project and select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.114.1">Add</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.115.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.116.1">Class</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.117.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.117.2">Name the class </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.118.1">Comment.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.119.1"> and click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.120.1">Add</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.121.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.122.1">Open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.123.1">Category.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.124.1"> and replace the content with the following code:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.125.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.126.1">Data.Models</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.127.1">;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.128.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.129.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.130.1">Category</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.131.1">
{
	</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.132.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.133.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.134.1">? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.134.2">Id { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.135.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.136.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.137.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.138.1">; }
	</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.139.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.140.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.141.1"> Name { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.142.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.143.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.144.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.145.1">; } = </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.146.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.147.1">.Empty;
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.148.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.149.1">Category</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.150.1"> class contains </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.151.1">Id</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.152.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.153.1">Name</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.154.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.154.2">It might seem strange that the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.155.1">Id</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.156.1"> property is a string, but this is because we will support multiple data storage types, including MSSQL, RavenDB, and JSON. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.156.2">A string is a great datatype to support all of these. </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.157.1">Id</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.158.1"> is also nullable, so if we create a new category, we send in null as an </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.159.1">Id</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.160.1">.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="7"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.161.1">Open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.162.1">Tag.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.163.1"> and </span><a id="_idIndexMarker105" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.164.1">replace the content with the following code:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.165.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.166.1">Data.Models</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.167.1">;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.168.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.169.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.170.1">Tag</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.171.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.172.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.173.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.174.1">? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.174.2">Id { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.175.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.176.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.177.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.178.1">; }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.179.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.180.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.181.1"> Name { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.182.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.183.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.184.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.185.1">; } = </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.186.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.187.1">.Empty;
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.188.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.189.1">Tag</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.190.1"> class contains an </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.191.1">Id</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.192.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.193.1">Name</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.194.1">.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="8"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.195.1">Open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.196.1">Comment.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.197.1"> and replace the content with the following code:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.198.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.199.1">Data.Models</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.200.1">;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.201.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.202.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.203.1">Comment</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.204.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.205.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.206.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.207.1">? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.207.2">Id { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.208.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.209.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.210.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.211.1">; }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.212.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.213.1"> required </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.214.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.215.1"> BlogPostId { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.216.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.217.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.218.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.219.1">; }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.220.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.221.1"> DateTime Date { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.222.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.223.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.224.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.225.1">; }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.226.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.227.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.228.1"> Text { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.229.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.230.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.232.1">; } = </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.233.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.234.1">.Empty;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.235.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.236.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.237.1"> Name { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.238.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.239.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.240.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.241.1">; } = </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.242.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.243.1">.Empty;
}
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.244.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.245.1">comment</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.246.1"> class could be part of the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.247.1">Blogpost</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.248.1"> class, but to use the same classes for different database types, we add comments as a separate entity referencing the blog post.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.249.1">Open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.250.1">BlogPost.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.251.1"> and replace the content with the following code:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.252.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.253.1">Data.Models</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.254.1">;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.255.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.256.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.257.1">BlogPost</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.258.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.259.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.260.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.261.1">? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.261.2">Id { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.262.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.263.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.264.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.265.1">; }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.266.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.267.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.268.1"> Title { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.269.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.270.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.271.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.272.1">; } = </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.273.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.274.1">.Empty;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.275.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.276.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.277.1"> Text { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.278.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.279.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.280.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.281.1">; } = </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.282.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.283.1">.Empty;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.284.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.285.1"> DateTime PublishDate { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.286.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.287.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.288.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.289.1">; }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.290.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.291.1"> Category? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.291.2">Category { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.292.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.293.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.294.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.295.1">; }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.296.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.297.1"> List&lt;Tag&gt; Tags { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.298.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.299.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.300.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.301.1">; } = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.302.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.303.1">();
}
</span></code></pre>
</li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.304.1">In this class, we define the content of our blog post. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.304.2">We need an </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.305.1">Id</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.306.1"> to identify the blog post, a title, some text (the article), and the publishing date. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.306.2">We also have a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.307.1">Category</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.308.1"> property in the class, which is of</span><a id="_idIndexMarker106" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.309.1"> the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.310.1">Category</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.311.1"> type. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.311.2">In this case, a blog post can have only one category, and a blog post can contain zero or more tags. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.311.3">We define the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.312.1">Tag</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.313.1"> property with </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.314.1">List&lt;Tag&gt;</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.315.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.316.1">We have now created a couple of classes that we will use. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.316.2">I have kept the complexity of these classes to a minimum since we are here to learn about Blazor.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.317.1">Next, we will create a way to store and retrieve the blog post information.</span></p>
<h2 class="heading1" id="_idParaDest-57"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.318.1">Creating an interface</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.319.1">In this section, we will create an API. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.320.1">We will create </span><a id="_idIndexMarker107" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.321.1">one API that has direct database access and one that will retrieve data through a Web API.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.322.1">In </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.323.1">Chapter 7</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.324.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.325.1">Creating an API</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.326.1">, we will get back to creating the Web API. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.326.2">Why are we creating two APIs?</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.327.1">We are not creating two APIs; we are creating a service with direct database access and a client that goes over the web and then uses direct database access. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.327.2">But we will use the same interface for both scenarios, making it possible to use one on the server and the other on the client.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.328.1">In a real-world application, it would make more sense to access all the data in one way, not use both. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.328.2">But the point is to show that it is possible to mix and match and pick what is right for your scenario.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.329.1">We will start with the API with direct database access:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.330.1">Right-click on the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.331.1">Data.Models</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.332.1"> project, select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.333.1">Add</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.334.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.335.1">New Folder</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.336.1">, and name it </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.337.1">Interfaces</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.338.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.339.1">Right-click on the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.340.1">Interfaces</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.341.1"> folder and select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.342.1">Add</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.343.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.344.1">Class</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.345.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.346.1">In the list of different templates, select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.347.1">Interface</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.348.1"> and name it </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.349.1">IBlogApi.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.350.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.351.1">Open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.352.1">IBlogApi.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.353.1"> and replace its content with the following:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.354.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.355.1">Data.Models.Interfaces</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.356.1">;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.357.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.358.1">interface</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.359.1">IBlogApi</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.1">
{
    </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.361.1">Task&lt;</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.362.1">int</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.363.1">&gt; </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.364.1">GetBlogPostCountAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.365.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.366.1">;
    Task&lt;List&lt;BlogPost&gt;&gt; GetBlogPostsAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.367.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.368.1"> numberofposts, </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.369.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.370.1"> startindex);
    Task&lt;List&lt;Category&gt;&gt; GetCategoriesAsync();
    Task&lt;List&lt;Tag&gt;&gt; GetTagsAsync();
    Task&lt;List&lt;Comment&gt;&gt; GetCommentsAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.371.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.372.1"> blogPostId);
    Task&lt;BlogPost?&gt; GetBlogPostAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.373.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.374.1"> id);
    Task&lt;Category?&gt; GetCategoryAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.375.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.376.1"> id);
    Task&lt;Tag?&gt; GetTagAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.377.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.378.1"> id);
    Task&lt;BlogPost?&gt; SaveBlogPostAsync(BlogPost item);
    Task&lt;Category?&gt; SaveCategoryAsync(Category item);
    Task&lt;Tag?&gt; SaveTagAsync(Tag item);
    Task&lt;Comment?&gt; SaveCommentAsync(Comment item);
    </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.379.1">Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.380.1">DeleteBlogPostAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.381.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.382.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.383.1"> id</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.384.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.385.1">;
    </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.386.1">Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.387.1">DeleteCategoryAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.388.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.389.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.390.1"> id</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.391.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.392.1">;
    </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.393.1">Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.394.1">DeleteTagAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.395.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.396.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.397.1"> id</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.398.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.399.1">;
    </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.400.1">Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.401.1">DeleteCommentAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.402.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.403.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.404.1"> id</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.405.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.406.1">;
}
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.407.1">Alright, so</span><a id="_idIndexMarker108" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.408.1"> here’s the deal with this </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.409.1">IBlogApi</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.410.1"> thing. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.410.2">It’s basically our cheat sheet for handling all the blog stuff, like posts, comments, tags, and categories. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.410.3">Need to grab some posts or zap one out of existence? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.410.4">This interface is your go-to. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.410.5">It’s all about making our lives easier when we’re coding the blog, and keeping things tidy and straightforward.</span></li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.411.1">Now, we have an interface for the API with the methods we need to list blog posts, tags, and categories, as well as to save (create/update) and delete them. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.411.2">Next, let’s implement the interface.</span></p>
<h2 class="heading1" id="_idParaDest-58"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.412.1">Implementing the interface</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.413.1">The idea is to create a class </span><a id="_idIndexMarker109" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.414.1">that stores our blog posts, tags, comments, and categories as JSON files on our file system. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.414.2">We will start with implementing the direct access implementation. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.414.3">This is the one we can use when accessing information directly from the database and not through a Web API. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.414.4">We will use the direct access implementation when running our components on the server and accessing the database and our Web API will also use it to access the database, but we will come back to that in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.415.1">Chapter 7</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.416.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.417.1">Creating an API</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.418.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.419.1">To implement the interface </span><a id="_idIndexMarker110" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.420.1">for the direct database access implementation, follow these steps:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.421.1">First, to be able to access our data models, we need to add a reference to our </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.422.1">Data</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.423.1"> models. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.423.2">Expand the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.424.1">Data</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.425.1"> project and right-click on the </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.426.1">Dependencies</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.427.1"> node. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.427.2">Select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.428.1">Add Project reference</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.429.1"> and check the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.430.1">Data.Models</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.431.1"> project. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.431.2">Click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.432.1">OK</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.433.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.434.1">Right-click on the </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.435.1">Dependencies</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.436.1"> node once again, but select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.437.1">Manage NuGet Packages</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.438.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.438.2">In the </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.439.1">Browse</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.440.1"> tab, search for </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.441.1">Microsoft.Extensions.Options</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.442.1"> and click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.443.1">Install</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.444.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.445.1">We need a class to hold our settings.
    </span><p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.446.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.447.1">Data</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.448.1"> project, add a new class called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.449.1">BlogApiJsonDirectAccessSetting.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.450.1"> and replace its content with:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.451.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.452.1">Data</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.453.1">;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.454.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.455.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.456.1">BlogApiJsonDirectAccessSetting</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.457.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.458.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.459.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.460.1"> BlogPostsFolder { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.461.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.462.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.463.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.464.1">; } = </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.465.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.466.1">.Empty;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.467.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.468.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.469.1"> CategoriesFolder { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.470.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.471.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.472.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.473.1">; } = </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.474.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.475.1">.Empty;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.476.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.477.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.478.1"> TagsFolder { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.479.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.480.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.481.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.482.1">; } = </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.483.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.484.1">.Empty;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.485.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.486.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.487.1"> CommentsFolder { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.488.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.489.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.490.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.491.1">; } = </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.492.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.493.1">.Empty;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.494.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.495.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.496.1"> DataPath { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.497.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.498.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.499.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.500.1">; } = </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.501.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.502.1">.Empty;
}
</span></code></pre></li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="4"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.503.1">This is the class where we hold our settings and the folders we will be using for storing our JSON files. </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.504.1">IOptions</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.505.1"> is configured in </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.506.1">program</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.507.1"> during the configuration of dependencies and is injected into all the classes that ask for a specific type.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.508.1">Next, we need to create a class for our API. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.508.2">Right-click on the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.509.1">Data</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.510.1"> project, select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.511.1">Add</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.512.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.513.1">Class</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.514.1">, and name the class </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.515.1">BlogApiJsonDirectAccess.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.516.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.517.1">Open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.518.1">BlogApiJsonDirectAccess.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.519.1"> and replace the code with the following:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.520.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.521.1"> Data.Models.Interfaces;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.522.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.523.1"> Microsoft.Extensions.Options;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.524.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.525.1"> System.Text.Json;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.526.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.527.1"> Data.Models;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.528.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.529.1">Data</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.530.1">;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.531.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.532.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.533.1">BlogApiJsonDirectAccess</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.534.1">: </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.535.1">IBlogApi</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.536.1">
{
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.537.1">This is the start of our JSON direct access class. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.537.2">It references the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.538.1">IBlogAPI</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.539.1"> and we will implement each method the interface wants.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.540.1">The error list should contain many errors since we haven’t implemented the methods yet. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.540.2">We are inheriting from the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.541.1">IBlogApi</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.542.1">, so we know what methods to expose.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="7"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.543.1">To be able to read </span><a id="_idIndexMarker111" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.544.1">settings, we also add a way to inject </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.545.1">IOptions</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.546.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.546.2">By getting the settings this way, we don’t have to add any code – it can come from a database, a settings file, or even be hard coded. 
    </span><p class="numberedlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.547.1">This is my favorite way to get settings because this part of the code itself doesn’t know how to do it – instead, we add all our configurations using dependency injection.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.548.1">Add the following code to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.549.1">BlogApiJsonDirectAccess</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.550.1"> class:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.551.1">    BlogApiJsonDirectAccessSetting _settings;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.552.1">public</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.553.1">BlogApiJsonDirectAccess</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.554.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.555.1"> IOptions&lt;BlogApiJsonDirectAccessSetting&gt; option</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.556.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.557.1">
    {
        _settings = option.Value;
        ManageDataPaths();
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.558.1">private</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.559.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.560.1">ManageDataPaths</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.561.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.562.1">
    {
        CreateDirectoryIfNotExists(_settings.DataPath);
        CreateDirectoryIfNotExists(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.563.1">$@"</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.564.1">{_settings.DataPath}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.565.1">\</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.566.1">{_settings.BlogPostsFolder}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.567.1">"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.568.1">);
        CreateDirectoryIfNotExists(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.569.1">$@"</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.570.1">{_settings.DataPath}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.571.1">\</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.572.1">{_settings.CategoriesFolder}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.573.1">"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.574.1">);
        CreateDirectoryIfNotExists(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.575.1">$@"</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.576.1">{_settings.DataPath}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.577.1">\</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.578.1">{_settings.TagsFolder}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.579.1">"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.580.1">);
        CreateDirectoryIfNotExists(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.581.1">$@"</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.582.1">{_settings.DataPath}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.583.1">\</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.584.1">{_settings.CommentsFolder}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.585.1">"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.586.1">);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.587.1">private</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.588.1">static</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.589.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.590.1">CreateDirectoryIfNotExists</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.591.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.592.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.593.1"> path</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.594.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.595.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.596.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.597.1"> (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }
    }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.598.1">We get the injected</span><a id="_idIndexMarker112" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.599.1"> setting and ensure we have the correct folder structure for our data.</span></p></li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="8"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.600.1">Now, it’s time to implement the API, but first, we need a couple of helper methods that can load the data from our file system. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.600.2">To do this, we add the following code to our class:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.601.1">private</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.602.1">async</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.603.1">Task</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.604.1">&lt;</span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.605.1">List</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.606.1">&lt;</span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.607.1">T</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.608.1">&gt;&gt; </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.609.1">LoadAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.610.1">&lt;</span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.611.1">T</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.612.1">&gt;(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.613.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.614.1"> folder</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.615.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.616.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.617.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.618.1"> list = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.619.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.620.1"> List&lt;T&gt;();
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.621.1">foreach</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.622.1"> (</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.623.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.624.1"> f </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.625.1">in</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.626.1"> Directory.GetFiles(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.627.1">$@"</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.628.1">{_settings.DataPath}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.629.1">\</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.630.1">{folder}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.631.1">"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.632.1">))
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.633.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.634.1"> json = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.635.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.636.1"> File.ReadAllTextAsync(f);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.637.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.638.1"> blogPost = JsonSerializer.Deserialize&lt;T&gt;(json);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.639.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.640.1"> (blogPost </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.641.1">is</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.642.1">not</span></span> <span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.643.1">null</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.644.1">)
        {
            list.Add(blogPost);
        }
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.645.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.646.1"> list;
}
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.647.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.648.1">LoadAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.649.1"> method is a generic method that allows us to load blog posts, tags, comments, and categories using the same method. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.649.2">It will load data from the file system whenever we ask for it. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.649.3">This would be a great place to put in some cache logic, but this is closer to what the implementation would look like if we used a database (we would always ask the database).</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.650.1">Next, we will add a couple of methods to help manipulate the data, namely </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.651.1">SaveAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.652.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.653.1">Delete</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.654.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.654.2">Add </span><a id="_idIndexMarker113" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.655.1">the following methods:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.656.1">private</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.657.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.658.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.659.1">SaveAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.660.1">&lt;</span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.661.1">T</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.662.1">&gt;(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.663.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.664.1"> folder, </span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.665.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.666.1"> filename, T item</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.667.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.668.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.669.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.670.1"> filepath = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.671.1">$@"</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.672.1">{_settings.DataPath}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.673.1">\</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.674.1">{folder}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.675.1">\</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.676.1">{filename}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.677.1">.json"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.678.1">;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.679.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.680.1"> File.WriteAllTextAsync(filepath, JsonSerializer.Serialize&lt;T&gt;(item));
}
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.681.1">private</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.682.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.683.1">DeleteAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.684.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.685.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.686.1"> folder, </span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.687.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.688.1"> filename</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.689.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.690.1">
 {
     </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.691.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.692.1"> filepath = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.693.1">$@"</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.694.1">{_settings.DataPath}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.695.1">\</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.696.1">{folder}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.697.1">\</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.698.1">{filename}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.699.1">.json"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.700.1">;
     </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.701.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.702.1"> (File.Exists(filepath))
     {
         File.Delete(filepath);
     }
     </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.703.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.704.1"> Task.CompletedTask;
 }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.705.1">These methods are</span><a id="_idIndexMarker114" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.706.1"> also generic to share as much code as possible and avoid repeating the code for every type of class (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.707.1">BlogPost</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.708.1">, </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.709.1">Category</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.710.1">, </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.711.1">Comment,</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.712.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.713.1">Tag</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.714.1">).</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="11"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.715.1">Next, it’s time to implement the API by adding the methods to get blog posts. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.715.2">Add the following code:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.716.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.717.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.718.1"> Task&lt;</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.719.1">int</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.720.1">&gt; </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.721.1">GetBlogPostCountAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.722.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.723.1">
 {
     </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.724.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.725.1"> list = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.726.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.727.1"> LoadAsync&lt;BlogPost&gt;(_settings.BlogPostsFolder);
     </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.728.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.729.1"> list.Count;
 }
 </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.730.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.731.1">async</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.732.1"> Task&lt;List&lt;BlogPost&gt;&gt; GetBlogPostsAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.733.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.734.1"> numberofposts, </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.735.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.736.1"> startindex)
 {
     </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.737.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.738.1"> list = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.739.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.740.1"> LoadAsync&lt;BlogPost&gt;(_settings.BlogPostsFolder);
     </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.741.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.742.1"> list.Skip(startindex).Take(numberofposts).ToList();
 } 
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.743.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.744.1">async</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.745.1"> Task&lt;BlogPost?&gt; GetBlogPostAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.746.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.747.1"> id)
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.748.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.749.1"> list = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.750.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.751.1"> LoadAsync&lt;BlogPost&gt;(_settings.BlogPostsFolder);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.752.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.753.1"> list.FirstOrDefault(bp =&gt; bp.Id == id);
    }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.754.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.755.1">GetBlogPostsAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.756.1"> method takes a couple of parameters we will use later for paging. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.756.2">It will get the blog posts from our JSON storage and return the posts we are asking for, skipping and taking the right amount for our paging. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.757.1">We also have a method that returns the current blog post count, which we will use for paging. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.757.2">Last but not least, we have </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.758.1">GetBlogPostAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.759.1"> for getting a single blog post from our JSON storage.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="12"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.760.1">Now, we need to add</span><a id="_idIndexMarker115" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.761.1"> the same methods for categories. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.761.2">To do this, add the following code:
        </span><pre class="programlisting"><code class="hljs-code">    <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.762.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.763.1">async</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.764.1">Task</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.765.1">&lt;</span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.766.1">List</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.767.1">&lt;</span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.768.1">Category</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.769.1">&gt;&gt; </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.770.1">GetCategoriesAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.771.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.772.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.773.1">return</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.774.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.775.1"> LoadAsync&lt;Category&gt;(_settings.CategoriesFolder);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.776.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.777.1">async</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.778.1"> Task&lt;Category?&gt; GetCategoryAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.779.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.780.1"> id)
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.781.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.782.1"> list = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.783.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.784.1"> LoadAsync&lt;Category&gt;(_settings.CategoriesFolder);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.785.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.786.1"> list.FirstOrDefault(c =&gt; c.Id == id);
    }
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.787.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.788.1">Category</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.789.1"> methods don’t have any support for paging. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.789.2">Otherwise, they should look familiar as they do almost the same as the blog post methods.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.790.1">Now, it’s time to do the same thing for tags. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.790.2">Add the following code:
        </span><pre class="programlisting"><code class="hljs-code">    <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.791.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.792.1">async</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.793.1">Task</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.794.1">&lt;</span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.795.1">List</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.796.1">&lt;</span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.797.1">Tag</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.798.1">&gt;&gt; </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.799.1">GetTagsAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.800.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.801.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.802.1">return</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.803.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.804.1"> LoadAsync&lt;Tag&gt;(_settings.TagsFolder);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.805.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.806.1">async</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.807.1"> Task&lt;Tag?&gt; GetTagAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.808.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.809.1"> id)
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.810.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.811.1"> list = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.812.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.813.1"> LoadAsync&lt;Tag&gt;(_settings.TagsFolder);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.814.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.815.1"> list.FirstOrDefault(t =&gt; t.Id == id);
    }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.816.1">As we can see, the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.817.1">tag</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.818.1"> code is basically a copy of the code for categories.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.819.1">We also need a way to retrieve the comments for a blog post. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.819.2">We will not create a method to retrieve one </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.820.1">comment</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.821.1">; we always get all the comments for a specific post. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.821.2">Add the following method:</span></p>
<pre class="programlisting"><code class="hljs-code">    <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.822.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.823.1">async</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.824.1"> Task&lt;List&lt;Comment&gt;&gt; GetCommentsAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.825.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.826.1"> blogPostId)
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.827.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.828.1"> list = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.829.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.830.1"> LoadAsync&lt;Comment&gt;(_settings.
</span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.830.2">CommentsFolder);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.831.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.832.1"> list.Where(t =&gt; t.BlogPostId == blogPostId).ToList();
    }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.833.1">This method will get all the comments for a blog post.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="15"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.834.1">We also need a couple of methods for saving the data, so next up, we’ll add methods for saving </span><a id="_idIndexMarker116" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.835.1">blog posts, categories, comments, and tags.
    </span><p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.836.1">Add the following code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.837.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.838.1">async</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.839.1"> Task&lt;BlogPost?&gt; SaveBlogPostAsync(BlogPost item)
{
    item.Id ??= Guid.NewGuid().ToString();
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.840.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.841.1"> SaveAsync(_settings.BlogPostsFolder, item.Id, item);
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.842.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.843.1"> item;
}
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.844.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.845.1">async</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.846.1"> Task&lt;Category?&gt; SaveCategoryAsync(Category item)
{
    item.Id ??= Guid.NewGuid().ToString();
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.847.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.848.1"> SaveAsync(_settings.CategoriesFolder, item.Id, item);
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.849.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.850.1"> item;
}
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.851.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.852.1">async</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.853.1"> Task&lt;Tag?&gt; SaveTagAsync(Tag item)
{
    item.Id ??= Guid.NewGuid().ToString();
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.854.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.855.1"> SaveAsync(_settings.TagsFolder, item.Id, item);
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.856.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.857.1"> item;
}
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.858.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.859.1">async</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.860.1"> Task&lt;Comment?&gt; SaveCommentAsync(Comment item)
{
    item.Id ??= Guid.NewGuid().ToString();
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.861.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.862.1"> SaveAsync(_settings.CommentsFolder, item.Id, item);
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.863.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.864.1"> item;
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.865.1">The first thing we do is to check that the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.866.1">id</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.867.1"> of the item is not null. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.867.2">If it is, we create a new </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.868.1">Guid</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.869.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.869.2">This is the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.870.1">id</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.871.1"> of the new item. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.871.2">And this is also going to be the name of the JSON files stored on the file system.</span></p></li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="16"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.872.1">We now have a</span><a id="_idIndexMarker117" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.873.1"> method for saving and getting items. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.873.2">But sometimes, things don’t go as planned, and we need a way to delete the items that we have created. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.873.3">Next up, we will add some delete methods. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.873.4">Add the following code:
        </span><pre class="programlisting"><code class="hljs-code">    <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.874.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.875.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.876.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.877.1">DeleteBlogPostAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.878.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.879.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.880.1"> id</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.881.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.882.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.883.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.884.1"> DeleteAsync(_settings.BlogPostsFolder, id);
        
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.885.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.886.1"> comments = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.887.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.888.1"> GetCommentsAsync(id);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.889.1">foreach</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.890.1"> (</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.891.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.892.1"> comment </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.893.1">in</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.894.1"> comments)
        {
            </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.895.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.896.1"> (comment.Id != </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.897.1">null</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.898.1">)
            {
                </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.899.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.900.1"> DeleteAsync(_settings.CommentsFolder, comment.Id);
            }
        }
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.901.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.902.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.903.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.904.1">DeleteCategoryAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.905.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.906.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.907.1"> id</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.908.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.909.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.910.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.911.1"> DeleteAsync(_settings.CategoriesFolder, id);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.912.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.913.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.914.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.915.1">DeleteTagAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.916.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.917.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.918.1"> id</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.919.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.920.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.921.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.922.1"> DeleteAsync(_settings.TagsFolder, id);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.923.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.924.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.925.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.926.1">DeleteCommentAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.927.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.928.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.929.1"> id</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.930.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.931.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.932.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.933.1"> DeleteAsync(_settings.CommentsFolder, id);
    }
</span></code></pre>
</li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.934.1">The code we just added calls the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.935.1">DeleteAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.936.1"> method, which deletes the blog post, tag, category, etc.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.937.1">Our JSON storage is done!</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.938.1">In the end, there will be four</span><a id="_idIndexMarker118" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.939.1"> folders stored on the file system, one for blog posts, one for categories, one for comments, and one for tags.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.940.1">The next step is to add and configure the Blazor project to use our new storage.</span></p>
<h1 class="heading" id="_idParaDest-59"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.941.1">Adding the API to Blazor</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.942.1">We now have a way to</span><a id="_idIndexMarker119" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.943.1"> access JSON files stored on our file system. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.943.2">In the repo on GitHub, you can </span><a id="_idIndexMarker120" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.944.1">find more ways of storing our data with RavenDB or SQL Server, but be mindful to keep the focus on what is important (Blazor).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.945.1">Now it’s time to add the API to our Blazor Server project:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.946.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.947.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.948.1"> project, </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.949.1">add a project reference</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.950.1"> to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.951.1">Data</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.952.1"> project. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.952.2">Open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.953.1">Program.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.954.1"> and add the following namespaces:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.955.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.956.1"> Data;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.957.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.958.1"> Data.Models.Interfaces;
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.959.1">Add the following code after .AddInteractiveWebAssemblyComponents();:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.960.1">builder.Services.AddOptions&lt;BlogApiJsonDirectAccessSetting&gt;().Configure(options =&gt;
{
    options.DataPath = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.961.1">@"..\..\..\Data\"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.962.1">;
    options.BlogPostsFolder = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.963.1">"Blogposts"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.964.1">;
    options.TagsFolder = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.965.1">"Tags"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.966.1">;
    options.CategoriesFolder = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.967.1">"Categories"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.968.1">;
    options.CommentsFolder = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.969.1">"Comments"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.970.1">;
});
builder.Services.AddScoped&lt;IBlogApi, BlogApiJsonDirectAccess&gt;();
</span></code></pre>
</li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.971.1">This snippet of code is the setting for where we want to store our files. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.971.2">You can change the data path property to where you want to store the files. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.971.3">Whenever we ask for </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.972.1">IOptions&lt;BlogApiJsonDirectAccessSetting&gt;</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.973.1">, the dependency injection will return an object populated with the</span><a id="_idIndexMarker121" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.974.1"> information we have supplied above. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.974.2">This is an excellent place to load configuration from our .NET configuration, a key vault, or a database.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.975.1">We are also saying that</span><a id="_idIndexMarker122" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.976.1"> when we ask for an </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.977.1">IBlogAPI</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.978.1"> we will get an instance of </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.979.1">BlogApiJsonDirectAccess</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.980.1"> back from our dependency injection. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.980.2">We will return to dependency injection in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.981.1">Chapter 4</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.982.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.983.1">Understanding Basic Blazor Components</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.984.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.985.1">Now, we can use our API to access the database in our Blazor project.</span></p>
<h1 class="heading" id="_idParaDest-60"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.986.1">Summary</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.987.1">This chapter taught us how to create a simple JSON repository for our data. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.987.2">We also learned that other alternatives could be found in the GitHub repo if you want to look at other options.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.988.1">We also created an interface to access the data, which we will use some more later in the book.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.989.1">In the next chapter, we will learn about components, particularly the built-in components in Blazor templates. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.989.2">We will also create our first component using the API and repository we made in this chapter.</span></p>
</div>
</body>
</html>
