<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en-US" xml:lang="en-US">
  <head>
    <title>Chapter_04</title>
    <!-- kobo-style -->
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="../../stylesheet.css"/>
<link rel="stylesheet" type="text/css" href="../../page_styles.css"/>
</head>
  <body id="Chapter_04" class="calibre">
<div class="calibre1" id="_idContainer035">
<h1 class="chapternumber"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1.1">4</span></h1>
<h1 class="chaptertitle" id="_idParaDest-61"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.2.1">Understanding Basic Blazor Components</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.3.1">In this chapter, we will look at the components that come with the Blazor template and start to build our own components. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.3.2">Knowing the different techniques used for creating Blazor websites will help us when we start building our components.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.4.1">Blazor uses components for most things, so we will use the knowledge from this chapter throughout the book.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.5.1">We will start this chapter with theory and end by creating a component to show some blog posts using the API we created previously, in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.6.1">Chapter 3</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.7.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.1">Managing State – Part 1</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.9.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.10.1">In this chapter, we will cover the following topics:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.11.1">Exploring components</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.12.1">Learning Razor syntax</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.13.1">Understanding dependency injection</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.14.1">Changing the Render mode</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.15.1">Figuring out where to put the code</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.16.1">Lifecycle events</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.17.1">Parameters</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.18.1">Writing our first component</span></li>
</ul>
<h1 class="heading" id="_idParaDest-62"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.19.1">Technical requirements</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.20.1">Make sure you have followed the previous chapters or use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.21.1">Chapter03</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.22.1"> folder as the starting point.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.23.1">You can find the source code for this chapter’s result at </span><a href="https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter04" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.24.1">https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter04</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.25.1">.</span></p>
<h1 class="heading" id="_idParaDest-63"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.26.1">Exploring components</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.27.1">In Blazor, a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.28.1">component</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.29.1"> is a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.30.1">.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.31.1"> file containing a small, isolated functionality (code and markup), or it can be used as a page. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.31.2">A component can host other components as well. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.31.3">This chapter will show us how components work and how to use them.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.32.1">There are three </span><a id="_idIndexMarker123" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.33.1">different ways we can create a component:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.34.1">Using Razor syntax, with the code and HTML sharing the same file</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.35.1">Using a code-behind file together with a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.36.1">.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.37.1"> file</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.38.1">Using only a code-behind file</span></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.39.1">In this chapter, we will go through the different options. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.39.2">First, we’ll go through the components in the template we used to create the project; these all use the first option, </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.40.1">.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.41.1"> files, where we have a mix of code and HTML in the same file.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.42.1">The components in the template are as follows:</span></p>
<ul class="calibre4">
<li class="bulletlist"><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.43.1">Counter</span></strong></li>
<li class="bulletlist1"><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.44.1">Weather</span></strong></li>
</ul>
<h2 class="heading1" id="_idParaDest-64"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.45.1">Counter</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.46.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.47.1">counter</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.48.1"> page shows </span><a id="_idIndexMarker124" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.49.1">a button and a counter; if we click the button, the counter increases. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.49.2">We will now break the page apart, making it easier to understand. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.49.3">It is located in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.50.1">BlazorWebApp.Client</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.51.1"> project, inside the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.52.1">Pages</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.53.1"> folder.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.54.1">At the top of the page is the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.55.1">@page</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.56.1"> directive, which makes it possible to route to the component directly, as we can see in this code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.57.1">@page </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.58.1">"/counter"</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.59.1">If we start the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.60.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.61.1"> project and add </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.62.1">/counter</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.63.1"> to the end of the URL, we see that we can directly access the component by using its route. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.63.2">We can also make the route take parameters, but we will return to that later.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.64.1">Beneath that, we have the render mode:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.65.1">@rendermode InteractiveAuto
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.66.1">This is the way we can set the render mode on a specific component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.66.2">This means that when we use this </span><a id="_idIndexMarker125" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.67.1">component, it will first render the page using Blazor Server (with SignalR) and, in the background, download the WebAssembly version so that the next time we load the page, it will then run the WebAssembly version instead.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.68.1">Next, let’s explore the code. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.68.2">To add code to the page, we use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.69.1">@code</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.70.1"> statement, and within that statement, we can add ordinary C# code, as shown:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.71.1">@code {
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.72.1">private</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.73.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.74.1"> currentCount = </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.75.1">0</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.76.1">;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.77.1">private</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.78.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.79.1">IncrementCount</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.80.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.81.1">
    {
        currentCount++;
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.82.1">In the preceding code block, we have a private </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.83.1">currentCount</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.84.1"> variable set to </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.85.1">0</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.86.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.86.2">Then, we have a method called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.87.1">IncrementCount()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.88.1">, which increments the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.89.1">currentCount</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.90.1"> variable by </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.91.1">1</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.92.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.93.1">We show the current value by using the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.94.1">@</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.95.1"> sign. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.95.2">In Razor, the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.96.1">@</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.97.1"> sign indicates that it is time for some code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.98.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.99.1">p</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.100.1">role</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.101.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.102.1">"status"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.103.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.104.1">Current count: @currentCount</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.105.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.106.1">p</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.107.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.108.1">As we can see, Razor is very smart because it understands when the code stops and the markup continues, so there is no need to add something extra to transition from the code to the markup (more on that in the next section).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.109.1">As we can see in the preceding example, we are mixing HTML tags with </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.110.1">@currentCount</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.111.1"> and Razor understands the difference. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.111.2">Next, we have a button that is the trigger for changing the value:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.112.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.113.1">button</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.114.1">class</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.115.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.116.1">"btn btn-primary"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.117.1"> @</span></span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.118.1">onclick</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.119.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.120.1">"IncrementCount"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.121.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.122.1">Click me</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.123.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.124.1">button</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.125.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.126.1">This is an HTML button with a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.127.1">Bootstrap</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.128.1"> class (to make it look a bit nicer). </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.129.1">@onclick</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.130.1"> binds the button’s </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.131.1">onclick</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.132.1"> event to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.133.1">IncrementCount()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.134.1"> method. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.134.2">If we were to use </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.135.1">onclick</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.136.1"> without the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.137.1">@</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.138.1">, it would refer to the JavaScript event and not work.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.139.1">So, when we click the button, it will call the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.140.1">IncrementCount()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.141.1"> method (depicted by </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.142.1">1</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.143.1"> in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.144.1">Figure 4.1</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.145.1">), the method increments the variable (depicted by </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.146.1">2</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.147.1">), and due to changing the variable, the UI will </span><a id="_idIndexMarker126" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.148.1">automatically be updated (depicted by </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.149.1">3</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.150.1">), as shown in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.151.1">Figure 4.1</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.152.1">:</span></p>
<figure class="mediaobject"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.153.1"><img alt="Figure 4.1 – The flow of the counter component " src="../Images/B21849_04_01.png" class="calibre5"/></span></figure>
<p class="packt_figref"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.154.1">Figure 4.1: The flow of the counter component</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.155.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.156.1">counter</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.157.1"> component is implemented inside the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.158.1">BlazorWebApp.Client</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.159.1"> project, which is the WebAssembly project. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.159.2">In that project, we should put all the components that we want to run as WebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.159.3">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.160.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.161.1"> project is then referencing the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.162.1">BlazorWebApp.Client</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.163.1"> project, so that it finds all the components and can run them as Blazor Server components if we want to. </span></p>
<h2 class="heading1" id="_idParaDest-65"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.164.1">Weather</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.165.1">The next component </span><a id="_idIndexMarker127" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.166.1">we will take a look at is the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.167.1">Weather</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.168.1"> component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.168.2">It’s located in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.169.1">Components/Pages/Weather.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.170.1"> folder.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.171.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.172.1">Weather</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.173.1"> components introduces the new streaming rendering functionality. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.173.2">The file initially looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.174.1">@page </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.175.1">"/weather"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.176.1">
@attribute [StreamRendering(</span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.177.1">true</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.178.1">)]
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.179.1">Just as with the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.180.1">Counter</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.181.1"> component, we first define a route. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.181.2">There is no render mode attribute on this page. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.181.3">The component will be</span><a id="_idIndexMarker128" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.182.1"> rendered using </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.183.1">Server-Side Rendering</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.184.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.185.1">SSR</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.186.1">). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.186.2">This is the default behavior for all the components unless specified, like the Counter component. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.187.1">When we started the project, we set </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.188.1">Interactivity location </span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.189.1">to </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.190.1">Per Page/Component</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.191.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.191.2">This means that when we want interactivity, we need to specify that. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.191.3">But with the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.192.1">[StreamRendering(true)]</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.193.1"> attribute, we will get a feeling of interactivity. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.193.2">The page will first load, showing loading text. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.193.3">Then, using the same request, we get the rest of the data, like a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.194.1">…</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.195.1"> well, stream. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.195.2">So, we will get fast loading without waiting for the data, with no need to add interactivity using WebAssembly or SignalR, but still get some loading progress happening. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.195.3">We will dive into this some more in a later section.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.196.1">The HTML part of the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.197.1">Weather</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.198.1"> component looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.199.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.200.1">PageTitle</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.201.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.202.1">Weather</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.203.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.204.1">PageTitle</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.205.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.206.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.207.1">h1</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.208.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.209.1">Weather</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.210.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.211.1">h1</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.212.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.213.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.214.1">p</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.215.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.216.1">This component demonstrates showing data.</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.217.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.218.1">p</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.219.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.220.1">
@if (forecasts == null)
{
    </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.221.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.222.1">p</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.223.1">&gt;&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.224.1">em</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.225.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.226.1">Loading...</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.227.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.228.1">em</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.229.1">&gt;&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.230.1">p</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.232.1">
}
else
{
    </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.233.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.234.1">table</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.235.1">class</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.236.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.237.1">"table"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.238.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.239.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.240.1">thead</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.241.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.242.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.243.1">tr</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.244.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.245.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.246.1">th</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.247.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.248.1">Date</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.249.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.250.1">th</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.251.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.252.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.253.1">th</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.254.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.255.1">Temp. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.255.2">(C)</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.256.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.257.1">th</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.258.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.259.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.260.1">th</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.261.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.262.1">Temp. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.262.2">(F)</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.263.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.264.1">th</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.265.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.266.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.267.1">th</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.268.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.269.1">Summary</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.270.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.271.1">th</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.272.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.273.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.274.1">tr</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.275.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.276.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.277.1">thead</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.278.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.279.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.280.1">tbody</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.281.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.282.1">
            @foreach (var forecast in forecasts)
            {
                </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.283.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.284.1">tr</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.285.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.286.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.287.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.288.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.289.1">@forecast.Date.ToShortDateString()</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.290.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.291.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.292.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.293.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.294.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.295.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.296.1">@forecast.TemperatureC</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.297.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.298.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.299.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.300.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.301.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.302.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.303.1">@forecast.TemperatureF</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.304.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.305.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.306.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.307.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.308.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.309.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.310.1">@forecast.Summary</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.311.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.312.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.313.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.314.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.315.1">tr</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.316.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.317.1">
            }
        </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.318.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.319.1">tbody</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.320.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.321.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.322.1">table</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.323.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.324.1">
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.325.1">If we don’t have any forecasts, it will show “Loading…” and as soon as we have some data, it will render a table showing the data.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.326.1">The code section that generates some mock data looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.327.1">@code {
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.328.1">private</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.329.1"> WeatherForecast[]? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.329.2">forecasts;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.330.1">protected</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.331.1">override</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.332.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.333.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.334.1">OnInitializedAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.335.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.336.1">
    {
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.337.1">// Simulate asynchronous loading to demonstrate streaming rendering</span></span>
<span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.338.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.339.1"> Task.Delay(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.340.1">500</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.341.1">);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.342.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.343.1"> startDate = DateOnly.FromDateTime(DateTime.Now);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.344.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.345.1"> summaries = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.346.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.347.1">[] { </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.348.1">"Freezing"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.349.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.350.1">"</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.351.1">Bracing"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.352.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.353.1">"Chilly"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.354.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.355.1">"Cool"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.356.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.357.1">"Mild"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.358.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.359.1">"Warm"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.361.1">"Balmy"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.362.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.363.1">"Hot"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.364.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.365.1">"Sweltering"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.366.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.367.1">"Scorching"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.368.1"> };
        forecasts = Enumerable.Range(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.369.1">1</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.370.1">, </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.371.1">5</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.372.1">).Select(index =&gt; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.373.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.374.1"> WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.375.1">-20</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.376.1">, </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.377.1">55</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.378.1">),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.379.1">private</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.380.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.381.1">WeatherForecast</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.382.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.383.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.384.1"> DateOnly Date { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.385.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.386.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.387.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.388.1">; }
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.389.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.390.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.391.1"> TemperatureC { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.392.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.393.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.394.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.395.1">; }
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.396.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.397.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.398.1">? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.398.2">Summary { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.399.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.400.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.401.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.402.1">; }
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.403.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.404.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.405.1"> TemperatureF =&gt; </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.406.1">32</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.407.1"> + (</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.408.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.409.1">)(TemperatureC / </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.410.1">0.5556</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.411.1">);
    }
} 
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.412.1">When the page is initialized, the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.413.1">WeatherForecast</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.414.1"> array is filled with random data.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.415.1">This reminds me that someone (as a joke) added a bug report to one of Dan Roth’s repos on GitHub, reporting “Weather forecast is unreliable.”</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.416.1">The conversation continued, “The weather forecast feature was completely accurate during my trip to London but has proven to be misleading in California. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.416.2">Counter and overall purpleness are great.” </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.416.3">With Dan Roth replying: “Thanks for the feedback! </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.416.4">I’ll get in touch with the</span><a id="_idIndexMarker129" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.417.1"> folks on the .NET core framework team to make sure that </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.418.1">System.Random</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.419.1"> does a better job of taking California weather patterns into account.”</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.420.1">This is one of many reasons why I love the .NET community.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.421.1">As we can see, by using the Razor syntax, we are seamlessly mixing code with HTML. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.421.2">The code checks whether there is any data – if so, it will render the table; if not, it will show a loading message. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.421.3">The component will update automatically once we have data. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.421.4">We have full control over the HTML, and Blazor will not add anything to the generated HTML.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.422.1">There are component libraries that can make this process a bit simpler, which we will look at in the next chapter, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.423.1">Chapter 5</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.424.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.425.1">Creating Advanced Blazor Components</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.426.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.427.1">Now that we know how the sample template is implemented, it is time to dive deeper into the Razor syntax.</span></p>
<h1 class="heading" id="_idParaDest-66"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.428.1">Learning Razor syntax</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.429.1">One of the things I like </span><a id="_idIndexMarker130" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.430.1">about the Razor syntax is that it is easy to mix code and HTML tags. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.430.2">By having the code close to the markup, it is, in my opinion, easier to follow and understand. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.430.3">The syntax is very fluid; the razor parser understands when the code stops and markup begins, which means we don’t need to think about it that much. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.430.4">It is also not a new language; instead, we can leverage our existing C# and HTML knowledge to create our components. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.430.5">This section will contain a lot of theory to help us understand the Razor syntax.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.431.1">To transition from HTML to code (C#), we use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.432.1">@</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.433.1"> symbol. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.433.2">There are a handful of ways we can add code to our</span><a id="_idIndexMarker131" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.434.1"> file, which we’ll explore in the following sections:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.435.1">Razor code blocks</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.436.1">Implicit Razor expressions</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.437.1">Explicit Razor expressions</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.438.1">Expression encoding</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.439.1">Directives</span></li>
</ul>
<h2 class="heading1" id="_idParaDest-67"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.440.1">Razor code blocks</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.441.1">We have already</span><a id="_idIndexMarker132" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.442.1"> seen some code blocks. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.442.2">A code block looks</span><a id="_idIndexMarker133" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.443.1"> like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.444.1">@code {
    </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.445.1">//your code here</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.446.1">
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.447.1">If we wish, we can skip the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.448.1">code</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.449.1"> keyword like so:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.450.1">@{
    </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.451.1">//your code here</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.452.1">
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.453.1">Inside those curly braces, we can mix HTML and code like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.454.1">@{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.455.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.456.1">RenderName</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.457.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.458.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.459.1"> name</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.460.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.461.1">
    {
        &lt;p&gt;Name: &lt;strong&gt;@name&lt;/strong&gt;&lt;/p&gt;
    }
    RenderName(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.462.1">"Steve Sanderson"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.463.1">);
    RenderName(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.464.1">"Daniel Roth"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.465.1">);
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.466.1">Notice how the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.467.1">RenderName()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.468.1"> method transitions from code into the paragraph tags and back to code; this is an implicit transition.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.469.1">If we want to output</span><a id="_idIndexMarker134" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.470.1"> text without having an HTML tag, we can use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.471.1">text</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.472.1"> tag instead of using the paragraph tags, as shown in the following example:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.473.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.474.1">text</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.475.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.476.1">Name: </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.477.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.478.1">strong</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.479.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.480.1">@name</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.481.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.482.1">strong</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.483.1">&gt;&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.484.1">text</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.485.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.486.1">This would render the same</span><a id="_idIndexMarker135" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.487.1"> result as the previous code but without the paragraph tags, and the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.488.1">text</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.489.1"> tag wouldn’t be rendered.</span></p>
<h2 class="heading1" id="_idParaDest-68"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.490.1">Implicit Razor expressions</span></h2>
<p class="normal"><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.491.1">Implicit Razor expressions</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.492.1"> are </span><a id="_idIndexMarker136" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.493.1">when we add code inside HTML </span><a id="_idIndexMarker137" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.494.1">tags.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.495.1">We have already seen this in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.496.1">Weather</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.497.1"> example:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.498.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.499.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.500.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.501.1">@forecast.Summary</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.502.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.503.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.504.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.505.1">We start with a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.506.1">&lt;td&gt;</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.507.1"> tag, then use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.508.1">@</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.509.1"> symbol to switch to C#, and switch back to HTML with the end tag. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.509.2">We can use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.510.1">await</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.511.1"> keyword together with a method call, but other than that, implicit Razor expressions cannot contain any spaces.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.512.1">We cannot call a generic method using implicit expressions since </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.513.1">&lt;&gt;</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.514.1"> would be interpreted as HTML. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.514.2">Hence, to solve this issue, we can use explicit expressions.</span></p>
<h2 class="heading1" id="_idParaDest-69"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.515.1">Explicit Razor expressions</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.516.1">We can use explicit </span><a id="_idIndexMarker138" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.517.1">Razor expressions if we want to use spaces in the code. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.517.2">Write</span><a id="_idIndexMarker139" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.518.1"> the code with the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.519.1">@</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.520.1"> symbol followed by parentheses </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.521.1">( )</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.522.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.522.2">So, it would look like this: </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.523.1">@()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.524.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.525.1">In this sample, we subtract </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.526.1">7</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.527.1"> days from the current date:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.528.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.529.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.530.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.531.1">@(DateTime.Now - TimeSpan.FromDays(7))</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.532.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.533.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.534.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.535.1">We can also use explicit Razor expressions to concatenate text; for example, we can concatenate text and code like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.536.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.537.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.538.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.539.1">Temp@(forecast.TemperatureC)</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.540.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.541.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.542.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.543.1">The output would then be </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.544.1">&lt;td&gt;Temp42&lt;/td&gt;</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.545.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.546.1">Using explicit expressions, we can easily call generic methods by using this syntax:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.547.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.548.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.549.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.550.1">@(MyGenericMethod</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.551.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.552.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.553.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.554.1">())</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.555.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.556.1">td</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.557.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.558.1">The Razor engine</span><a id="_idIndexMarker140" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.559.1"> knows whether we are using code or not. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.559.2">It also makes sure to</span><a id="_idIndexMarker141" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.560.1"> encode strings to HTML when outputting it to the browser, called </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.561.1">expression encoding</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.562.1">.</span></p>
<h2 class="heading1" id="_idParaDest-70"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.563.1">Expression encoding</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.564.1">If we have HTML as a string, it will be </span><a id="_idIndexMarker142" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.565.1">escaped by default. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.565.2">Take this </span><a id="_idIndexMarker143" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.566.1">code, for example:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.567.1">@("</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.568.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.569.1">span</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.570.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.571.1">Hello World</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.572.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.573.1">span</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.574.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.575.1">")
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.576.1">The rendered HTML would look like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.577.1">&amp;lt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.578.1">span</span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.579.1">&amp;gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.580.1">Hello World</span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.581.1">&amp;lt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.582.1">/span</span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.583.1">&amp;gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.584.1">To output the actual HTML from a string (something we will do later, in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.585.1">Chapter 5</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.586.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.587.1">Creating Advanced Blazor Components</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.588.1">), you can use this syntax:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.589.1">@((MarkupString)"</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.590.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.591.1">span</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.592.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.593.1">Hello World</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.594.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.595.1">span</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.596.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.597.1">")
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.598.1">Using </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.599.1">MarkupString</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.600.1">, the output will be HTML, showing the HTML tag span. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.600.2">In some cases, one line of code isn’t enough; then, we can use code blocks.</span></p>
<h2 class="heading1" id="_idParaDest-71"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.601.1">Directives</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.602.1">There are a bunch </span><a id="_idIndexMarker144" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.603.1">of directives that change the way a component gets parsed or can enable functionality. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.603.2">These are reserved keywords that follow the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.604.1">@</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.605.1"> symbol. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.605.2">We will go through the most common and useful ones.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.606.1">I find that it is pretty nice to have the layout and the code inside of the same </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.607.1">.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.608.1"> file.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.609.1">Note that we can use code-behind to write our code to get a bit more separation between the code and layout. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.609.2">Later in this chapter, we will look at how to use code-behind instead of Razor syntax for everything. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.609.3">For now, the following examples will look at how we would do the same directives using both Razor syntax and code-behind.</span></p>
<h3 class="heading2" id="_idParaDest-72"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.610.1">Adding an attribute</span></h3>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.611.1">To add an </span><a id="_idIndexMarker145" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.612.1">attribute to our </span><a id="_idIndexMarker146" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.613.1">page, we can use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.614.1">attribute</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.615.1"> directive:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.616.1">@attribute [Authorize]
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.617.1">If we were using a code-behind file, we would use the following syntax instead:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.618.1">[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.619.1">Authorize</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.620.1">] </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.621.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.622.1">partial</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.623.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.624.1">SomeClass</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.625.1"> {}
</span></code></pre>
<h3 class="heading2" id="_idParaDest-73"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.626.1">Adding an interface</span></h3>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.627.1">To implement </span><a id="_idIndexMarker147" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.628.1">an interface (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.629.1">IDisposable</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.630.1"> in this case), we would use the following code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.631.1">@implements IDisposable
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.632.1">Then, we would implement the methods the interface needs in a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.633.1">@code{}</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.634.1"> section.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.635.1">To do the same in a code-behind scenario, we would add the interface after the class name, as shown in the following example:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.636.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.637.1">partial</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.638.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.639.1">SomeClass</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.640.1"> : </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.641.1">IDisposable</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.642.1"> {}
</span></code></pre>
<h3 class="heading2" id="_idParaDest-74"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.643.1">Inheriting</span></h3>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.644.1">To inherit another</span><a id="_idIndexMarker148" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.645.1"> class, we should use the following code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.646.1">@inherits TypeNameOfClassToInheritFrom
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.647.1">To do the same in a code-behind scenario, we would add the class we want to inherit from after the class name:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.648.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.649.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.650.1">SomeClass</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.651.1"> : </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.652.1">TypeNameOfClassToInheritFrom</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.653.1"> {}
</span></code></pre>
<h3 class="heading2" id="_idParaDest-75"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.654.1">Generics</span></h3>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.655.1">We can define</span><a id="_idIndexMarker149" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.656.1"> our component as a generic component.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.657.1">Generics</span><a id="_idIndexMarker150" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.658.1"> allow us</span><a id="_idIndexMarker151" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.659.1"> to define the data type, so the component works with any data type.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.660.1">To define a component as a generic component, we add the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.661.1">@typeparam</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.662.1"> directive; then, we can use the type in the code of the component like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.663.1">@typeparam TItem
@code
{
      [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.664.1">Parameter</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.665.1">]
      </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.666.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.667.1"> List&lt;TItem&gt; Data { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.668.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.669.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.670.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.671.1">; }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.672.1">Generics are super-powerful </span><a id="_idIndexMarker152" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.673.1">when creating reusable components; this will make our components reusable for different data types. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.673.2">We will return to generics in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.674.1">Chapter 6</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.675.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.676.1">Building Forms with Validation</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.677.1">.</span></p>
<h3 class="heading2" id="_idParaDest-76"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.678.1">Changing the layout</span></h3>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.679.1">If we want to have a</span><a id="_idIndexMarker153" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.680.1"> specific layout for a page (not the default one specified in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.681.1">Routes.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.682.1"> file), we can use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.683.1">@layout</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.684.1"> directive:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.685.1">@layout AnotherLayout
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.686.1">This way, our component will use the specified layout (this only works for components with the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.687.1">@page</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.688.1"> directive).</span></p>
<h3 class="heading2" id="_idParaDest-77"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.689.1">Setting a namespace</span></h3>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.690.1">By default, the </span><a id="_idIndexMarker154" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.691.1">component’s namespace will be the name of the default namespace of our project, plus the folder structure. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.691.2">If we want our component to be in a specific namespace, we can use the following:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.692.1">@namespace Another.NameSpace
</span></code></pre>
<h3 class="heading2" id="_idParaDest-78"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.693.1">Setting a route</span></h3>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.694.1">We have already</span><a id="_idIndexMarker155" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.695.1"> touched on the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.696.1">@page</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.697.1"> directive. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.697.2">If we want our component to be directly accessed using a URL, we can use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.698.1">@page</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.699.1"> directive:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.700.1">@page </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.701.1">"/theurl"</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.702.1">The URL can contain parameters, subfolders, and much more, which we will return to later in this chapter.</span></p>
<h3 class="heading2" id="_idParaDest-79"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.703.1">Adding a using statement</span></h3>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.704.1">To add a namespace to</span><a id="_idIndexMarker156" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.705.1"> our component, we can use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.706.1">@using</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.707.1"> directive:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.708.1">@using System.IO
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.709.1">If there are namespaces that</span><a id="_idIndexMarker157" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.710.1"> we use in several of our components, then we can add them to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.711.1">_Imports.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.712.1"> file instead. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.712.2">This way, they will be available in all</span><a id="_idIndexMarker158" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.713.1"> the components we create.</span></p>
<div class="note">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.714.1">If you want to dive further</span><a id="_idIndexMarker159" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.715.1"> into directives, you can find more information here: </span><a href="https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-8.0#directives" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.716.1">https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-8.0#directives</span></span></a></p>
</div>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.717.1">Now we know more about how Razor syntax works. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.717.2">Don’t worry; we will have plenty of time to practice it. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.717.3">There is one more directive that I haven’t covered in this section, and that is </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.718.1">inject</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.719.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.719.2">We first need to understand what </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.720.1">Dependency Injection</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.721.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.722.1">DI</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.723.1">) is and how it works, which we will see in the next section.</span></p>
<h1 class="heading" id="_idParaDest-80"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.724.1">Understanding dependency injection</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.725.1">DI is a software pattern</span><a id="_idIndexMarker160" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.726.1"> and a technique to implement </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.727.1">Inversion of Control</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.728.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.729.1">IoC</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.730.1">).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.731.1">IoC is a generic term that </span><a id="_idIndexMarker161" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.732.1">means we can indicate that the class needs a class instance instead of letting our classes instantiate an object. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.732.2">We can say that our class wants either a specific class or a specific interface. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.733.1">The creation of the class is somewhere else, and it is up to IoC what class it will create.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.734.1">When it comes to DI, it is a form of IoC when an object (class instance) is passed through constructors, parameters, or service lookups.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.735.1">Here is a great resource if you want to dive </span><a id="_idIndexMarker162" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.736.1">deeper into DI in .NET: </span><a href="https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.737.1">https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.738.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.739.1">In Blazor, we can configure DI by providing a way to instantiate an object; this is a key architecture pattern that we should use. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.739.2">We have already seen a couple of references to it, for example, in </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.740.1">Program.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.741.1">:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.742.1">builder.Services.AddScoped&lt;IBlogApi, BlogApiJsonDirectAccess&gt;(); 
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.743.1">Here, we say that if any class wants </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.744.1">IBlogApi</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.745.1">, the application should instantiate an object of the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.746.1">BlogApiJsonDirectAccess</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.747.1"> type. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.747.2">In this case, we are using an interface; instead, we could just say:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.748.1">builder.Services.AddScoped&lt;BlogApiJsonDirectAccess&gt;(); 
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.749.1">In this case, when we ask for a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.750.1">BlogApiJsonDirectAccess</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.751.1"> object, it will return an object of that type. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.751.2">If there only is one implementation of the thing we are building, there is no reason to create an interface </span><a id="_idIndexMarker163" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.752.1">for it. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.752.2">In the previous chapter, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.753.1">Chapter 3</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.754.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.755.1">Managing State – Part 1</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.756.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.756.2">We created an </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.757.1">IBlogApi</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.758.1"> interface that returned an instance of </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.759.1">BlogApiJsonDirectAccess</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.760.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.760.2">When we implement the WebAssembly version, DI will return another class instead.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.761.1">There are many advantages to using DI. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.761.2">Our dependencies are loosely coupled, so we don’t instantiate another class in our class. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.761.3">Instead, we ask for an instance, which makes it easier to write tests and change implementations depending on platforms.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.762.1">Any external dependencies will be much more apparent since we must pass them into the class. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.762.2">We also can set the way we should instantiate the object in a central place. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.762.3">We configure the DI in </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.763.1">Program.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.764.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.765.1">We can configure the creation of objects in different ways, such as the following:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.766.1">Singleton</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.767.1">Scoped</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.768.1">Transient</span></li>
</ul>
<h2 class="heading1" id="_idParaDest-81"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.769.1">Singleton</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.770.1">When we use a singleton, the </span><a id="_idIndexMarker164" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.771.1">object will be the same for all site users. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.771.2">The object will only be created once.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.772.1">To configure a singleton service, use the following:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.773.1">services.AddSingleton&lt;IWeatherForecastService, WeatherForecastService&gt;();
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.774.1">We should use a singleton when we want to share our object with all the users of our site, but beware because since the state is shared, it can lead to issues if the object stores data specific to an individual user or a session because once this data is changed by one user, the</span><a id="_idIndexMarker165" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.775.1"> change is reflected for all users who might be using the application simultaneously. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.775.2">It may also lead to data being shared unintentionally. </span></p>
<h2 class="heading1" id="_idParaDest-82"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.776.1">Scoped</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.777.1">When we use scoped, a new object will be created once for each connection, and since Blazor Server needs a</span><a id="_idIndexMarker166" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.778.1"> connection to work, it will be the same object as long as the user has a connection. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.778.2">WebAssembly does not have the concept of scoped, since there is no connection, so all the code runs inside the user’s web browser. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.778.3">If we use scoped, it will work the same way as a singleton for Blazor WebAssembly, since we only have one user and everything is running inside the browser. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.778.4">The recommendation is still to use scoped if the idea is to scope a service to the current user. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.778.5">This makes it easier to move code between Blazor Server and Blazor WebAssembly and gives a bit more context on how the service is supposed to be used.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.779.1">To configure a scoped service, use the following:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.780.1">services.AddScoped&lt;IWeatherForecastService, WeatherForecastService&gt;();
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.781.1">We should use scoped if we have data that belongs to the user. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.781.2">We can keep the user’s state by using scoped objects. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.781.3">More on that in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.782.1">Chapter 11</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.783.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.784.1">Managing State – Part 2</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.785.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.786.1">It’s worth mentioning here that the new “per component” model will create a SignalR connection if there is any component currently running in InteractiveServer mode. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.786.2">If we navigate to a new page without any </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.787.1">InteractiveServer</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.788.1"> components, the connection will eventually be disconnected. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.788.2">This means that the state will also be removed. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.788.3">So, when using the “per component” model, we need to make sure not to save any important information in a scoped variable unless we persist it in some other way as well.</span></p>
<h2 class="heading1" id="_idParaDest-83"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.789.1">Transient</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.790.1">When we use</span><a id="_idIndexMarker167" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.791.1"> transient, a new object will be created every time we ask for it.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.792.1">To configure a transient service, use the following:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.793.1">services.AddTransient&lt;IWeatherForecastService, WeatherForecastService&gt;();
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.794.1">We can use transient if we don’t need to keep any state, and we don’t mind the object being created every time we ask for it.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.795.1">Now that we know</span><a id="_idIndexMarker168" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.796.1"> how to configure a service, we need to start using the service by injecting it.</span></p>
<h2 class="heading1" id="_idParaDest-84"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.797.1">Injecting the service</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.798.1">There are three </span><a id="_idIndexMarker169" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.799.1">ways to inject a service. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.799.2">We can use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.800.1">@inject</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.801.1"> directive in the Razor file:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.802.1">@inject WeatherForecastService ForecastService
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.803.1">This will make sure we have access to </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.804.1">WeatherForecastService</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.805.1"> in our component.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.806.1">The second way is to create a property by adding the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.807.1">Inject</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.808.1"> attribute if we are using code-behind:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.809.1">[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.810.1">Inject</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.811.1">]
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.812.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.813.1"> WeatherForecastService ForecastService { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.814.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.815.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.816.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.817.1">; }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.818.1">The third way is for when we want to inject a service into another service – then, we need to inject the services using the constructor:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.819.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.820.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.821.1">MyService</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.822.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.823.1">public</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.824.1">MyService</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.825.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.826.1">WeatherForecastService</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.827.1">      weatherForecastService</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.828.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.829.1">
    {
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.830.1">Now we know how DI works and why we should use it. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.830.2">In .NET 7, using a scoped service meant that the data was accessible as long as the connection (or circuit) was active. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.830.3">But with .NET 8, it changes just slightly depending on the render mode. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.830.4">Let’s look at that next. </span></p>
<h2 class="heading1" id="_idParaDest-85"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.831.1">Changing the render mode</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.832.1">The biggest change when it comes to .NET 8 is the ability to change render mode in the same app. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.832.2">In .NET 7, we had to choose one or the other, but with .NET 8, we can change it as we see fit. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.832.3">Perhaps if a </span><a id="_idIndexMarker170" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.833.1">specific page is not interactive, we can use the new </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.834.1">Server-Side Rendering </span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.835.1">(</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.836.1">SSR</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.837.1">). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.837.2">This is very similar to WebForms or MVC. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.837.3">The page gets rendered on the server. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.837.4">No</span><a id="_idIndexMarker171" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.838.1"> additional interactivity will work. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.838.2">We can set the render mode on each component, or we can do it when we use the component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.838.3">When we create the project, we select what interactive render mode we want.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.839.1">Let’s take a look at the different options:</span></p>
<ul class="calibre4">
<li class="bulletlist"><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.840.1"> None</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.841.1"> – No interactivity, only static rendered files, no SignalR, and no WebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.841.2">Using this option, we can use both static SSR and streaming server-side rendering.</span></li>
<li class="bulletlist1"><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.842.1"> Server</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.843.1"> – This will give us access to interactivity using Blazor Server, not WebAssembly.</span></li>
<li class="bulletlist1"><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.844.1"> WebAssembly</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.845.1"> – This will give us access to interactivity using Blazor WebAssembly, not Blazor Server.</span></li>
<li class="bulletlist1"><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.846.1">Auto</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.847.1"> (Server and WebAssembly) – Gives us the ability to use both Server and WebAssembly.</span></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.848.1"> We also set </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.849.1">Interactivity location </span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.850.1">to </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.851.1">Per page/component</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.852.1">, which means that the default behavior of the site is static, and we need to specify on each component if we want to use interactivity. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.852.2">We can also set it to </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.853.1">Global</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.854.1">, which will set the interactivity on the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.855.1">Routes</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.856.1"> component like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.857.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.858.1">Routes</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.859.1"> @</span></span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.860.1">rendermode</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.861.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.862.1">"@InteractiveAuto"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.863.1"> /&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.864.1">To change the render mode per component, we can use the syntax above or use the attribute we saw in the Counter component:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.865.1">@rendermode InteractiveAuto
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.866.1">By default, all components are rendered using server pre-rendering. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.866.2">This means that the component is first rendered on the server and then pushed to the web browser. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.866.3">SignalR or WebAssembly starts up, and the component is rendered again, making additional calls to the database, for example. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.866.4">I personally rarely use server pre-rendering. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.866.5">I like that the pages load by first sending what the server has ready and then, when database calls are done, sends the rest. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.866.6">We can also disable pre-rendering by doing it like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.867.1">&lt;Routes @rendermode=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.868.1">"new InteractiveServerRenderMode(prerender: false)"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.869.1"> /&gt;
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.870.1">We will have plenty of time to learn more about render modes during the course of the book. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.870.2">In .NET 7, we had more</span><a id="_idIndexMarker172" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.871.1"> templates, but by using combinations of these settings, we can create the same scenarios.</span></p>
<table class="table-container" id="table001-1">
<tbody class="calibre14">
<tr class="calibre15">
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.872.1">.NET 7 Template</span></p>
</td>
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.873.1">.NET 8 Template</span></p>
</td>
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.874.1">Interactive render mode</span></p>
</td>
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.875.1">Interactivity location</span></p>
</td>
</tr>
<tr class="calibre15">
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.876.1">Blazor Server App</span></p>
</td>
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.877.1">Blazor Web App</span></p>
</td>
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.878.1">Server</span></p>
</td>
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.879.1">Global</span></p>
</td>
</tr>
<tr class="calibre15">
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.880.1">Blazor WebAssembly App</span></p>
</td>
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.881.1">Blazor WebAssembly Standalone App</span></p>
</td>
<td class="table-cell"/>
<td class="table-cell"/>
</tr>
<tr class="calibre15">
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.882.1">Blazor WebAssembly (ASP.NET Core Hosted)</span></p>
</td>
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.883.1">Blazor Web App</span></p>
</td>
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.884.1">WebAssembly</span></p>
</td>
<td class="table-cell">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan2" id="kobo.885.1">Global</span></p>
</td>
</tr>
</tbody>
</table>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.886.1">If you are new to Blazor, this table has no significance, but if you have worked with Blazor in .NET 7 and want to use a project template that you have used in .NET 7, this is how to do it. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.886.2">In this chapter, we have mentioned code-behind a couple of times. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.886.3">In the next section, we will look at how we can use code-behind with Razor files and skip the Razor files altogether.</span></p>
<h1 class="heading" id="_idParaDest-86"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.887.1">Figuring out where to put the code</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.888.1">We have seen examples of writing code directly in the Razor file. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.888.2">I prefer doing that unless the code gets too long or too complicated. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.888.3">I always lean in favor of readability.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.889.1">There are four ways we can write our components:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.890.1">In the Razor file</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.891.1">In a partial class</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.892.1">Inheriting a class</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.893.1">Only code</span></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.894.1">Let’s go through each item on this list in more detail.</span></p>
<h2 class="heading1" id="_idParaDest-87"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.895.1">In the Razor file</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.896.1">If we are writing</span><a id="_idIndexMarker173" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.897.1"> a file that is not that complex, it would be nice not to switch files when writing components. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.897.2">As we already covered in this chapter, we can use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.898.1">@code</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.899.1"> directive to add code directly to our Razor file.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.900.1">If we want to move the code to a code-behind file, then it is only the directives that we need to change. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.900.2">For the rest of the code, we can just move to the code-behind class. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.900.3">When I started with Blazor, writing code and markup in the same file felt strange, coming from an MVC world where the separation between code and markup is a big part of the way to use MVC. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.900.4">But I suggest you try it out when developing your web apps.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.901.1">At work, we started using code-behind but switched to writing code in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.902.1">.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.903.1"> file instead, and we haven’t looked back since.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.904.1">However, many developers prefer code-behind, separating code from the layout. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.904.2">For that, we can use a partial class.</span></p>
<h2 class="heading1" id="_idParaDest-88"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.905.1">In a partial class</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.906.1">We can create a partial class</span><a id="_idIndexMarker174" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.907.1"> with the same filename as the Razor file and add </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.908.1">.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.909.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.910.1">If you have downloaded the source code (or you can check the code on GitHub), you can look at </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.911.1">WeatherCodeBehind.razor.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.912.1"> in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.913.1">Examples</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.914.1"> folder. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.914.2">I have moved all the code to the code-behind file; the result when compiling this will be the same as if we kept the code in the Razor file. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.914.3">It is just a matter of preference.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.915.1">The code-behind looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.916.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.917.1">BlazorWebApp.Components.Pages</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.918.1">;
[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.919.1">StreamRendering(true)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.920.1">]
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.921.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.922.1">partial</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.923.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.924.1">WeatherWithCodeBehind</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.925.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.926.1">private</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.927.1"> WeatherForecast[]? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.927.2">forecasts;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.928.1">protected</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.929.1">override</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.930.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.931.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.932.1">OnInitializedAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.933.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.934.1">
    {
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.935.1">// Simulate asynchronous loading to demonstrate streaming rendering</span></span>
<span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.936.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.937.1"> Task.Delay(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.938.1">500</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.939.1">);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.940.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.941.1"> startDate = DateOnly.FromDateTime(DateTime.Now);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.942.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.943.1"> summaries = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.944.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.945.1">[] { </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.946.1">"Freezing"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.947.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.948.1">"Bracing"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.949.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.950.1">"Chilly"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.951.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.952.1">"Cool"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.953.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.954.1">"Mild"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.955.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.956.1">"Warm"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.957.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.958.1">"Balmy"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.959.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.960.1">"Hot"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.961.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.962.1">"Sweltering"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.963.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.964.1">"Scorching"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.965.1"> };
        forecasts = Enumerable.Range(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.966.1">1</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.967.1">, </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.968.1">5</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.969.1">).Select(index =&gt; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.970.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.971.1"> WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.972.1">-20</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.973.1">, </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.974.1">55</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.975.1">),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.976.1">private</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.977.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.978.1">WeatherForecast</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.979.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.980.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.981.1"> DateOnly Date { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.982.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.983.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.984.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.985.1">; }
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.986.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.987.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.988.1"> TemperatureC { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.989.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.990.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.991.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.992.1">; }
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.993.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.994.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.995.1">? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.995.2">Summary { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.996.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.997.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.998.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.999.1">; }
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1000.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1001.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1002.1"> TemperatureF =&gt; </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1003.1">32</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1004.1"> + (</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1005.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1006.1">)(TemperatureC / </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1007.1">0.5556</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1008.1">);
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1009.1">Since we are using a partial class, there is no need to connect the razor with the code-behind. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1009.2">If it has the same </span><a id="_idIndexMarker175" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1010.1">name, it will just work. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1010.2">We can mix where we put the code; in this case, we have the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1011.1">StreamingRendering</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1012.1"> attribute in the code-behind, and we can keep it in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1013.1">.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1014.1"> file if we want to. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1014.2">If you prefer using code-behind, this is the way you want to do it.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1015.1">This is not the only way to use a code-behind file; we can also inherit from a code-behind file.</span></p>
<h2 class="heading1" id="_idParaDest-89"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1016.1">Inheriting a class</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1017.1">We can also create a completely different class (the common pattern is to call it the same thing as the</span><a id="_idIndexMarker176" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1018.1"> Razor file and add </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1019.1">Model</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1020.1"> at the end) and inherit it in our Razor file. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1020.2">For that to work, we need to inherit from </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1021.1">ComponentBase</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1022.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1022.2">In the case of a partial class, the class already inherits from </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1023.1">ComponentBase</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1024.1">, since the Razor file does that.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1025.1">Fields must be protected or public (not private) for the page to access the fields. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1025.2">I recommend using the partial class if we don’t need to inherit from our base class.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1026.1">This is a snippet of the code-behind class declaration:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1027.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1028.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1029.1">WeatherWithInheritsModel</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1030.1">:</span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1031.1">ComponentBase</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1032.1">We’ll need to inherit from </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1033.1">ComponentBase</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1034.1"> or from a class that inherits from </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1035.1">ComponentBase</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1036.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1037.1">In the Razor file, we will use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1038.1">@inherits</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1039.1"> directive:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1040.1">@inherits WeatherWithInheritsModel
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1041.1">The Razor file will now inherit from our code-behind class (this was the first way available to create code-behind classes).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1042.1">Both the partial and inherit options are simple ways of moving the code to a code-behind file. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1042.2">Inheriting a model was the first available way, but as I mentioned, use partial classes instead if you prefer code-behind. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1042.3">But another option is to skip the Razor file and use only code entirely.</span></p>
<h2 class="heading1" id="_idParaDest-90"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1043.1">Only code</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1044.1">Visual Studio will use source</span><a id="_idIndexMarker177" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1045.1"> generators to convert the Razor code into C#. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1045.2">We will dig deeper into source generators in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1046.1">Chapter 17</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1047.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1048.1">Examining Source Generators</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1049.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1049.2">The Razor file will generate code at compile time. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1049.3">We can skip the Razor step if we want to and write our layout completely in code.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1050.1">This file (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1051.1">CounterWithoutRazor.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1052.1">) is available on GitHub.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1053.1">The counter example would look like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1054.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1055.1"> Microsoft.AspNetCore.Components;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1056.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1057.1"> Microsoft.AspNetCore.Components.Rendering;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1058.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1059.1"> Microsoft.AspNetCore.Components.Web;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1060.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1061.1">BlazorWebApp.Component.Pages</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1062.1">;
[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1063.1">Route(</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1064.1">"/CounterWithoutRazor"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1065.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1066.1">]
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1067.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1068.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1069.1">CounterWithoutRazor</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1070.1"> : </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1071.1">ComponentBase</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1072.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1073.1">protected</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1074.1">override</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1075.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1076.1">BuildRenderTree</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1077.1">      (</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1078.1">RenderTreeBuilder builder</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1079.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1080.1">
    {
        builder.AddMarkupContent(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1081.1">0</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1082.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1083.1">"&lt;h1&gt;Counter&lt;/h1&gt;\r\n\r\n"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1084.1">);
        builder.OpenElement(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1085.1">1</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1086.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1087.1">"p"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1088.1">);
        builder.AddContent(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1089.1">2</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1090.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1091.1">"Current count: "</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1092.1">);
        builder.AddContent(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1093.1">3</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1094.1">, currentCount);
        builder.CloseElement();
        builder.AddMarkupContent(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1095.1">4</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1096.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1097.1">"</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1098.1">\r\n\r\n"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1099.1">);
        builder.OpenElement(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1100.1">5</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1101.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1102.1">"button"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1103.1">);
        builder.AddAttribute(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1104.1">6</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1105.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1106.1">"class"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1107.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1108.1">"btn btn-primary"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1109.1">);
        builder.AddAttribute(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1110.1">7</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1111.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1112.1">"onclick"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1113.1">, EventCallback.Factory.Create&lt;MouseEventArgs&gt;(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1114.1">this</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1115.1">, IncrementCount));
        builder.AddContent(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1116.1">8</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1117.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1118.1">"</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1119.1">Click me"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1120.1">);
        builder.CloseElement();
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1121.1">private</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1122.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1123.1"> currentCount = </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1124.1">0</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1125.1">;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1126.1">private</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1127.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1128.1">IncrementCount</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1129.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1130.1">
    {
        currentCount++;
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1131.1">The Razor file will first be converted into something roughly the same as the previous code, and then the code is compiled. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1131.2">It adds the elements one by one, which, in the end, will render the HTML.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1132.1">The numbers in the code </span><a id="_idIndexMarker178" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1133.1">are how Blazor keeps track of each element in the render tree. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1133.2">Some prefer to write the code as in the previous code block rather than using the Razor syntax; there are even efforts in the community to simplify the process of manually writing the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1134.1">BuildRenderTree()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1135.1"> function.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1136.1">Some of Microsoft’s built-in components are built in this way.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1137.1">I recommend never writing this manually, but I’ve kept it in the book because it shows how Razor files get compiled. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1137.2">Now that we know how to use code-behind, let’s look at the lifecycle events of Blazor and when they get executed.</span></p>
<h1 class="heading" id="_idParaDest-91"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1138.1">Lifecycle events</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1139.1">We can use a couple of lifecycle events to run our code. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1139.2">In this section, we will go through them and see when we should use them. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1139.3">Most lifecycle events have two versions – synchronous and asynchronous.</span></p>
<h2 class="heading1" id="_idParaDest-92"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1140.1">OnInitialized and OnInitializedAsync</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1141.1">The first time the </span><a id="_idIndexMarker179" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1142.1">component</span><a id="_idIndexMarker180" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1143.1"> is loaded, </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1144.1">OnInitialized()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1145.1"> is called, then </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1146.1">OnInitializedAsync()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1147.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1147.2">This is a great method to load any data, as the </span><a id="_idIndexMarker181" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1148.1">UI has not </span><a id="_idIndexMarker182" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1149.1">yet been rendered. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1149.2">If we are doing long-running tasks (such as getting data from a database), we should put that code in</span><a id="_idIndexMarker183" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1150.1"> the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1151.1">OnInitializedAsync()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1152.1"> method.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1153.1">These methods will </span><a id="_idIndexMarker184" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1154.1">only run once. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1154.2">If you want to update the</span><a id="_idIndexMarker185" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1155.1"> UI when a </span><a id="_idIndexMarker186" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1156.1">parameter changes, see </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1157.1">OnParametersSet()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1158.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1159.1">OnParametersSetAsync()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1160.1">.</span></p>
<h2 class="heading1" id="_idParaDest-93"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1161.1">OnParametersSet and OnParametersSetAsync</span></h2>
<p class="normal"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1162.1">OnParametersSet()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1163.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1164.1">OnParametersSetAsync()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1165.1"> are called when the component is initialized (after </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1166.1">OnInitialized()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1167.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1168.1">OnInitializedAsync()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1169.1">) and whenever we change the</span><a id="_idIndexMarker187" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1170.1"> value of a </span><a id="_idIndexMarker188" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1171.1">parameter.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1172.1">If we, for example, load </span><a id="_idIndexMarker189" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1173.1">data in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1174.1">OnInitialized()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1175.1"> method but it</span><a id="_idIndexMarker190" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1176.1"> uses a parameter, the data won’t be reloaded if the parameter is changed since </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1177.1">OnInitialized()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1178.1"> will only run once. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1178.2">We need to trigger a reload of the data in </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1179.1">OnParametersSet()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1180.1"> or </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1181.1">OnParametersSetAsync()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1182.1"> or move the loading to that method.</span></p>
<h2 class="heading1" id="_idParaDest-94"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1183.1">OnAfterRender and OnAfterRenderAsync</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1184.1">After the component renders, the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1185.1">OnAfterRender()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1186.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1187.1">OnAfterRenderAsync()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1188.1"> methods are</span><a id="_idIndexMarker191" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1189.1"> called. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1189.2">When the methods are called, all the elements</span><a id="_idIndexMarker192" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1190.1"> are rendered, so if we want/need to call any JavaScript code, we have to do that from these methods (we will get an error if </span><a id="_idIndexMarker193" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1191.1">we try to make a JavaScript interop from any of the other lifecycle event methods). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1191.2">This is a limitation of the prerendering. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1191.3">When the component prerenders, there is</span><a id="_idIndexMarker194" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1192.1"> nothing connected to the web browser, and we will not be able to run any JavaScript. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1192.2">However, if we disable the prerendering, we can run JavaScript in the other lifecycle methods as well. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1192.3">We also have access to a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1193.1">firstRender</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1194.1"> parameter, so we can only run our code on the first render. </span></p>
<h2 class="heading1" id="_idParaDest-95"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1195.1">ShouldRender</span></h2>
<p class="normal"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1196.1">ShouldRender()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1197.1"> is</span><a id="_idIndexMarker195" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1198.1"> called when our component is re-rendered; if it</span><a id="_idIndexMarker196" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1199.1"> returns </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1200.1">false</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1201.1">, the component will not be rendered again. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1201.2">The component will always render once, even if this method returns </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1202.1">false</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1203.1">.</span></p>
<p class="normal1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1204.1">ShouldRender()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1205.1"> does not have an asynchronous option.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1206.1">Now we know when the different lifecycle events happen and in what order. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1206.2">A component can also have parameters, and that way, we can reuse them but with different data.</span></p>
<h1 class="heading" id="_idParaDest-96"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1207.1">Parameters</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1208.1">A parameter makes it </span><a id="_idIndexMarker197" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1209.1">possible to send a value to a component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1209.2">To add a parameter to a component, we use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1210.1">[Parameter]</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1211.1"> attribute on the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1212.1">public</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1213.1"> property:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1214.1">@code {
    [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1215.1">Parameter</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1216.1">]
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1217.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1218.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1219.1"> MyParameter { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1220.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1221.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1222.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1223.1">; }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1224.1">The syntax for this is the same if we use a code-behind file. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1224.2">We can add a parameter to the route using the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1225.1">@page</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1226.1"> directive by specifying it in the route:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1227.1">@page </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1228.1">"/parameterdemo/{MyParameter}"</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1229.1">In this case, we have to have a parameter specified with the same name as the name inside the curly braces. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1229.2">To set the parameter in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1230.1">@page</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1231.1"> directive, we go to </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1232.1">/parameterdemo/THEVALUE</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1233.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1234.1">There are cases where we want to specify another type instead of a string (string is the default). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1234.2">We can add the data type after the parameter name like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1235.1">@page </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1236.1">"/parameterdemo/{MyParameter:int}"</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1237.1">This will match the </span><a id="_idIndexMarker198" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1238.1">route only if the data type is an integer. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1238.2">We can also pass parameters using cascading parameters. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1238.3">We can also have more than one page directive per component if we want to handle more than one route.</span></p>
<h2 class="heading1" id="_idParaDest-97"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1239.1">Cascading parameters</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1240.1">If we want to pass </span><a id="_idIndexMarker199" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1241.1">a value to multiple components, we can use a cascading </span><a id="_idIndexMarker200" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1242.1">parameter.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1243.1">Instead of using </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1244.1">[Parameter]</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1245.1">, we can use </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1246.1">[CascadingParameter]</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1247.1"> like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1248.1">[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1249.1">CascadingParameter</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1250.1">]
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1251.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1252.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1253.1"> MyParameter { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1254.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1255.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1256.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1257.1">; }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1258.1">To pass a value to the component, we surround it with a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1259.1">CascadingValue</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1260.1"> component like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1261.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1262.1">CascadingValue</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1263.1">Value</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1264.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1265.1">"MyProperty"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1266.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1267.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1268.1">ComponentWithCascadingParameter</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1269.1">/&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1270.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1271.1">CascadingValue</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1272.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1273.1"> 
@code {
    public string MyProperty { get; set; } = "Test Value";
}
</span></code></pre>
<p class="normal1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1274.1">CascadingValue</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1275.1"> is the</span><a id="_idIndexMarker201" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1276.1"> value we pass to the component, and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1277.1">CascadingParameter</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1278.1"> is the property that receives the value.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1279.1">As we can see, we don’t pass any parameter values to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1280.1">ComponentWithCascadingParameter</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1281.1"> component; the cascading value will match the parameter with the same data type. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1281.2">If we have multiple parameters of the same type, we can specify the name of the parameter in the component with the cascading parameter like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1282.1">[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1283.1">CascadingParameter(Name = </span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1284.1">"MyCascadingParameter"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1285.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1286.1">]
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1287.1">We can also do so for the component that passes </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1288.1">CascadingValue</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1289.1">, like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1290.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1291.1">CascadingValue</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1292.1">Value</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1293.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1294.1">"MyProperty"</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1295.1">Name</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1296.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1297.1">"MyCascadingParameter"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1298.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1299.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1300.1">ComponentWithCascadingParameter</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1301.1">/&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1302.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1303.1">CascadingValue</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1304.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1305.1">If we know that the value won’t change, we can specify that by using the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1306.1">IsFixed</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1307.1"> property:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1308.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1309.1">CascadingValue</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1310.1">Value</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1311.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1312.1">"MyProperty"</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1313.1">Name</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1314.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1315.1">"MyCascadingParameter"</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1316.1">IsFixed</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1317.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1318.1">"True"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1319.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1320.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1321.1">ComponentWithCascadingParameter</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1322.1">/&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1323.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1324.1">CascadingValue</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1325.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1326.1">This way, Blazor won’t look for changes, which is more efficient if we know the values won’t change. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1326.2">The cascading values/parameters cannot be updated upward but are updated only downward. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1326.3">This means that to update a cascading value, we need to implement it in another way; updating it from inside the component won’t change any components that are higher in the hierarchy.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1327.1">In </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1328.1">Chapter 5</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1329.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1330.1">Creating Advanced Blazor Components</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1331.1">, we will look at events, which are one way to solve the problem of updating a cascading value.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1332.1">Phew! </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1332.2">This has been</span><a id="_idIndexMarker202" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1333.1"> an information-heavy chapter, but now </span><a id="_idIndexMarker203" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1334.1">we know the basics of Blazor components. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1334.2">Now, it is time to build one!</span></p>
<h1 class="heading" id="_idParaDest-98"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1335.1">Writing our first component</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1336.1">The first component we</span><a id="_idIndexMarker204" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1337.1"> will build shows all the blog posts on a site. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1337.2">To be fair, we haven’t written any blog posts yet, but we will temporarily solve that so we can start doing something fun.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1338.1">In </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1339.1">Chapter 3</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1340.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1341.1">Managing State – Part 1</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1342.1">, we created a JSON repository and an API (or interface); now, it is time to use them.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1343.1">We will share the code between the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1344.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1345.1"> project and the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1346.1">BlazorWebApp.Client</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1347.1"> project. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1347.2">We will even change the implementation of how they run depending on whether they run as WebAssembly or not.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1348.1">There is a whole chapter on sharing (</span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1349.1">Chapter 9</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1350.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1351.1">Sharing Code and Resources</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1352.1">), but let’s start now.</span></p>
<h2 class="heading1" id="_idParaDest-99"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1353.1">Creating a components library</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1354.1">The first thing we need to do is to create a new project and then add our components to that project. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1354.2">We could have </span><a id="_idIndexMarker205" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1355.1">added the components to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1356.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1357.1"> or the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1358.1">BlazorWebApp.Client</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1359.1"> project directly, but this demonstrates how we can build reusable components and distribute them as packages later on.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1360.1">To create our first component, follow these instructions:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1361.1">Right-click on the </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1362.1">MyBlog</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1363.1"> solution and select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1364.1">Add</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1365.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1366.1">New Project</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1367.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1368.1">Find the template </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1369.1">Razor Class Library</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1370.1"> and click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1371.1">Next</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1372.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1373.1">Name the project </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1374.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1375.1"> and click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1376.1">Next</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1377.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1378.1">Select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1379.1">.NET 8.0</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1380.1"> and click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1381.1">Create</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1382.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1383.1">We now have a project called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1384.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1385.1">, where we can add all the components we want to share. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1385.2">Remove </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1386.1">Component1.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1387.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1388.1">ExampleJsInterop.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1389.1"> that are created by default.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1390.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1391.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1392.1"> project, add a project reference to </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1393.1">Data.Models</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1394.1"> and add the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1395.1">Nuget</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1396.1"> package reference to </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1397.1">Microsoft.AspNetCore.Components.Web</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1398.1">.</span></li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1399.1">We have a new</span><a id="_idIndexMarker206" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1400.1"> project. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1400.2">This is where we can share components. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1400.3">Right now, we don’t have any components to share, but that is what we will do next.</span></p>
<h2 class="heading1" id="_idParaDest-100"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1401.1">Using our components library</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1402.1">We have a</span><a id="_idIndexMarker207" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1403.1"> nice library, but for our project to trigger when we navigate to a route, we need to add additional assemblies to the router.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1404.1">To do that, we need to follow a couple of steps:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1405.1">We already have a Home component in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1406.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1407.1"> project so let’s delete that one. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1407.2">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1408.1">Components/Pages</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1409.1"> folder, delete the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1410.1">Home.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1411.1"> file.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1412.1">We need a component to navigate to. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1412.2">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1413.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1414.1"> project, in the Pages folder, we need to create a new component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1414.2">You can select the folder or project node in the solution explorer and press </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1415.1">Shift</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1416.1"> + </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1417.1">F2</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1418.1">, type </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1419.1">Home.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1420.1">, and press </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1421.1">Enter</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1422.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1422.2">This is the fastest way to create new components.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1423.1"> In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1424.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1425.1"> project, add a project reference to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1426.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1427.1"> project.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1428.1">Also in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1429.1">BlazorWebApp.Client</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1430.1"> project, add a project reference to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1431.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1432.1"> project.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1433.1">Now, we have access to the shared components in both the WebAssembly project (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1434.1">BlazorWebApp.Client</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1435.1">) and the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1436.1">BlazorWebProject</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1437.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1437.2">This means that we can run any component we put into the shared project (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1438.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1439.1">) as </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1440.1">InteractiveWebAssembly</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1441.1"> or </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1442.1">InteractiveServer</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1443.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1444.1">Open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1445.1">Router.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1446.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1446.2">It looks like this:
        </span><pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1447.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1448.1">Router</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1449.1">AppAssembly</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1450.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1451.1">"</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1452.1">@typeof(Program).Assembly"</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1453.1">AdditionalAssemblies</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1454.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1455.1">"new[] { typeof(Client._Imports).Assembly }"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1456.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1457.1">The router defines where to look for components. </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1458.1">AppAssembly</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1459.1"> is where it will look first. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1459.2">We can also add additional assemblies, and as we can see, we already have an additional assembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1459.3">We are referencing the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1460.1">BlazorWebbApp.Client</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1461.1"> project so that we can pre - render and server render (SignalR) the Counter component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1461.2">But now we want to add an additional assembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1461.3">Change the router to this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1462.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1463.1">Router</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1464.1">AppAssembly</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1465.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1466.1">"@typeof(Program).Assembly"</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1467.1">AdditionalAssemblies</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1468.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1469.1">"new[] { typeof(Client._Imports).Assembly,typeof(SharedComponents.Pages.Home).Assembly }"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1470.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1471.1">We add the </span><a id="_idIndexMarker208" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1472.1">new assembly to additional assemblies. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1472.2">The router will now look for components in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1473.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1474.1"> assembly as well.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="7"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1475.1">We also have to add a row in </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1476.1">Program.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1477.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1477.2">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1478.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1479.1"> project, open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1480.1">Program.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1481.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1481.2">There, you will find these lines:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1482.1"> app.MapRazorComponents&lt;App&gt;()
    .AddInteractiveServerRenderMode()
    .AddInteractiveWebAssemblyRenderMode()
    .AddAdditionalAssemblies(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1483.1">typeof</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1484.1">(Counter).Assembly);
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1485.1">We need to add the new assembly there as well, like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1486.1">app.MapRazorComponents&lt;App&gt;()
    .AddInteractiveServerRenderMode()
    .AddInteractiveWebAssemblyRenderMode()
    .AddAdditionalAssemblies(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1487.1">typeof</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1488.1">(Counter).Assembly)
.AddAdditionalAssemblies(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1489.1">typeof</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1490.1">(SharedComponents.Pages.Home).Assembly); 
</span></code></pre>
</li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1491.1">We need to add additional assemblies in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1492.1">Program.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1493.1"> as well to get server-side rendering to work. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1493.2">Great! </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1493.3">We have all components in a separate library and are sharing the components between the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1494.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1495.1"> and the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1496.1">BlazorWebApp.Client</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1497.1"> projects.</span></p>
<h2 class="heading1" id="_idParaDest-101"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1498.1">Creating our own component</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1499.1">Now it’s time to start adding our own component!</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1500.1">OK, this is not </span><a id="_idIndexMarker209" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1501.1">completely true because we will continue working on </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1502.1">Home.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1503.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1503.2">Let’s start by creating a component that lists our blog posts:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1504.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1505.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1506.1"> project, open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1507.1">Home.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1508.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1509.1">Replace the contents of that file with the following code:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1510.1">@page </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1511.1">"/"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1512.1">
@using Data.Models.Interfaces
@using Data.Models
@inject IBlogApi _api
@code{
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1513.1">If we start from the top, we can see a page directive. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1513.2">It will ensure that the component is shown when the route is “</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1514.1">/</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1515.1">". </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1515.2">Then, we have three </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1516.1">@using</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1517.1"> directives, bringing </span><a id="_idIndexMarker210" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1518.1">in the namespaces so we can use them in the Razor file.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1519.1">Then we inject our API (using DI) and name the instance </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1520.1">_api</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1521.1">.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1522.1">Add a variable that holds all our posts. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1522.2">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1523.1">code</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1524.1"> section, add the following:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1525.1">protected</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1526.1"> List&lt;BlogPost&gt; posts = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1527.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1528.1">();
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1529.1">Now, we need to load the data.
    </span><p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1530.1">To load posts, add the following in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1531.1">code</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1532.1"> section:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1533.1">protected</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1534.1">override</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1535.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1536.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1537.1">OnInitializedAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1538.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1539.1">
{
    posts = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1540.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1541.1"> _api.GetBlogPostsAsync(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1542.1">10</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1543.1">, </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1544.1">0</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1545.1">);
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1546.1">await</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1547.1">base</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1548.1">.OnInitializedAsync();
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1549.1">Now, when the page loads, the posts will be loaded as well: </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1550.1">10</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1551.1"> posts and page </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1552.1">0</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1553.1"> (the first page).</span></p></li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="5"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1554.1">Under the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1555.1">@inject</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1556.1"> row, add the following code:
        </span><pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1557.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1558.1">ul</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1559.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1560.1">
    @foreach (var p in posts)
    {
        </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1561.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1562.1">li</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1563.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1564.1">@p.Title</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1565.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1566.1">li</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1567.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1568.1">
    }
</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1569.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1570.1">ul</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1571.1">&gt;</span></span>
</code></pre>
</li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1572.1">We add an </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1573.1">Unordered List</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1574.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1575.1">UL</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1576.1">); inside that, we</span><a id="_idIndexMarker211" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1577.1"> loop over blog posts and show the title.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1578.1">Now, we can run the application by pressing </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1579.1">Ctrl</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1580.1"> + </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1581.1">F5</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1582.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1583.1">Debug </span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1584.1">| </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1585.1">Start Without Debugging</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1586.1">). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1586.2">Make sure you have the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1587.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1588.1"> selected as the startup project.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1589.1">Since we don’t have any blog posts, this would take us to an empty page. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1589.2">Luckily, there is a folder in the</span><a id="_idIndexMarker212" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1590.1"> repo called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1591.1">ExampleData</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1592.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1592.2">If you download that, put those files in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1593.1">Data</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1594.1"> folder that we created in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1595.1">Chapter 3</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1596.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1597.1">Managing State – Part 1</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1598.1">, and reload the web, you should see a couple of posts.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1599.1">Great job, we have created our first component!</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1600.1">There are a few noteworthy things. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1600.2">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1601.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1602.1"> project knows nothing about the JSON repository implementation and only knows about the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1603.1">IBlogApi</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1604.1"> interface.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1605.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1606.1">Home</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1607.1"> component asks for an instance of </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1608.1">IBlogApi</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1609.1">, and the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1610.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1611.1"> project knows it should return an instance of </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1612.1">BlogApiJsonDirectAccess</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1613.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1613.2">This is one of the things I love about Blazor; we can create components that only consume an interface and know nothing about the implementation.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1614.1">We will return to this when we implement a web API for WebAssembly in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1615.1">Chapter 7</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1616.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1617.1">Creating an API</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1618.1">.</span></p>
<h1 class="heading" id="_idParaDest-102"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1619.1">Summary</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1620.1">In this chapter, we learned a lot about Razor syntax – something we will use throughout the book. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1620.2">We learned about DI, directives, and parameters and, of course, created our first component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1620.3">This knowledge will help us understand how to create and reuse components.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1621.1">In the next chapter, we will look at more advanced component scenarios.</span></p>
</div>
</body>
</html>
