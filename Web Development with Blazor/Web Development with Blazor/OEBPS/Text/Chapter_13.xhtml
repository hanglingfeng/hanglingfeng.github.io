<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en-US" xml:lang="en-US">
  <head>
    <title>Chapter_13</title>
    <!-- kobo-style -->
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="../../stylesheet.css"/>
<link rel="stylesheet" type="text/css" href="../../page_styles.css"/>
</head>
  <body id="Chapter_13" class="calibre">
<div class="calibre1" id="_idContainer063">
<h1 class="chapternumber"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1.1">13</span></h1>
<h1 class="chaptertitle" id="_idParaDest-222"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.2.1">Testing</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.3.1">In this chapter, we will take a look at testing. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.3.2">Writing tests for our projects will help us develop things rapidly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.4.1">We can run tests to ensure we haven’t broken anything with the latest change. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.4.2">Also, we don’t have to invest our time in testing components manually since it is all done by the tests. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.4.3">Testing will improve the quality of the product since we’ll know that things that worked earlier still function as they should.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.5.1">But writing tests for UI elements isn’t always easy; the most common way is to spin up the site, use tools that click on buttons, and then read the output to determine whether things work. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.5.2">The upside of this method is that we can test our site on different browsers and devices. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.5.3">The downside is that it usually takes a lot of time to do these tests. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.5.4">We need to spin up the website, start a web browser, verify the test, close the web browser, and repeat for the next test.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.6.1">We can use this method in Blazor as well (as with any ASP.NET site), but with Blazor, we have other opportunities when it comes to testing.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.7.1">Steve Sanderson created an embryo of a test framework for Blazor that Microsoft MVP Egil Hansen picked up and continued the development of.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.1">Egil’s framework is</span><a id="_idIndexMarker515" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.9.1"> called </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.10.1">bUnit</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.11.1"> and has become an industry standard in the Blazor community for testing Blazor components.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.12.1">This chapter covers the following topics:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.13.1">What is bUnit?</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.14.1">Setting up a test project</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.15.1">Mocking the API</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.16.1">Writing tests</span></li>
<li class="bulletlist1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.17.1">Blazm</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.18.1"> extension</span></li>
</ul>
<h1 class="heading" id="_idParaDest-223"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.19.1">Technical requirements</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.20.1">Make sure you have read the previous chapters or use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.21.1">Chapter12</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.22.1"> folder as a starting point.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.23.1">You can find the source code for this chapter’s result at </span><a href="https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter13" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.24.1">https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter13</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.25.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.26.1">If you are jumping into this chapter using the code from GitHub, make sure you have added the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.27.1">Auth0</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.28.1"> account information in the settings files. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.28.2">You can find the instructions in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.29.1">Chapter 8</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.30.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.31.1">Authentication and Authorization</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.32.1">.</span></p>
<h1 class="heading" id="_idParaDest-224"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.33.1">What is bUnit?</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.34.1">As mentioned in</span><a id="_idIndexMarker516" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.35.1"> the introduction, some tests spin up web browsers to test pages/components, but bUnit takes another approach.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.36.1">bUnit is made specifically for Blazor. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.36.2">It can define and set up tests using C# or Razor syntax. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.36.3">It can mock JavaScript interop as well as Blazor’s authentication and authorization. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.36.4">To make our components more testable, sometimes we need to think about these things from the beginning or make minor changes to our code.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.37.1">bUnit doesn’t rely on a web browser but renders the output internally and exposes it to us so that we can test against predefined outputs. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.37.2">This is also a limitation – we are not testing the real site; we are testing the component, so think of this as unit tests, not integration tests.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.38.1">It’s time for us to get our hands dirty, so let’s create a test project.</span></p>
<h1 class="heading" id="_idParaDest-225"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.39.1">Setting up a test project</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.40.1">To be able to </span><a id="_idIndexMarker517" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.41.1">run </span><a id="_idIndexMarker518" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.42.1">tests, we need a test project:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.43.1">To install the </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.44.1">bUnit</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.45.1"> templates, open PowerShell and run the following command:
        </span><pre class="programlisting1"><code class="hljs-con"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.46.1">dotnet new install bunit.template
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.47.1">Check which is the latest version of the templates on the bUnit web page: </span><a href="https://bunit.dev/" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.48.1">https://bunit.dev/</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.49.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.50.1">In Visual Studio, right-click the </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.51.1">MyBlog</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.52.1"> solution and choose </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.53.1">Add</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.54.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.55.1">New Project</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.56.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.57.1">Search for </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.58.1">bUnit</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.59.1">, select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.60.1">bUnit Test Project</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.61.1"> in the results, and then click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.62.1">Next</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.63.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.63.2">Sometimes, it takes time to find a template, and we can also change the </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.64.1">Project Type</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.65.1"> dropdown to </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.66.1">bUnit</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.67.1"> to find the template. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.67.2">We might need to reboot Visual Studio to find it.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.68.1">Name the project </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.69.1">MyBlog.Tests</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.70.1">, leave the location as is, and click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.71.1">Next</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.72.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.73.1">Select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.74.1">xUnit</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.75.1"> as the unit test framework and target framework: </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.76.1">.NET 8.0</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.77.1">, and click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.78.1">Create</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.79.1">.</span></li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.80.1">Great! </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.80.2">We now have a test project. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.80.3">Before we mock the API, let’s look at the different methods available to us so we can get a feel for how bUnit works.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.81.1">In </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.82.1">MyBlog.Tests</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.83.1">, we should have the following four files:</span></p>
<ul class="calibre4">
<li class="bulletlist"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.84.1">_Imports.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.85.1"> contains the namespaces that we want all of our Razor files to have access to.</span></li>
<li class="bulletlist1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.86.1">Counter.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.87.1"> is a copy of the same </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.88.1">Counter</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.89.1"> components we get by default in the Blazor template.</span></li>
<li class="bulletlist1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.90.1">CounterCSharpTest.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.91.1"> contains tests written in C#.</span></li>
<li class="bulletlist1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.92.1">CounterRazorTest.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.93.1"> contains tests written in Razor.</span></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.94.1">Let’s start with the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.95.1">CounterCSharpTest.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.96.1"> file, which contains two tests: one that checks that the</span><a id="_idIndexMarker519" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.97.1"> counter </span><a id="_idIndexMarker520" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.98.1">starts at </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.99.1">0</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.100.1"> and one that clicks the button and verifies the counter is now </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.101.1">1</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.102.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.102.2">These two simple tests make sense for testing the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.103.1">Counter</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.104.1"> component.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.105.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.106.1">CounterStartsAtZero</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.107.1"> test looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.108.1">[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.109.1">Fact</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.110.1">]
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.111.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.112.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.113.1">CounterStartsAtZero</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.114.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.115.1">
{
    </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.116.1">// Arrange</span></span>
<span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.117.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.118.1"> cut = RenderComponent&lt;Counter&gt;();
    </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.119.1">// Assert that content of the paragraph shows counter</span></span>
<span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.120.1">// at zero</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.121.1">
    cut.Find(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.122.1">"p"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.123.1">).MarkupMatches(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.124.1">"&lt;p&gt;Current count: 0&lt;/p&gt;"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.125.1">);
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.126.1">Let’s break this down. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.126.2">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.127.1">Fact</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.128.1"> attribute tells the test runner that this is a </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.129.1">normal</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.130.1"> test with no parameters. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.130.2">We can also use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.131.1">Theory</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.132.1"> attribute to tell the test runner that the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.133.1">test</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.134.1"> method needs parameter values, but we don’t need parameters for this use case.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.135.1">First, we arrange the test. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.135.2">Simply put, we set up everything we need to do the test. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.135.3">Egil uses </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.136.1">cut</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.137.1"> as the component’s</span><a id="_idIndexMarker521" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.138.1"> name, which stands for </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.139.1">component under testing</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.140.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.141.1">In this case, we run the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.142.1">RenderComponent</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.143.1"> method and pass in the component type, which is the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.144.1">Counter</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.145.1"> component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.145.2">Next, we assert whether the component outputs the correct thing or not. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.145.3">We use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.146.1">Find</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.147.1"> method to find the first paragraph tag and then verify that the HTML looks like </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.148.1">&lt;p&gt;Current count: 0&lt;/p&gt;</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.149.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.150.1">The second </span><a id="_idIndexMarker522" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.151.1">test is </span><a id="_idIndexMarker523" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.152.1">a bit more advanced, and it looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.153.1">[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.154.1">Fact</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.155.1">]
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.156.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.157.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.158.1">ClickingButtonIncrementsCounter</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.159.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.160.1">
{
    </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.161.1">// Arrange</span></span>
<span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.162.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.163.1"> cut = RenderComponent&lt;Counter&gt;();
    </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.164.1">// Act - click button to increment counter</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.165.1">
    cut.Find(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.166.1">"button"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.167.1">).Click();
    </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.168.1">// Assert that the counter was incremented</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.169.1">
    cut.Find(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.170.1">"</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.171.1">p"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.172.1">).MarkupMatches(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.173.1">"&lt;p&gt;Current count: 1&lt;/p&gt;"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.174.1">);
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.175.1">As with the previous test, we start arranging by rendering our </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.176.1">Counter</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.177.1"> component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.177.2">The next step is acting, where we click the button. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.177.3">We look for the button and then click the button in our </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.178.1">Counter</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.179.1"> component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.179.2">There is only one button, so in this case, it’s safe to look for the button this way.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.180.1">Then it’s time to assert again, and we check the markup in the same way as the previous test, but we look for </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.181.1">1</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.182.1"> instead of </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.183.1">0</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.184.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.185.1">There is also another alternative where we can write out tests with Razor syntax. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.185.2">If we look at the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.186.1">CounterRazorTests.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.187.1"> files, we can see the exact same tests but with different syntax:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.188.1">    [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.189.1">Fact</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.190.1">]
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.191.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.192.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.193.1">CounterStartsAtZero</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.194.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.195.1">
    {
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.196.1">// Arrange</span></span>
<span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.197.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.198.1"> cut = Render(@&lt;Counter /&gt;);
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.199.1">// Assert that content of the paragraph shows counter at zero</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.200.1">
        cut.Find(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.201.1">"p"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.202.1">).MarkupMatches(@&lt;p&gt;Current count: </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.203.1">0</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.204.1">&lt;/p&gt;);
    }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.205.1">It is really only the way we render the component that differs. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.205.2">This does the same thing and is only a matter of preference. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.205.3">I prefer using the Razor version; it is easier to read, and it’s also easier to add parameters to our component while testing.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.206.1">Now, let’s run the tests and see whether they pass:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.207.1">In Visual Studio, bring up </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.208.1">Test Explorer</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.209.1"> by searching for it using </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.210.1">Ctrl</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.211.1"> + </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.212.1">Q</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.213.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.213.2">We can also find it in </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.214.1">View</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.215.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.216.1">Test Explorer</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.217.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.218.1">Click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.219.1">Run All Test</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.220.1"> in the view. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.220.2">Test Explorer should look like </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.221.1">Figure 13.1</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.222.1">:</span></li>
</ol>
<figure class="mediaobject"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.223.1"><img alt="Figure 13.1 – Visual Studio Test Explorer " src="../Images/B21849_13_01.png" class="calibre5"/></span></figure>
<p class="packt_figref"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.224.1">Figure 13.1: Visual Studio Test Explorer</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.225.1">Wonderful! </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.225.2">Now, our</span><a id="_idIndexMarker524" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.226.1"> first </span><a id="_idIndexMarker525" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.227.1">test is running and hopefully passing.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.228.1">Next, we will take a look at mocking the API.</span></p>
<h1 class="heading" id="_idParaDest-226"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.229.1">Mocking the API</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.230.1">There are different</span><a id="_idIndexMarker526" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.1"> ways to test our application. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.2">Testing the API is beyond the scope of this book, but we still need to test the components, which are dependent on the API. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.3">We could spin up the API and test against the API, but in this case, we are only interested in testing the Blazor component.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.232.1">We can then mock the API or create a fake copy of the API that doesn’t read from the database but reads from a predefined dataset. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.232.2">This way, we always know what the output should be.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.233.1">Luckily, the interface we created for our API is just what we need to create a mock API.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.234.1">We won’t implement 100% of the tests for the project, so we don’t have to mock all the methods. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.234.2">Please feel free to implement tests for all methods as an exercise at the end of the chapter.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.235.1">There are two ways we can implement the mock API. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.235.2">We could spin up an in-memory database, but to keep </span><a id="_idIndexMarker527" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.236.1">things simple, we will choose the other option and generate posts when we ask for them:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.237.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.238.1">MyBlog.Tests</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.239.1"> project, add a project reference to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.240.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.241.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.242.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.243.1"> project.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.244.1">Create a new class called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.245.1">BlogApiMock.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.246.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.247.1">Add the following namespaces:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.248.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.249.1"> Data.Models;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.250.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.251.1"> Data.Models.Interfaces;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.252.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.253.1"> System.Collections.Generic;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.254.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.255.1"> System.Threading.Tasks;
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.256.1">Implement the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.257.1">IBlogApi</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.258.1"> interface; the class should look like this:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.259.1">internal</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.260.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.261.1">BlogApiMock</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.262.1"> :</span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.263.1">IBlogApi</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.264.1">
{
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.265.1">Now, we will implement each of the methods so we can get data.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="5"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.266.1">For </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.267.1">BlogPost</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.268.1">, add the following code in the class:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.269.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.270.1">async</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.271.1"> Task&lt;BlogPost?&gt; GetBlogPostAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.272.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.273.1"> id)
{
    BlogPost post = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.274.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.275.1">()
    {
        Id = id,
        Text = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.276.1">$"This is a blog post no </span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.277.1">{id}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.278.1">"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.279.1">,
        Title = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.280.1">$"Blogpost </span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.281.1">{id}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.282.1">"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.283.1">,
        PublishDate = DateTime.Now,
        Category = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.284.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.285.1"> GetCategoryAsync(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.286.1">"1"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.287.1">),
    };
    post.Tags.Add(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.288.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.289.1"> GetTagAsync(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.290.1">"1"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.291.1">));
    post.Tags.Add(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.292.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.293.1"> GetTagAsync(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.294.1">"2"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.295.1">));
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.296.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.297.1"> post;
}
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.298.1">public</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.299.1"> Task&lt;</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.300.1">int</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.301.1">&gt; </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.302.1">GetBlogPostCountAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.303.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.304.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.305.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.306.1"> Task.FromResult(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.307.1">10</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.308.1">);
}
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.309.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.310.1">async</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.311.1"> Task&lt;List&lt;BlogPost&gt;?&gt; GetBlogPostsAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.312.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.313.1"> numberofposts, </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.314.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.315.1"> startindex)
    {
        List&lt;BlogPost&gt; list = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.316.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.317.1">();
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.318.1">for</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.319.1"> (</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.320.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.321.1"> a = </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.322.1">0</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.323.1">; a &lt; numberofposts; a++)
        {
            list.Add(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.324.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.325.1"> GetBlogPostAsync(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.326.1">$"</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.327.1">{startindex + a}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.328.1">"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.329.1">));
        }
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.330.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.331.1"> list;
    }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.332.1">When we run the GetBlogPostAsync method, we create a blog post and fill it with predefined information we </span><a id="_idIndexMarker528" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.333.1">can use later in our tests. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.333.2">The same thing goes for getting a list of blog posts.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.334.1">We also say that we have a total of </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.335.1">10</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.336.1"> blog posts in the database.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.337.1">For categories, add the following code:</span></p>
<pre class="programlisting"><code class="hljs-code"> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.338.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.339.1">async</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.340.1"> Task&lt;List&lt;Category&gt;?&gt; GetCategoriesAsync()
    {
        List&lt;Category&gt; list = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.341.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.342.1">();
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.343.1">for</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.344.1"> (</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.345.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.346.1"> a = </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.347.1">0</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.348.1">; a &lt; </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.349.1">10</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.350.1">; a++)
        {
            list.Add(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.351.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.352.1"> GetCategoryAsync(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.353.1">$"</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.354.1">{a}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.355.1">"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.356.1">));
        }
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.357.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.358.1"> list;
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.359.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.1"> Task&lt;Category?&gt; GetCategoryAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.361.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.362.1"> id)
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.363.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.364.1"> Task.FromResult(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.365.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.366.1"> Category() { Id = id, Name = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.367.1">$"Category </span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.368.1">{id}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.369.1">"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.370.1"> });
    }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.371.1">Here, we do the same thing: we create categories named </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.372.1">Category</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.373.1"> followed by a number.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="6"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.374.1">For comments, add the following:
        </span><pre class="programlisting"><code class="hljs-code"> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.375.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.376.1"> Task&lt;List&lt;Comment&gt;&gt; GetCommentsAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.377.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.378.1"> blogPostId)
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.379.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.380.1"> comments= </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.381.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.382.1"> List&lt;Comment&gt;
        {
            </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.383.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.384.1"> Comment { BlogPostId = blogPostId, Date = DateTime.Now, Id = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.385.1">"Comment1"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.386.1">, Name = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.387.1">"Rocket Raccoon"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.388.1">, Text = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.389.1">"I really want that arm!"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.390.1"> }
        };
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.391.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.392.1"> Task.FromResult(comments);
    }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.393.1">Here, we </span><a id="_idIndexMarker529" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.394.1">create a comment.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.395.1">The same thing goes for tags; add the following code:</span></p>
<pre class="programlisting"><code class="hljs-code"> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.396.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.397.1"> Task&lt;Tag?&gt; GetTagAsync(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.398.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.399.1"> id)
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.400.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.401.1"> Task.FromResult(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.402.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.403.1"> Tag() { Id = id, Name = </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.404.1">$"Tag </span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.405.1">{id}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.406.1">"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.407.1"> });
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.408.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.409.1">async</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.410.1"> Task&lt;List&lt;Tag&gt;?&gt; GetTagsAsync()
    {
        List&lt;Tag&gt; list = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.411.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.412.1">();
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.413.1">for</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.414.1"> (</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.415.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.416.1"> a = </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.417.1">0</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.418.1">; a &lt; </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.419.1">10</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.420.1">; a++)
        {
            list.Add(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.421.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.422.1"> GetTagAsync(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.423.1">$"</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.424.1">{a}</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.425.1">"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.426.1">));
        }
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.427.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.428.1"> list;
    }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.429.1">We will not add tests for other methods in the API. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.429.2">We do need to add them to the mock class to fulfill the interface:</span></p>
<pre class="programlisting"><code class="hljs-code"> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.430.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.431.1"> Task&lt;BlogPost?&gt; SaveBlogPostAsync(BlogPost item)
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.432.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.433.1"> Task.FromResult(item);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.434.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.435.1"> Task&lt;Category?&gt; SaveCategoryAsync(Category item)
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.436.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.437.1"> Task.FromResult(item);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.438.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.439.1"> Task&lt;Tag?&gt; SaveTagAsync(Tag item)
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.440.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.441.1"> Task.FromResult(item);
    }     </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.442.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.443.1"> Task&lt;Comment?&gt; SaveCommentAsync(Comment item)
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.444.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.445.1"> Task.FromResult(item);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.446.1">public</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.447.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.448.1">DeleteBlogPostAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.449.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.450.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.451.1"> id</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.452.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.453.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.454.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.455.1"> Task.CompletedTask;
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.456.1">public</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.457.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.458.1">DeleteCategoryAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.459.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.460.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.461.1"> id</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.462.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.463.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.464.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.465.1"> Task.CompletedTask;
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.466.1">public</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.467.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.468.1">DeleteTagAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.469.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.470.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.471.1"> id</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.472.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.473.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.474.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.475.1"> Task.CompletedTask;
    }
  </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.476.1">public</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.477.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.478.1">DeleteCommentAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.479.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.480.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.481.1"> id</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.482.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.483.1">
  {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.484.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.485.1"> Task.CompletedTask;
  }
</span></code></pre>
</li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.486.1">We now have </span><a id="_idIndexMarker530" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.487.1">a mock API that does the same thing repeatedly so we can make reliable tests.</span></p>
<h1 class="heading" id="_idParaDest-227"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.488.1">Writing tests</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.489.1">It’s time to write</span><a id="_idIndexMarker531" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.490.1"> some tests. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.490.2">As I mentioned earlier in the chapter, we won’t create tests for the entire site; we will leave that to you to finish later if you want to. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.490.3">This is just to get a feel for how to write tests:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.491.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.492.1">MyBlog.Tests</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.493.1"> project, create a new folder called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.494.1">Pages</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.495.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.495.2">This is just so we can keep a bit of a structure (the same folder structure as the project we are testing).</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.496.1">Select the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.497.1">Pages</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.498.1"> folder and create a new Razor component called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.499.1">HomeTest.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.500.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.501.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.502.1">_Imports</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.503.1"> file, add the following namespaces:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.504.1">@using SharedComponents.Pages
@using Data.Models.Interfaces
@using SharedComponents.ReusableComponents
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.505.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.506.1">HomeTest.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.507.1"> file, inherit from </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.508.1">TestContext</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.509.1"> by adding the following code:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.510.1">@inherits TestContext
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.511.1">Now, we will add the test. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.511.2">Add the following code:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.512.1">@code{
[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.513.1">Fact(DisplayName =</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.514.1">"Checks that the Home component shows 10 posts"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.515.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.516.1">]
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.517.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.518.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.519.1">Shows10Blogposts</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.520.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.521.1">
    {
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.522.1">// Act</span></span>
<span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.523.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.524.1"> cut = Render(@&lt;Home /&gt;);
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.525.1">// Assert that the content has 10 article tags (each representing a blogpost)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.526.1">
        Assert.Equal(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.527.1">10</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.528.1">,cut.FindAll(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.529.1">"article"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.530.1">).Count());
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.531.1">We give our</span><a id="_idIndexMarker532" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.532.1"> test a display name so we understand what it does. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.532.2">The test is pretty simplistic; we know we have </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.533.1">10</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.534.1"> blog posts from the mock API. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.534.2">We also know that each blog post is rendered within an </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.535.1">article</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.536.1"> tag. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.536.2">We find all </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.537.1">article</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.538.1"> tags and make sure we have </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.539.1">10</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.540.1"> in total.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.541.1">Since we are using injection, we need to configure dependency injection, which we can do in the constructor.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="6"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.542.1">We need to add the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.543.1">HomeTest</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.544.1"> method:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.545.1">public</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.546.1">HomeTest</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.547.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.548.1">
{
      Services.AddScoped&lt;IBlogApi, BlogApiMock&gt;();
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.549.1">This method will run when the class is created, and here, we declare that if the components ask for an instance of </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.550.1">BlogApi</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.551.1">, it will return an instance of our mock API.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.552.1">This works the same way as with Blazor Server, where we return an API that talks directly to the database, and with Blazor WebAssembly, where we return an instance of the API that talks to a web API.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.553.1">In this case, it will return our mock API, which returns data that is easy to test. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.553.2">Now, we need to run the actual test.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="7"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.554.1">Delete the default tests:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.555.1">Counter.razor 
CounterCSharpTests.cs
CounterRazorTests.cs
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.556.1">In Visual Studio, bring up Test Explorer by searching for it using </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.557.1">Ctrl</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.558.1"> + </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.559.1">Q</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.560.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.560.2">We can also </span><a id="_idIndexMarker533" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.561.1">find it in </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.562.1">View</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.563.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.564.1">Test Explorer</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.565.1">.
    </span><p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.566.1">Run our tests to see whether we get a green light, as shown in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.567.1">Figure 13.2</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.568.1">:</span></p></li>
</ol>
<figure class="mediaobject"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.569.1"><img alt="" role="presentation" src="../Images/B21849_13_02.png" class="calibre5"/></span></figure>
<p class="packt_figref"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.570.1">Figure 13.2: Test Explorer with IndexTest</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.571.1">Now, we have a test that checks that 10 posts are rendered.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.572.1">bUnit is an excellent framework for testing, and the fact that it is explicitly written for Blazor so that it takes advantage of Blazor’s power makes it amazing to work with.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.573.1">Now, we have a simplistic test for our blog, but bUnit has support for more advanced</span><a id="_idIndexMarker534" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.574.1"> features, such as authentication.</span></p>
<h2 class="heading1" id="_idParaDest-228"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.575.1">Authentication</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.576.1">Using </span><a id="_idIndexMarker535" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.577.1">bUnit, we can test authentication and </span><a id="_idIndexMarker536" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.578.1">authorization.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.579.1">It is, however, not the components themselves that are doing the authentication. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.579.2">We added </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.580.1">AuthorizeRouteView</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.581.1"> to </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.582.1">App.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.583.1"> in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.584.1">Chapter 8</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.585.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.586.1">Authentication and Authorization</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.587.1">, so testing that in individual components won’t make a difference.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.588.1">But we can use </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.589.1">AuthorizeView</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.590.1">, for example, and we have it in our blog in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.591.1">LoginStatus</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.592.1"> component, which displays a login link when we are not authorized and a logout link when we are authorized. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.592.2">Please feel free to add these tests as we did in the previous section, or use them as a reference.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.593.1">We can use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.594.1">AddTestAuthorization</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.595.1"> method to authorize our tests like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.596.1">    [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.597.1">Fact(DisplayName =</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.598.1">"Checks if log in is showed"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.599.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.600.1">]
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.601.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.602.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.603.1">ShouldShowLogin</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.604.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.605.1">
    {
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.606.1">// Arrange</span></span>
<span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.607.1">this</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.608.1">.AddTestAuthorization();
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.609.1">// Act</span></span>
<span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.610.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.611.1"> cut = Render(@&lt;LoginStatus /&gt;);
        
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.612.1">// Assert that there is a link with the text Log in</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.613.1">
        Assert.Equal(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.614.1">"Log in"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.615.1">,cut.Find(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.616.1">"a"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.617.1">).InnerHtml);
    }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.618.1">This method adds </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.619.1">TestAuthorization</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.620.1"> but is not authorized. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.620.2">The page will then display a link with the text </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.621.1">Log in</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.622.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.622.2">To test when the user is authorized, we just set the user as authorized:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.623.1">    [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.624.1">Fact(DisplayName =</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.625.1">"Checks if logout is showed"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.626.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.627.1">]
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.628.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.629.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.630.1">ShouldShowLogout</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.631.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.632.1">
    {
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.633.1">// Arrange</span></span>
<span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.634.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.635.1"> authContext = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.636.1">this</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.637.1">.AddTestAuthorization();
        authContext.SetAuthorized(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.638.1">"Testuser"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.639.1">, AuthorizationState.Authorized);
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.640.1">// Act</span></span>
<span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.641.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.642.1"> cut = Render(@&lt;LoginStatus /&gt;);
       
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.643.1">// Assert that there is a link with the text Log out</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.644.1">
        Assert.Equal(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.645.1">"Log out"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.646.1">,cut.Find(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.647.1">"a"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.648.1">).InnerHtml);
    }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.649.1">We can add claims, roles, and much more. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.649.2">The user we utilize for testing does not correlate with the users or roles in the database; the authorization is mocked by bUnit.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.650.1">Authentication and </span><a id="_idIndexMarker537" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.651.1">authorization could </span><a id="_idIndexMarker538" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.652.1">be tricky to test, but using bUnit is really simple. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.652.2">Testing JavaScript is a bit harder, but bUnit has a solution for that as well.</span></p>
<h2 class="heading1" id="_idParaDest-229"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.653.1">Testing JavaScript</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.654.1">Testing JavaScript is </span><a id="_idIndexMarker539" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.655.1">not </span><a id="_idIndexMarker540" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.656.1">supported by bUnit, which is understandable. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.656.2">We can, however, test the interop ourselves.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.657.1">In this book, we have used the .NET 5 syntax for our JavaScript. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.657.2">In our </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.658.1">SharedComponents\ReusableComponents\BlogButton.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.659.1"> component, we make a JavaScript interop to confirm the deletion of an item.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.660.1">The JavaScript call looks like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.661.1">jsmodule = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.662.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.663.1"> jsRuntime.</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.664.1">InvokeAsync</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.665.1">&lt;</span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.666.1">IJSObjectReference</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.667.1">&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.668.1">"import"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.669.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.670.1">"/_content/SharedComponents/ReusableComponents/BlogButton.razor.js"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.671.1">);
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.672.1">return</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.673.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.674.1"> jsmodule.</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.675.1">InvokeAsync</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.676.1">&lt;bool&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.677.1">"showConfirm"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.678.1">, </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.679.1">ConfirmMessage</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.680.1">);
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.681.1">We make sure that we load the JavaScript module and then execute the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.682.1">showConfirm</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.683.1"> method.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.684.1">JavaScript testing in bUnit can be done in two modes – </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.685.1">strict</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.686.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.687.1">loose</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.688.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.688.2">The default value is </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.689.1">strict</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.690.1">, so we need to specify every module and every method.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.691.1">If we choose </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.692.1">loose</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.693.1">, all methods will just return the default value. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.693.2">For a Boolean, it would return </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.694.1">false</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.695.1">, for example.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.696.1">To test the preceding JavaScript call, we can do that by adding something like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.697.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.698.1"> moduleInterop = </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.699.1">this</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.700.1">.</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.701.1">JSInterop</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.702.1">.</span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.703.1">SetupModule</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.704.1">(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.705.1">"/_content/SharedComponents/ReusableComponents/BlogButton.razor.js"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.706.1">);
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.707.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.708.1"> showconfirm = moduleInterop.</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.709.1">Setup</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.710.1">&lt;bool&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.711.1">"showConfirm"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.712.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.713.1">"Are you sure?"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.714.1">).</span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.715.1">SetResult</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.716.1">(</span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.717.1">true</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.718.1">);
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.719.1">We set up a module with the same path to JavaScript as before. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.719.2">Then, we specify the method and any parameters.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.720.1">Lastly, we specify what the result should be. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.720.2">In this case, we return </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.721.1">true</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.722.1">, which would return from JavaScript if we want to delete the item. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.722.2">We could also verify whether the JavaScript method is being called. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.722.3">A complete example for testing this in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.723.1">ItemList</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.724.1"> component</span><a id="_idIndexMarker541" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.725.1"> would </span><a id="_idIndexMarker542" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.726.1">look like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.727.1">@using Data.Models; @using SharedComponents.ReusableComponents;
@inherits TestContext
@code {
    [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.728.1">Fact(DisplayName = </span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.729.1">"Test if js method 'showConfirm' is called upon using JS interop"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.730.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.731.1">]
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.732.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.733.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.734.1">ShouldShowConfirm</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.735.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.736.1">
    {
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.737.1">// Arrange</span></span>
<span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.738.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.739.1"> moduleInterop = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.740.1">this</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.741.1">.JSInterop.SetupModule(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.742.1">"/_content/SharedComponents/ReusableComponents/BlogButton.razor.js"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.743.1">);
        moduleInterop.Setup&lt;</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.744.1">bool</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.745.1">&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.746.1">"showConfirm"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.747.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.748.1">"</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.749.1">Are you sure?"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.750.1">).SetResult(</span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.751.1">true</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.752.1">);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.753.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.754.1"> cut = Render(@&lt;BlogButton OnClick=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.755.1">"()=&gt;{}"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.756.1"> ConfirmMessage=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.757.1">"Are you sure?"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.758.1">/&gt;);
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.759.1">// Act</span></span>
<span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.760.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.761.1"> buttons = cut.FindAll(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.762.1">"button"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.763.1">);
        buttons.First().Click();
        </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.764.1">// Assert</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.765.1">
        JSInterop.VerifyInvoke(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.766.1">"showConfirm"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.767.1">);
}
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.768.1">Great job! </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.768.2">We now have tests in our project. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.768.3">Even though we aren’t covering all the components, we should have all the building blocks to complete the tests.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.769.1">If you want to learn more about bUnit, check out the following link: </span><a href="https://bunit.dev/docs/getting-started/index.html" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.770.1">https://bunit.dev/docs/getting-started/index.html</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.771.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.772.1">Their documentation is fantastic.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.773.1">It is good to know that it is also possible to use other testing frameworks. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.773.2">We use a combination of Playwright tests and bUnit but we test completely different things. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.773.3">You can find </span><a id="_idIndexMarker543" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.774.1">Playwright</span><a id="_idIndexMarker544" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.775.1"> here: </span><a href="https://playwright.dev/dotnet/docs/intro" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.776.1">https://playwright.dev/dotnet/docs/intro</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.777.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.778.1">Before we summarize this chapter, we have one more thing to talk about.</span></p>
<h1 class="heading" id="_idParaDest-230"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.779.1">Blazm extension</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.780.1">There are things that </span><a id="_idIndexMarker545" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.781.1">are a bit tedious when developing Blazor applications. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.781.2">We have done many of those things throughout the book. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.781.3">I tend to spell things wrong when I code, and when creating an isolated CSS or JavaScript file, I tend to get the name wrong from time to time and even get the file extension wrong. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.781.4">So, I thought, is there a better way to do this?</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.782.1">Yes, there is!</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.783.1">I built a Visual Studio extension that will add some very nice features to Visual Studio.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.784.1">But why in the world have I waited so long to talk about this!? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.784.2">Well, it’s important to learn the “real” way first, then take the shortcuts. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.785.1">You can check out the extension here: </span><a href="https://marketplace.visualstudio.com/items?itemName=EngstromJimmy.BlazmExtension" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.786.1">https://marketplace.visualstudio.com/items?itemName=EngstromJimmy.BlazmExtension</span></span></a></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.787.1">It can help us add a code-behind file and isolated CSS and JavaScript files. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.787.2">It can also help us move namespaces into the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.788.1">_imports</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.789.1"> file and much more. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.789.2">But it can also help us generate tests, not the whole way, but it will help us on the way. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.789.3">Do you remember the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.790.1">Alerts</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.791.1"> component we used in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.792.1">Chapter 4</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.793.1">? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.793.2">We can right-click that component and choose </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.794.1">Generate</span></code> <strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.795.1">bUnit test</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.796.1">, and then as </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.797.1">Razor syntax</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.798.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.798.2">It will generate the code to the clipboard so we can paste it where we want it. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.798.3">It will automatically give us this code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.799.1">@inherits TestContext
@using Bunit
@using SharedComponents.ReusableComponents;
@code
    {
        [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.800.1">Fact</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.801.1">]
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.802.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.803.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.804.1">AlertTest</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.805.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.806.1">
        {
            </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.807.1">//Arrange</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.808.1">
            SharedComponents.ReusableComponents.Alert/AlertStyle style = </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.809.1">default</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.810.1">!;
            </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.811.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.812.1"> cut = Render(@&lt;Alert
                  Style=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.813.1">"@style"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.814.1">
                  &gt;
                  &lt;ChildContent&gt;
&lt;b&gt;ChildContent fragment&lt;/b&gt;&lt;/ChildContent&gt;
                  &lt;/Alert&gt;
);
            </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.815.1">//Act</span></span>
<span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.816.1">//Assert</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.817.1">
        }
    }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.818.1">The result is not perfect as we can see, but it gives us something to stand on. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.818.2">If we were to write a test for</span><a id="_idIndexMarker546" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.819.1"> the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.820.1">Alert</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.821.1"> component, it would look something like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.822.1">[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.823.1">Fact</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.824.1">]
 </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.825.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.826.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.827.1">AlertStyleTest</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.828.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.829.1">
 {
     </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.830.1">//Arrange</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.831.1">
     Alert.AlertStyle style = Alert.AlertStyle.Primary;
     </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.832.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.833.1"> cut = Render(@&lt;Alert Style=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.834.1">"@style"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.835.1">&gt;
     &lt;ChildContent&gt;
         &lt;b&gt;ChildContent fragment&lt;/b&gt;
     &lt;/ChildContent&gt;
 &lt;/Alert&gt;
 );
     </span><span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.836.1">//Act</span></span>
<span class="hljs-comment"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.837.1">//Assert</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.838.1">
     cut.MarkupMatches(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.839.1">"""&lt;div class="</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.840.1">alert alert-primary</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.841.1">" role="</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.842.1">alert</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.843.1">"&gt;&lt;b&gt;ChildContent fragment&lt;/b&gt;&lt;/div&gt;"""</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.844.1">);
 }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.845.1">We had to clean up some namespaces and add an assertion. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.845.2">It’s pretty neat if you ask me, but then</span><a id="_idIndexMarker547" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.846.1"> again, I am pretty biased on this topic. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.846.2">I really hope this extension will help you, and I would love for you to give it a five-star review if you enjoy it.</span></p>
<h1 class="heading" id="_idParaDest-231"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.847.1">Summary</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.848.1">In this chapter, we looked at testing our application. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.848.2">We looked at how we can mock an API to make reliable tests. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.848.3">We also covered how to test JavaScript interop as well as authentication.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.849.1">Tests can speed up our development and, most importantly, build quality. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.849.2">With bUnit combined with dependency injection, it is easy to build tests that can help us test our components.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.850.1">Since we can test every component by itself, we don’t have to log in, navigate to a specific place on our site, and then test the entire page, as many other testing frameworks would have us do.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.851.1">Now, our site contains reusable components, authentication, APIs, Blazor Server, Blazor WebAssembly, authentication, shared code, JavaScript interop, state management, and tests. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.851.2">We only have one more thing to do: ship it!</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.852.1">In the next chapter, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.853.1">Chapter 14</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.854.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.855.1">Deploying to Production</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.856.1">, it’s time to ship.</span></p>
</div>
</body>
</html>
