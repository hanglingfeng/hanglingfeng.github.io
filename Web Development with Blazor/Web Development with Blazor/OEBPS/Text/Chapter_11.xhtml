<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en-US" xml:lang="en-US">
  <head>
    <title>Chapter_11</title>
    <!-- kobo-style -->
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="../../stylesheet.css"/>
<link rel="stylesheet" type="text/css" href="../../page_styles.css"/>
</head>
  <body id="Chapter_11" class="calibre">
<div class="calibre1" id="_idContainer055">
<h1 class="chapternumber"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1.1">11</span></h1>
<div class="calibre13"></div><h1 class="chaptertitle" id="_idParaDest-197"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.2.1">Managing State – Part 2</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.3.1">In this chapter, we continue to look at managing state. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.3.2">Most applications manage state in some form.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.4.1">A state</span><a id="_idIndexMarker447" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.5.1"> is simply information that is persisted in some way. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.5.2">It can be data stored in a database, session states, or even something stored in a URL.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.6.1">The user state</span><a id="_idIndexMarker448" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.7.1"> is stored in memory either in the web browser or on the server. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.7.2">It contains the component hierarchy and the most recently rendered UI (render tree). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.7.3">It also contains the values or fields and properties in the component instances as well as the data stored in service instances in dependency injection.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.1">If we make JavaScript calls, the values we set are also stored in memory. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.2">Blazor Server relies on the circuit (SignalR connection) to hold the user state, and Blazor WebAssembly relies on the browser’s memory. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.3">But when we have a mix of both states, state management becomes a bit trickier. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.4">If we reload the page, the circuit and the memory will be lost. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.5">The same goes for switching pages; if there are no more </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.9.1">InteractiveServer</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.10.1"> components on the page, the SignalR connection will be terminated and the state lost. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.10.2">Managing state is not about handling connections or connection issues but rather how we can keep the data even if we reload the web browser.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.11.1">Saving state between page navigations or sessions improves the user experience and could be the difference between a sale and no sale. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.11.2">Imagine reloading the page and all your items in the shopping cart are gone; the chances are you won’t shop there again.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.12.1">Now imagine returning to a page a week or month later and all those things are still there.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.13.1">In this chapter, we will cover the following topics:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.14.1">Storing data on the server side</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.15.1">Storing data in the URL</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.16.1">Implementing browser storage</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.17.1">Using an in-memory state container service</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.18.1">State management frameworks</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.19.1">Root-level cascading values</span></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.20.1">We have already talked about and even implemented some of these things. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.20.2">Let’s take this opportunity to recap the things we have already talked about, as well as introduce some new techniques.</span></p>
<h1 class="heading" id="_idParaDest-198"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.21.1">Technical requirements</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.22.1">Make sure you have followed the previous chapters or use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.23.1">Chapter10</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.24.1"> folder as a starting point.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.25.1">You can find the source code for this chapter’s end result a</span><a href="https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter11" class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.26.1">t </span><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.27.1">https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter</span></span></a><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.28.1">11</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.29.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.30.1">If you are jumping into this chapter using the code from GitHub, make sure you have added </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.31.1">Auth0</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.32.1"> account information in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.33.1">Settings</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.34.1"> files. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.34.2">You can find the instructions in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.35.1">Chapter 8</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.36.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.37.1">Authentication and Authorization</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.38.1">.</span></p>
<h1 class="heading" id="_idParaDest-199"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.39.1">Storing data on the server side</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.40.1">There</span><a id="_idIndexMarker449" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.41.1"> are many</span><a id="_idIndexMarker450" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.42.1"> different ways in which to store data on the server side. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.42.2">The only thing to remember is that Blazor WebAssembly (or </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.43.1">InteractiveWebAssembly</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.44.1">) will always need an API. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.44.2">Blazor Server (or </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.45.1">InteractiveServer</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.46.1">) doesn’t need an API since we can access the server-side resources directly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.47.1">I have had discussions with many developers regarding APIs or direct access, which all boils down to what you intend to do with the application. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.47.2">If you are building a Blazor Server application and have no interest in moving to Blazor WebAssembly, I would probably go for direct access, as we have done in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.48.1">MyBlog</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.49.1"> project.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.50.1">I would not do direct database queries in the components, though. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.50.2">I would keep them in an API, just not a Web API. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.50.3">As we have seen, exposing those API functions in an API, as we did in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.51.1">Chapter 7</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.52.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.53.1">Creating an API</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.54.1">, does not require a lot of steps. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.54.2">We can always start with direct server access and move to an API if we want to.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.55.1">When it comes to storing data, we can save it in Blob storage, key-value storage, a relational database, a document database, table storage, and so on.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.56.1">There is</span><a id="_idIndexMarker451" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.57.1"> no end to the</span><a id="_idIndexMarker452" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.58.1"> possibilities. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.58.2">If .NET can communicate with the technology, we will be able to use it.</span></p>
<h1 class="heading" id="_idParaDest-200"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.59.1">Storing data in the URL</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.60.1">At first glance, this option might sound horrific but it’s not. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.60.2">Data, in </span><a id="_idIndexMarker453" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.61.1">this case, can be the blog post ID or the page number if we use paging. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.61.2">Typically, the things you want to save in the URL are things you want to be able to link to later on, such as blog posts in our case.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.62.1">To read a parameter from the URL, we use the following syntax:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.63.1">@page </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.64.1">"/posts/{PageNumber:int}"</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.65.1">The URL is </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.66.1">posts</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.67.1"> followed by the page number (for paging through blog posts) of the post.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.68.1">To find that particular route, </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.69.1">PageNumber</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.70.1"> must be an integer; otherwise, the route won’t be found.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.71.1">We also need a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.72.1">public</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.73.1"> parameter with the same name:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.74.1">[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.75.1">Parameter</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.76.1">]
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.77.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.78.1">int</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.79.1"> PageNumber{ </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.80.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.81.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.82.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.83.1">; }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.84.1">If we store data in the URL, we need to make sure to use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.85.1">OnParametersSet</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.86.1"> or </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.87.1">OnParametersSetAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.88.1"> method; otherwise, the data won’t get reloaded if we change the parameter. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.88.2">If the parameter changes, Blazor won’t run </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.89.1">OnInitializedAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.90.1"> again.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.91.1">This is why our </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.92.1">post.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.93.1"> component loads the things that change based on the parameter in the URL in </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.94.1">OnParametersSet</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.95.1">, and loads the things that are not affected by the parameter in </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.96.1">OnInitializedAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.97.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.98.1">We can use optional parameters by specifying them as nullable, like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.99.1">@page </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.100.1">"/post/{PageNumber:int?}"</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.101.1">So this route would match “</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.102.1">/post/</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.103.1">" and “</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.104.1">/post/42</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.105.1">", for example.</span></p>
<h2 class="heading1" id="_idParaDest-201"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.106.1">Route constraints</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.107.1">When we specify what type the parameter should be, this is called</span><a id="_idIndexMarker454" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.108.1"> a </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.109.1">route constraint</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.110.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.110.2">We add a constraint so the match will only happen if the parameter value can be converted into the type we specified.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.111.1">The following constraints are available:</span></p>
<ul class="calibre4">
<li class="bulletlist"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.112.1">bool</span></code></li>
<li class="bulletlist1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.113.1">datetime</span></code></li>
<li class="bulletlist1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.114.1">decimal</span></code></li>
<li class="bulletlist1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.115.1">float</span></code></li>
<li class="bulletlist1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.116.1">guid</span></code></li>
<li class="bulletlist1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.117.1">int</span></code></li>
<li class="bulletlist1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.118.1">long</span></code></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.119.1">The URL elements will be converted in to a </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.120.1">C#</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.121.1"> object. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.121.2">Therefore, it’s important to use an invariant culture when adding them to a URL. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.121.3">string is not part of the list because that is the default behavior.</span></p>
<h2 class="heading1" id="_idParaDest-202"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.122.1">Using a query string</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.123.1">So far, we have only talked about routes that are specified in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.124.1">page</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.125.1"> directive, but we can also read data from the query string.</span></p>
<p class="normal1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.126.1">NavigationManager</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.127.1"> gives us access to the URI, so by using this code, we can access the query string parameters:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.128.1">@inject NavigationManager Navigation
@code{
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.129.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.130.1"> query = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.131.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.132.1"> Uri(Navigation.Uri).Query;
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.133.1">We won’t dig deeper into this, but now we know that it is possible to access query string parameters if we need to.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.134.1">We can also access the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.135.1">query</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.136.1"> parameter using an attribute like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.137.1">[</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.138.1">Parameter, SupplyParameterFromQuery(Name = </span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.139.1">"parameterName"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.140.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.141.1">]
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.142.1">public</span></span> <span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.143.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.144.1"> ParameterFromQuery { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.145.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.146.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.147.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.148.1">; }
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.149.1">This syntax is a bit nicer to work with.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.150.1">Having data in the URL does not really mean storing the data. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.150.2">If we navigate to another page, we need to make sure to include the new URL; otherwise, it would be lost. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.150.3">We can use the browser storage instead if we want to store data that we don’t need to include every time in the URL.</span></p>
<h1 class="heading" id="_idParaDest-203"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.151.1">Implementing browser storage</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.152.1">The browser has a </span><a id="_idIndexMarker455" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.153.1">bunch of different ways of storing data in the web browser. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.153.2">They are handled differently depending on what type we use. </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.154.1">Local storage</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.155.1"> is </span><a id="_idIndexMarker456" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.156.1">scoped to the user’s browser window. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.156.2">The data will still be saved if the user reloads the page or even closes the web browser.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.157.1">The data is also shared across</span><a id="_idIndexMarker457" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.158.1"> tabs. </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.159.1">Session storage</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.160.1"> is scoped to the </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.161.1">Browser</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.162.1"> tab; if you reload the tab, the data will be saved, but if you close the tab, the data will be lost. </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.163.1">SessionsStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.164.1"> is, in a way, safer to use because we avoid risks with bugs that may occur due to multiple tabs manipulating the same values in storage.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.165.1">To be able to access the browser storage, we need to use JavaScript. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.165.2">Luckily, we won’t need to write the code ourselves.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.166.1">In .NET 5, Microsoft introduced </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.167.1">Protected Browser Storage</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.168.1">, which uses data protection in ASP.NET Core and is not available </span><a id="_idIndexMarker458" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.169.1">in WebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.169.2">We can, however, use an open-source library called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.170.1">Blazored.LocalStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.171.1">, which can be used by both Blazor Server and Blazor WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.172.1">But we are here to learn new things, right?</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.173.1">So, let’s implement an interface so that we can use both versions in our app, depending on which hosting model we are using. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.173.2">There is a problem with this implementation. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.173.3">If we are running in </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.174.1">AutoMode</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.175.1">, the state will not be shared between the different hosting models. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.175.2">The solution is to stick to </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.176.1">Blazored.LocalStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.177.1"> in both implementations. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.177.2">But to show the difference between the implementations, we will do both in this case. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.177.3">Please note that this is stored in clear text on the user’s computer, so be careful with what you store.</span></p>
<h2 class="heading1" id="_idParaDest-204"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.178.1">Creating an interface</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.179.1">First, we </span><a id="_idIndexMarker459" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.180.1">need an interface that can read and write to storage:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.181.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.182.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.183.1"> project, create a new folder called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.184.1">Interfaces</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.185.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.186.1">In the new folder, create a new class called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.187.1">IBrowserStorage.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.188.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.189.1">Replace the content in the file with the following code:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.190.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.191.1">SharedComponents.Interfaces</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.192.1">;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.193.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.194.1">interface</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.195.1">IBrowserStorage</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.196.1">
{
    Task&lt;T?&gt; GetAsync&lt;T&gt;(</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.197.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.198.1"> key);
    </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.199.1">Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.200.1">SetAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.201.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.202.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.203.1"> key, </span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.204.1">object</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.205.1">value</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.206.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.207.1">;
    </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.208.1">Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.209.1">DeleteAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.210.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.211.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.212.1"> key</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.213.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.214.1">;
}
</span></code></pre>
</li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.215.1">Now we have an interface containing </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.216.1">get</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.217.1">, </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.218.1">set</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.219.1">, and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.220.1">delete</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.221.1"> methods.</span></p>
<h2 class="heading1" id="_idParaDest-205"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.222.1">Implementing Blazor Server (InteractiveServer)</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.223.1">For Blazor Server, we will use</span><a id="_idIndexMarker460" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.224.1"> protected</span><a id="_idIndexMarker461" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.225.1"> browser storage:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.226.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.227.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.228.1"> project, add a new folder called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.229.1">Services</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.230.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.1">In the new folder, create a new class called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.232.1">BlogProtectedBrowserStorage.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.233.1">.
    </span><p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.234.1">(I realize the naming is overkill, but it will be easier to tell the Blazor Server and the Blazor WebAssembly implementation apart because we will soon create another one.)</span></p></li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.235.1">Open the new file and add the following </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.236.1">using</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.237.1"> statements:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.238.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.239.1"> Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.240.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.241.1"> SharedComponents.Interfaces;
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.242.1">Replace the class with this one:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.243.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.244.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.245.1">BlogProtectedBrowserStorage</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.246.1"> : </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.247.1">IBrowserStorage</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.248.1">
{
    ProtectedSessionStorage Storage { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.249.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.250.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.251.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.252.1">; }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.253.1">public</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.254.1">BlogProtectedBrowserStorage</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.255.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.256.1">ProtectedSessionStorage storage</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.257.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.258.1">
    {
        Storage = storage;
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.259.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.260.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.261.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.262.1">DeleteAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.263.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.264.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.265.1"> key</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.266.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.267.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.268.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.269.1"> Storage.DeleteAsync(key);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.270.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.271.1">async</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.272.1">Task</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.273.1">&lt;</span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.274.1">T</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.275.1">?&gt; </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.276.1">GetAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.277.1">&lt;</span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.278.1">T</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.279.1">&gt;(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.280.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.281.1"> key</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.282.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.283.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.284.1">var</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.285.1">value</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.286.1"> = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.287.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.288.1"> Storage.GetAsync&lt;T&gt;(key);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.289.1">return</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.290.1">value</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.291.1">.Success ? </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.292.1">value</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.293.1">.Value : </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.294.1">default</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.295.1">(T);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.296.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.297.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.298.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.299.1">SetAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.300.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.301.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.302.1"> key, </span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.303.1">object</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.304.1">value</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.305.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.306.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.307.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.308.1"> Storage.SetAsync(key, </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.309.1">value</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.310.1">);
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.311.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.312.1">BlogProtectedBrowserStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.313.1"> class implements the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.314.1">IBrowserStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.315.1"> interface for protected browser storage. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.315.2">We inject a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.316.1">ProtectedSessionStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.317.1"> instance and implement the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.318.1">set</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.319.1">, </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.320.1">get</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.321.1">, and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.322.1">delete</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.323.1"> methods.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="5"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.324.1">In </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.325.1">Program.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.326.1">, add the following namespaces:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.327.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.328.1"> SharedComponents.Interfaces;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.329.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.330.1"> BlazorWebApp.Services;
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.331.1">Add the</span><a id="_idIndexMarker462" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.332.1"> following just</span><a id="_idIndexMarker463" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.333.1"> beneath the line ending with </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.334.1">.AddInteractiveWebAssemblyComponents();</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.335.1">:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.336.1">builder.Services.AddScoped&lt;IBrowserStorage,BlogProtectedBrowserStorage&gt;();
</span></code></pre>
</li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.337.1">We are configuring Blazor to return an instance of </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.338.1">BlogProtectedBrowserStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.339.1"> when we inject </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.340.1">IBrowserStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.341.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.342.1">This is the same as we did with the API. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.342.2">We inject different implementations depending on the platform.</span></p>
<h2 class="heading1" id="_idParaDest-206"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.343.1">Implementing WebAssembly (InteractiveWebAssembly)</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.344.1">For Blazor </span><a id="_idIndexMarker464" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.345.1">WebAssembly, we </span><a id="_idIndexMarker465" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.346.1">will use </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.347.1">Blazored.SessionStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.348.1">:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.349.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.350.1">BlazorWebApp.Client</span></code><strong class="screentext"> </strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.351.1">project, add a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.352.1">NuGet</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.353.1"> reference to </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.354.1">Blazored.SessionStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.355.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.356.1">Add a new folder called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.357.1">Services</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.358.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.359.1">In the new folder, create a new class called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.1">BlogBrowserStorage.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.361.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.362.1">Open the new file and replace the content with the following code:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.363.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.364.1"> Blazored.SessionStorage;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.365.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.366.1"> SharedComponents.Interfaces;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.367.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.368.1">BlazorWebApp.Client.Services</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.369.1">;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.370.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.371.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.372.1">BlogBrowserStorage</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.373.1"> : </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.374.1">IBrowserStorage</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.375.1">
{
    ISessionStorageService Storage { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.376.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.377.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.378.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.379.1">; }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.380.1">public</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.381.1">BlogBrowserStorage</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.382.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.383.1">ISessionStorageService storage</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.384.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.385.1">
    {
        Storage = storage;
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.386.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.387.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.388.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.389.1">DeleteAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.390.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.391.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.392.1"> key</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.393.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.394.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.395.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.396.1"> Storage.RemoveItemAsync(key);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.397.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.398.1">async</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.399.1">Task</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.400.1">&lt;</span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.401.1">T</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.402.1">?&gt; </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.403.1">GetAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.404.1">&lt;</span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.405.1">T</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.406.1">&gt;(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.407.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.408.1"> key</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.409.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.410.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.411.1">return</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.412.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.413.1"> Storage.GetItemAsync&lt;T&gt;(key);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.414.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.415.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.416.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.417.1">SetAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.418.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.419.1">string</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.420.1"> key, </span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.421.1">object</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.422.1">value</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.423.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.424.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.425.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.426.1"> Storage.SetItemAsync(key, </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.427.1">value</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.428.1">);
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.429.1">The implementations of </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.430.1">ProtectedBrowserStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.431.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.432.1">Blazored.SessionStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.433.1"> are pretty similar to one another. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.433.2">The names of the methods are different but the parameters are the same.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="5"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.434.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.435.1">Program.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.436.1"> file, add the following namespaces:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.437.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.438.1"> Blazored.SessionStorage;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.439.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.440.1"> SharedComponents.Interfaces;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.441.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.442.1"> BlazorWebApp.Client.Services;
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.443.1">Just above </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.444.1">await builder.Build().RunAsync();</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.445.1"> add the following:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.446.1">builder.Services.AddBlazoredSessionStorage();
builder.Services.AddScoped&lt;IBrowserStorage, BlogBrowserStorage&gt;();
</span></code></pre>
</li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.447.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.448.1">AddBlazoredSessionStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.449.1"> extension method hooks up everything so that we can start</span><a id="_idIndexMarker466" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.450.1"> using the browser session </span><a id="_idIndexMarker467" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.451.1">storage.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.452.1">Then we add our configuration for </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.453.1">IBrowserStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.454.1">, just as we did with the server, but in this case, we return </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.455.1">BlogBrowserStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.456.1"> when we ask the dependency injection for </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.457.1">IBrowserStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.458.1">.</span></p>
<h2 class="heading1" id="_idParaDest-207"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.459.1">Implementing the shared code</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.460.1">We also need to implement </span><a id="_idIndexMarker468" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.461.1">some code that calls the services we just created:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.462.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.463.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.464.1"> project, open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.465.1">Pages/Admin/BlogPostEdit.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.466.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.466.2">We are going to make a couple of changes to the file.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.467.1">Inject </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.468.1">IBrowserStorage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.469.1">:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.470.1">@inject SharedComponents.Interfaces.IBrowserStorage _storage
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.471.1">Since we can only run JavaScript calls when doing an action (like a click) or in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.472.1">OnAfterRender</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.473.1"> method, let’s create an </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.474.1">OnAfterRenderMethod</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.475.1">:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.476.1">protected</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.477.1">override</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.478.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.479.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.480.1">OnAfterRenderAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.481.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.482.1">bool</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.483.1"> firstRender</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.484.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.485.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.486.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.487.1"> (firstRender &amp;&amp; </span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.488.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.489.1">.IsNullOrEmpty(Id))
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.490.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.491.1"> saved = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.492.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.493.1"> _storage.GetAsync&lt;BlogPost&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.494.1">"EditCurrentPost"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.495.1">);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.496.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.497.1"> (saved != </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.498.1">null</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.499.1">)
        {
           Post = saved;
   StateHasChanged();
        }
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.500.1">await</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.501.1">base</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.502.1">.OnAfterRenderAsync(firstRender);
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.503.1">When we load the component and the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.504.1">Id</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.505.1"> is </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.506.1">null</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.507.1">, this means we are editing a new file, and then we can check whether we have a file saved in browser storage.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.508.1">This</span><a id="_idIndexMarker469" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.509.1"> implementation can only have one file in the drafts and only saves new posts. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.509.2">If we were to edit an existing post, it would not save those changes.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="4"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.510.1">We need our </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.511.1">UpdateHTML</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.512.1"> method to become async. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.512.2">Change the method to look like this:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.513.1">protected</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.514.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.515.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.516.1">UpdateHTMLAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.517.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.518.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.519.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.520.1"> (!</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.521.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.522.1">.IsNullOrEmpty(Post.Text))
    {
        markDownAsHTML = Markdig.Markdown.ToHtml(Post.Text, pipeline);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.523.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.524.1"> (</span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.525.1">string</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.526.1">.IsNullOrEmpty(Post.Id))
        {
            </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.527.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.528.1"> _storage.SetAsync(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.529.1">"EditCurrentPost"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.530.1">, Post);
        }
    }
}
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.531.1">If </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.532.1">Id</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.533.1"> on the blog post is </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.534.1">null</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.535.1">, we will store the post in the browser storage. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.535.2">Make sure to change all the references from </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.536.1">UpdateHTML</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.537.1"> to </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.538.1">UpdateHTMLAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.539.1">.
    </span><p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.540.1">Make sure to await the call as well in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.541.1">OnParametersSetAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.542.1"> method like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.543.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.544.1"> UpdateHTMLAsync();
</span></code></pre></li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="6"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.545.1">There is </span><a id="_idIndexMarker470" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.546.1">one problem with this implementation: we are currently prerendering our components. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.546.2">When we are prerendering, no connection is made to the web browser. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.546.3">There is no state to retrieve. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.546.4">Simply put, we need to disable the prerendering on this component to make it work. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.546.5">So, let’s do that!</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.547.1">Change </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.548.1">@rendermode InteractiveServer</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.549.1"> to:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.550.1">@rendermode @(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.551.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.552.1"> InteractiveServerRenderMode(prerender: </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.553.1">false</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.554.1">))
</span></code></pre>
</li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.555.1">We are done. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.555.2">Now it’s time to test the implementation:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.556.1">Run the project by pressing </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.557.1">Ctrl</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.558.1"> + </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.559.1">F5</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.560.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.561.1">Log in to the site (so we can access the admin tools).</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.562.1">Click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.563.1">Blog posts</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.564.1"> followed by </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.565.1">New blog post</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.566.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.567.1">Type anything in the boxes, and as soon as we type something in the text area, it will save the post to storage.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.568.1">Click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.569.1">Blog posts</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.570.1"> (so we navigate away from our blog post).</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.571.1">Click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.572.1">New blog post</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.573.1"> and all the information will still be there.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.574.1">Press </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.575.1">F12</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.576.1"> to see the browser developer tools. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.576.2">Click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.577.1">Application</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.578.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.579.1">Session storage</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.580.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.581.1">https://localhost:portnumber</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.582.1">.
    </span><p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.583.1">You should see one post with the key </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.584.1">EditCurrentPost</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.585.1">, and the value of that post should be an encrypted string, as seen in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.586.1">Figure 11.1</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.587.1">:</span></p>
<figure class="mediaobject1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.588.1"><img alt="Figure 11.1 – The encrypted protected browser storage " src="../Images/B21849_11_01.png" class="calibre5"/></span></figure>
<p class="packt_figref"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.589.1">Figure 11.1: The encrypted protected browser storage</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.590.1">Let’s test Blazor WebAssembly (InteractiveWebAssembly) next.</span></p></li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="8"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.591.1">Open the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.592.1">EditPost.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.593.1"> file again and change </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.594.1">@rendermode @(new InteractiveServerRenderMode(prerender: false))</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.595.1"> to:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.596.1">@rendermode @(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.597.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.598.1"> InteractiveWebAssemblyRenderMode(prerender: </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.599.1">false</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.600.1">))
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.601.1">You </span><a id="_idIndexMarker471" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.602.1">might need to clean and rebuild your project to make this work.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.603.1">Log in to the site (so we can access the admin tools).</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.604.1">Click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.605.1">Blog posts</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.606.1"> and then </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.607.1">New blog post</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.608.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.608.2">You may notice that there is a delay between loading the page and the components showing up. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.608.3">This is the initial WebAssembly load time to get everything started.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.609.1">Type anything in the boxes, and as soon as we type something in the text area, it will save the post to storage.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.610.1">Click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.611.1">Blog posts</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.612.1"> (so we navigate away from our blog post).</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.613.1">Click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.614.1">New blog post</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.615.1"> and all the information should still be there.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.616.1">Press </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.617.1">F12</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.618.1"> to see the browser developer tools. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.618.2">Click </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.619.1">Application</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.620.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.621.1">Session storage</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.622.1"> | </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.623.1">https://localhost:portnumber</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.624.1">.</span></li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.625.1">You should see one post with the key </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.626.1">EditCurrentPost</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.627.1">, and the value of that post should be a JSON string, as seen in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.628.1">Figure 11.2</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.629.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.630.1">If we were to </span><a id="_idIndexMarker472" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.631.1">change the data in the storage, it would also change in the application, so keep in mind that this is plain text, and the end user can manipulate the data:</span></p>
<figure class="mediaobject"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.632.1"><img alt="Figure 11.2 – Browser storage that is unprotected " src="../Images/B21849_11_02.png" class="calibre5"/></span></figure>
<p class="packt_figref"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.633.1">Figure 11.2: Browser storage that is unprotected</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.634.1">Now, we have implemented protected browser storage for Blazor Server and session storage for Blazor WebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.634.2">The way we can mix and match the hosting model where we need it is a really amazing power of .NET 8.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.635.1">We only have one way left to go through, so let’s make it the most fun.</span></p>
<h1 class="heading" id="_idParaDest-208"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.636.1">Using an in-memory state container service</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.637.1">When it comes to</span><a id="_idIndexMarker473" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.638.1"> in-memory state containers, we simply use dependency injection to keep the instance of the service in memory for the predetermined time (scoped, singleton, or transient).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.639.1">In </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.640.1">Chapter 4</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.641.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.642.1">Understanding Basic Blazor Components</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.643.1">, we discussed how the scope of dependency injections differs from Blazor Server and Blazor WebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.643.2">The big difference for us in this section is the fact that Blazor WebAssembly runs inside the web browser and doesn’t have a connection to the server or other users.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.644.1">To show how the in-memory state works, we will do something that might seem a bit overkill for a blog but it will be cool to see. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.644.2">When we edit our blog post, we will update all the web browsers connected to our blog in real time (I did say overkill).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.645.1">We will have to implement that a bit differently, depending on the host. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.645.2">Let’s start with Blazor Server.</span></p>
<h2 class="heading1" id="_idParaDest-209"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.646.1">Implementing real-time updates on Blazor Server</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.647.1">The implementation for</span><a id="_idIndexMarker474" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.648.1"> Blazor Server can also be used for Blazor WebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.648.2">Since WebAssembly is running in our browser, it would only notify the users connected to the site, which would be just you. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.648.3">But it might be good to know that the same thing works in Blazor Server as well as Blazor WebAssembly:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.649.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.650.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.651.1"> project, in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.652.1">Interfaces</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.653.1"> folder, create an interface called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.654.1">IBlogNotificationService.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.655.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.656.1">Add the following code:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.657.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.658.1"> Data.Models;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.659.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.660.1">SharedComponents.Interfaces</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.661.1">;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.662.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.663.1">interface</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.664.1">IBlogNotificationService</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.665.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.666.1">event</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.667.1"> Action&lt;BlogPost&gt;? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.667.2">BlogPostChanged;
    </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.668.1">Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.669.1">SendNotification</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.670.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.671.1">BlogPost post</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.672.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.673.1">;
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.674.1">We have an action that we can subscribe to when the blog post is updated and a method we can call when we update a post.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.675.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.676.1">Services</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.677.1"> folder in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.678.1">BlazorWebServer</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.679.1"> project, add a new class called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.680.1">BlazorServerBlogNotificationService.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.681.1">.
    </span><p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.682.1">It might seem unnecessary to give the class a name that includes </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.683.1">BlazorServer</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.684.1">, but it makes sure we can easily tell the classes apart.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.685.1">Replace the</span><a id="_idIndexMarker475" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.686.1"> content with the following code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.687.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.688.1"> SharedComponents.Interfaces;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.689.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.690.1"> Data.Models;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.691.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.692.1">BlazorServer.Services</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.693.1">;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.694.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.695.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.696.1">BlazorServerBlogNotificationService</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.697.1"> : </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.698.1">IBlogNotificationService</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.699.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.700.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.701.1">event</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.702.1"> Action&lt;BlogPost&gt;? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.702.2">BlogPostChanged;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.703.1">public</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.704.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.705.1">SendNotification</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.706.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.707.1">BlogPost post</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.708.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.709.1">
    {
        BlogPostChanged?.Invoke(post);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.710.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.711.1"> Task.CompletedTask;
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.712.1">The code is pretty straightforward here. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.712.2">If we call </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.713.1">SendNotification</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.714.1">, it will check whether anyone is listening for the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.715.1">BlogPostChanged</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.716.1"> action and whether to trigger the action.</span></p></li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="4"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.717.1">In </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.718.1">Program.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.719.1">, add the dependency injection:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.720.1">builder.Services.AddSingleton&lt;IBlogNotificationService, BlazorServerBlogNotificationService&gt;();
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.721.1">Whenever we ask for an instance of the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.722.1">IBlogNotificationService</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.723.1"> type, we will get back an instance of </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.724.1">BlazorServerBlogNotificationService</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.725.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.726.1">We add this dependency injection as a singleton. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.726.2">I can’t stress this enough. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.726.3">When using Blazor Server, this will be the same instance for </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.727.1">ALL</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.728.1"> users, so we must be careful when we use </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.729.1">Singleton</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.730.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.731.1">In this case, we want the service to notify all the visitors of our blog that the blog post has changed.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="5"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.732.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.733.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.734.1"> project, open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.735.1">Post.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.736.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.737.1">Add the following code at the top (or close to the top) of the page:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.738.1">@using SharedComponents.Interfaces
@inject IBlogNotificationService _notificationService
@implements IDisposable
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.739.1">We add dependency injection for </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.740.1">IBlogNotificationService</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.741.1"> and we also need to implement </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.742.1">IDisposable</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.743.1"> to prevent any memory leaks.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.744.1">At the top of the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.745.1">OnInitializedAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.746.1"> method, add the following:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.747.1">_notificationService.BlogPostChanged += PostChanged;
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.748.1">We added a listener to the event so we know when we should update the information.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="7"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.749.1">We also need</span><a id="_idIndexMarker476" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.750.1"> the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.751.1">PostChanged</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.752.1"> method, so add this code:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.753.1">private</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.754.1">async</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.755.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.756.1">PostChanged</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.757.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.758.1">BlogPost post</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.759.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.760.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.761.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.762.1"> (BlogPost?.Id == post.Id)
    {
        BlogPost = post;
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.763.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.764.1"> InvokeAsync(()=&gt;</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.765.1">this</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.766.1">.StateHasChanged());
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.767.1">If the parameter has the same ID as the post we are currently viewing, then replace the content with the post in the event and call </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.768.1">StateHasChanged</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.769.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.770.1">Since this is happening on another thread, we need to call </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.771.1">StateHasChanged</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.772.1"> using </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.773.1">InvokeAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.774.1"> so that it runs on the UI thread.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.775.1">We also need to stop listening to the updates by implementing the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.776.1">Dispose</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.777.1"> method. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.777.2">Add the following:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.778.1">void</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.779.1"> IDisposable.Dispose()
{
    _notificationService.BlogPostChanged -= PostChanged;
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.780.1">We remove</span><a id="_idIndexMarker477" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.781.1"> the event listener to prevent any memory leaks.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.782.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.783.1">Post</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.784.1"> component is currently a static rendered component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.784.2">We don’t have any interactivity, so let’s enable that.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.785.1">Add this to the component:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.786.1">@rendermode InteractiveServer
</span></code></pre>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="8"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.787.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.788.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.789.1"> project, open the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.790.1">Pages/Admin/BlogPostEdit.Razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.791.1"> file.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.792.1">When we make changes to our blog post, we need to send a notification as well. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.792.2">At the top of the file, add the following:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.793.1">@using SharedComponents.Interfaces
@inject IBlogNotificationService _notificationService
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.794.1">We add a namespace and inject our notification service.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="10"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.795.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.796.1">UpdateHTMLAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.797.1"> method, add the following just under the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.798.1">!string.IsNullOrEmpty(Post.Text)</span></code> <code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.799.1">if</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.800.1"> statement:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.801.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.802.1"> _notificationService.SendNotification(Post);
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.803.1">Every time we change something, it will now send a notification that the blog post has changed. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.803.2">I do realize that it would make more sense to do this when we save a post, but it makes for a much cooler demo.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.804.1">Let’s start with testing </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.805.1">InteractiveServer</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.806.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.806.2">In </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.807.1">BlogPortEditPage.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.808.1">, change </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.809.1">@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.810.1"> to:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.811.1">@rendermode @(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.812.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.813.1"> InteractiveServerRenderMode(prerender: </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.814.1">false</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.815.1">))
</span></code></pre>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="11"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.816.1">Run the project by pressing </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.817.1">Ctrl</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.818.1"> + </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.819.1">F5</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.820.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.821.1">Copy the URL and open another web browser. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.821.2">We should now have two web </span><a id="_idIndexMarker478" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.822.1">browser windows open showing us the blog.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.823.1">In the first window, open a blog post (doesn’t matter which one), and in the second window, log in and edit the same blog post.</span></li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.824.1">When we change the text of the blog post in the second window, the change should be reflected in real time in the first window.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.825.1">I am constantly amazed how a feature that would be a bit tricky to implement without using Blazor only requires 10 steps (not counting the test), and if we didn’t prepare for the next step, it would take even fewer steps.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.826.1">Next, we will implement the same feature for Blazor WebAssembly, but Blazor WebAssembly runs inside the user’s web browser. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.826.2">There is no real-time communication built in, as with Blazor Server.</span></p>
<h2 class="heading1" id="_idParaDest-210"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.827.1">Implementing real-time updates on Blazor WebAssembly</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.828.1">We already have a lot of things</span><a id="_idIndexMarker479" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.829.1"> in place. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.829.2">We only need to add a real-time messaging system. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.829.3">Since SignalR is both easy to implement and awesome, let’s use that.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.830.1">The first time I used SignalR, my first thought was, “Wait, it can’t be that easy. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.830.2">I must have forgotten something, or something must be missing”. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.830.3">Hopefully, we will have the same experience now.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.831.1">Let’s see whether that still holds true today:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.832.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.833.1">BlazorWebApp</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.834.1"> project, add a new folder called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.835.1">Hubs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.836.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.837.1">In the new folder, create a class called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.838.1">BlogNotificationHub.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.839.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.840.1">Replace the code with the following:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.841.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.842.1"> Data.Models;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.843.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.844.1"> Microsoft.AspNetCore.SignalR;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.845.1">namespace</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.846.1">BlazorWebApp.Hubs</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.847.1">;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.848.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.849.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.850.1">BlogNotificationHub</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.851.1"> : </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.852.1">Hub</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.853.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.854.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.855.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.856.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.857.1">SendNotification</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.858.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.859.1">BlogPost post</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.860.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.861.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.862.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.863.1"> Clients.All.SendAsync(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.864.1">"BlogPostChanged"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.865.1">, post);
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.866.1">The class inherits from the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.867.1">Hub</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.868.1"> class. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.868.2">There is a method called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.869.1">SendNotification</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.870.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.870.2">Keep that name in mind; we will come back to that.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.871.1">We call </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.872.1">Clients.All.SendAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.873.1">, which means we will send a message called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.874.1">BlogPostChanged</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.875.1"> with the content of a blog post.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.876.1">The </span><a id="_idIndexMarker480" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.877.1">name </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.878.1">BlogPostChanged</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.879.1"> is also important, so keep that in mind as well.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="4"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.880.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.881.1">Program.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.882.1"> file, add the following:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.883.1">builder.Services.AddSignalR();
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.884.1">This adds SignalR. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.884.2">We already have access to SignalR since this project is a mix of hosting models.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="5"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.885.1">Add the following namespace:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.886.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.887.1"> BlazorWebApp.Hubs;
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.888.1">Just above </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.889.1">app.MapRazorComponents&lt;App&gt;()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.890.1">, add:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.891.1">app.MapHub&lt;BlogNotificationHub&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.892.1">"/BlogNotificationHub"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.893.1">);
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.894.1">Here, we configure what URL </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.895.1">BlogNotificationHub</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.896.1"> should use. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.896.2">In this case, we are using the same URL as the name of the hub.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.897.1">The URL here is also important. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.897.2">We will use that in just a bit.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="7"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.898.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.899.1">BlazorWebApp.Client</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.900.1">, add a reference to the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.901.1">Microsoft.AspNetCore.SignalR.Client NuGet</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.902.1"> package.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.903.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.904.1">Services</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.905.1"> folder, create a class called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.906.1">BlazorWebAssemblyBlogNotificationService.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.907.1">.
    </span><p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.908.1">In this file, we will implement the SignalR communication.</span></p></li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="9"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.909.1">Add the following namespaces:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.910.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.911.1"> Microsoft.AspNetCore.Components;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.912.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.913.1"> Microsoft.AspNetCore.SignalR.Client;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.914.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.915.1"> Data.Models;
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.916.1">using</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.917.1"> SharedComponents.Interfaces;
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.918.1">Add this class:
        </span><pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.919.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.920.1">class</span></span> <span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.921.1">BlazorWebAssemblyBlogNotificationService</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.922.1"> : </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.923.1">IBlogNotificationService</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.924.1">, </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.925.1">IAsyncDisposable</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.926.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.927.1">public</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.928.1">BlazorWebAssemblyBlogNotificationService</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.929.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.930.1">NavigationManager navigationManager</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.931.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.932.1">
    {
        _hubConnection = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.933.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.934.1"> HubConnectionBuilder()
        .WithUrl(navigationManager.ToAbsoluteUri(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.935.1">"/BlogNotificationHub"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.936.1">))
        .Build();
        _hubConnection.On&lt;BlogPost&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.937.1">"BlogPostChanged"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.938.1">, (post) =&gt;
        {
            BlogPostChanged?.Invoke(post);
        });
        _hubConnection.StartAsync();
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.939.1">private</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.940.1">readonly</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.941.1"> HubConnection _hubConnection;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.942.1">public</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.943.1">event</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.944.1"> Action&lt;BlogPost&gt;? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.944.2">BlogPostChanged;
        
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.945.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.946.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.947.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.948.1">SendNotification</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.949.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.950.1">BlogPost post</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.951.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.952.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.953.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.954.1"> _hubConnection.SendAsync(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.955.1">"</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.956.1">SendNotification"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.957.1">, post);
    }
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.958.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.959.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.960.1"> ValueTask </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.961.1">DisposeAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.962.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.963.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.964.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.965.1"> _hubConnection.DisposeAsync();
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.966.1">A lot is </span><a id="_idIndexMarker481" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.967.1">happening here. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.967.2">The class is implementing </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.968.1">IBlogNotificationService</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.969.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.970.1">IAsyncDisposable</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.971.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.972.1">In the constructor, we use dependency injection to get </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.973.1">NavigationManager</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.974.1"> so we can figure out the URL to the server.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.975.1">Then, we configure the connection to the hub. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.975.2">Then, we specify the URL to the hub; this should be the same as we specified in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.976.1">step 7</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.977.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.978.1">Now, we can configure the hub connection to listen for events. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.978.2">In this case, we listen for the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.979.1">BlogPostChanged</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.980.1"> event, the same name we specified in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.981.1">step 3</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.982.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.982.2">When someone sends the event, the method we specify will run.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.983.1">The method, in this case, triggers the event we have in </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.984.1">IBlogNotificationService</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.985.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.985.2">Then, we start the connection. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.985.3">Since the constructor can’t be async, we won’t await the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.986.1">StartAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.987.1"> method.</span></p>
<p class="normal1"><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.988.1">IBlogNotificationService</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.989.1"> also implements the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.990.1">SendNotification</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.991.1"> method, and we trigger the event with the same name on the hub, which will result in the hub sending the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.992.1">BlogPostChanged</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.993.1"> event to all connected clients.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.994.1">The last thing we do is make sure that we dispose of the hub connection.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="11"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.995.1">In</span><a id="_idIndexMarker482" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.996.1"> the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.997.1">Program.cs </span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.998.1">file, we need to configure dependency injection. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.998.2">Just above </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.999.1">await builder.Build().RunAsync();</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1000.1">, add the following:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1001.1">builder.Services.AddSingleton&lt;IBlogNotificationService, BlazorWebAssemblyBlogNotificationService&gt;();
</span></code></pre>
</li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1002.1">This is where things get a bit tricky, since we have different implementations depending on whether we’re using InteractiveServer or InteractiveWebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1002.2">We need to make sure to run it in the same way both for </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1003.1">EditPost</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1004.1"> and the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1005.1">Post</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1006.1"> component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1006.2">In a mixed scenario like this, it is a better option to always implement it with a SignalR connection because then we can use the same implementation regardless of the hosting model. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1006.3">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1007.1">SharedComponents</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1008.1"> project, open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1009.1">Pages/Admin/BlogPostEdit.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1010.1"> and change </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1011.1">@rendermode @(new InteractiveServerRenderMode(prerender: false))</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1012.1"> to:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1013.1">@rendermode @(</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1014.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1015.1"> InteractiveWebAssemblyRenderMode(prerender: </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1016.1">false</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1017.1">)).
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1018.1">You might need to clean and rebuild the solution to make it work.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="13"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1019.1">Open </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1020.1">Post.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1021.1"> and do the same thing; change </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1022.1">@rendermode InteractiveServer</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1023.1"> to:
        </span><pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1024.1">@rendermode InteractiveWebAssembly.
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1025.1">Now, it’s time to carry out testing, run the project by pressing </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1026.1">Ctrl</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1027.1"> + </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1028.1">F5</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1029.1">.</span></p>
</li>
</ol>
<ol class="numberedlist">
<li class="bulletlist1" value="14"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1030.1">Copy the URL and open another web browser. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1030.2">We should now have two web browser </span><a id="_idIndexMarker483" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1031.1">windows open showing us the blog.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1032.1">In the first window, open a blog post (it doesn’t matter which one), and in the second window, log in and edit the same blog post.</span></li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1033.1">When we change the text of the blog post in the second window, the change should be reflected in real time in the first window.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1034.1">In </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1035.1">13</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1036.1"> steps (not counting testing), we have implemented real-time communication between the server and client, a Blazor WebAssembly client with .NET code running inside the web browser.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1037.1">And no JavaScript!</span></p>
<h2 class="heading1" id="_idParaDest-211"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1038.1">State management frameworks</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1039.1">Speaking of JavaScript, in the </span><a id="_idIndexMarker484" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1040.1">JavaScript framework world of Angular, React, and so on, there are frameworks we can use to manage state (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1041.1">Redux</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1042.1"> and </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1043.1">ngRX</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1044.1">, to name a couple). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1044.2">This is the case for Blazor as well. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1044.3">Very simply, we </span><a id="_idIndexMarker485" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1045.1">have a</span><a id="_idIndexMarker486" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1046.1"> state that we can change using methods; if the state changes, the components that are listening to that change will be notified.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1047.1">There are a bunch of frameworks like that for Blazor. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1047.2">I have personally never used a framework but instead built a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1048.1">Singleton</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1049.1"> service and connected my components to that (basically what these frameworks do).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1050.1">Check out Fluxor or Blazor-State if you want to dive deeper into that. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1050.2">There is another way to share state between components, which is called root-level cascading values.</span></p>
<h1 class="heading" id="_idParaDest-212"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1051.1">Root-level cascading values</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1052.1">Root-level cascading values are a new </span><a id="_idIndexMarker487" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1053.1">feature in .NET 8. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1053.2">This is a great way to share state not only between components but also between different render modes. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1053.3">It will automatically add a cascading value; we have already used this feature, and then we added </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1054.1">AddCascadingAuthenticationState()</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1055.1">, which uses the root-level cascading value in the background.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1056.1">This does not share the value between InteractiveServer and InteractiveWebAssembly, though, but gives us a way to share the state between components without using dependency injection.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1057.1">The really nice </span><a id="_idIndexMarker488" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1058.1">thing is that if the value changes, it will automatically change the parameter and trigger a rerender of the component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1058.2">No special code is needed inside the component. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1058.3">But subscribing to value changes does have a cost, so be careful with how many things you use with root-level cascading values.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1059.1">Usage could look something like this: </span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1060.1">@(Preferences?.DarkTheme)
@code {
    [</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1061.1">CascadingParameter(Name = </span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1062.1">"Preferences"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1063.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1064.1">]
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1065.1">public</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1066.1"> Preferences Preferences { </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1067.1">get</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1068.1">; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1069.1">set</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1070.1">; }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1071.1">And in </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1072.1">Program.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1073.1">:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1074.1">builder.Services.AddCascadingValue&lt;Preferences&gt;(sp =&gt;
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1075.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1076.1"> preferences = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1077.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1078.1"> Preferences { DarkTheme = </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1079.1">true</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1080.1"> };
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1081.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1082.1"> source = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1083.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1084.1"> CascadingValueSource&lt;Preferences&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1085.1">"Preferences"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1086.1">, preferences, isFixed: </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1087.1">false</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1088.1">);
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1089.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1090.1"> source;
});
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1091.1">It is possible to update the values by calling the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1092.1">NotifyChangedAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1093.1"> method on </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1094.1">CascadingValueSource</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1095.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1095.2">An implementation could look something like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1096.1">builder.Services.AddCascadingValue&lt;Preferences&gt;(sp =&gt;
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1097.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1098.1"> preferences = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1099.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1100.1"> Preferences { DarkTheme = </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1101.1">true</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1102.1"> };
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1103.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1104.1"> source = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1105.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1106.1"> CascadingValueSource&lt;Preferences&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1107.1">"Preferences"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1108.1">, preferences, isFixed: </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1109.1">false</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1110.1">);
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1111.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1112.1"> (preferences </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1113.1">is</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1114.1"> INotifyPropertyChanged changed)
        changed.PropertyChanged += (sender, args) =&gt; source.NotifyChangedAsync();
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1115.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1116.1"> source;
});
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1117.1">Here, we are</span><a id="_idIndexMarker489" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1118.1"> using the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1119.1">INotifyPropertyChanged</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1120.1"> interface to call </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1121.1">NotifyChangedAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1122.1"> when we change the property. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1122.2">On GitHub, you can find a full example of this if you want to play further with it.</span></p>
<h1 class="heading" id="_idParaDest-213"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1123.1">Summary</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1124.1">In this chapter, we learned how we can handle state in our application and how we can use local storage to store data, both encrypted and not. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1124.2">We looked at different ways of doing that, and we also made sure to include SignalR to be able to use real-time communication with the server.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1125.1">Almost all applications need to save data in some form. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1125.2">Perhaps it can be settings or preferences. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1125.3">The things we covered in the chapter are the most common ones, but we should also know that there are many open-source projects we can use to persist state. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1125.4">I personally prefer the components to load state from a database when needed be self-contained, and not have to rely on state coming or being somewhere else. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1125.5">This approach has served me well in the past.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1126.1">In the next chapter, we will take a look at debugging. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1126.2">Hopefully, you haven’t needed to know how to debug yet!</span></p>
</div>
</body>
</html>
