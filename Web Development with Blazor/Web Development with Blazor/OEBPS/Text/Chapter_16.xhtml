<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en-US" xml:lang="en-US">
  <head>
    <title>Chapter_16</title>
    <!-- kobo-style -->
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="../../stylesheet.css"/>
<link rel="stylesheet" type="text/css" href="../../page_styles.css"/>
</head>
  <body id="Chapter_16" class="calibre">
<div class="calibre1" id="_idContainer067">
<h1 class="chapternumber"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1.1">16</span></h1>
<h1 class="chaptertitle" id="_idParaDest-253"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.2.1">Going Deeper into WebAssembly</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.3.1">In this chapter, we will go deeper into technologies that are only relevant for Blazor </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.4.1">WebAssembly</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.5.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.6.1">Most things in Blazor can be applied to Blazor Server and Blazor WebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.6.2">Still, since Blazor WebAssembly runs inside the web browser, we can do some things to optimize the code and use other libraries that we can’t use server-side.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.7.1">We will also look at some common problems and how to solve them.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.1">In this chapter, we will cover the following:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.9.1">Exploring the WebAssembly template</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.10.1">.NET WebAssembly build tools</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.11.1">AOT compilation</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.12.1">WebAssembly </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.13.1">Single Instruction, Multiple Data</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.14.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.15.1">SIMD</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.16.1">)</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.17.1">Trimming</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.18.1">Lazy loading</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.19.1">Progressive web apps</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.20.1">Native dependencies</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.21.1">Common problems</span></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.22.1">Some parts of this chapter are a great opportunity to follow along, while other parts are for reference so that you can find the right information when you need it.</span></p>
<h1 class="heading" id="_idParaDest-254"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.23.1">Technical requirements</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.24.1">This chapter is a reference chapter and is not connected with the book’s other chapters. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.24.2">You can find the source code for this chapter’s result at </span><a href="https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter16" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.25.1">https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter16</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.26.1">.</span></p>
<h1 class="heading" id="_idParaDest-255"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.27.1">Exploring the WebAssembly template</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.28.1">The WebAssembly template</span><a id="_idIndexMarker593" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.29.1"> looks slightly different from the templates we looked at in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.30.1">Chapter 2</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.31.1">, Creating Your First Blazor App. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.31.2">In the Blazor Web App template, our entry point is the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.32.1">app.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.33.1"> file. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.33.2">It contains the HTML tags we need to get started. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.33.3">The WebAssembly template had an </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.34.1">Index.html</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.35.1"> file. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.35.2">Let’s create a project so we can take a look:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.36.1">Create a new project and use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.37.1">Blazor WebAssembly Standalone App</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.38.1"> template.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.39.1">Name the project </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.40.1">BlazorWebAssembly</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.41.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.42.1">Leave the defaults as is and press </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.43.1">Create</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.44.1">.</span></li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.45.1">First, in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.46.1">wwwroot</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.47.1"> folder, we have a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.48.1">Index.html</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.49.1"> that has all the CSS, JavaScript, and so on. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.49.2">This is the same content as the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.50.1">App.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.51.1"> file in the Blazor Web App template. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.51.2">We have an </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.52.1">app.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.53.1"> file in the WebAssembly project as well, but that contains the same things as the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.54.1">Routes.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.55.1"> file. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.55.2">So it is a bit confusing if we work with both templates.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.56.1">Let’s take a look at each file but only focus on the things that are specific to WebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.56.2">In </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.57.1">Index.html</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.58.1">, we have some interesting code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.59.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.60.1">div</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.61.1">id</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.62.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.63.1">"app"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.64.1">&gt;</span></span>
    <span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.65.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.66.1">svg</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.67.1">class</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.68.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.69.1">"loading-progress"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.70.1">&gt;</span></span>
        <span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.71.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.72.1">circle</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.73.1">r</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.74.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.75.1">"</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.76.1">40%"</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.77.1">cx</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.78.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.79.1">"50%"</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.80.1">cy</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.81.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.82.1">"50%"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.83.1"> /&gt;</span></span>
        <span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.84.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.85.1">circle</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.86.1">r</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.87.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.88.1">"40%"</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.89.1">cx</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.90.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.91.1">"</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.92.1">50%"</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.93.1">cy</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.94.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.95.1">"50%"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.96.1"> /&gt;</span></span>
    <span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.97.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.98.1">svg</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.99.1">&gt;</span></span>
    <span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.100.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.101.1">div</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.102.1">class</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.103.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.104.1">"loading-progress-text"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.105.1">&gt;&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.106.1">div</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.107.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.108.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.109.1">div</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.110.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.111.1">This is a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.112.1">div</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.113.1">, and the content is a progress bar showing the WebAssembly loading progress. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.113.2">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.114.1">css/app.css</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.115.1"> file, we have this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.116.1">.loading-progress circle:last-child {
    stroke: </span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.117.1">#1b6ec2;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.118.1">
    stroke-dasharray: calc(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.119.1">3.141</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.120.1"> * </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.121.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.122.1">(--blazor-load-percentage, </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.123.1">0</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.124.1">%) * </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.125.1">0.8</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.126.1">), </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.127.1">500</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.128.1">%;
    transition: stroke-dasharray </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.129.1">0.05</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.130.1">s ease-</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.131.1">in</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.132.1">-</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.133.1">out</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.134.1">;
}
.loading-progress-text:after {
    content: </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.135.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.136.1">(--blazor-load-percentage-text, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.137.1">"Loading"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.138.1">);
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.139.1">These are just some of the CSS classes for the loading progress, but what is interesting is that Blazor will give us two CSS values, </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.140.1">--blazor-load-percentage-text</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.141.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.142.1">--blazor-load-percentage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.143.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.143.2">This gives us some indication of how much time is left when loading our WebAssembly app. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.143.3">This is a great way to customize our progress indicator. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.143.4">The content of the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.144.1">div</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.145.1"> will be replaced by the WebAssembly app once it has loaded.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.146.1">If we take a look at </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.147.1">Program.cs</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.148.1">, it contains </span><a id="_idIndexMarker594" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.149.1">a bit more now when we are running WebAssembly standalone:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.150.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.151.1"> builder = WebAssemblyHostBuilder.CreateDefault(args);
builder.RootComponents.Add&lt;App&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.152.1">"#app"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.153.1">);
builder.RootComponents.Add&lt;HeadOutlet&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.154.1">"head::after"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.155.1">);
builder.Services.AddScoped(sp =&gt; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.156.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.157.1"> HttpClient { BaseAddress = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.158.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.159.1"> Uri(builder.HostEnvironment.BaseAddress) });
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.160.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.161.1"> builder.Build().RunAsync();
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.162.1">Here, we set up our WebAssembly project and tell .NET that we want to render the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.163.1">app.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.164.1"> component in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.165.1">HTML</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.166.1"> tag with the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.167.1">id</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.168.1"> app. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.168.2">We also tell .NET to render the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.169.1">HeadOutlet</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.170.1"> as the last child of the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.171.1">head</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.172.1"> tag.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.173.1">Run the project and explore it for a bit. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.173.2">The components inside of the project are the same as the ones we have already looked at in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.174.1">Chapter 4</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.175.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.176.1">Understanding Basic Blazor Components</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.177.1">, so there is nothing new going on there.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.178.1">When we start the project the first time, it takes a couple of seconds to load our app. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.178.2">This is when everything is downloaded and started. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.178.3">The next time our users visit our site, much of the files will be cached and we won’t need to download them again.</span></p>
<h1 class="heading" id="_idParaDest-256"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.179.1">.NET WebAssembly build tools</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.180.1">When it comes to the more “advanced” scenarios, we need additional tooling installed. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.180.2">There are two ways of installing the tools. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.181.1">We can select the </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.182.1">.NET WebAssembly Build Tools</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.183.1"> option when </span><a id="_idIndexMarker595" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.184.1">installing Visual Studio (or add them using the Visual Studio installer) or run the following command in a command prompt (as administrator):</span></p>
<pre class="programlisting1"><code class="hljs-con"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.185.1">dotnet workload install wasm-tools
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.186.1">The .NET WebAssembly build tools are based</span><a id="_idIndexMarker596" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.187.1"> on </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.188.1">Emscripten</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.189.1">, a compiler toolchain for the web platform.</span></p>
<h1 class="heading" id="_idParaDest-257"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.190.1">AOT compilation</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.191.1">By default, the only thing that is running as WebAssembly in a Blazor WebAssembly app is the runtime. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.191.2">Everything else is ordinary .NET assemblies running on the browser using a .NET </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.192.1">Intermediate Language</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.193.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.194.1">IL</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.195.1">) interpreter</span><a id="_idIndexMarker597" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.196.1"> implemented in WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.197.1">I was not too fond of that when I started playing around with Blazor; it felt wasteful to run everything using IL instead of something the browser would understand natively. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.197.2">Then, I thought the browser was running the same code as I would on the server. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.197.3">The same code in the browser! </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.197.4">That is pretty amazing!</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.198.1">However, we have the </span><a id="_idIndexMarker598" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.199.1">option to compile directly to WebAssembly; this is called </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.200.1">ahead-of-time </span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.201.1">(</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.202.1">AOT</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.203.1">) compilation. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.203.2">It has a downside: the app download size will increase, but it will run and load faster.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.204.1">An AOT-compiled app is generally twice the size of an IL-compiled app. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.204.2">AOT will take the .NET code and compile that directly into WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.205.1">AOT does not trim managed assemblies, and more code is needed to represent high-level .NET IL instructions when using native WebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.205.2">That is why the size is much larger, and it is also less compressible over HTTP.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.206.1">AOT is not for everyone; most apps running without AOT will work fine. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.206.2">However, for CPU-intensive apps, there is a lot to gain by using AOT.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.207.1">My ZX Spectrum emulator is one of those apps; it runs many iterations per second, and the performance gain by running AOT for these apps is remarkable.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.208.1">To compile our Blazor WebAssembly project using AOT, we add the following property in the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.209.1">csproj</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.210.1"> file:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.211.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.212.1">PropertyGroup</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.213.1">&gt;</span></span>
  <span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.214.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.215.1">RunAOTCompilation</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.216.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.217.1">true</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.218.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.219.1">RunAOTCompilation</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.220.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.221.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.222.1">PropertyGroup</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.223.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.224.1">AOT compilation is only performed when the app is published. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.224.2">It can take a long time to compile (seven minutes for the ZX Spectrum emulator), so it is pretty nice that we don’t have to wait for that every time we compile our application.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.225.1">However, running in</span><a id="_idIndexMarker599" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.226.1"> release mode may be a problem, so if you want to do a quick test in release mode, temporarily disable the preceding setting.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.227.1">Don’t forget to enable it again; I have some experience in that area.</span></p>
<h1 class="heading" id="_idParaDest-258"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.228.1">WebAssembly Single Instruction, Multiple Data (SIMD)</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.229.1">One </span><a id="_idIndexMarker600" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.230.1">of the new features in .NET7 is SIMD, a type of parallel processing recently added to WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.1">SIMD is a type of computer architecture that allows a CPU to perform the same operation on multiple data points simultaneously, improving the performance of certain kinds of tasks. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.2">SIMD instructions are often used to perform vector arithmetic, in which a single instruction is applied to multiple elements of a vector simultaneously. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.3">SIMD can be beneficial for tasks such as image and video processing, where large amounts of data need to be processed quickly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.232.1">SIMD is enabled by default. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.232.2">To disable SIMD, we need to disable it in the project file like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.233.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.234.1">PropertyGroup</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.235.1">&gt;</span></span>
  <span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.236.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.237.1">WasmEnableSIMD</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.238.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.239.1">false</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.240.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.241.1">WasmEnableSIMD</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.242.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.243.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.244.1">PropertyGroup</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.245.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.246.1">We need to use AOT compilation for SIMD to work.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.247.1">This is beyond the scope of this book, but I wanted to mention it in case this is what you need for your project.</span></p>
<h1 class="heading" id="_idParaDest-259"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.248.1">Trimming</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.249.1">By default, when publishing a Blazor WebAssembly app, trimming</span><a id="_idIndexMarker601" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.250.1"> will be performed. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.250.2">It will remove unnecessary things and, by doing so, reduce the size of the app.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.251.1">If our application uses reflection, the trimmer may have problems identifying what can and cannot be removed.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.252.1">For most applications, the trimming is automatic and will work. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.252.2">To read more about trimming options, you can look here: </span><a href="https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/trimming-options?pivots=dotnet-8-0" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.253.1">https://learn.microsoft.com/en-us/dotnet/core/deploying/trimming/trimming-options?pivots=dotnet-8-0</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.254.1">.</span></p>
<h1 class="heading" id="_idParaDest-260"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.255.1">Lazy loading</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.256.1">When working with Blazor </span><a id="_idIndexMarker602" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.257.1">WebAssembly, one of the challenges is download size. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.257.2">Even though it’s not a big problem, in my opinion, we can do some things to handle the download and loading time. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.257.3">We will get back to this in the </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.258.1">Common problems</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.259.1"> section later in this chapter.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.260.1">When navigating to a Blazor WebAssembly application, all the DLLs for our application and the DLLs from .NET Framework are downloaded. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.260.2">It takes a bit of time to get everything started up. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.260.3">We can load some DLLs when needed by using</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.261.1"> lazy loading</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.262.1"> to solve this.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.263.1">Let’s say that our application is massive where it has a reporting part. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.263.2">Reporting is perhaps not used every day and not used by everyone, and it would make sense to remove that part from the initial download and only load it when we need to.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.264.1">To make that happen, the part we want to lazy load must be in a separate project/DLL. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.264.2">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.265.1">csproj</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.266.1"> file of the Blazor WebAssembly client project, add a reference to the DLL by adding the following code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.267.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.268.1">ItemGroup</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.269.1">&gt;</span></span>
  <span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.270.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.271.1">BlazorWebAssemblyLazyLoad</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.272.1">Include</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.273.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.274.1">"{ASSEMBLY NAME}.dll"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.275.1"> /&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.276.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.277.1">ItemGroup</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.278.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.279.1">The snippet will make sure the file is not downloaded from the start. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.279.2">To load the DLL when we need it, we will use a built-in service called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.280.1">LazyAssemblyLoader</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.281.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.282.1">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.283.1">LazyAssemblyLoader</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.284.1"> service will make a JS interop call to download the assembly and load it into the runtime.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.285.1">We make sure to download the </span><a id="_idIndexMarker603" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.286.1">necessary assemblies/DLLs in the router (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.287.1">App.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.288.1">) so we make sure they are downloaded before we navigate to the component that is using them:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.289.1">@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using Microsoft.Extensions.Logging
@inject LazyAssemblyLoader AssemblyLoader
@inject ILogger&lt;App&gt; Logger
&lt;Router AppAssembly=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.290.1">"@typeof(App).Assembly"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.291.1"> 
    OnNavigateAsync=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.292.1">"@OnNavigateAsync"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.293.1">&gt;
    ...
</span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.293.2">&lt;/Router&gt;
@code {
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.294.1">private</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.295.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.296.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.297.1">OnNavigateAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.298.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.299.1">NavigationContext args</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.300.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.301.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.302.1">try</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.303.1">
           {
               </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.304.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.305.1"> (args.Path == </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.306.1">"{PATH}"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.307.1">)
               {
                   </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.308.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.309.1"> assemblies = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.310.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.311.1"> AssemblyLoader.LoadAssembliesAsync(
                       </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.312.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.313.1">[] { {LIST OF ASSEMBLIES} });
               }
           }
           </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.314.1">catch</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.315.1"> (Exception ex)
           {
               Logger.LogError(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.316.1">"Error: {Message}"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.317.1">, ex.Message);
           }
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.318.1">We need to inject </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.319.1">LazyAssemblyLoader</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.320.1">; it is registered as a singleton by default in a Blazor WebAssembly project.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.321.1">You need to set up an </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.322.1">OnNavigateAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.323.1"> event, and in that method, check the path and make sure to load the assemblies we need.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.324.1">This event can also be used for routable components by doing something similar to this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.325.1">@using System.Reflection
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using Microsoft.Extensions.Logging
@inject LazyAssemblyLoader AssemblyLoader
@inject ILogger&lt;App&gt; Logger
&lt;Router AppAssembly=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.326.1">"@typeof(App).Assembly"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.327.1"> 
    AdditionalAssemblies=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.328.1">"@lazyLoadedAssemblies"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.329.1"> 
    OnNavigateAsync=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.330.1">"</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.331.1">@OnNavigateAsync"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.332.1">&gt;
    ...
</span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.332.2">&lt;/Router&gt;
@code {
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.333.1">private</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.334.1"> List&lt;Assembly&gt; lazyLoadedAssemblies = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.335.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.336.1">();
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.337.1">private</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.338.1">async</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.339.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.340.1">OnNavigateAsync</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.341.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.342.1">NavigationContext args</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.343.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.344.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.345.1">try</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.346.1">
           {
               </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.347.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.348.1"> (args.Path == </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.349.1">"{PATH}"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.350.1">)
               {
                   </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.351.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.352.1"> assemblies = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.353.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.354.1"> AssemblyLoader.LoadAssembliesAsync(
                       </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.355.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.356.1">[] { {LIST OF ASSEMBLIES} });
                   lazyLoadedAssemblies.AddRange(assemblies);
               }
           }
           </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.357.1">catch</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.358.1"> (Exception ex)
           {
               Logger.LogError(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.359.1">"Error: {Message}"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.1">, ex.Message);
           }
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.361.1">We need to replace the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.362.1">{PATH}</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.363.1"> in the preceding snippet with the path where we want to load the assemblies, something like this: </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.364.1">"/fetchdata"</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.365.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.365.2">The </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.366.1">{LIST OF ASSEMBLIES}</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.367.1">, which contains a list of assemblies we wish to load, can be </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.368.1">"sample.dll"</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.369.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.370.1">This makes it possible not to </span><a id="_idIndexMarker604" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.371.1">load the admin interface for the users who don’t have access to it, for example. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.371.2">We can of course trigger the downloading of additional assemblies when it makes sense to do so (and not wait for a user to hit a specific part of the application and then download the assemblies).</span></p>
<h1 class="heading" id="_idParaDest-261"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.372.1">Progressive web apps</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.373.1">Both Blazor Server and Blazor </span><a id="_idIndexMarker605" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.374.1">WebAssembly can create </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.375.1">Progressive Web Apps</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.376.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.377.1">PWAs</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.378.1">), but it is much more common for Blazor WebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.378.2">PWAs make it possible to download our web app and run it as an app on our phone or computer. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.378.3">They will make it possible to add nice-looking icons and launch our website in a web browser without a URL input field, so it will feel more like an app.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.379.1">When creating our project, we select </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.380.1">Progressive Web App</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.381.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.381.2">By doing that, we will get some configuration and JavaScript to set everything up.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.382.1">PWAs are beyond the scope of this book, but there are great resources to get us started. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.382.2">You can find more information</span><a id="_idIndexMarker606" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.383.1"> here: </span><a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/progressive-web-app?view=aspnetcore-8.0&amp;tabs=visual-studio" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.384.1">https://learn.microsoft.com/en-us/aspnet/core/blazor/progressive-web-app?view=aspnetcore-8.0&amp;tabs=visual-studio</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.385.1">.</span></p>
<h1 class="heading" id="_idParaDest-262"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.386.1">Native dependencies</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.387.1">Since we are running</span><a id="_idIndexMarker607" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.388.1"> WebAssembly, we can use WebAssembly assemblies written in other languages in our project. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.388.2">This means that we can use any native dependencies right inside our project.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.389.1">One way is to add C files right into our project. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.389.2">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.390.1">Chapter16</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.391.1"> folder in the repository, you will find an example.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.392.1">I have added a file called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.393.1">Test.c</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.394.1"> with the following content:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.395.1">int</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.396.1">fact</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.397.1">(</span></span><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.398.1">int</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.399.1"> n</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.400.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.401.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.402.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.403.1"> (n == </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.404.1">0</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.405.1">) </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.406.1">return</span></span> <span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.407.1">1</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.408.1">;
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.409.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.410.1"> n * fact(n - </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.411.1">1</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.412.1">);
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.413.1">In the project file, I have added a reference to that file:</span></p>
<pre class="programlisting"><code class="hljs-code"><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.414.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.415.1">ItemGroup</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.416.1">&gt;</span></span>
    <span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.417.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.418.1">NativeFileReference</span></span><span> </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.419.1">Include</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.420.1">=</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.421.1">"Test.c"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.422.1"> /&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.423.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.424.1">ItemGroup</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.425.1">&gt;</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.426.1">In </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.427.1">Home.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.428.1">, I have added the following code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.429.1">@page "/"
@using System.Runtime.InteropServices
</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.430.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.431.1">PageTitle</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.432.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.433.1">Native C</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.434.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.435.1">PageTitle</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.436.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.437.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.438.1">h1</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.439.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.440.1">Native C Test</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.441.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.442.1">h1</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.443.1">&gt;</span></span>
<span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.444.1">&lt;</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.445.1">p</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.446.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.447.1">
    @@fact(3) result: @fact(3)
</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.448.1">&lt;/</span></span><span class="hljs-name"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.449.1">p</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.450.1">&gt;</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.451.1">
@code {
    [DllImport("Test")]
    static extern int fact(int n);
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.452.1">In our C# project, we</span><a id="_idIndexMarker608" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.453.1"> now have a C file that we can call from our Blazor project. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.453.2">It is compiled into WebAssembly, and then we can reference that WebAssembly file (which happens automatically). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.453.3">We can take this even further by using a library that is using a C++ library. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.453.4">Skia is an open-source graphics engine written in C++.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.454.1">Read more here: </span><a href="https://github.com/mono/SkiaSharp" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.455.1">https://github.com/mono/SkiaSharp</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.456.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.456.2">We can add that library to a Blazor WebAssembly app by adding the NuGet package </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.457.1">SkiaSharp.Views.Blazor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.458.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.459.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.460.1">Chapter16</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.461.1"> folder in the repository, you can explore a project called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.462.1">SkiaSharpDemo</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.463.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.464.1">In the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.465.1">Home.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.466.1"> file, I have added the following code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.467.1">&lt;SKCanvasView OnPaintSurface=</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.468.1">"@OnPaintSurface"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.469.1"> /&gt;
@code {
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.470.1">private</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.471.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.472.1">OnPaintSurface</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.473.1">(</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.474.1">SKPaintSurfaceEventArgs e</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.475.1">)</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.476.1">
    {
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.477.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.478.1"> canvas = e.Surface.Canvas;
        canvas.Clear(SKColors.White);
        </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.479.1">using</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.480.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.481.1"> paint = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.482.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.483.1"> SKPaint
        {
            Color = SKColors.Black,
            IsAntialias = </span><span class="hljs-literal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.484.1">true</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.485.1">,
            TextSize = </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.486.1">24</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.487.1">
        };
        canvas.DrawText(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.488.1">"Raccoons are awesome!"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.489.1">, </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.490.1">0</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.491.1">, </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.492.1">24</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.493.1">, paint);
    }
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.494.1">The page will draw </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.495.1">"Raccoons are awesome"</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.496.1"> on the canvas.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.497.1">In this case, we are using a C# library that is using a C++ library.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.498.1">We can even refer to libraries that have already been built with Emscripten directly by adding </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.499.1">object files</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.500.1"> (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.501.1">.o</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.502.1">), </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.503.1">archive files</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.504.1"> (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.505.1">.a</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.506.1">), </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.507.1">bitcode</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.508.1"> (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.509.1">.bc</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.510.1">), and </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.511.1">standalone WebAssembly modules</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.512.1"> (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.513.1">.wasm</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.514.1">). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.514.2">If we find a library written in another language, we could compile that to WebAssembly and then </span><a id="_idIndexMarker609" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.515.1">use it from our Blazor application. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.515.2">This opens up so many doors!</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.516.1">Next, we will look at some common problems I have encountered.</span></p>
<h1 class="heading" id="_idParaDest-263"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.517.1">Common problems</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.518.1">Let’s dive into this one right from the start.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.519.1">The most common comments regarding Blazor WebAssembly are download size and load time. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.519.2">A small project is around 1 MB in size, but I believe the problem is the loading time and not the download size/time since everything is cached and, in most parts of the world, we have access to high-speed internet.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.520.1">There are a couple of solutions to this problem.</span></p>
<h2 class="heading1" id="_idParaDest-264"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.521.1">Progress indicators</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.522.1">When it comes to </span><strong class="screentext"><a id="_idIndexMarker610" class="calibre3"></a></strong><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.523.1">User Experience</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.524.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.525.1">UX</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.526.1">), we can give the users a perceived sense of speed.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.527.1">The default Blazor WebAssembly template has a loading progress indicator, which gives the users something to look at instead of a blank page. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.527.2">It is built so that it is easy to customize using CSS variables. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.527.3">We can use the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.528.1">--blazor-load-percentage</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.529.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.530.1">--blazor-load-percentage-text</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.531.1"> variables to customize and create our progress bar.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.532.1">It doesn’t even have to indicate what is happening; Dragons Mania Legends has comments like “Sewing mini Vikings,” which is obviously not what is going on. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.532.2">So depending on the application we are building, showing something is more important than showing nothing.</span></p>
<h2 class="heading1" id="_idParaDest-265"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.533.1">Prerendering on the server</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.534.1">In previous versions of Blazor, we had to do some magic ourselves to make </span><a id="_idIndexMarker611" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.535.1">prerendering work. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.535.2">But with the new Blazor Web App template, we get this out of the box. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.535.3">Up until now, we have talked about features in Blazor WebAssembly using the Blazor WebAssembly Standalone template; in this section, we are using the Blazor Web App template. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.535.4">The better solution is to run it as </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.536.1">InteractiveAuto</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.537.1">; that way, we get the power of fast loading on the server, and then get WebAssembly without the wait. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.538.1">This is a great and simple way to add SEO to our site.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.539.1">There is one problem: it will load data when rendering on the server, and then again when the WebAssembly loads.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.540.1">There is a way to work around that, which we will take a look at next.</span></p>
<h2 class="heading1" id="_idParaDest-266"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.541.1">Preloading and persisting the state</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.542.1">We don’t want our </span><a id="_idIndexMarker612" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.543.1">component to call the database twice if we can avoid it.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.544.1">If you run the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.545.1">BlazorPrerender</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.546.1"> example and go to the </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.547.1">Weather</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.548.1"> page, you should be able to see it load twice </span><a id="_idIndexMarker613" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.549.1">since the data is random and generated every time we request it.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.550.1">This is the same behavior you see when using </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.551.1">InteractiveServer, InteractiveWebAssembly, and InteractiveAuto</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.552.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.552.2">The page first gets rendered on the server. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.552.3">Then, SignalR or WebAssembly gets hooked up and loads the page again.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.553.1">The source for this example is the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.554.1">BlazorPrerender</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.555.1"> project.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.556.1">We used this technique when we passed information about the logged-in user to WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.557.1">In previous versions of Blazor, we had to add a component called </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.558.1">persist-component-state</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.559.1">, but this component is added by default in .NET 8. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.559.2">This component will render the saved state of the component when it renders on the server, and, when SignalR or WebAssembly takes over, the state is already there.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.560.1">In the Client project and in the component where we want to have the persistence (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.561.1">Weather.razor</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.562.1"> in the sample), we inject a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.563.1">PersistanceComponentState</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.564.1"> and also make the component implement </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.565.1">Idisposable</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.566.1">:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.567.1">@inject PersistentComponentState ApplicationState
@implements IDisposable
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.568.1">We add a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.569.1">PersistingComponentStateSubscription</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.570.1"> component, which saves the data to the application state:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.571.1">private</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.572.1"> PersistingComponentStateSubscription _subscription;
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.573.1">In </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.574.1">OnInitializedAsync</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.575.1">, we register to listen to run code when the component wants to persist the data:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.576.1">_subscription = ApplicationState.RegisterOnPersisting(PersistState);
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.577.1">When we load the data, we </span><a id="_idIndexMarker614" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.578.1">make sure first to check the application state. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.578.2">If the data is </span><a id="_idIndexMarker615" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.579.1">not available, we can continue and make an </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.580.1">HTTP</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.581.1"> request:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.582.1">if</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.583.1"> (ApplicationState.TryTakeFromJson&lt;WeatherForecast[]&gt;(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.584.1">"weatherdata"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.585.1">, </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.586.1">out</span></span> <span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.587.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.588.1"> stored))
{
    forecasts = stored;
}
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.589.1">else</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.590.1">
{
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.591.1">await</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.592.1"> Task.Delay(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.593.1">500</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.594.1">);
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.595.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.596.1"> startDate = DateOnly.FromDateTime(DateTime.Now);
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.597.1">var</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.598.1"> summaries = </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.599.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.600.1">[] { </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.601.1">"Freezing"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.602.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.603.1">"Bracing"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.604.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.605.1">"Chilly"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.606.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.607.1">"Cool"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.608.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.609.1">"Mild"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.610.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.611.1">"Warm"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.612.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.613.1">"Balmy"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.614.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.615.1">"Hot"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.616.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.617.1">"</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.618.1">Sweltering"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.619.1">, </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.620.1">"Scorching"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.621.1"> };
    forecasts = Enumerable.Range(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.622.1">1</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.623.1">, </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.624.1">5</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.625.1">).Select(index =&gt; </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.626.1">new</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.627.1"> WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.628.1">-20</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.629.1">, </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.630.1">55</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.631.1">),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.632.1">It refers to a method that will persist the data in the application state:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.633.1">private</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.634.1"> Task </span></span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.635.1">PersistState</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.636.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.637.1">
{
    ApplicationState.PersistAsJson(</span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.638.1">"</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.639.1">weatherdata"</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.640.1">, forecasts);
    </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.641.1">return</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.642.1"> Task.CompletedTask;
}
</span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.643.1">public</span></span><span> </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.644.1">void</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.645.1">Dispose</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.646.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.647.1">
{
    _subscription.Dispose();
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.648.1">The server will first render the content, and when the server is done, it will respond with the whole page, including a </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.649.1">Base64</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.650.1">-encoded JSON string with data that looks something like this:</span></p>
<pre class="programlisting"><code class="hljs-code"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.651.1">&lt;!--Blazor</span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.652.1">:{</span></span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.653.1">"type"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.654.1">:</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.655.1">"server"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.656.1">,</span></span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.657.1">"</span></span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.658.1">prerenderId"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.659.1">:</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.660.1">"d0b382c5fa7d4b65a8002157a8b6a1 a2"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.661.1">,</span></span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.662.1">"key"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.663.1">:{</span></span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.664.1">"locationHash"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.665.1">:</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.666.1">"F2AAEE86A5A9C5406A2EF4551C02A263059448AC:0"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.667.1">,</span></span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.668.1">"formattedComponentKey"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.669.1">:</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.670.1">""</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.671.1">},</span></span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.672.1">"</span></span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.673.1">sequence"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.674.1">:</span></span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.675.1">0</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.676.1">,</span></span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.677.1">"descriptor"</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.678.1">:</span></span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.679.1">"CfDJ8EzYgDK6\u002BdZLqM2gwGUPDtNbwNLH7VoJxc6/d6CZ4gHE0LtdIMqSoBfSh8OHGynUVW5DKNVBSG4cZBgETzOixExgSkzmqvPY7I58TMjl4XliAJ ae5d2fmVTS7\u002ByDOooQOqVN41jgj\u002BthTcmHEkBng1MukO5/28AsARyCKVXGxlw3cu9ohFo6b38BprF63EPjo7zQqNYRQT2k xkxn9TiFzTga//RyoyQKIwvEkb044SW\u002Bj9tHP1bBt3B8rpE5EATAvbtKEu7yjwUFGb3xsDHvJ6jGAtQOKOXQhKoWM5pp8 z0RMKkxMfeyuQUubu7i48qPSPvvWCnoym79o64FsTlataWG9JeO8V1X9ihTQppyw/</span></span>
<span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.680.1">jkc0RHp9Si49UgCVlEuPWMXTjVSVj7gBizQRc7eT0t2v30NwpBrYHvQS0t\u002BgssPyT\u002BTQWCfEcEc7iMboA/oCSqcAJRTWCcGbWroCIKchU1mdTJj48vAuMKKu5tw6Yqo61V\u002BM4wTR7XJ1ffk0KCQ7lKCqNr2ffNRz1RxjbQX8oVU4s="</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.681.1">}</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.682.1">--&gt;
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.683.1">Since everything we put into the application state is stored as JSON, it is important not to include any sensitive data that we were not thinking of displaying. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.683.2">This is, of course, true for all calls since we are sending data with JSON.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.684.1">We can</span><a id="_idIndexMarker616" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.685.1"> also use </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.686.1">PersistentComponentState</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.687.1"> on </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.688.1">InteractiveServer, InteractiveWebAssembly, and </span></code><code class="inlinecode"><a id="_idIndexMarker617" class="calibre3"></a></code><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.689.1">InteractiveAuto</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.690.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.690.2">I usually turn off prerendering on my websites, but this is great to use if your site needs SEO, for example. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.691.1">Now, we know a couple of common problems and how to solve them.</span></p>
<h1 class="heading" id="_idParaDest-267"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.692.1">Summary</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.693.1">In this chapter, we looked at some of the Blazor WebAssembly-specific things in Blazor. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.693.2">For the most part, we can reuse components in both Blazor Server and Blazor WebAssembly, and we can speed up WebAssembly by using what we learned in this chapter.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.694.1">We also looked at native dependencies, opening up the possibilities to reuse other libraries and mixing languages. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.694.2">If our application doesn’t need to support both scenarios, we can use WebAssembly to the fullest.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.695.1">In the next chapter, we will examine </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.696.1">source generators</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.697.1">.</span></p>
</div>
</body>
</html>
