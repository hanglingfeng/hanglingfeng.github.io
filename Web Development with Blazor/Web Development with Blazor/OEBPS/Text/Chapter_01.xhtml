<?xml version='1.0' encoding='utf-8'?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" lang="en-US" xml:lang="en-US">
  <head>
    <title>Chapter_01</title>
    <!-- kobo-style -->
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link rel="stylesheet" type="text/css" href="../../stylesheet.css"/>
<link rel="stylesheet" type="text/css" href="../../page_styles.css"/>
</head>
  <body id="Chapter_01" class="calibre">
<div class="calibre1" id="_idContainer016">
<h1 class="chapternumber"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.1.1">1</span></h1>
<h1 class="chaptertitle" id="_idParaDest-16"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.2.1">Hello Blazor</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.3.1">Thank you for picking up your copy of </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.4.1">Web Development with Blazor</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.5.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.5.2">This book intends to get you started as quickly and smoothly as possible, chapter by chapter, without you having to read this book from cover to cover before getting your Blazor on.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.6.1">This book will start by guiding you through the most common scenarios you’ll come across when you begin your journey with Blazor and will also dive into a few more advanced scenarios later on. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.6.2">This book aims to show you what Blazor is – Blazor Server, Blazor WebAssembly, Blazor Hybrid, and on top of that, the new </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.7.1">Server-Side Rendering</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.8.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.9.1">SSR</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.10.1">) – and how it </span><a id="_idIndexMarker000" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.11.1">all works practically to help you avoid traps.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.12.1">This is the book’s third edition; much has happened since the first edition. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.12.2">.NET 6 and .NET 7 were released, and for the second edition, I updated the content to reflect the changes and the new functionality we got. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.13.1">This edition has been updated to include all the new things in .NET 8, and let me tell you, that is a lot.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.14.1">I do Blazor presentations all over the world, and there are common questions that I get asked a lot. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.14.2">Without going into too much detail, they are often related to download size or time when it comes to Blazor WebAssembly and continuous connection to Blazor Server. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.14.3">In .NET 8, we can leverage a new mode, SSR, that solves all of these problems in one swift blow. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.14.4">Okay, maybe not all problems, but we are well on our way to solving them. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.14.5">A common belief is that Blazor is WebAssembly, but WebAssembly is just one way of running Blazor. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.14.6">Many books, workshops, and blog posts on Blazor focus heavily on WebAssembly. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.15.1">This book will cover Blazor WebAssembly, Blazor Server, Blazor Hybrid, and SSR. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.15.2">There are a few differences between the different ways of running Blazor; I will point them out as we go along.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.16.1">This first chapter will explore where Blazor came from, what technologies made Blazor possible, and the different ways of running Blazor. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.16.2">We will also touch on which type (Blazor WebAssembly, Blazor Server, or Blazor Hybrid) is best for you.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.17.1">In this chapter, we will cover the following topics:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.18.1">Why Blazor?</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.19.1">Preceding Blazor</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.20.1">Introducing WebAssembly</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.21.1">Introducing .NET 8</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.22.1">Introducing Blazor</span></li>
</ul>
<h1 class="heading" id="_idParaDest-17"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.23.1">Technical requirements</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.24.1">It is recommended that you have some knowledge of .NET before you start, as this book is aimed at .NET developers who want to utilize their skills to make interactive web applications. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.24.2">However, it’s more than possible that you will pick up a few .NET tricks if you are new to the world of .NET.</span></p>
<h1 class="heading" id="_idParaDest-18"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.25.1">Why Blazor?</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.26.1">Not that long ago, I got asked by a random person on Facebook if I work with Blazor.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.27.1">I said, “Yes, yes I do”.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.28.1">He then continued </span><a id="_idIndexMarker001" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.29.1">with a long remark telling me Blazor would never beat Angular, React, or Vue.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.30.1">I see these kinds of remarks quite often, and it’s essential to understand that beating other </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.31.1">Single-Page Application</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.32.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.33.1">SPA</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.34.1">) frameworks has never been the goal. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.34.2">This is not </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.35.1">Highlander</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.36.1">, and there can be more than one.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.37.1">Learning web development has previously been pretty tough. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.37.2">Not only do we need to know ASP.NET for the server but we also need to learn an SPA framework like React, Angular, or Vue.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.38.1">But it doesn’t end there. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.38.2">We also need to learn npm, Bower, and Parcel, as well as JavaScript or TypeScript.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.39.1">We need to understand transpiling and build that into our development pipeline. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.39.2">This is, of course, just the tip of the iceberg; depending on the technology, we need to explore other rabbit holes.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.40.1">Blazor is an excellent choice for .NET developers to write interactive web applications without needing to learn (or keep up with) everything we just mentioned. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.40.2">We can leverage our existing C# knowledge and the packages we use and share code between the server and client.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.41.1">I usually say, “Blazor removes </span><a id="_idIndexMarker002" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.42.1">all the things I hate about web development.” </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.42.2">I guess the saying should be, “Blazor </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.43.1">can</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.44.1"> remove all the things I hate about web development.” </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.44.2">With Blazor, it is still possible to do JavaScript interop and use JavaScript frameworks or other SPA frameworks from within Blazor, but we don’t have to.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.45.1">Blazor has opened a door where I can feel productive and confident I am creating a great user experience for my users, with my existing C# knowledge. </span></p>
<h1 class="heading" id="_idParaDest-19"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.46.1">Preceding Blazor</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.47.1">You probably didn’t get this </span><a id="_idIndexMarker003" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.48.1">book to read about </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.49.1">JavaScript</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.50.1">, but it helps to remember that we came from a pre-Blazor time. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.50.2">I recall that time – the dark times. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.50.3">Many of the concepts used in Blazor are not that far from those used in many JavaScript frameworks, so I will start with a brief overview of where we came from. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.51.1">As developers, we have </span><a id="_idIndexMarker004" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.52.1">many different platforms we can develop for, including desktop, mobile, games, the cloud (or server side), AI, and even IoT. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.52.2">All these platforms have a lot of different languages to choose from, but there is, of course, one more platform: the apps that run inside the browser.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.53.1">I have been a web developer for a long time, and I’ve seen code move from the server to run within the browser. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.53.2">It has changed the way we develop our apps. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.53.3">Frameworks such as Angular, React, Aurelia, and Vue have changed the web from reloading the whole page to updating small parts on the fly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.53.4">This </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.54.1">new</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.55.1"> on-the-fly update method has enabled pages to load quicker, as the perceived load time has been lowered (not necessarily the whole page load).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.56.1">But for many developers, this is an entirely new skill set – that is, switching between a server (most likely C#, if you are reading this book) to a frontend developed in JavaScript. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.56.2">Data objects are written in C# in the backend and then serialized into JSON, sent via an API, and then deserialized into another object written in JavaScript in the frontend.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.57.1">JavaScript used to work differently in different browsers, which jQuery tried to solve by having a common API that was translated into something the web browser could understand. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.57.2">Now, the differences between different web browsers are much more minor, which has rendered jQuery obsolete in many cases.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.58.1">JavaScript differs slightly </span><a id="_idIndexMarker005" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.59.1">from other languages since it is not object-oriented or typed, for example. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.59.2">In 2010, Anders Hejlsberg (known for being C#, Delphi, and Turbo Pascal’s </span><a id="_idIndexMarker006" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.60.1">original language designer) started working on </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.61.1">TypeScript</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.62.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.62.2">This object-oriented language can be compiled/transpiled into JavaScript.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.63.1">You can use Typescript with Angular, React, Aurelia, and Vue, but in the end, it is JavaScript that will run the actual code. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.63.2">Simply put, to create interactive web applications today using JavaScript/TypeScript, you need to switch between languages and choose and keep up with different frameworks.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.64.1">In this book, we will look at this in another way. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.64.2">Even though we will talk about JavaScript, our primary focus will be on developing interactive web applications mainly using C#.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.65.1">Now, we know a bit about the history of JavaScript. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.65.2">JavaScript is no longer the only language that can run within a browser, thanks to WebAssembly, which we will cover in the next section.</span></p>
<h1 class="heading" id="_idParaDest-20"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.66.1">Introducing WebAssembly</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.67.1">In this section, we will look at how </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.68.1">WebAssembly</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.69.1"> works. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.69.2">One way of running Blazor is by using WebAssembly, but for now, let’s focus on what WebAssembly is.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.70.1">WebAssembly is a binary </span><a id="_idIndexMarker007" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.71.1">instruction format that is compiled and, therefore, smaller. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.71.2">It is designed for native speeds, which means that when it comes to speed, it is closer to C++ than it is to JavaScript. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.71.3">When loading JavaScript, the JavaScript files (or inline JavaScript) are downloaded, parsed, optimized, and JIT-compiled; most of those steps are not needed for WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.72.1">WebAssembly has a very strict security model that protects users from buggy or malicious code. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.72.2">It runs within a sandbox and cannot escape that sandbox without going through the </span><a id="_idIndexMarker008" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.73.1">appropriate APIs. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.73.2">Suppose you want to communicate outside WebAssembly, for example, by changing the </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.74.1">Document Object Model</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.75.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.76.1">DOM</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.77.1">) or downloading a file from the web. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.77.2">In that case, you will need to do that with JavaScript interop (more on that later; don’t worry – Blazor will solve this for us).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.78.1">Let’s look at some code to get a bit more familiar with WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.79.1">In this section, we will create an app that sums two numbers and returns the result, written in C (to be honest, this is about the level of C I’m comfortable with).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.80.1">We can compile C into WebAssembly but it requires the installation of some tooling so we will not do </span><a id="_idIndexMarker009" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.81.1">this all the way. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.81.2">The point here is just to give us a feeling of how WebAssembly works under the hood. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.81.3">Consider this code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-built_in"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.82.1">int</span></span><span> </span><span class="hljs-title"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.83.1">main</span></span><span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.84.1">()</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.85.1"> {
  </span><span class="hljs-keyword"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.86.1">return</span></span> <span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.87.1">1</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.88.1">+</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.89.1">2</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.90.1">;
}
</span></code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.91.1">The result of this will be the number </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.92.1">3</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.93.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.94.1">WebAssembly is a stack machine language, which means that it uses a stack to perform its operations.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.95.1">Consider this code:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.96.1">1</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.97.1">+</span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.98.1">2</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.99.1">Most compilers will optimize the code and return </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.100.1">3</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.101.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.102.1">But let’s assume that all the instructions should be executed. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.102.2">This is the way WebAssembly would do things:</span></p>
<ol class="numberedlist">
<li class="bulletlist1" value="1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.103.1">It will start by pushing </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.104.1">1</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.105.1"> onto the stack (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.106.1">instruction: i32.const 1</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.107.1">), followed by pushing </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.108.1">2</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.109.1"> onto the stack (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.110.1">instruction: i32.const 2</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.111.1">). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.111.2">At this point, the stack contains </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.112.1">1</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.113.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.114.1">2</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.115.1">.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.116.1">Then, we must execute the add instruction (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.117.1">i32.add</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.118.1">), which will pop (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.119.1">get</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.120.1">) the two top values (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.121.1">1</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.122.1"> and </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.123.1">2</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.124.1">) from the stack, add them up, and push the new value onto the stack (</span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.125.1">3</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.126.1">).</span></li>
</ol>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.127.1">This demo shows that we can build WebAssembly from C code. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.127.2">Even though we never need to go to this level to understand WebAssembly (Blazor handles all of that for us), we will use C code and other libraries compiled into WebAssembly later in the book (</span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.128.1">Chapter 16</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.129.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.130.1">Going Deeper into WebAssembly</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.131.1">).</span></p>
<div class="packt_tip">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.132.1">OTHER LANGUAGES</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.133.1">Generally, it is only low-level languages that can be compiled into WebAssembly (such as C or Rust). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.133.2">However, there are a plethora of languages that can run on top of WebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.133.3">Here is a great collection of some of these languages: </span><a href="https://github.com/appcypher/awesome-wasm-langs" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.134.1">https://github.com/appcypher/awesome-wasm-langs</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.135.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.136.1">WebAssembly is super performant (near-native speeds) – so performant that game engines have already adopted this technology for that very reason. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.136.2">Unity, as well as Unreal Engine, can be compiled into WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.137.1">Here are a </span><a id="_idIndexMarker010" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.138.1">couple of examples of games running on top of WebAssembly:</span></p>
<ul class="calibre4">
<li class="bulletlist"><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.139.1">Angry Bots (Unity)</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.140.1">: </span><a href="https://beta.unity3d.com/jonas/AngryBots/" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.141.1">https://beta.unity3d.com/jonas/AngryBots/</span></span></a></li>
<li class="bulletlist1"><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.142.1">Doom</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.143.1">: </span><a href="https://wasm.continuation-labs.com/d3demo/" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.144.1">https://wasm.continuation-labs.com/d3demo/</span></span></a></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.145.1">This is a great list of different WebAssembly projects: </span><a href="https://github.com/mbasso/awesome-wasm" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.146.1">https://github.com/mbasso/awesome-wasm</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.147.1">.</span></p>
</div>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.148.1">This section touched the surface of how WebAssembly works; in most cases, you won’t need to know much more. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.148.2">We will dive into how Blazor uses this technology later in this chapter.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.149.1">To write Blazor apps, we can leverage the power of .NET 8, which we’ll look at next.</span></p>
<h1 class="heading" id="_idParaDest-21"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.150.1">Introducing .NET 8</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.151.1">.NET is a platform developed by Microsoft for building different types of applications, including web, mobile, and desktop applications. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.151.2">The .NET team has been working hard on tightening </span><a id="_idIndexMarker011" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.152.1">everything up for us developers for years. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.152.2">They have been making everything simpler, smaller, cross-platform, and open source – not to mention easier to utilize your existing knowledge of .NET development.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.153.1">.NET Core</span><a id="_idIndexMarker012" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.154.1"> was a step toward a more unified .NET. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.154.2">It allowed Microsoft to re-envision the whole .NET platform, build it in a completely new way, and make it run on even more platforms.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.155.1">There were three </span><a id="_idIndexMarker013" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.156.1">different types of .NET runtimes:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.157.1">.NET Framework (full .NET)</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.158.1">.NET Core</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.159.1">Mono/Xamarin</span></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.160.1">Different runtimes had different capabilities and performances. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.160.2">This also meant that creating a .NET Core app (for example) had different tooling and frameworks that needed to be installed.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.161.1">.NET 5 was the </span><a id="_idIndexMarker014" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.162.1">start of our journey toward one single .NET. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.162.2">With this unified toolchain, the experience of creating, running, and so on became the same across all the different project types. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.162.3">“Framework” and “Core” were dropped from the name. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.162.4">.NET 5 is still modular in a similar way to what we are used to, so we do not have to worry that merging all the different .NET versions is going to result in a bloated .NET.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.163.1">Thanks to the .NET platform, you will be able to reach all the platforms we talked about at the beginning of this chapter (web, desktop, mobile, games, the cloud (or server side), AI, and even IoT) using only C# and with the same tooling.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.164.1">Blazor has been around for a while now. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.164.2">In .NET Core 3, the first version of Blazor Server was released, and at Microsoft Build in 2020, Microsoft released Blazor WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.165.1">In .NET 5, we got a lot of new components for Blazor – pre-rendering and CSS isolation to name a couple of things. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.165.2">Don’t worry; we will go through all these things throughout the book.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.166.1">In .NET 6, we got even </span><a id="_idIndexMarker015" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.167.1">more functionality, like Hot Reload, co-located JavaScript, new components, and much more, all of which we will explore throughout the book.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.168.1">In .NET 7, we got even </span><a id="_idIndexMarker016" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.169.1">more enhancements for Blazor developers. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.169.2">We got performance improvements and get/set/after modifiers, among other things.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.170.1">In November 2023, Microsoft released .NET 8, and with that, everything changed. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.170.2">During development, this new way of developing Blazor apps was called “Blazor United,” which is a name they now have updated to simply Blazor. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.170.3">This is the new way of creating Blazor applications and it is an awesome way. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.170.4">But let’s save something for later chapters as well.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.171.1">.NET 8 brought us </span><a id="_idIndexMarker017" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.172.1">performance improvements, native Define, better source generators, and so much more. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.172.2">It is also an LTS (Long-Term Support) version.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.173.1">Looking at the enhancements and number of features, I can only conclude that Microsoft believes in Blazor, and so do I.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.174.1">Now that you know about some of the surrounding technologies, in the next section, it’s time to introduce the main character of this book: Blazor.</span></p>
<h1 class="heading" id="_idParaDest-22"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.175.1">Introducing Blazor</span></h1>
<p class="normal"><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.176.1">Blazor</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.177.1"> is an open-source web UI framework. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.177.2">That’s a lot of buzzwords in the same sentence, but simply put, it means that you can create interactive web applications using HTML, CSS, and C# with </span><a id="_idIndexMarker018" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.178.1">full support for bindings, events, forms and validation, dependency injection, debugging, and much more, with Blazor. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.178.2">We will take a look at these in this book.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.179.1">In 2017, Steve Sanderson (well-known for creating the Knockout JavaScript framework and who works for the ASP.NET team at Microsoft) was about to do a session called </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.180.1">Web Apps can’t really do *that*, can they?</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.181.1"> at the developer conference NDC Oslo.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.182.1">But Steve wanted to show a cool demo, so he thought, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.183.1">Would it be possible to run C# in WebAssembly?</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.184.1"> He found an old inactive project on GitHub called </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.185.1">Dot Net Anywhere</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.186.1">, which was written in C and used tools (similar to what we just did) to compile the C code into WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.187.1">He got a simple console app running in the browser. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.187.2">This would have been a fantastic demo for most people, but Steve wanted to take it further. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.187.3">He thought, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.188.1">Is it possible to create a simple web framework on top of this?</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.189.1">, and went on to see if he could also get the tooling working.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.190.1">When it was time for his session, he had a working sample to create a new project, create a to-do list with great tooling support, and run the project in the browser.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.191.1">Damian Edwards (the .NET team) and David Fowler (the .NET team) were also at the NDC conference. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.191.2">Steve showed them what he was about to demo, and they described the event as their heads exploded and their jaws dropped.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.192.1">And that’s how the prototype of Blazor came into existence.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.193.1">The name Blazor comes from a combination of </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.194.1">Browser</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.195.1"> and </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.196.1">Razor</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.197.1"> (which is the technology used to combine code and HTML). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.197.2">Adding an </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.198.1">L</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.199.1"> made the name sound better, but other than that, it has no real meaning or acronym.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.200.1">There are a few different flavors of Blazor, including Blazor Server, Blazor WebAssembly, Blazor Hybrid (using .NET MAUI), and Server-Side Rendering.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.201.1">The different versions have some pros and cons, all of which I will cover in the upcoming sections and chapters.</span></p>
<h2 class="heading1" id="_idParaDest-23"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.202.1">Blazor Server</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.203.1">Blazor Server </span><a id="_idIndexMarker019" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.204.1">uses SignalR to communicate between the client and the server, as shown in the following diagram:</span></p>
<figure class="mediaobject"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.205.1"><img alt="" role="presentation" src="../Images/B21849_01_01.png" class="calibre5"/></span></figure>
<p class="packt_figref"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.206.1">Figure 1.1: Overview of Blazor Server</span></p>
<p class="normal1"><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.207.1">SignalR</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.208.1"> is an </span><a id="_idIndexMarker020" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.209.1">open-source, real-time communication library that will create a connection between the client and the server. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.209.2">SignalR can use many different means of transporting data and automatically selects the best transport protocol based on your server and client capabilities. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.209.3">SignalR will always try to use WebSockets, which is a transport protocol built into HTML5. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.209.4">If WebSockets is not enabled, it will gracefully fall back to another protocol.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.210.1">Blazor is built </span><a id="_idIndexMarker021" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.211.1">with reusable UI elements called </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.212.1">components</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.213.1"> (more on components in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.214.1">Chapter 4</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.215.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.216.1">Understanding Basic Blazor Components</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.217.1">). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.217.2">Each component contains C# code and markup. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.217.3">A component can include other components. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.217.4">You can use Razor syntax to mix markup and C# code or do everything in C# if you wish. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.217.5">The components can be updated by user interaction (pressing a button) or triggers (such as a timer).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.218.1">The components are rendered into a render tree, a binary representation of the DOM containing object states and any properties or values. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.218.2">The render tree will keep track of any changes compared to the previous render tree, and then send only the things that changed over SignalR using a binary format to update the DOM.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.219.1">JavaScript will receive the changes on the client side and update the page accordingly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.219.2">If we compare this </span><a id="_idIndexMarker022" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.220.1">to traditional ASP.NET, we only render the component itself, not the entire page, and we only send over the actual changes to the DOM, not the whole page.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.221.1">There are </span><a id="_idIndexMarker023" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.222.1">advantages to Blazor Server:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.223.1">It contains just enough code to establish that the connection is downloaded to the client, so the site has a small footprint, which makes the site startup really fast.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.224.1">Since everything is rendered on the server, Blazor Server is more SEO-friendly.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.225.1">Since we are running on the server, the app can fully utilize the server’s capabilities.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.226.1">The site will work on older web browsers that don’t support WebAssembly.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.227.1">The code runs on the server and stays on the server; there is no way to decompile the code.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.228.1">Since the code is executed on your server (or in the cloud), you can make direct calls to services and databases within your organization.</span></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.229.1">There are, of </span><a id="_idIndexMarker024" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.230.1">course, some disadvantages to Blazor Server as well:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.1">You need to always be connected to the server since the rendering is done on the server. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.2">If you have a bad internet connection, the site might not work. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.3">The big difference compared to a non-Blazor Server site is that a non-Blazor Server site can deliver a page and then disconnect until it requests another page. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.231.4">With Blazor, that connection (SignalR) must always be connected (minor disconnections are okay).</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.232.1">There is </span><a id="_idIndexMarker025" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.233.1">no offline/</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.234.1">PWA</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.235.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.236.1">Progressive Web App</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.237.1">) mode since it needs to be connected.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.238.1">Every click or page update must do a round trip to the server, which might result in higher latency. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.238.2">It is important to remember that Blazor Server will only send the changed data. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.238.3">I have not experienced any slow response times personally.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.239.1">Since we have to have a connection to the server, the load on that server increases and makes scaling difficult. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.239.2">To solve this problem, you can use the Azure SignalR hub to handle the constant connections and let your server concentrate on delivering content.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.240.1">Each connection </span><a id="_idIndexMarker026" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.241.1">stores the information in the server’s memory, increasing memory use and making load balancing more difficult.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.242.1">To be able to run Blazor Server, you have to host it on an ASP.NET Core-enabled server.</span></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.243.1">At my workplace, we already had a large site, so we decided to use Blazor Server for our projects. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.243.2">We had a customer portal and an internal CRM tool, and our approach was to take one component at a time and convert it into a Blazor component.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.244.1">We quickly </span><a id="_idIndexMarker027" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.245.1">realized that, in most cases, it was faster to remake the component in Blazor rather than continue to use ASP.NET MVC and add functionality. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.245.2">The </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.246.1">User Experience</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.247.1"> (</span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.248.1">UX</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.249.1">) for the </span><a id="_idIndexMarker028" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.250.1">end-user became even better as we converted.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.251.1">The pages loaded faster. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.251.2">We could reload parts of the page as we needed instead of the whole page, and so on.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.252.1">We found that Blazor introduced a new problem: the pages became </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.253.1">too</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.254.1"> fast. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.254.2">Our users didn’t understand whether data had been saved because </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.255.1">nothing happened</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.256.1">; things </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.257.1">did</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.258.1"> happen, but too fast for the users to notice. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.258.2">Suddenly, we had to think more about UX and how to inform the user that something had changed. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.258.3">This is, of course, a very positive side effect of Blazor.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.259.1">Blazor Server is not the only way to run Blazor – you can also run it on the client (in the web browser) using WebAssembly.</span></p>
<h2 class="heading1" id="_idParaDest-24"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.260.1">Blazor WebAssembly</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.261.1">There is </span><a id="_idIndexMarker029" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.262.1">another option: instead of running Blazor on a server, you can run it inside your web browser using WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.263.1">The Mono runtime is a tool that lets you run programs made with C# and other .NET languages on various operating systems, not just Windows.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.264.1">Microsoft has taken the Mono runtime (which is written in C) and compiled that into WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.265.1">The WebAssembly version of Blazor works very similarly to the server version, as shown in the following diagram. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.265.2">We have moved everything off the server, and it is now running within our web browser:</span></p>
<figure class="mediaobject"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.266.1"><img alt="" role="presentation" src="../Images/B21849_01_02.png" class="calibre5"/></span></figure>
<p class="packt_figref"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.267.1">Figure 1.2: Overview of Blazor WebAssembly</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.268.1">A render tree is still created, and instead of running the Razor pages on the server, they are now running </span><a id="_idIndexMarker030" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.269.1">inside our web browser. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.269.2">Instead of SignalR, since WebAssembly doesn’t have direct DOM access, Blazor updates the DOM with direct JavaScript interop.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.270.1">The Mono runtime that’s </span><a id="_idIndexMarker031" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.271.1">compiled into WebAssembly is called </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.272.1">dotnet.wasm</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.273.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.273.2">The page contains a small piece of JavaScript that will make sure to load </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.274.1">dotnet.wasm</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.275.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.275.2">Then, it will download </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.276.1">blazor.boot.json</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.277.1">, a JSON file containing all the files the application needs to run, as well as the application’s entry point.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.278.1">If we look at the default sample site that is created when we start a new Blazor project in Visual Studio, the </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.279.1">Blazor.boot.json</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.280.1"> file contains 63 dependencies that need to be downloaded. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.280.2">All the dependencies get downloaded and the app boots up.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.281.1">As we mentioned previously, </span><code class="inlinecode"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.282.1">dotnet.wasm</span></code><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.283.1"> is the mono runtime that’s compiled into WebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.283.2">It runs .NET DLLs – the ones you have written and the ones from .NET Framework (which is needed to run your app) – in your browser.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.284.1">When I first heard of this, I got a bit of a bad taste. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.284.2">It’s running the whole .NET runtime in my browser?! </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.284.3">But then, after a while, I realized how amazing that is. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.284.4">You can run any .NET Standard DLLs in your web browser.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.285.1">In the next </span><a id="_idIndexMarker032" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.286.1">chapter, we will look at exactly what happens and in what order code gets executed when a WebAssembly app boots up.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.287.1">There are, of </span><a id="_idIndexMarker033" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.288.1">course, some advantages of Blazor WebAssembly:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.289.1">Since the code </span><a id="_idIndexMarker034" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.290.1">runs in the browser, creating a </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.291.1">PWA</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.292.1"> is easy.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.293.1">It does not require a connection to the server. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.293.2">Blazor WebAssembly will work offline.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.294.1">Since we’re not running anything on the server, we can use any backend server or file share (no need for a .NET-compatible server in the backend).</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.295.1">No round trips mean that you can update the screen faster (that is why there are game engines that use WebAssembly).</span></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.296.1">There are </span><a id="_idIndexMarker035" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.297.1">some disadvantages to Blazor WebAssembly as well:</span></p>
<ul class="calibre4">
<li class="bulletlist"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.298.1">Even if we compare it to other large sites, the footprint of Blazor WebAssembly is large and there are a large number of files to download.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.299.1">To access any on-site resources, you will need to create a Web API to access them. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.299.2">You cannot access the database directly.</span></li>
<li class="bulletlist1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.300.1">The code runs in the browser, meaning it can be decompiled. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.300.2">All app developers are used to this, but it is perhaps not as common for web developers.</span></li>
</ul>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.301.1">I wanted to put WebAssembly to the test! </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.301.2">When I was seven years old, I got my first computer, a Sinclair ZX Spectrum. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.301.3">I remember that I sat down and wrote the following:</span></p>
<pre class="programlisting"><code class="hljs-code"><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.302.1">10</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.303.1"> PRINT </span><span class="hljs-string"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.304.1">"Jimmy"</span></span>
<span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.305.1">20</span></span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.306.1"> GOTO </span><span class="hljs-number"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.307.1">10</span></span>
</code></pre>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.308.1">That was </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.309.1">my</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.310.1"> code; I made the computer write my name on the screen over and over!</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.311.1">That was when I decided that I wanted to become a developer to make computers do stuff.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.312.1">After becoming a developer, I wanted to revisit my childhood and decided I wanted to build a ZX Spectrum emulator. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.312.2">In many ways, the emulator has become my test project instead of a simple </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.313.1">Hello World</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.314.1"> when I encounter new technology. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.314.2">I’ve had it running on a Gadgeteer, Xbox One, and even a HoloLens (to name a few platforms/devices).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.315.1">But is it possible to run my emulator in Blazor?</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.316.1">It took me only </span><a id="_idIndexMarker036" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.317.1">a couple of hours to get the emulator working with Blazor WebAssembly by leveraging my already built .NET Standard DLL; I only had to write the code specific to this implementation, such as the keyboard and graphics. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.317.2">This is one of the reasons Blazor (both Server and WebAssembly) is so powerful: it can run libraries that have already been made. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.317.3">Not only can you leverage your knowledge of C# but you can also take advantage of the large ecosystem and .NET community.</span></p>
<div class="packt_tip">
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.318.1">You can find the emulator here: </span><a href="http://zxbox.com" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.319.1">http://zxbox.com</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.320.1">. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.320.2">This is one of my favorite projects to work on, as I keep finding ways to optimize and improve the emulator.</span></p>
</div>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.321.1">Building interactive web applications used to only be possible with JavaScript. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.321.2">Now, we know we can use Blazor WebAssembly and Blazor Server, but which one of these new options is the best?</span></p>
<h2 class="heading1" id="_idParaDest-25"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.322.1">Blazor WebAssembly versus Blazor Server</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.323.1">Which one should we choose? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.323.2">The answer is, as always, it depends. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.323.3">You have seen the advantages </span><a id="_idIndexMarker037" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.324.1">and disadvantages of both.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.325.1">If you have a current site that you want to port over to Blazor, I recommend going for the server side; once you have ported it, you can make a new decision as to whether you want to go for WebAssembly as well. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.325.2">This way, it is easy to port parts of the site, and the debugging experience is better with Blazor Server.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.326.1">Suppose your site runs on a mobile browser or another unreliable internet connection. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.326.2">In that case, you might consider going for an offline-capable (PWA) scenario with Blazor WebAssembly since Blazor Server needs a constant connection.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.327.1">The startup time for WebAssembly is a bit slow, but there are ways to combine the two hosting models to have the best of both worlds. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.327.2">We will cover this in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.328.1">Chapter 16</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.329.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.330.1">Going Deeper into WebAssembly</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.331.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.332.1">There is no silver bullet when it comes to this question, but read up on the advantages and disadvantages and see how they affect your project and use cases.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.333.1">With .NET 8, we have more opportunities to mix and match the different technologies, so the question </span><a id="_idIndexMarker038" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.334.1">becomes less relevant since we can choose to have one specific component running Blazor Server and another running Blazor WebAssembly (more on that later in this chapter).</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.335.1">We can run Blazor server-side and on the client, but what about desktop and mobile apps?</span></p>
<h2 class="heading1" id="_idParaDest-26"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.336.1">Blazor Hybrid/.NET MAUI</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.337.1">.NET MAUI is a cross-platform application framework. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.337.2">The name comes from </span><strong class="screentext"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.338.1">.NET Multi-platform App UI</span></strong><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.339.1"> and is the next version of Xamarin. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.339.2">We can use traditional XAML code to create our </span><a id="_idIndexMarker039" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.340.1">cross-platform application just as with Xamarin. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.340.2">However, .NET MAUI also targets desktop operating systems that will enable running our Blazor app on Windows and even macOS.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.341.1">.NET MAUI has </span><a id="_idIndexMarker040" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.342.1">its own template that enables us to run Blazor inside of a .NET MAUI application using a Blazor WebView. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.342.2">This is called Blazor Hybrid. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.342.3">Blazor Hybrid works in a similar way to the other hosting models (Blazor Server and Blazor WebAssembly). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.342.4">It has a render tree and updates the Blazor WebView, which is a browser component in .NET MAUI. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.342.5">This is a bit oversimplified perhaps but we have a whole chapter on Blazor Hybrid (</span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.343.1">Chapter 18</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.344.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.345.1">Visiting .NET MAUI</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.346.1">). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.346.2">Using Blazor Hybrid, we also get access to native APIs (not only Web APIs), making it possible to take our application to another level.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.347.1">We will take a look at .NET MAUI in </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.348.1">Chapter 18</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.349.1">, </span><em class="italic"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.350.1">Visiting .NET MAUI</span></em><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.351.1">.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.352.1">Sometimes we don’t need interactive components, we just need to render some content and be done. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.352.2">In .NET 8, we have a new way of doing that.</span></p>
<h2 class="heading1" id="_idParaDest-27"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.353.1">Server-Side Rendering (SSR)</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.354.1">Server-side rendering is the new kid on the Blazor block. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.354.2">It makes it possible to use the Razor syntax </span><a id="_idIndexMarker041" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.355.1">to build web pages that are rendered server-side just like MVC or Razor Pages. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.355.2">This is called Static Server-side Rendering. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.355.3">It has some additional features that will keep scrolling in the previous position even though the whole page is reloaded, which is called enhanced form navigation. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.355.4">This will only render static pages, with no interactivity (with a few exceptions). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.355.5">There is also something called streaming rendering that will load the page even faster. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.355.6">This mode is called streaming server-side rendering. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.355.7">During long-running tasks, streaming rendering will first send the HTML it has and then update the DOM once the long-running task is complete, giving it a more interactive feeling. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.356.1">But sometimes we want interactivity, and choosing between Blazor Server or Blazor WebAssembly can be a bit hard. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.356.2">But what if I told you we don’t have to choose anymore? </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.356.3">We can mix it up.</span></p>
<h2 class="heading1" id="_idParaDest-28"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.357.1">The feature formerly known as Blazor United</span></h2>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.358.1">This next feature was called “Blazor United” when Microsoft first spoke of it but is now simply part of Blazor, not an </span><a id="_idIndexMarker042" class="calibre3"></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.359.1">extra feature. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.359.2">I still want to mention the name because the community still uses it, and chances are you might have heard it and are wondering why I am not mentioning it.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.1">It is a really cool feature: we can pick and choose what components will run using SSR and what components will use Blazor Server, Blazor WebAssembly, or (hope you are sitting down for this) a mix of the two. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.2">Previously, we had to choose one of the two (Blazor Server or Blazor WebAssembly), but now we can combine the technologies to get the best of both worlds. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.3">We can now tell each component how we want it to render and we can mix and match throughout the site. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.4">The new “auto” feature means the first time our users visit the site, they will run Blazor Server. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.5">This is to get a quick connection and get data to the user as quickly as possible. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.6">In the background, the WebAssembly version is downloaded and cached so the next time they visit the site, it will use the cached Blazor WebAssembly version. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.7">If the WebAssembly version can be downloaded and started within 100 milliseconds, it will load only the WebAssembly version. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.8">If it takes longer, it will start up Blazor Server and download in the background. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.9">This is one of the ways we can speed up the download speed of our Blazor site. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.360.10">We can combine all of these technologies, pre-render the content on the server using Static Server-side Rendering, make the site interactive using Blazor Server (using SignalR), and then switch over to Blazor WebAssembly without the “long” download time. </span></p>
<h1 class="heading" id="_idParaDest-29"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.361.1">Summary</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.362.1">In this chapter, we discussed how Blazor was created and its underlying technologies, such as SignalR and WebAssembly. </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.362.2">You also learned about the render tree and how the DOM gets updated to give you an understanding of how Blazor works under the hood.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.363.1">We got an overview of the different technologies you can use with Blazor, such as server-side (Blazor Server), client-side (WebAssembly), desktop, and mobile (Blazor Hybrid). </span><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.363.2">This overview should have helped you decide what technology to choose for your next project.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.364.1">We talked about why Blazor is a good choice for .NET developers. </span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.365.1">We looked at SSR and (according to me) the most exciting feature in .NET 8 for Blazor, what was known as Blazor United.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.366.1">In the upcoming chapters, I will walk you through various scenarios to equip you with the knowledge to handle everything from upgrading an old/existing site and creating a new server-side site to creating a new WebAssembly site.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.367.1">In the next chapter, we’ll get our hands dirty by configuring our development environment and creating and examining our first Blazor app.</span></p>
<h1 class="heading" id="_idParaDest-30"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.368.1">Further reading</span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.369.1">As a .NET developer, you might be interested in Uno Platform (</span><a href="https://platform.uno/" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.370.1">https://platform.uno/</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.371.1">), which makes it possible to create a UI in XAML and deploy it to many different platforms, including WebAssembly.</span></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.372.1">If you want to see how the ZX Spectrum emulator is built, you can download the source code here: </span><a href="https://github.com/EngstromJimmy/ZXSpectrum" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.373.1">https://github.com/EngstromJimmy/ZXSpectrum</span></span></a><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.374.1">.</span></p>
<h1 class="heading" id="_idParaDest-31"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.375.1">Join our community on Discord </span></h1>
<p class="normal"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.376.1">Join our community’s Discord space for discussions with the author and other readers: </span></p>
<p class="normal1"><a href="https://packt.link/WebDevBlazor3e" class="calibre3"><span class="calibre3"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.377.1">https://packt.link/WebDevBlazor3e</span></span></a></p>
<p class="normal1"><span xmlns="http://www.w3.org/1999/xhtml" class="kobospan" id="kobo.378.1"><img alt="" role="presentation" src="../Images/QR_Code2668029180838459906.png" class="calibre5"/></span></p>
</div>
</body>
</html>
