<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>Chapter_12</title>
  <link href="../Styles/syntax-highlighting.css" rel="stylesheet" type="text/css"/>
  <link href="../Styles/epub.css" rel="stylesheet" type="text/css"/>
</head>

<body id="Chapter_12" lang="en-US" xml:lang="en-US">
  <div id="_idContainer078" class="Basic-Text-Frame">
    <h1 class="chapterNumber">12</h1>
    <h1 id="_idParaDest-215" class="chapterTitle">Debugging the Code</h1>
    <p class="normal">In this chapter, we will take a look at debugging. The debugging experience of Blazor is a good one; hopefully, you haven’t gotten stuck earlier on in the book and had to jump to this chapter.</p>
    <p class="normal">Debugging code is an excellent way to solve bugs, understand the workflow, or look at specific values. Blazor has three different ways to debug code, and we will look at each one.</p>
    <p class="normal">In this chapter, we will cover the following:</p>
    <ul>
      <li class="bulletList">Making things break</li>
      <li class="bulletList">Debugging Blazor Server</li>
      <li class="bulletList">Debugging Blazor WebAssembly</li>
      <li class="bulletList">Debugging Blazor WebAssembly in the browser</li>
      <li class="bulletList">Hot Reload</li>
    </ul>
    <p class="normal">To debug something, we should first make something break!</p>
    <h1 id="_idParaDest-216" class="heading-1">Technical requirements</h1>
    <p class="normal">Make sure you have followed the previous chapters or use the <code class="inlineCode">Chapter11</code> folder as a starting point.</p>
    <p class="normal">You can find the source code for this chapter’s end result at <a href="https://github.com/PacktPublishing/Web-Development-with-Blazor-Second-Edition/tree/main/Chapter12"><span class="url">https://github.com/PacktPublishing/Web-Development-with-Blazor-Second-Edition/tree/main/Chapter12</span></a>.</p>
    <div class="note">
      <p class="normal">If you are jumping into this chapter using the code from GitHub, make sure you have added Auth0 account information in the settings files. You can find the instructions in <em class="chapterRef">Chapter 8</em>, <em class="italic">Authentication and Authorization</em>.</p>
    </div>
    <h1 id="_idParaDest-217" class="heading-1">Making things break</h1>
    <p class="normal">Edsger W. Dijkstra once said,</p>
    <p class="normal"><em class="italic">“If debugging is the process of removing software bugs, then programming must be the process of putting them in.”</em></p>
    <p class="normal">This is definitely true in this section because we will add a page that will throw an exception:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">In the <strong class="screenText">Components</strong> project, in the <code class="inlineCode">Pages</code> folder, create a new Razor component called <code class="inlineCode">ThrowException.razor</code>.</li>
      <li class="numberedList">Replace the contents of the file with the following code block:
        <pre class="programlisting code"><code class="hljs-code">@page "/ThrowException"
<span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"@(()=&gt; {throw new Exception("</span><span class="hljs-attr">Something</span><span class="hljs-tag"> </span><span class="hljs-attr">is</span><span class="hljs-tag"> </span><span class="hljs-attr">broken</span><span class="hljs-tag">"); })"&gt;</span>Throw an exception<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
    </ol>
    <p class="normal">This page shows a button, and when you press it, it throws an exception.</p>
    <p class="normal">Great! We have our application’s Ivan Drago (he wants to break you, but we might just beat him with some fancy debugging).</p>
    <p class="normal">The next step is to take a look at Blazor Server debugging.</p>
    <h1 id="_idParaDest-218" class="heading-1">Debugging Blazor Server</h1>
    <p class="normal">If you have debugged<a id="_idIndexMarker495"></a> any .NET application in the past, you will feel right at home. Don’t worry; we will go through it if you haven’t. Debugging Blazor Server is just as we might expect and is the best debugging experience of the three different types we will cover.</p>
    <p class="normal">I usually keep my Razor pages in a shared library, and while building my project, I use Blazor Server for two reasons. First, running the project is a bit faster, and second, the debugging experience is better.</p>
    <p class="normal">Let’s give it a try!</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Set <strong class="screenText">BlazorServer</strong> as a startup project.</li>
      <li class="numberedList">Press <em class="keystroke">F5</em> to start the project (this time with debugging).</li>
      <li class="numberedList">Using the web browser, navigate to <code class="inlineCode">https://localhost:portnumber/throwexception</code> (the port number may vary).</li>
      <li class="numberedList">Press <em class="keystroke">F12</em> to show the web browser developer tools.</li>
      <li class="numberedList">In the developer tools, click <strong class="screenText">Console</strong>.</li>
      <li class="numberedList">Click the <strong class="screenText">Throw exception</strong> button on our page.
    <p class="normal">At this <a id="_idIndexMarker496"></a>point, Visual Studio should request focus and it should show the exception as shown in <em class="italic">Figure 12.1</em>:</p>
    <figure class="mediaobject"><img src="../Images/B18549_12_01.png" alt="Figure 12.1 – Exception in Visual Studio "/></figure>
    <p class="packt_figref">Figure 12.1: Exception in Visual Studio</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Press <em class="keystroke">F5</em> to continue and switch back to the web browser. We should now be able to see the exception message in the developer tools as shown in <em class="italic">Figure 12.2</em>:</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18549_12_02.png" alt="Figure 12.2 – Exception in the web browser"/></figure>
    <p class="packt_figref">Figure 12.2: Exception in the web browser</p>
    <p class="normal">As we can see in <em class="italic">Figure 12.1</em> and <em class="italic">Figure 12.2</em>, we get the exception both in Visual Studio while debugging and also in the developer tools.</p>
    <p class="normal">This makes it quite easy to find the problem if there is an exception in an app in production (perish the thought) – that feature has saved us many times.</p>
    <p class="normal">Now let’s try a breakpoint:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">In Visual Studio, open <code class="inlineCode">Components/Pages/Index.razor</code>.</li>
      <li class="numberedList">Anywhere in the <code class="inlineCode">LoadPosts</code> method, set a breakpoint by clicking the leftmost border (making a red dot appear). We can also add a breakpoint by pressing <em class="keystroke">F9</em>.</li>
      <li class="numberedList">Go back to the web browser and navigate to <code class="inlineCode">https://localhost:portnumber/</code> (the port number may vary).</li>
    </ol>
    <p class="normal">Visual Studio <a id="_idIndexMarker497"></a>should now hit the breakpoint, and by hovering over variables, we should be able to see the current values.</p>
    <p class="normal">Both breakpoints and exception debugging work as we might expect. Next, we will take a look at debugging Blazor WebAssembly.</p>
    <h1 id="_idParaDest-219" class="heading-1">Debugging Blazor WebAssembly</h1>
    <p class="normal">Blazor WebAssembly <a id="_idIndexMarker498"></a>can, of course, be debugged as well, but there are some things we need to think about. Since we have our exception page in our shared library, we can go straight into debugging.</p>
    <p class="normal">But let’s start with breakpoints:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Set <strong class="screenText">BlazorWebAssembly.Server</strong> as the startup project.</li>
      <li class="numberedList">Press <em class="keystroke">F5</em> to debug the project.</li>
    </ol>
    <p class="normal">Here we can notice the first difference – assuming we still have the breakpoint we set in the <em class="italic">Debugging Blazor Server</em> section (in the <code class="inlineCode">LoadPosts</code> method), the breakpoint did not get hit.</p>
    <p class="normal">Breakpoints won’t get hit on the initial page load in Blazor WebAssembly. We need to navigate to another page and back to the index page again for it to hit.</p>
    <p class="normal">We can’t just change the URL, as we could in Blazor Server, simply because that will reload the app again and not trigger the breakpoint because it was an <em class="italic">initial page load</em>.</p>
    <p class="normal">Debugging Blazor WebAssembly is made possible by the following line of code in the <code class="inlineCode">launchSettings.json</code> file:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-attr">"inspectUri"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"{wsProtocol}://{url.hostname}:{url.port}/_framework/debug/ws-proxy?browser={browserInspectUri}"</span>
</code></pre>
    <p class="normal">But it is <a id="_idIndexMarker499"></a>supplied for us when we create the project, so we don’t need to add that manually.</p>
    <p class="normal">We can also put breakpoints in our <code class="inlineCode">BlazorWebAssembly.Server</code> server project if we want to, and they will get hit just as we would expect.</p>
    <p class="normal">Now let’s see what happens with our exception:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">In the web browser, navigate to <code class="inlineCode">https://localhost:portnumber/throwexception</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Throw exception</strong> button.</li>
      <li class="numberedList">The unhandled exception won’t get hit in Visual Studio. We get the exception in the developer tools in the web browser, as shown in <em class="italic">Figure 12.3</em>:</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18549_12_03.png" alt="Figure 12.3 – WebAssembly error"/></figure>
    <p class="packt_figref">Figure 12.3: WebAssembly error</p>
    <p class="normal">The debugging<a id="_idIndexMarker500"></a> experience in Blazor WebAssembly is not as polished as with Blazor Server but it is polished enough to get the job done.</p>
    <p class="normal">We have one method left to explore – debugging in the web browser.</p>
    <h1 id="_idParaDest-220" class="heading-1">Debugging Blazor WebAssembly in the web browser</h1>
    <p class="normal">The first <a id="_idIndexMarker501"></a>debugging experience for Blazor <a id="_idIndexMarker502"></a>WebAssembly was the ability to debug right in the web browser:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">In Visual Studio, start the project by pressing <em class="keystroke">Ctrl</em> + <em class="keystroke">F5</em> (run without debugging).</li>
      <li class="numberedList">In the web browser, press <em class="keystroke">Shift</em> + <em class="keystroke">Alt</em> + <em class="keystroke">D</em>.
    <p class="normal">We will get an error message with instructions on how to start the web browser in debug mode.</p>
    <p class="normal">I am running Edge, so the way to start Edge would be something like this:</p>
    <pre class="programlisting con"><code class="hljs-con">msedge --remote-debugging-port=9222 --user-data-dir="C:\Users\Jimmy\AppData\Local\Temp\blazor-edge-debug" --no-first-run https://localhost:5001/
</code></pre>
    <p class="normal">The <code class="inlineCode">port</code> and <code class="inlineCode">user-data-dir</code> values will differ from the example above. Copy the command from your web browser.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="3">Press <em class="keystroke">Win</em> + <em class="keystroke">R</em> and paste the command.</li>
      <li class="numberedList">A new instance of Chrome or Edge will open. In this new instance, press <em class="keystroke">Shift</em> + <em class="keystroke">Alt</em> + <em class="keystroke">D</em>.</li>
      <li class="numberedList">We should now see a source tab containing C# code from our project. From here, we can put breakpoints that will be hit and hover over variables.</li>
    </ol>
    <p class="normal">The debug UI can be seen in <em class="italic">Figure 12.4</em>:</p>
    <figure class="mediaobject"><img src="../Images/B18549_12_04.png" alt="Figure 12.4 – Screenshot of the in-browser debug"/></figure>
    <p class="packt_figref">Figure 12.4: Screenshot of the in-browser debug</p>
    <p class="normal">Debugging <a id="_idIndexMarker503"></a>C# code in the browser is <a id="_idIndexMarker504"></a>pretty amazing, but since we have been directly debugging in Visual Studio, I don’t see much use for this kind of debugging.</p>
    <p class="normal">Next, we will look at something that might not fall under debugging but is useful while developing Blazor apps.</p>
    <h1 id="_idParaDest-221" class="heading-1">Hot Reload</h1>
    <p class="normal">In Visual Studio and the <strong class="keyWord">dotnet CLI</strong>, we can enable <strong class="keyWord">Hot Reload</strong>. This means that as soon as we make changes in our <a id="_idIndexMarker505"></a>application, our Blazor app will automatically get reloaded, and we will (in most cases) not lose the state.</p>
    <p class="normal">To set this up, do the following:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">In Visual Studio, there is a small fire icon. We can use this button to trigger hot reload manually.
    <p class="normal">It is only clickable when the application is running (with or without debugging).</p>
    <p class="normal">We can also click on the small arrow just to the right of the fire icon and select <strong class="screenText">Hot Reload on File Save</strong>.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="2">Select the <strong class="screenText">Hot Reload on File Save</strong> option.</li>
      <li class="numberedList">Start the project by pressing <em class="keystroke">Ctrl</em> + <em class="keystroke">F5</em>.</li>
      <li class="numberedList">In the web browser, bring up the counter page by adding <code class="inlineCode">/counter</code> to the URL.</li>
      <li class="numberedList">Make a change to the <code class="inlineCode">Components/Pages/Counter.razor</code> file and click <strong class="screenText">Save</strong>.</li>
    </ol>
    <p class="normal">Our web browser should now reload, and the change will be shown.</p>
    <p class="normal">At the time of writing, Hot Reload does save time and is pretty amazing. However, there are some cases where our site will behave oddly, and then we need to rebuild. Therefore, you need to keep in mind that if there is an unexplainable issue, you will need to build the project again.</p>
    <p class="normal">This also works from the <a id="_idIndexMarker506"></a>command line by running the following command:</p>
    <pre class="programlisting con"><code class="hljs-con">dotnet watch
</code></pre>
    <p class="normal">There are a couple of limitations to this method, though:</p>
    <ul>
      <li class="bulletList">It doesn’t work with Blazor WebAssembly running an ASP.NET server backend (as we have in our project). For this to work, we need to reload the browser manually.</li>
      <li class="bulletList">The state of the application will restart.</li>
      <li class="bulletList">Changes in a shared project won’t be reflected.</li>
    </ul>
    <p class="normal">So, for our setup, this feature isn’t very beneficial, but it is really good if our project doesn’t fall into any of the previously mentioned limitations.</p>
    <h1 id="_idParaDest-222" class="heading-1">Summary</h1>
    <p class="normal">This chapter looked at different ways to debug our Blazor application. There will always be moments when we need to step through the code to find a bug or see what is happening. When these moments are upon us, Visual Studio delivers world-class functionality to help us achieve our goals.</p>
    <p class="normal">The nice thing is that debugging Blazor applications, whether it’s Blazor Server or Blazor WebAssembly, will work as expected from a Microsoft product. We get C# errors that are (in most cases) easy to understand and solve.</p>
    <p class="normal">In the next chapter, we will look at testing our Blazor components.</p>
  </div>
</body>
</html>