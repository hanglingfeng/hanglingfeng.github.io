<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>B16588_11</title>
<link href="css/style-JRserifv6.css" rel="stylesheet" type="text/css"/>
<!-- kobo-style -->
<style id="koboSpanStyle" type="text/css" xmlns="http://www.w3.org/1999/xhtml">.koboSpan { -webkit-text-combine: inherit; }</style>
</head>
<body id="B16588_11" xml:lang="en-GB">
<div id="_idContainer115">
<h1 class="chapter-number" id="_idParaDest-210"><a id="_idTextAnchor226"/><span class="koboSpan" id="kobo.1.1" xmlns="http://www.w3.org/1999/xhtml">11</span></h1>
<h1 id="_idParaDest-211"><a id="_idTextAnchor227"/><span class="koboSpan" id="kobo.2.1" xmlns="http://www.w3.org/1999/xhtml">Developing Unit Tests</span></h1>
<p><span class="koboSpan" id="kobo.3.1" xmlns="http://www.w3.org/1999/xhtml">Testing is an important way to ensure software quality in modern software development. </span><span class="koboSpan" id="kobo.3.2" xmlns="http://www.w3.org/1999/xhtml">There are different types of testing involved in the software development lifecycle, such as unit testing, integration testing, and system testing. </span><span class="koboSpan" id="kobo.3.3" xmlns="http://www.w3.org/1999/xhtml">Unit testing is used to test software modules or components in an isolated environment. </span><span class="koboSpan" id="kobo.3.4" xmlns="http://www.w3.org/1999/xhtml">It is usually done by developers. </span><span class="koboSpan" id="kobo.3.5" xmlns="http://www.w3.org/1999/xhtml">With a well-planned unit test strategy, programming issues can be found at the earliest stage in the software development lifecycle, so unit testing is the most efficient and economical approach to ensuring the quality of your software. </span><span class="koboSpan" id="kobo.3.6" xmlns="http://www.w3.org/1999/xhtml">In .NET MAUI app development, we can reuse existing unit test frameworks or libraries in the .NET ecosystem. </span><span class="koboSpan" id="kobo.3.7" xmlns="http://www.w3.org/1999/xhtml">By using a test framework or library, we can speed up the unit test development. </span><span class="koboSpan" id="kobo.3.8" xmlns="http://www.w3.org/1999/xhtml">A good test framework is usually designed to easily integrate with a </span><strong class="bold"><span class="koboSpan" id="kobo.4.1" xmlns="http://www.w3.org/1999/xhtml">continuous integration</span></strong><span class="koboSpan" id="kobo.5.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="bold"><span class="koboSpan" id="kobo.6.1" xmlns="http://www.w3.org/1999/xhtml">CI</span></strong><span class="koboSpan" id="kobo.7.1" xmlns="http://www.w3.org/1999/xhtml">) and </span><strong class="bold"><span class="koboSpan" id="kobo.8.1" xmlns="http://www.w3.org/1999/xhtml">continuous deployment</span></strong><span class="koboSpan" id="kobo.9.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="bold"><span class="koboSpan" id="kobo.10.1" xmlns="http://www.w3.org/1999/xhtml">CD</span></strong><span class="koboSpan" id="kobo.11.1" xmlns="http://www.w3.org/1999/xhtml">) environment. </span><span class="koboSpan" id="kobo.11.2" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we will introduce how to set up unit testing and run unit test cases as part of the .NET MAUI app </span><span class="No-Break"><span class="koboSpan" id="kobo.12.1" xmlns="http://www.w3.org/1999/xhtml">development lifecycle.</span></span></p>
<p><span class="koboSpan" id="kobo.13.1" xmlns="http://www.w3.org/1999/xhtml">We will cover the following topics in </span><span class="No-Break"><span class="koboSpan" id="kobo.14.1" xmlns="http://www.w3.org/1999/xhtml">this chapter:</span></span></p>
<ul>
<li><span class="koboSpan" id="kobo.15.1" xmlns="http://www.w3.org/1999/xhtml">Unit testing </span><span class="No-Break"><span class="koboSpan" id="kobo.16.1" xmlns="http://www.w3.org/1999/xhtml">in .NET</span></span></li>
<li><span class="koboSpan" id="kobo.17.1" xmlns="http://www.w3.org/1999/xhtml">Razor component testing </span><span class="No-Break"><span class="koboSpan" id="kobo.18.1" xmlns="http://www.w3.org/1999/xhtml">using bUnit</span></span></li>
</ul>
<h1 id="_idParaDest-212"><a id="_idTextAnchor228"/><span class="koboSpan" id="kobo.19.1" xmlns="http://www.w3.org/1999/xhtml">Technical requirements</span></h1>
<p><span class="koboSpan" id="kobo.20.1" xmlns="http://www.w3.org/1999/xhtml">To test and debug the source code in this chapter, you need to have Visual Studio 2022 installed on your PC or Mac. </span><span class="koboSpan" id="kobo.20.2" xmlns="http://www.w3.org/1999/xhtml">Please refer to the </span><em class="italic"><span class="koboSpan" id="kobo.21.1" xmlns="http://www.w3.org/1999/xhtml">Development environment setup</span></em><span class="koboSpan" id="kobo.22.1" xmlns="http://www.w3.org/1999/xhtml"> section in </span><a href="B16588_01.xhtml#_idTextAnchor015"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.23.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 1</span></em></span></a><span class="koboSpan" id="kobo.24.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.25.1" xmlns="http://www.w3.org/1999/xhtml">Getting Started with .NET MAUI</span></em><span class="koboSpan" id="kobo.26.1" xmlns="http://www.w3.org/1999/xhtml">, for </span><span class="No-Break"><span class="koboSpan" id="kobo.27.1" xmlns="http://www.w3.org/1999/xhtml">the details.</span></span></p>
<p><span class="koboSpan" id="kobo.28.1" xmlns="http://www.w3.org/1999/xhtml">The source code for this chapter is available in the following </span><span class="No-Break"><span class="koboSpan" id="kobo.29.1" xmlns="http://www.w3.org/1999/xhtml">GitHub repository:</span></span></p>
<p><a href="https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development/tree/main/Chapter11"><span class="No-Break"><span class="koboSpan" id="kobo.30.1" xmlns="http://www.w3.org/1999/xhtml">https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development/tree/main/Chapter11</span></span></a></p>
<p><span class="koboSpan" id="kobo.31.1" xmlns="http://www.w3.org/1999/xhtml">The source code can be downloaded using the following </span><span class="No-Break"><span class="koboSpan" id="kobo.32.1" xmlns="http://www.w3.org/1999/xhtml">Git command:</span></span></p>
<pre class="console"><span class="koboSpan" id="kobo.33.1" xmlns="http://www.w3.org/1999/xhtml">
git clone -b chapter11 https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development PassXYZ.Vault2</span></pre>
<h1 id="_idParaDest-213"><a id="_idTextAnchor229"/><span class="koboSpan" id="kobo.34.1" xmlns="http://www.w3.org/1999/xhtml">Unit testing in .NET</span></h1>
<p><span class="koboSpan" id="kobo.35.1" xmlns="http://www.w3.org/1999/xhtml">To develop unit test</span><a id="_idIndexMarker794"/><span class="koboSpan" id="kobo.36.1" xmlns="http://www.w3.org/1999/xhtml"> cases, we usually use a unit test framework to improve efficiency. </span><span class="koboSpan" id="kobo.36.2" xmlns="http://www.w3.org/1999/xhtml">There are several unit test frameworks available in a .NET environment </span><span class="No-Break"><span class="koboSpan" id="kobo.37.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<ul>
<li><strong class="bold"><span class="koboSpan" id="kobo.38.1" xmlns="http://www.w3.org/1999/xhtml">Microsoft Test Framework</span></strong><span class="koboSpan" id="kobo.39.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="bold"><span class="koboSpan" id="kobo.40.1" xmlns="http://www.w3.org/1999/xhtml">MSTest</span></strong><span class="koboSpan" id="kobo.41.1" xmlns="http://www.w3.org/1999/xhtml">) is </span><a id="_idIndexMarker795"/><span class="koboSpan" id="kobo.42.1" xmlns="http://www.w3.org/1999/xhtml">shipped together with Visual Studio. </span><span class="koboSpan" id="kobo.42.2" xmlns="http://www.w3.org/1999/xhtml">The initial version of MSTest (V1) was not an open source product. </span><span class="koboSpan" id="kobo.42.3" xmlns="http://www.w3.org/1999/xhtml">The first release was shipped with Visual Studio 2005. </span><span class="koboSpan" id="kobo.42.4" xmlns="http://www.w3.org/1999/xhtml">Please refer to the book </span><em class="italic"><span class="koboSpan" id="kobo.43.1" xmlns="http://www.w3.org/1999/xhtml">Microsoft Visual Studio 2005 Unleashed</span></em><span class="koboSpan" id="kobo.44.1" xmlns="http://www.w3.org/1999/xhtml"> by Lars Powers and Mike Snell to find more information about MSTest (V1). </span><span class="koboSpan" id="kobo.44.2" xmlns="http://www.w3.org/1999/xhtml">Later, Microsoft made the new-release MSTest (V2) open source and hosted it on GitHub. </span><span class="koboSpan" id="kobo.44.3" xmlns="http://www.w3.org/1999/xhtml">The first MSTest (V2) release was available </span><span class="No-Break"><span class="koboSpan" id="kobo.45.1" xmlns="http://www.w3.org/1999/xhtml">around 2017.</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.46.1" xmlns="http://www.w3.org/1999/xhtml">NUnit</span></strong><span class="koboSpan" id="kobo.47.1" xmlns="http://www.w3.org/1999/xhtml"> is an open source</span><a id="_idIndexMarker796"/><span class="koboSpan" id="kobo.48.1" xmlns="http://www.w3.org/1999/xhtml"> testing framework ported </span><a id="_idIndexMarker797"/><span class="koboSpan" id="kobo.49.1" xmlns="http://www.w3.org/1999/xhtml">from </span><strong class="bold"><span class="koboSpan" id="kobo.50.1" xmlns="http://www.w3.org/1999/xhtml">JUnit</span></strong><span class="koboSpan" id="kobo.51.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.51.2" xmlns="http://www.w3.org/1999/xhtml">It was the first unit test framework for .NET. </span><span class="koboSpan" id="kobo.51.3" xmlns="http://www.w3.org/1999/xhtml">The earliest releases were hosted at SourceForge in 2004. </span><span class="koboSpan" id="kobo.51.4" xmlns="http://www.w3.org/1999/xhtml">Please refer to the version 2.0 release note in the </span><em class="italic"><span class="koboSpan" id="kobo.52.1" xmlns="http://www.w3.org/1999/xhtml">Further reading</span></em><span class="koboSpan" id="kobo.53.1" xmlns="http://www.w3.org/1999/xhtml"> section. </span><span class="koboSpan" id="kobo.53.2" xmlns="http://www.w3.org/1999/xhtml">The most recent releases have been moved </span><span class="No-Break"><span class="koboSpan" id="kobo.54.1" xmlns="http://www.w3.org/1999/xhtml">to GitHub.</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.55.1" xmlns="http://www.w3.org/1999/xhtml">xUnit</span></strong><span class="koboSpan" id="kobo.56.1" xmlns="http://www.w3.org/1999/xhtml"> is a more</span><a id="_idIndexMarker798"/><span class="koboSpan" id="kobo.57.1" xmlns="http://www.w3.org/1999/xhtml"> modern and extensible framework developed by Jim Newkirk and Brad Wilson. </span><span class="koboSpan" id="kobo.57.2" xmlns="http://www.w3.org/1999/xhtml">They were the creators of NUnit, and they made many improvements to this new test framework compared to NUnit. </span><span class="koboSpan" id="kobo.57.3" xmlns="http://www.w3.org/1999/xhtml">Please refer to Jim’s blog </span><em class="italic"><span class="koboSpan" id="kobo.58.1" xmlns="http://www.w3.org/1999/xhtml">Why Did we Build xUnit 1.0?</span></em><span class="koboSpan" id="kobo.59.1" xmlns="http://www.w3.org/1999/xhtml"> to find out more information about the improvements. </span><span class="koboSpan" id="kobo.59.2" xmlns="http://www.w3.org/1999/xhtml">The first stable release of xUnit was available </span><span class="No-Break"><span class="koboSpan" id="kobo.60.1" xmlns="http://www.w3.org/1999/xhtml">around 2015.</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.61.1" xmlns="http://www.w3.org/1999/xhtml">They are all quite popular and can be chosen based on the project requirements. </span><span class="koboSpan" id="kobo.61.2" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we will use xUnit to develop unit test cases since it is a newer framework with many improvements compared </span><span class="No-Break"><span class="koboSpan" id="kobo.62.1" xmlns="http://www.w3.org/1999/xhtml">to NUnit.</span></span></p>
<p><span class="koboSpan" id="kobo.63.1" xmlns="http://www.w3.org/1999/xhtml">No matter which unit test framework you choose, the process of unit test development is quite similar. </span><span class="koboSpan" id="kobo.63.2" xmlns="http://www.w3.org/1999/xhtml">The content in this chapter can still help you if you use a different framework in your project. </span><span class="koboSpan" id="kobo.63.3" xmlns="http://www.w3.org/1999/xhtml">Unit test cases can only run against a cross-platform target framework rather than platform-specific target frameworks. </span><span class="koboSpan" id="kobo.63.4" xmlns="http://www.w3.org/1999/xhtml">In this book, we use .NET 6.0, so the target framework of unit testing is </span><strong class="source-inline"><span class="koboSpan" id="kobo.64.1" xmlns="http://www.w3.org/1999/xhtml">net6.0</span></strong><span class="koboSpan" id="kobo.65.1" xmlns="http://www.w3.org/1999/xhtml"> instead of </span><strong class="source-inline"><span class="koboSpan" id="kobo.66.1" xmlns="http://www.w3.org/1999/xhtml">net6.0-android</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.67.1" xmlns="http://www.w3.org/1999/xhtml">or </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.68.1" xmlns="http://www.w3.org/1999/xhtml">net6.0-ios</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.69.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.70.1" xmlns="http://www.w3.org/1999/xhtml">To develop a unit test for .NET MAUI, we will introduce the test case development for both XAML-based and Blazor-based apps. </span><span class="koboSpan" id="kobo.70.2" xmlns="http://www.w3.org/1999/xhtml">In both cases, we will use the MVVM pattern in the design. </span><span class="koboSpan" id="kobo.70.3" xmlns="http://www.w3.org/1999/xhtml">The unit test cases at the model layer are the same for both, but the testing in the view and the view model is quite different. </span><span class="koboSpan" id="kobo.70.4" xmlns="http://www.w3.org/1999/xhtml">For a XAML-based app, it is quite complicated to develop unit test cases for the view and the view model. </span><span class="koboSpan" id="kobo.70.5" xmlns="http://www.w3.org/1999/xhtml">In order to test the view model, we have to resolve the dependencies of XAML components. </span><span class="koboSpan" id="kobo.70.6" xmlns="http://www.w3.org/1999/xhtml">For example, in the XAML version of our app, we need to call </span><strong class="source-inline"><span class="koboSpan" id="kobo.71.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.72.1" xmlns="http://www.w3.org/1999/xhtml"> navigation methods in the view model as</span><a id="_idIndexMarker799"/><span class="koboSpan" id="kobo.73.1" xmlns="http://www.w3.org/1999/xhtml"> shown in the </span><span class="No-Break"><span class="koboSpan" id="kobo.74.1" xmlns="http://www.w3.org/1999/xhtml">following code:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.75.1" xmlns="http://www.w3.org/1999/xhtml">
await Shell.Current.GoToAsync(
  $"{nameof(ItemsPage)}?{nameof(ItemsViewModel.ItemId)}={item
  .Id}");</span></pre>
<p><span class="koboSpan" id="kobo.76.1" xmlns="http://www.w3.org/1999/xhtml">To resolve dependencies, in </span><strong class="source-inline"><span class="koboSpan" id="kobo.77.1" xmlns="http://www.w3.org/1999/xhtml">Xamarin.Forms</span></strong><span class="koboSpan" id="kobo.78.1" xmlns="http://www.w3.org/1999/xhtml">, there is an open source project, </span><strong class="source-inline"><span class="koboSpan" id="kobo.79.1" xmlns="http://www.w3.org/1999/xhtml">Xamarin.Forms.Mocks</span></strong><span class="koboSpan" id="kobo.80.1" xmlns="http://www.w3.org/1999/xhtml">, which can help mock </span><strong class="source-inline"><span class="koboSpan" id="kobo.81.1" xmlns="http://www.w3.org/1999/xhtml">Xamarin.Forms</span></strong><span class="koboSpan" id="kobo.82.1" xmlns="http://www.w3.org/1999/xhtml"> components. </span><span class="koboSpan" id="kobo.82.2" xmlns="http://www.w3.org/1999/xhtml">We also need something similar to develop unit test cases for the view model in .NET MAUI XAML apps, but I cannot find any equivalent at the moment. </span><span class="koboSpan" id="kobo.82.3" xmlns="http://www.w3.org/1999/xhtml">There is also a native user interface test framework, </span><strong class="source-inline"><span class="koboSpan" id="kobo.83.1" xmlns="http://www.w3.org/1999/xhtml">Xamarin.UITest</span></strong><span class="koboSpan" id="kobo.84.1" xmlns="http://www.w3.org/1999/xhtml">, which is for Android and iOS, but this framework cannot be used in .NET MAUI yet. </span><span class="koboSpan" id="kobo.84.2" xmlns="http://www.w3.org/1999/xhtml">Regardless, </span><strong class="source-inline"><span class="koboSpan" id="kobo.85.1" xmlns="http://www.w3.org/1999/xhtml">Xamarin.UITest</span></strong><span class="koboSpan" id="kobo.86.1" xmlns="http://www.w3.org/1999/xhtml"> is not a cross-platform solution so we won’t discuss it in </span><span class="No-Break"><span class="koboSpan" id="kobo.87.1" xmlns="http://www.w3.org/1999/xhtml">this book.</span></span></p>
<p><span class="koboSpan" id="kobo.88.1" xmlns="http://www.w3.org/1999/xhtml">For a Blazor Hybrid app, we have a good test </span><a id="_idIndexMarker800"/><span class="koboSpan" id="kobo.89.1" xmlns="http://www.w3.org/1999/xhtml">library, </span><strong class="bold"><span class="koboSpan" id="kobo.90.1" xmlns="http://www.w3.org/1999/xhtml">bUnit</span></strong><span class="koboSpan" id="kobo.91.1" xmlns="http://www.w3.org/1999/xhtml">, which can be used to test Razor components. </span><span class="koboSpan" id="kobo.91.2" xmlns="http://www.w3.org/1999/xhtml">We can develop unit test cases for the view, view model, and model layers for </span><span class="No-Break"><span class="koboSpan" id="kobo.92.1" xmlns="http://www.w3.org/1999/xhtml">Blazor apps.</span></span></p>
<p><span class="koboSpan" id="kobo.93.1" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we will develop unit tests for the model layer first, which is common for both XAML and Blazor. </span><span class="koboSpan" id="kobo.93.2" xmlns="http://www.w3.org/1999/xhtml">After that, we will introduce unit test development for Blazor apps using bUnit. </span><span class="koboSpan" id="kobo.93.3" xmlns="http://www.w3.org/1999/xhtml">bUnit is a testing library that can be used with all three test frameworks (xUnit, NUnit, </span><span class="No-Break"><span class="koboSpan" id="kobo.94.1" xmlns="http://www.w3.org/1999/xhtml">and MSTest).</span></span></p>
<h2 id="_idParaDest-214"><a id="_idTextAnchor230"/><span class="koboSpan" id="kobo.95.1" xmlns="http://www.w3.org/1999/xhtml">Setting up the unit test project</span></h2>
<p><span class="koboSpan" id="kobo.96.1" xmlns="http://www.w3.org/1999/xhtml">To get our hands</span><a id="_idIndexMarker801"/><span class="koboSpan" id="kobo.97.1" xmlns="http://www.w3.org/1999/xhtml"> dirty, let us create a unit test project. </span><span class="koboSpan" id="kobo.97.2" xmlns="http://www.w3.org/1999/xhtml">We can create a xUnit project using either Visual Studio or the .NET </span><span class="No-Break"><span class="koboSpan" id="kobo.98.1" xmlns="http://www.w3.org/1999/xhtml">command line:</span></span></p>
<ol>
<li><span class="koboSpan" id="kobo.99.1" xmlns="http://www.w3.org/1999/xhtml">To start with Visual Studio, we can add a new project to our current solution as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.100.1" xmlns="http://www.w3.org/1999/xhtml">Figure 11</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.101.1" xmlns="http://www.w3.org/1999/xhtml">.1</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.102.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></li>
</ol>
<div>
<div class="IMG---Figure" id="_idContainer114">
<span class="koboSpan" id="kobo.103.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 11.1 – Creating a xUnit project" src="image/Figure_11.01_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.104.1" xmlns="http://www.w3.org/1999/xhtml">Figure 11.1 – Creating a xUnit project</span></p>
<ol>
<li value="2"><span class="koboSpan" id="kobo.105.1" xmlns="http://www.w3.org/1999/xhtml">We can type </span><strong class="source-inline"><span class="koboSpan" id="kobo.106.1" xmlns="http://www.w3.org/1999/xhtml">xunit</span></strong><span class="koboSpan" id="kobo.107.1" xmlns="http://www.w3.org/1999/xhtml"> into the search box and select </span><strong class="bold"><span class="koboSpan" id="kobo.108.1" xmlns="http://www.w3.org/1999/xhtml">xUnit Test Project</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.109.1" xmlns="http://www.w3.org/1999/xhtml">for C#.</span></span></li>
<li><span class="koboSpan" id="kobo.110.1" xmlns="http://www.w3.org/1999/xhtml">On the next screen, we can name the project </span><strong class="source-inline"><span class="koboSpan" id="kobo.111.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Tests</span></strong><span class="koboSpan" id="kobo.112.1" xmlns="http://www.w3.org/1999/xhtml"> and click </span><span class="No-Break"><span class="koboSpan" id="kobo.113.1" xmlns="http://www.w3.org/1999/xhtml">on </span></span><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.114.1" xmlns="http://www.w3.org/1999/xhtml">Next</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.115.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
<li><span class="koboSpan" id="kobo.116.1" xmlns="http://www.w3.org/1999/xhtml">After that, please select the framework as .NET 6.0 and </span><span class="No-Break"><span class="koboSpan" id="kobo.117.1" xmlns="http://www.w3.org/1999/xhtml">click </span></span><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.118.1" xmlns="http://www.w3.org/1999/xhtml">Create</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.119.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
</ol>
<p><span class="koboSpan" id="kobo.120.1" xmlns="http://www.w3.org/1999/xhtml">To create the project using a command line, we can create the folder first and use a .NET command to create the project </span><span class="No-Break"><span class="koboSpan" id="kobo.121.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<pre class="console"><span class="koboSpan" id="kobo.122.1" xmlns="http://www.w3.org/1999/xhtml">
mkdir PassXYZ.Vault.Tests
cd PassXYZ.Vault.Tests
dotnet new xunit
dotnet test</span></pre>
<p><span class="koboSpan" id="kobo.123.1" xmlns="http://www.w3.org/1999/xhtml">Once we have </span><a id="_idIndexMarker802"/><span class="koboSpan" id="kobo.124.1" xmlns="http://www.w3.org/1999/xhtml">created the project, we can use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.125.1" xmlns="http://www.w3.org/1999/xhtml">dotnet test</span></strong><span class="koboSpan" id="kobo.126.1" xmlns="http://www.w3.org/1999/xhtml"> command to run the test cases. </span><span class="koboSpan" id="kobo.126.2" xmlns="http://www.w3.org/1999/xhtml">The default test case in the template will be executed. </span><span class="koboSpan" id="kobo.126.3" xmlns="http://www.w3.org/1999/xhtml">We will add test cases to this test project. </span><span class="koboSpan" id="kobo.126.4" xmlns="http://www.w3.org/1999/xhtml">The test targets are the components of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.127.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.128.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.129.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.BlazorUI</span></strong><span class="koboSpan" id="kobo.130.1" xmlns="http://www.w3.org/1999/xhtml"> projects, so we need to add these two projects as reference projects. </span><span class="koboSpan" id="kobo.130.2" xmlns="http://www.w3.org/1999/xhtml">The target framework of </span><strong class="source-inline"><span class="koboSpan" id="kobo.131.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.BlazorUI</span></strong><span class="koboSpan" id="kobo.132.1" xmlns="http://www.w3.org/1999/xhtml"> is </span><strong class="source-inline"><span class="koboSpan" id="kobo.133.1" xmlns="http://www.w3.org/1999/xhtml">net6.0</span></strong><span class="koboSpan" id="kobo.134.1" xmlns="http://www.w3.org/1999/xhtml">, so we can add it directly. </span><span class="koboSpan" id="kobo.134.2" xmlns="http://www.w3.org/1999/xhtml">However, the target frameworks of </span><strong class="source-inline"><span class="koboSpan" id="kobo.135.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.136.1" xmlns="http://www.w3.org/1999/xhtml"> are platform-specific, so we need to make some changes before we can add them as a reference </span><span class="No-Break"><span class="koboSpan" id="kobo.137.1" xmlns="http://www.w3.org/1999/xhtml">in </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.138.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Tests</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.139.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.140.1" xmlns="http://www.w3.org/1999/xhtml">The project file of our password manager app is </span><strong class="source-inline"><span class="koboSpan" id="kobo.141.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.csproj</span></strong><span class="koboSpan" id="kobo.142.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.142.2" xmlns="http://www.w3.org/1999/xhtml">We need to add </span><strong class="source-inline"><span class="koboSpan" id="kobo.143.1" xmlns="http://www.w3.org/1999/xhtml">net6.0</span></strong><span class="koboSpan" id="kobo.144.1" xmlns="http://www.w3.org/1999/xhtml"> as one of the target frameworks to this </span><span class="No-Break"><span class="koboSpan" id="kobo.145.1" xmlns="http://www.w3.org/1999/xhtml">project file:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.146.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;TargetFrameworks&gt;</span><strong class="bold"><span class="koboSpan" id="kobo.147.1" xmlns="http://www.w3.org/1999/xhtml">net6.0</span></strong><span class="koboSpan" id="kobo.148.1" xmlns="http://www.w3.org/1999/xhtml">;net6.0-android;net6.0-ios;net6.0-
  maccatalyst&lt;/TargetFrameworks&gt;</span></pre>
<p><span class="koboSpan" id="kobo.149.1" xmlns="http://www.w3.org/1999/xhtml">When we build project </span><strong class="source-inline"><span class="koboSpan" id="kobo.150.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.151.1" xmlns="http://www.w3.org/1999/xhtml"> on the supported platforms, we expect an executable since it is an app. </span><span class="koboSpan" id="kobo.151.2" xmlns="http://www.w3.org/1999/xhtml">However, when we build </span><strong class="source-inline"><span class="koboSpan" id="kobo.152.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.153.1" xmlns="http://www.w3.org/1999/xhtml"> for the </span><strong class="source-inline"><span class="koboSpan" id="kobo.154.1" xmlns="http://www.w3.org/1999/xhtml">net6.0</span></strong><span class="koboSpan" id="kobo.155.1" xmlns="http://www.w3.org/1999/xhtml"> target framework, we want to test it. </span><strong class="source-inline"><span class="koboSpan" id="kobo.156.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.157.1" xmlns="http://www.w3.org/1999/xhtml"> should be generated as a library so that the test framework can use it to run test cases. </span><span class="koboSpan" id="kobo.157.2" xmlns="http://www.w3.org/1999/xhtml">In this case, we expect to build a file with a </span><strong class="source-inline"><span class="koboSpan" id="kobo.158.1" xmlns="http://www.w3.org/1999/xhtml">.dll</span></strong><span class="koboSpan" id="kobo.159.1" xmlns="http://www.w3.org/1999/xhtml"> extension instead of </span><strong class="source-inline"><span class="koboSpan" id="kobo.160.1" xmlns="http://www.w3.org/1999/xhtml">.exe</span></strong><span class="koboSpan" id="kobo.161.1" xmlns="http://www.w3.org/1999/xhtml">, so we need to make the </span><span class="No-Break"><span class="koboSpan" id="kobo.162.1" xmlns="http://www.w3.org/1999/xhtml">following change:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.163.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;OutputType </span><strong class="bold"><span class="koboSpan" id="kobo.164.1" xmlns="http://www.w3.org/1999/xhtml">Condition="'$(TargetFramework)'!='net6.0'"</span></strong><span class="koboSpan" id="kobo.165.1" xmlns="http://www.w3.org/1999/xhtml">&gt;
  Exe&lt;/OutputType&gt;</span></pre>
<p><span class="koboSpan" id="kobo.166.1" xmlns="http://www.w3.org/1999/xhtml">In the preceding build setup, a condition is added to check the target framework for the output type. </span><span class="koboSpan" id="kobo.166.2" xmlns="http://www.w3.org/1999/xhtml">If the target framework is not </span><strong class="source-inline"><span class="koboSpan" id="kobo.167.1" xmlns="http://www.w3.org/1999/xhtml">net6.0</span></strong><span class="koboSpan" id="kobo.168.1" xmlns="http://www.w3.org/1999/xhtml">, we will build output as </span><span class="No-Break"><span class="koboSpan" id="kobo.169.1" xmlns="http://www.w3.org/1999/xhtml">an executable.</span></span></p>
<p><span class="koboSpan" id="kobo.170.1" xmlns="http://www.w3.org/1999/xhtml">With these changes, we can add reference projects to </span><strong class="source-inline"><span class="koboSpan" id="kobo.171.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Tests</span></strong><span class="koboSpan" id="kobo.172.1" xmlns="http://www.w3.org/1999/xhtml"> by right-clicking on the solution node and selecting </span><strong class="bold"><span class="koboSpan" id="kobo.173.1" xmlns="http://www.w3.org/1999/xhtml">Add</span></strong><span class="koboSpan" id="kobo.174.1" xmlns="http://www.w3.org/1999/xhtml"> -&gt; </span><strong class="bold"><span class="koboSpan" id="kobo.175.1" xmlns="http://www.w3.org/1999/xhtml">Project Reference …</span></strong><span class="koboSpan" id="kobo.176.1" xmlns="http://www.w3.org/1999/xhtml"> or editing the project file for </span><strong class="source-inline"><span class="koboSpan" id="kobo.177.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Tests</span></strong><span class="koboSpan" id="kobo.178.1" xmlns="http://www.w3.org/1999/xhtml"> to add </span><span class="No-Break"><span class="koboSpan" id="kobo.179.1" xmlns="http://www.w3.org/1999/xhtml">these lines:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.180.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;ItemGroup&gt;
  &lt;ProjectReference Include="..\PassXYZ.BlazorUI\PassXYZ.    </span><span class="koboSpan" id="kobo.180.2" xmlns="http://www.w3.org/1999/xhtml">BlazorUI.csproj" /&gt;
  &lt;ProjectReference Include="..\PassXYZ.Vault\PassXYZ.Vault.    </span><span class="koboSpan" id="kobo.180.3" xmlns="http://www.w3.org/1999/xhtml">csproj" /&gt;
&lt;/ItemGroup&gt;</span></pre>
<p><span class="koboSpan" id="kobo.181.1" xmlns="http://www.w3.org/1999/xhtml">To test the </span><a id="_idIndexMarker803"/><span class="koboSpan" id="kobo.182.1" xmlns="http://www.w3.org/1999/xhtml">MAUI project, we also need to add the following configuration to the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.183.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Tests</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.184.1" xmlns="http://www.w3.org/1999/xhtml"> project:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.185.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;UseMaui&gt;true&lt;/UseMaui&gt;</span></pre>
<p><span class="koboSpan" id="kobo.186.1" xmlns="http://www.w3.org/1999/xhtml">Now, we have set up the xUnit project. </span><span class="koboSpan" id="kobo.186.2" xmlns="http://www.w3.org/1999/xhtml">Let us add our </span><span class="No-Break"><span class="koboSpan" id="kobo.187.1" xmlns="http://www.w3.org/1999/xhtml">test cases.</span></span></p>
<h2 id="_idParaDest-215"><a id="_idTextAnchor231"/><span class="koboSpan" id="kobo.188.1" xmlns="http://www.w3.org/1999/xhtml">Creating test cases to test the IDataStore interface</span></h2>
<p><span class="koboSpan" id="kobo.189.1" xmlns="http://www.w3.org/1999/xhtml">We will start</span><a id="_idIndexMarker804"/><span class="koboSpan" id="kobo.190.1" xmlns="http://www.w3.org/1999/xhtml"> to add test </span><a id="_idIndexMarker805"/><span class="koboSpan" id="kobo.191.1" xmlns="http://www.w3.org/1999/xhtml">cases at the model layer first since the test case setup at the model layer is the same for both the XAML and Blazor versions of </span><span class="No-Break"><span class="koboSpan" id="kobo.192.1" xmlns="http://www.w3.org/1999/xhtml">our app.</span></span></p>
<p><span class="koboSpan" id="kobo.193.1" xmlns="http://www.w3.org/1999/xhtml">At the model layer, the major implementation is in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.194.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZLib</span></strong><span class="koboSpan" id="kobo.195.1" xmlns="http://www.w3.org/1999/xhtml"> library – you may refer to the source code of </span><strong class="source-inline"><span class="koboSpan" id="kobo.196.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZLib</span></strong><span class="koboSpan" id="kobo.197.1" xmlns="http://www.w3.org/1999/xhtml"> to find more about the unit test cases at the </span><span class="No-Break"><span class="koboSpan" id="kobo.198.1" xmlns="http://www.w3.org/1999/xhtml">model layer:</span></span></p>
<p><a href="https://github.com/shugaoye/PassXYZLib"><span class="No-Break"><span class="koboSpan" id="kobo.199.1" xmlns="http://www.w3.org/1999/xhtml">https://github.com/shugaoye/PassXYZLib</span></span></a></p>
<p><span class="koboSpan" id="kobo.200.1" xmlns="http://www.w3.org/1999/xhtml">In our app, </span><strong class="source-inline"><span class="koboSpan" id="kobo.201.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.202.1" xmlns="http://www.w3.org/1999/xhtml"> is the interface to export </span><strong class="source-inline"><span class="koboSpan" id="kobo.203.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZLib</span></strong><span class="koboSpan" id="kobo.204.1" xmlns="http://www.w3.org/1999/xhtml">, so let’s add test cases to our test interface, </span><strong class="source-inline"><span class="koboSpan" id="kobo.205.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.206.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.206.2" xmlns="http://www.w3.org/1999/xhtml">To test the </span><strong class="source-inline"><span class="koboSpan" id="kobo.207.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.208.1" xmlns="http://www.w3.org/1999/xhtml"> interface, we can create a new test class, </span><strong class="source-inline"><span class="koboSpan" id="kobo.209.1" xmlns="http://www.w3.org/1999/xhtml">DataStoreTests</span></strong><span class="koboSpan" id="kobo.210.1" xmlns="http://www.w3.org/1999/xhtml">, in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.211.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Tests</span></strong><span class="koboSpan" id="kobo.212.1" xmlns="http://www.w3.org/1999/xhtml"> project. </span><span class="koboSpan" id="kobo.212.2" xmlns="http://www.w3.org/1999/xhtml">We can start to add a new test case to test the case by adding an item </span><span class="No-Break"><span class="koboSpan" id="kobo.213.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.214.1" xmlns="http://www.w3.org/1999/xhtml">
public class DataStoreTests
{
  [Fact]                                                  ❶
  public async void Add_Item()
  {
      // Arrange                                          ❷
      IDataStore&lt;Item&gt; datastore = new MockDataStore();
      ItemSubType itemSubType = ItemSubType.Entry;
      // Act                                              ❸
      var newItem = datastore.CreateNewItem(itemSubType);
      newItem.Name = $"{itemSubType.ToString()}01";
      await datastore.AddItemAsync(newItem);
      var item = datastore.GetItem(newItem.Id);
      // Assert                                           ❹
      Assert.Equal(newItem.Id, item.Id);
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.215.1" xmlns="http://www.w3.org/1999/xhtml">xUnit uses </span><a id="_idIndexMarker806"/><span class="koboSpan" id="kobo.216.1" xmlns="http://www.w3.org/1999/xhtml">attributes to</span><a id="_idIndexMarker807"/><span class="koboSpan" id="kobo.217.1" xmlns="http://www.w3.org/1999/xhtml"> inform the framework about test case setup. </span><span class="koboSpan" id="kobo.217.2" xmlns="http://www.w3.org/1999/xhtml">In this test case, we use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.218.1" xmlns="http://www.w3.org/1999/xhtml">[Fact]</span></strong><span class="koboSpan" id="kobo.219.1" xmlns="http://www.w3.org/1999/xhtml"> attribute, ❶, to mark this method as a test case. </span><span class="koboSpan" id="kobo.219.2" xmlns="http://www.w3.org/1999/xhtml">To define a test case, we can use a common pattern – </span><strong class="bold"><span class="koboSpan" id="kobo.220.1" xmlns="http://www.w3.org/1999/xhtml">Arrange</span></strong><span class="koboSpan" id="kobo.221.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="bold"><span class="koboSpan" id="kobo.222.1" xmlns="http://www.w3.org/1999/xhtml">Act</span></strong><span class="koboSpan" id="kobo.223.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="No-Break"><span class="koboSpan" id="kobo.224.1" xmlns="http://www.w3.org/1999/xhtml">and </span></span><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.225.1" xmlns="http://www.w3.org/1999/xhtml">Assert</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.226.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<ul>
<li><strong class="bold"><span class="koboSpan" id="kobo.227.1" xmlns="http://www.w3.org/1999/xhtml">Arrange</span></strong><span class="koboSpan" id="kobo.228.1" xmlns="http://www.w3.org/1999/xhtml"> ❷ – We will prepare all necessary setup for the test. </span><span class="koboSpan" id="kobo.228.2" xmlns="http://www.w3.org/1999/xhtml">To add an item, we need to initialize the </span><strong class="source-inline"><span class="koboSpan" id="kobo.229.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.230.1" xmlns="http://www.w3.org/1999/xhtml"> interface first, and then we will define a variable to hold the </span><span class="No-Break"><span class="koboSpan" id="kobo.231.1" xmlns="http://www.w3.org/1999/xhtml">item type.</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.232.1" xmlns="http://www.w3.org/1999/xhtml">Act</span></strong><span class="koboSpan" id="kobo.233.1" xmlns="http://www.w3.org/1999/xhtml"> ❸ – We execute the methods that we want to test, which are </span><strong class="source-inline"><span class="koboSpan" id="kobo.234.1" xmlns="http://www.w3.org/1999/xhtml">CreateNewItem()</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.235.1" xmlns="http://www.w3.org/1999/xhtml">and </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.236.1" xmlns="http://www.w3.org/1999/xhtml">AddItemAsync()</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.237.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.238.1" xmlns="http://www.w3.org/1999/xhtml">Assert</span></strong><span class="koboSpan" id="kobo.239.1" xmlns="http://www.w3.org/1999/xhtml"> ❹ – We check the result that we expected. </span><span class="koboSpan" id="kobo.239.2" xmlns="http://www.w3.org/1999/xhtml">In our case, we try to retrieve the new item using </span><strong class="source-inline"><span class="koboSpan" id="kobo.240.1" xmlns="http://www.w3.org/1999/xhtml">item.Id</span></strong><span class="koboSpan" id="kobo.241.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.241.2" xmlns="http://www.w3.org/1999/xhtml">After that, we check to ensure that the item ID retrieved is the same as what </span><span class="No-Break"><span class="koboSpan" id="kobo.242.1" xmlns="http://www.w3.org/1999/xhtml">we expected.</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.243.1" xmlns="http://www.w3.org/1999/xhtml">As you may have noticed, we tested the </span><strong class="source-inline"><span class="koboSpan" id="kobo.244.1" xmlns="http://www.w3.org/1999/xhtml">Entry</span></strong><span class="koboSpan" id="kobo.245.1" xmlns="http://www.w3.org/1999/xhtml"> type in the previous test case. </span><span class="koboSpan" id="kobo.245.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.246.1" xmlns="http://www.w3.org/1999/xhtml">Entry</span></strong><span class="koboSpan" id="kobo.247.1" xmlns="http://www.w3.org/1999/xhtml"> type is only one of the item types – we have many. </span><span class="koboSpan" id="kobo.247.2" xmlns="http://www.w3.org/1999/xhtml">To test all of them, we need to create many test cases. </span><span class="koboSpan" id="kobo.247.3" xmlns="http://www.w3.org/1999/xhtml">xUnit supports another test case type, </span><strong class="source-inline"><span class="koboSpan" id="kobo.248.1" xmlns="http://www.w3.org/1999/xhtml">[Theory]</span></strong><span class="koboSpan" id="kobo.249.1" xmlns="http://www.w3.org/1999/xhtml">, which helps us to test different scenarios with one </span><span class="No-Break"><span class="koboSpan" id="kobo.250.1" xmlns="http://www.w3.org/1999/xhtml">test case.</span></span></p>
<p><span class="koboSpan" id="kobo.251.1" xmlns="http://www.w3.org/1999/xhtml">We can use the “delete an item” test case to demonstrate how to test different scenarios in one test case with the </span><strong class="source-inline"><span class="koboSpan" id="kobo.252.1" xmlns="http://www.w3.org/1999/xhtml">[Theory]</span></strong><span class="koboSpan" id="kobo.253.1" xmlns="http://www.w3.org/1999/xhtml"> attribute. </span><span class="koboSpan" id="kobo.253.2" xmlns="http://www.w3.org/1999/xhtml">In this test case, we can delete an item in </span><a id="_idIndexMarker808"/><span class="koboSpan" id="kobo.254.1" xmlns="http://www.w3.org/1999/xhtml">different</span><a id="_idIndexMarker809"/><span class="koboSpan" id="kobo.255.1" xmlns="http://www.w3.org/1999/xhtml"> item types in one </span><span class="No-Break"><span class="koboSpan" id="kobo.256.1" xmlns="http://www.w3.org/1999/xhtml">test case:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.257.1" xmlns="http://www.w3.org/1999/xhtml">
public class DataStoreTests
{
  ...
</span><span class="koboSpan" id="kobo.257.2" xmlns="http://www.w3.org/1999/xhtml">  [Theory]                                                ①
  [InlineData(ItemSubType.Entry)]                         ②
  [InlineData(ItemSubType.Group)]
  [InlineData(ItemSubType.Notes)]
  [InlineData(ItemSubType.PxEntry)]
  public async void Delete_Item(ItemSubType itemSubType)
  {
      // Arrange
      IDataStore&lt;Item&gt; datastore = new MockDataStore();
      var newItem = datastore.CreateNewItem(itemSubType); ③
      newItem.Name = $"{itemSubType.ToString()}01";
      await datastore.AddItemAsync(newItem);
      // Act
      bool result = await
        datastore.DeleteItemAsync(newItem.Id);            ④
      Debug.WriteLine($"Delete_Item: {newItem.Name}");
      // Assert
      Assert.True(result);                                ⑤
  }
  ...
</span><span class="koboSpan" id="kobo.257.3" xmlns="http://www.w3.org/1999/xhtml">}</span></pre>
<p><span class="koboSpan" id="kobo.258.1" xmlns="http://www.w3.org/1999/xhtml">When we create a test case using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.259.1" xmlns="http://www.w3.org/1999/xhtml">[Theory]</span></strong><span class="koboSpan" id="kobo.260.1" xmlns="http://www.w3.org/1999/xhtml"> attribute, ①, we can pass different item types using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.261.1" xmlns="http://www.w3.org/1999/xhtml">itemSubType</span></strong><span class="koboSpan" id="kobo.262.1" xmlns="http://www.w3.org/1999/xhtml"> parameter. </span><span class="koboSpan" id="kobo.262.2" xmlns="http://www.w3.org/1999/xhtml">The value of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.263.1" xmlns="http://www.w3.org/1999/xhtml">itemSubType</span></strong><span class="koboSpan" id="kobo.264.1" xmlns="http://www.w3.org/1999/xhtml"> argument is defined using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.265.1" xmlns="http://www.w3.org/1999/xhtml">[InlineData]</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.266.1" xmlns="http://www.w3.org/1999/xhtml">attribute, </span></span><span class="No-Break"><span class="koboSpan" id="kobo.267.1" xmlns="http://www.w3.org/1999/xhtml">②</span></span><span class="No-Break"><span class="koboSpan" id="kobo.268.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.269.1" xmlns="http://www.w3.org/1999/xhtml">To arrange test data, we create a new item using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.270.1" xmlns="http://www.w3.org/1999/xhtml">itemSubType</span></strong><span class="koboSpan" id="kobo.271.1" xmlns="http://www.w3.org/1999/xhtml"> argument, ③. </span><span class="koboSpan" id="kobo.271.2" xmlns="http://www.w3.org/1999/xhtml">Then, we execute the </span><strong class="source-inline"><span class="koboSpan" id="kobo.272.1" xmlns="http://www.w3.org/1999/xhtml">DeleteItemAsync()</span></strong><span class="koboSpan" id="kobo.273.1" xmlns="http://www.w3.org/1999/xhtml"> method, ④, which is the one that we want </span><span class="No-Break"><span class="koboSpan" id="kobo.274.1" xmlns="http://www.w3.org/1999/xhtml">to test.</span></span></p>
<p><span class="koboSpan" id="kobo.275.1" xmlns="http://www.w3.org/1999/xhtml">Finally, we check the return value, ⑤. </span><span class="koboSpan" id="kobo.275.2" xmlns="http://www.w3.org/1999/xhtml">If the item is deleted successfully, the result is true. </span><span class="koboSpan" id="kobo.275.3" xmlns="http://www.w3.org/1999/xhtml">Otherwise, the result </span><span class="No-Break"><span class="koboSpan" id="kobo.276.1" xmlns="http://www.w3.org/1999/xhtml">is false.</span></span></p>
<p><span class="koboSpan" id="kobo.277.1" xmlns="http://www.w3.org/1999/xhtml">We </span><a id="_idIndexMarker810"/><span class="koboSpan" id="kobo.278.1" xmlns="http://www.w3.org/1999/xhtml">have </span><a id="_idIndexMarker811"/><span class="koboSpan" id="kobo.279.1" xmlns="http://www.w3.org/1999/xhtml">learned how to create a test case using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.280.1" xmlns="http://www.w3.org/1999/xhtml">[Fact]</span></strong><span class="koboSpan" id="kobo.281.1" xmlns="http://www.w3.org/1999/xhtml"> attribute and how to cover different scenarios using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.282.1" xmlns="http://www.w3.org/1999/xhtml">[Theory]</span></strong><span class="koboSpan" id="kobo.283.1" xmlns="http://www.w3.org/1999/xhtml"> attribute. </span><span class="koboSpan" id="kobo.283.2" xmlns="http://www.w3.org/1999/xhtml">Let’s discuss more topics in test case development in the </span><span class="No-Break"><span class="koboSpan" id="kobo.284.1" xmlns="http://www.w3.org/1999/xhtml">next section.</span></span></p>
<h2 id="_idParaDest-216"><a id="_idTextAnchor232"/><span class="koboSpan" id="kobo.285.1" xmlns="http://www.w3.org/1999/xhtml">Sharing context between tests</span></h2>
<p><span class="koboSpan" id="kobo.286.1" xmlns="http://www.w3.org/1999/xhtml">In our previous </span><a id="_idIndexMarker812"/><span class="koboSpan" id="kobo.287.1" xmlns="http://www.w3.org/1999/xhtml">test cases, we created a new </span><strong class="source-inline"><span class="koboSpan" id="kobo.288.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.289.1" xmlns="http://www.w3.org/1999/xhtml"> instance for each test case. </span><span class="koboSpan" id="kobo.289.2" xmlns="http://www.w3.org/1999/xhtml">Can we share one </span><strong class="source-inline"><span class="koboSpan" id="kobo.290.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.291.1" xmlns="http://www.w3.org/1999/xhtml"> instance instead of creating the same instance every time? </span><span class="koboSpan" id="kobo.291.2" xmlns="http://www.w3.org/1999/xhtml">We can reduce duplication by sharing the test setup among a group of test cases </span><span class="No-Break"><span class="koboSpan" id="kobo.292.1" xmlns="http://www.w3.org/1999/xhtml">in xUnit.</span></span></p>
<p><span class="koboSpan" id="kobo.293.1" xmlns="http://www.w3.org/1999/xhtml">There are three ways to share the setup and cleanup code between tests </span><span class="No-Break"><span class="koboSpan" id="kobo.294.1" xmlns="http://www.w3.org/1999/xhtml">in xUnit:</span></span></p>
<ul>
<li><strong class="bold"><span class="koboSpan" id="kobo.295.1" xmlns="http://www.w3.org/1999/xhtml">Constructor and Dispose</span></strong><span class="koboSpan" id="kobo.296.1" xmlns="http://www.w3.org/1999/xhtml"> – we can use a class constructor to share the setup and cleanup code without </span><span class="No-Break"><span class="koboSpan" id="kobo.297.1" xmlns="http://www.w3.org/1999/xhtml">sharing instances</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.298.1" xmlns="http://www.w3.org/1999/xhtml">Class Fixture</span></strong><span class="koboSpan" id="kobo.299.1" xmlns="http://www.w3.org/1999/xhtml"> – we can use a fixture to share object instances in a </span><span class="No-Break"><span class="koboSpan" id="kobo.300.1" xmlns="http://www.w3.org/1999/xhtml">single class</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.301.1" xmlns="http://www.w3.org/1999/xhtml">Collection Fixtures</span></strong><span class="koboSpan" id="kobo.302.1" xmlns="http://www.w3.org/1999/xhtml"> – we can use collection fixtures to share object instances in multiple </span><span class="No-Break"><span class="koboSpan" id="kobo.303.1" xmlns="http://www.w3.org/1999/xhtml">test classes</span></span></li>
</ul>
<h3><span class="koboSpan" id="kobo.304.1" xmlns="http://www.w3.org/1999/xhtml">Sharing using a constructor</span></h3>
<p><span class="koboSpan" id="kobo.305.1" xmlns="http://www.w3.org/1999/xhtml">To remove the</span><a id="_idIndexMarker813"/><span class="koboSpan" id="kobo.306.1" xmlns="http://www.w3.org/1999/xhtml"> duplicated setup code</span><a id="_idIndexMarker814"/><span class="koboSpan" id="kobo.307.1" xmlns="http://www.w3.org/1999/xhtml"> from the previous tests, we can move the creation of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.308.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.309.1" xmlns="http://www.w3.org/1999/xhtml"> instance to the constructor of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.310.1" xmlns="http://www.w3.org/1999/xhtml">DataStoreTests</span></strong><span class="koboSpan" id="kobo.311.1" xmlns="http://www.w3.org/1999/xhtml"> test class </span><span class="No-Break"><span class="koboSpan" id="kobo.312.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.313.1" xmlns="http://www.w3.org/1999/xhtml">
public class DataStoreTests
{
  IDataStore&lt;Item&gt; datastore;
  public DataStoreTests()
  {
    datastore = new MockDataStore();
    Debug.WriteLine("DataStoreTests: Created");
  }
  ...
</span><span class="koboSpan" id="kobo.313.2" xmlns="http://www.w3.org/1999/xhtml">}</span></pre>
<p><span class="koboSpan" id="kobo.314.1" xmlns="http://www.w3.org/1999/xhtml">In this code, we added a private member variable, </span><strong class="source-inline"><span class="koboSpan" id="kobo.315.1" xmlns="http://www.w3.org/1999/xhtml">datastore</span></strong><span class="koboSpan" id="kobo.316.1" xmlns="http://www.w3.org/1999/xhtml">, and created an instance of </span><strong class="source-inline"><span class="koboSpan" id="kobo.317.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.318.1" xmlns="http://www.w3.org/1999/xhtml"> in the constructor of </span><strong class="source-inline"><span class="koboSpan" id="kobo.319.1" xmlns="http://www.w3.org/1999/xhtml">DataStoreTests</span></strong><span class="koboSpan" id="kobo.320.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.320.2" xmlns="http://www.w3.org/1999/xhtml">We also added a debug output so we can monitor the creation of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.321.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.322.1" xmlns="http://www.w3.org/1999/xhtml"> interface. </span><span class="koboSpan" id="kobo.322.2" xmlns="http://www.w3.org/1999/xhtml">Let us debug the execution of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.323.1" xmlns="http://www.w3.org/1999/xhtml">DataStoreTests</span></strong><span class="koboSpan" id="kobo.324.1" xmlns="http://www.w3.org/1999/xhtml"> class so we can see the debug </span><span class="No-Break"><span class="koboSpan" id="kobo.325.1" xmlns="http://www.w3.org/1999/xhtml">output here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.326.1" xmlns="http://www.w3.org/1999/xhtml">
DataStoreTests: Created
Delete_Item: Entry01
DataStoreTests: Created
Delete_Item: Group01
DataStoreTests: Created
Delete_Item: PxEntry01
DataStoreTests: Created
Delete_Item: Notes01
DataStoreTests: Created
Create_Item: PxEntry
DataStoreTests: Created
Create_Item: Group
DataStoreTests: Created
Create_Item: Entry
DataStoreTests: Created
Create_Item: Notes
DataStoreTests: Created
Add_Item: Done</span></pre>
<p><span class="koboSpan" id="kobo.327.1" xmlns="http://www.w3.org/1999/xhtml">We can see </span><a id="_idIndexMarker815"/><span class="koboSpan" id="kobo.328.1" xmlns="http://www.w3.org/1999/xhtml">from </span><a id="_idIndexMarker816"/><span class="koboSpan" id="kobo.329.1" xmlns="http://www.w3.org/1999/xhtml">the debug output that a </span><strong class="source-inline"><span class="koboSpan" id="kobo.330.1" xmlns="http://www.w3.org/1999/xhtml">DataStoreTests</span></strong><span class="koboSpan" id="kobo.331.1" xmlns="http://www.w3.org/1999/xhtml"> class is created for each test case. </span><span class="koboSpan" id="kobo.331.2" xmlns="http://www.w3.org/1999/xhtml">There is no difference whether we create the instance of </span><strong class="source-inline"><span class="koboSpan" id="kobo.332.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.333.1" xmlns="http://www.w3.org/1999/xhtml"> inside the test method or in the constructor. </span><span class="koboSpan" id="kobo.333.2" xmlns="http://www.w3.org/1999/xhtml">All the test cases are still isolated from each other. </span><span class="koboSpan" id="kobo.333.3" xmlns="http://www.w3.org/1999/xhtml">When we use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.334.1" xmlns="http://www.w3.org/1999/xhtml">[Theory]</span></strong><span class="koboSpan" id="kobo.335.1" xmlns="http://www.w3.org/1999/xhtml"> attribute to test different scenarios with one method, each of them looks like a separate test case at runtime. </span><span class="koboSpan" id="kobo.335.2" xmlns="http://www.w3.org/1999/xhtml">To understand this better, we can use </span><strong class="source-inline"><span class="koboSpan" id="kobo.336.1" xmlns="http://www.w3.org/1999/xhtml">dotnet</span></strong><span class="koboSpan" id="kobo.337.1" xmlns="http://www.w3.org/1999/xhtml"> command to list all the </span><span class="No-Break"><span class="koboSpan" id="kobo.338.1" xmlns="http://www.w3.org/1999/xhtml">tests defined:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.339.1" xmlns="http://www.w3.org/1999/xhtml">
dotnet test -t
  Determining projects to restore...
</span><span class="koboSpan" id="kobo.339.2" xmlns="http://www.w3.org/1999/xhtml">  All projects are up-to-date for restore.
</span><span class="koboSpan" id="kobo.339.3" xmlns="http://www.w3.org/1999/xhtml">Microsoft (R) Test Execution Command Line Tool Version 17.3.0
  (x64)
Copyright (c) Microsoft Corporation.  All rights reserved.
</span><span class="koboSpan" id="kobo.339.4" xmlns="http://www.w3.org/1999/xhtml">The following Tests are available:
    PassXYZ.Vault.Tests.DataStoreTests.Add_Item
    PassXYZ.Vault.Tests.DataStoreTests.Delete_Item(itemSubType:
      Entry)
    PassXYZ.Vault.Tests.DataStoreTests.Delete_Item(itemSubType:
      Group)
    PassXYZ.Vault.Tests.DataStoreTests.Delete_Item(itemSubType:
      Notes)
    PassXYZ.Vault.Tests.DataStoreTests.Delete_Item(itemSubType:
      PxEntry)
    PassXYZ.Vault.Tests.DataStoreTests.Create_Item(itemSubType:
      Entry)
    PassXYZ.Vault.Tests.DataStoreTests.Create_Item(itemSubType:
      Group)
    PassXYZ.Vault.Tests.DataStoreTests.Create_Item(itemSubType:
      Notes)
   PassXYZ.Vault.Tests.DataStoreTests.Create_Item(itemSubType:
      PxEntry)</span></pre>
<p><span class="koboSpan" id="kobo.340.1" xmlns="http://www.w3.org/1999/xhtml">We can see </span><a id="_idIndexMarker817"/><span class="koboSpan" id="kobo.341.1" xmlns="http://www.w3.org/1999/xhtml">that each parameter </span><a id="_idIndexMarker818"/><span class="koboSpan" id="kobo.342.1" xmlns="http://www.w3.org/1999/xhtml">defined by the </span><strong class="source-inline"><span class="koboSpan" id="kobo.343.1" xmlns="http://www.w3.org/1999/xhtml">[InlineData]</span></strong><span class="koboSpan" id="kobo.344.1" xmlns="http://www.w3.org/1999/xhtml"> attribute is shown as a separate test case. </span><span class="koboSpan" id="kobo.344.2" xmlns="http://www.w3.org/1999/xhtml">They are all isolated test cases </span><span class="No-Break"><span class="koboSpan" id="kobo.345.1" xmlns="http://www.w3.org/1999/xhtml">at runtime.</span></span></p>
<p><span class="koboSpan" id="kobo.346.1" xmlns="http://www.w3.org/1999/xhtml">After we list all tests, we can selectively execute them using the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.347.1" xmlns="http://www.w3.org/1999/xhtml">dotnet</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.348.1" xmlns="http://www.w3.org/1999/xhtml"> command.</span></span></p>
<p><span class="koboSpan" id="kobo.349.1" xmlns="http://www.w3.org/1999/xhtml">If we want to run all the tests in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.350.1" xmlns="http://www.w3.org/1999/xhtml">DataStoreTests</span></strong><span class="koboSpan" id="kobo.351.1" xmlns="http://www.w3.org/1999/xhtml"> class, we can use </span><span class="No-Break"><span class="koboSpan" id="kobo.352.1" xmlns="http://www.w3.org/1999/xhtml">this command:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.353.1" xmlns="http://www.w3.org/1999/xhtml">
dotnet test --filter DataStoreTests</span></pre>
<p><span class="koboSpan" id="kobo.354.1" xmlns="http://www.w3.org/1999/xhtml">If we want to run </span><strong class="source-inline"><span class="koboSpan" id="kobo.355.1" xmlns="http://www.w3.org/1999/xhtml">Add_Item</span></strong><span class="koboSpan" id="kobo.356.1" xmlns="http://www.w3.org/1999/xhtml"> tests only, we can use </span><span class="No-Break"><span class="koboSpan" id="kobo.357.1" xmlns="http://www.w3.org/1999/xhtml">this command:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.358.1" xmlns="http://www.w3.org/1999/xhtml">
dotnet test --filter DataStoreTests.Add_Item</span></pre>
<p><span class="koboSpan" id="kobo.359.1" xmlns="http://www.w3.org/1999/xhtml">As we can see from the debug output, even though we created an instance of </span><strong class="source-inline"><span class="koboSpan" id="kobo.360.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.361.1" xmlns="http://www.w3.org/1999/xhtml"> in the constructor, the instance is re-created for each test. </span><span class="koboSpan" id="kobo.361.2" xmlns="http://www.w3.org/1999/xhtml">The instances created in the test class constructor won’t be shared across tests. </span><span class="koboSpan" id="kobo.361.3" xmlns="http://www.w3.org/1999/xhtml">Even though the effect is still</span><a id="_idIndexMarker819"/><span class="koboSpan" id="kobo.362.1" xmlns="http://www.w3.org/1999/xhtml"> the same, the code looks </span><a id="_idIndexMarker820"/><span class="No-Break"><span class="koboSpan" id="kobo.363.1" xmlns="http://www.w3.org/1999/xhtml">more concise.</span></span></p>
<p><span class="koboSpan" id="kobo.364.1" xmlns="http://www.w3.org/1999/xhtml">However, in some cases, we do want to share instances across tests. </span><span class="koboSpan" id="kobo.364.2" xmlns="http://www.w3.org/1999/xhtml">We can do so using class fixtures. </span><span class="koboSpan" id="kobo.364.3" xmlns="http://www.w3.org/1999/xhtml">Let’s look at these cases in the </span><span class="No-Break"><span class="koboSpan" id="kobo.365.1" xmlns="http://www.w3.org/1999/xhtml">next section.</span></span></p>
<h3><span class="koboSpan" id="kobo.366.1" xmlns="http://www.w3.org/1999/xhtml">Sharing using class fixtures</span></h3>
<p><span class="koboSpan" id="kobo.367.1" xmlns="http://www.w3.org/1999/xhtml">When we use </span><a id="_idIndexMarker821"/><span class="koboSpan" id="kobo.368.1" xmlns="http://www.w3.org/1999/xhtml">a tool in all test cases, we </span><a id="_idIndexMarker822"/><span class="koboSpan" id="kobo.369.1" xmlns="http://www.w3.org/1999/xhtml">may want to share the setup in all test cases instead of creating the same one every time. </span><span class="koboSpan" id="kobo.369.2" xmlns="http://www.w3.org/1999/xhtml">Let’s use a logging function as an example to </span><span class="No-Break"><span class="koboSpan" id="kobo.370.1" xmlns="http://www.w3.org/1999/xhtml">explain this.</span></span></p>
<p><span class="koboSpan" id="kobo.371.1" xmlns="http://www.w3.org/1999/xhtml">To have a test report, we want to create a test log to monitor the execution of unit tests. </span><span class="koboSpan" id="kobo.371.2" xmlns="http://www.w3.org/1999/xhtml">There is a library called </span><strong class="source-inline"><span class="koboSpan" id="kobo.372.1" xmlns="http://www.w3.org/1999/xhtml">Serilog</span></strong><span class="koboSpan" id="kobo.373.1" xmlns="http://www.w3.org/1999/xhtml"> that can be used for this purpose. </span><span class="koboSpan" id="kobo.373.2" xmlns="http://www.w3.org/1999/xhtml">We can log messages to different channels using </span><strong class="source-inline"><span class="koboSpan" id="kobo.374.1" xmlns="http://www.w3.org/1999/xhtml">Serilog</span></strong><span class="koboSpan" id="kobo.375.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.375.2" xmlns="http://www.w3.org/1999/xhtml">To use </span><strong class="source-inline"><span class="koboSpan" id="kobo.376.1" xmlns="http://www.w3.org/1999/xhtml">Serilog</span></strong><span class="koboSpan" id="kobo.377.1" xmlns="http://www.w3.org/1999/xhtml">, we need to set it up first and clean up it after all the tests have been executed. </span><span class="koboSpan" id="kobo.377.2" xmlns="http://www.w3.org/1999/xhtml">In this case, we want to share an instance of </span><strong class="source-inline"><span class="koboSpan" id="kobo.378.1" xmlns="http://www.w3.org/1999/xhtml">Serilog</span></strong><span class="koboSpan" id="kobo.379.1" xmlns="http://www.w3.org/1999/xhtml"> between all the tests instead of creating one for each test. </span><span class="koboSpan" id="kobo.379.2" xmlns="http://www.w3.org/1999/xhtml">With this setup, we can generate one log file for all the tests instead of multiple log files for </span><span class="No-Break"><span class="koboSpan" id="kobo.380.1" xmlns="http://www.w3.org/1999/xhtml">each test.</span></span></p>
<p><span class="koboSpan" id="kobo.381.1" xmlns="http://www.w3.org/1999/xhtml">To use </span><strong class="source-inline"><span class="koboSpan" id="kobo.382.1" xmlns="http://www.w3.org/1999/xhtml">Serilog</span></strong><span class="koboSpan" id="kobo.383.1" xmlns="http://www.w3.org/1999/xhtml">, we need to add the </span><strong class="source-inline"><span class="koboSpan" id="kobo.384.1" xmlns="http://www.w3.org/1999/xhtml">Serilog</span></strong><span class="koboSpan" id="kobo.385.1" xmlns="http://www.w3.org/1999/xhtml"> package to the project first. </span><span class="koboSpan" id="kobo.385.2" xmlns="http://www.w3.org/1999/xhtml">To do that, we can run the following </span><strong class="source-inline"><span class="koboSpan" id="kobo.386.1" xmlns="http://www.w3.org/1999/xhtml">dotnet</span></strong><span class="koboSpan" id="kobo.387.1" xmlns="http://www.w3.org/1999/xhtml"> commands in the project’s </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.388.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Tests</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.389.1" xmlns="http://www.w3.org/1999/xhtml"> folder:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.390.1" xmlns="http://www.w3.org/1999/xhtml">
dotnet add package Serilog
dotnet add package Serilog.Sinks.File</span></pre>
<p><span class="koboSpan" id="kobo.391.1" xmlns="http://www.w3.org/1999/xhtml">After adding the </span><strong class="source-inline"><span class="koboSpan" id="kobo.392.1" xmlns="http://www.w3.org/1999/xhtml">Serilog</span></strong><span class="koboSpan" id="kobo.393.1" xmlns="http://www.w3.org/1999/xhtml"> libraries to the project, we can create a class fixture, </span><strong class="source-inline"><span class="koboSpan" id="kobo.394.1" xmlns="http://www.w3.org/1999/xhtml">SerilogFixture</span></strong><span class="koboSpan" id="kobo.395.1" xmlns="http://www.w3.org/1999/xhtml">, for </span><span class="No-Break"><span class="koboSpan" id="kobo.396.1" xmlns="http://www.w3.org/1999/xhtml">demonstration purposes:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.397.1" xmlns="http://www.w3.org/1999/xhtml">
public class SerilogFixture : IDisposable {                ❶
  public ILogger Logger { get; private set; }
  public SerilogFixture() {
    Logger = new LoggerConfiguration()                     ❷
        .MinimumLevel.Debug()
        .WriteTo.File(@"logs\xunit_log.txt")
        .CreateLogger();
    Logger.Debug("SerilogFixture: initialized");
  }
  public void Dispose() {
    Logger.Debug("SerilogFixture: closed");
    Log.CloseAndFlush();                                   ❸
  }
}
public class DataStoreTests : IClassFixture&lt;SerilogFixture&gt; {                                                          ❹
  IDataStore&lt;Item&gt; datastore;
  SerilogFixture serilogFixture;
  public DataStoreTests(SerilogFixture fixture) {          ❺
      serilogFixture = fixture;                            ❻
      datastore = new MockDataStore();
      serilogFixture.Logger.Debug("DataStoreTests: Created");
  }
  [Fact]
  public async void Add_Item() ...
</span><span class="koboSpan" id="kobo.397.2" xmlns="http://www.w3.org/1999/xhtml">  ...
</span><span class="koboSpan" id="kobo.397.3" xmlns="http://www.w3.org/1999/xhtml">}</span></pre>
<p><span class="koboSpan" id="kobo.398.1" xmlns="http://www.w3.org/1999/xhtml">If  we want to use class fixtures, we can create them using the </span><span class="No-Break"><span class="koboSpan" id="kobo.399.1" xmlns="http://www.w3.org/1999/xhtml">following steps:</span></span></p>
<ol>
<li value="1"><span class="koboSpan" id="kobo.400.1" xmlns="http://www.w3.org/1999/xhtml">We can create a new class as the fixture class and add the setup code to the constructor. </span><span class="koboSpan" id="kobo.400.2" xmlns="http://www.w3.org/1999/xhtml">Here, we created a fixture class, </span><strong class="source-inline"><span class="koboSpan" id="kobo.401.1" xmlns="http://www.w3.org/1999/xhtml">SerilogFixture</span></strong><span class="koboSpan" id="kobo.402.1" xmlns="http://www.w3.org/1999/xhtml">, ❶, and initialized the </span><strong class="source-inline"><span class="koboSpan" id="kobo.403.1" xmlns="http://www.w3.org/1999/xhtml">ILogger</span></strong><span class="koboSpan" id="kobo.404.1" xmlns="http://www.w3.org/1999/xhtml"> interface, ❷, in </span><span class="No-Break"><span class="koboSpan" id="kobo.405.1" xmlns="http://www.w3.org/1999/xhtml">the constructor.</span></span></li>
<li><span class="koboSpan" id="kobo.406.1" xmlns="http://www.w3.org/1999/xhtml">Because we need to clean up the setup after the test case execution, we need to implement</span><a id="_idIndexMarker823"/><span class="koboSpan" id="kobo.407.1" xmlns="http://www.w3.org/1999/xhtml"> the </span><strong class="source-inline"><span class="koboSpan" id="kobo.408.1" xmlns="http://www.w3.org/1999/xhtml">IDisposable</span></strong><span class="koboSpan" id="kobo.409.1" xmlns="http://www.w3.org/1999/xhtml"> interface for the fixture class and put the cleanup</span><a id="_idIndexMarker824"/><span class="koboSpan" id="kobo.410.1" xmlns="http://www.w3.org/1999/xhtml"> code in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.411.1" xmlns="http://www.w3.org/1999/xhtml">Dispose()</span></strong><span class="koboSpan" id="kobo.412.1" xmlns="http://www.w3.org/1999/xhtml"> method. </span><span class="koboSpan" id="kobo.412.2" xmlns="http://www.w3.org/1999/xhtml">We implemented </span><strong class="source-inline"><span class="koboSpan" id="kobo.413.1" xmlns="http://www.w3.org/1999/xhtml">IDisposable</span></strong><span class="koboSpan" id="kobo.414.1" xmlns="http://www.w3.org/1999/xhtml"> in </span><strong class="source-inline"><span class="koboSpan" id="kobo.415.1" xmlns="http://www.w3.org/1999/xhtml">SerilogFixture</span></strong><span class="koboSpan" id="kobo.416.1" xmlns="http://www.w3.org/1999/xhtml"> and called the </span><strong class="source-inline"><span class="koboSpan" id="kobo.417.1" xmlns="http://www.w3.org/1999/xhtml">Serilog</span></strong><span class="koboSpan" id="kobo.418.1" xmlns="http://www.w3.org/1999/xhtml"> function, </span><strong class="source-inline"><span class="koboSpan" id="kobo.419.1" xmlns="http://www.w3.org/1999/xhtml">Log.CloseAndFlush()</span></strong><span class="koboSpan" id="kobo.420.1" xmlns="http://www.w3.org/1999/xhtml">, ❸, in the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.421.1" xmlns="http://www.w3.org/1999/xhtml">Dispose()</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.422.1" xmlns="http://www.w3.org/1999/xhtml"> method.</span></span></li>
<li><span class="koboSpan" id="kobo.423.1" xmlns="http://www.w3.org/1999/xhtml">To use the fixture, the test case needs to implement the </span><strong class="source-inline"><span class="koboSpan" id="kobo.424.1" xmlns="http://www.w3.org/1999/xhtml">IClassFixture&lt;T&gt;</span></strong><span class="koboSpan" id="kobo.425.1" xmlns="http://www.w3.org/1999/xhtml"> interface. </span><span class="koboSpan" id="kobo.425.2" xmlns="http://www.w3.org/1999/xhtml">We implemented this in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.426.1" xmlns="http://www.w3.org/1999/xhtml">DataStoreTests</span></strong><span class="koboSpan" id="kobo.427.1" xmlns="http://www.w3.org/1999/xhtml"> test </span><span class="No-Break"><span class="koboSpan" id="kobo.428.1" xmlns="http://www.w3.org/1999/xhtml">class, </span></span><span class="No-Break"><span class="koboSpan" id="kobo.429.1" xmlns="http://www.w3.org/1999/xhtml">❹</span></span><span class="No-Break"><span class="koboSpan" id="kobo.430.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
<li><span class="koboSpan" id="kobo.431.1" xmlns="http://www.w3.org/1999/xhtml">To access the fixture instance, we can add it as a constructor argument and it will be provided automatically. </span><span class="koboSpan" id="kobo.431.2" xmlns="http://www.w3.org/1999/xhtml">In the constructor of </span><strong class="source-inline"><span class="koboSpan" id="kobo.432.1" xmlns="http://www.w3.org/1999/xhtml">DataStoreTests</span></strong><span class="koboSpan" id="kobo.433.1" xmlns="http://www.w3.org/1999/xhtml">, ❺, we assign the argument to the private member variable, </span><strong class="source-inline"><span class="koboSpan" id="kobo.434.1" xmlns="http://www.w3.org/1999/xhtml">serilogFixture</span></strong><span class="koboSpan" id="kobo.435.1" xmlns="http://www.w3.org/1999/xhtml">, ❻. </span><span class="koboSpan" id="kobo.435.2" xmlns="http://www.w3.org/1999/xhtml">In test cases, we can access </span><strong class="source-inline"><span class="koboSpan" id="kobo.436.1" xmlns="http://www.w3.org/1999/xhtml">Serilog</span></strong><span class="koboSpan" id="kobo.437.1" xmlns="http://www.w3.org/1999/xhtml"> using </span><span class="No-Break"><span class="koboSpan" id="kobo.438.1" xmlns="http://www.w3.org/1999/xhtml">this variable.</span></span></li>
</ol>
<p><span class="koboSpan" id="kobo.439.1" xmlns="http://www.w3.org/1999/xhtml">To verify this setup, we replaced all our debug output with </span><strong class="source-inline"><span class="koboSpan" id="kobo.440.1" xmlns="http://www.w3.org/1999/xhtml">Serilog</span></strong> <strong class="source-inline"><span class="koboSpan" id="kobo.441.1" xmlns="http://www.w3.org/1999/xhtml">Debug</span></strong><span class="koboSpan" id="kobo.442.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.442.2" xmlns="http://www.w3.org/1999/xhtml">After executing the tests in </span><strong class="source-inline"><span class="koboSpan" id="kobo.443.1" xmlns="http://www.w3.org/1999/xhtml">DataStoreTests</span></strong><span class="koboSpan" id="kobo.444.1" xmlns="http://www.w3.org/1999/xhtml">, we can see the log messages here in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.445.1" xmlns="http://www.w3.org/1999/xhtml">xunit_log.txt</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.446.1" xmlns="http://www.w3.org/1999/xhtml">log file:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.447.1" xmlns="http://www.w3.org/1999/xhtml">
2022-08-28 10:25:39.273 +08:00 [DBG] SerilogFixture: initialized
2022-08-28 10:25:39.332 +08:00 [DBG] DataStoreTests: Created
2022-08-28 10:25:39.350 +08:00 [DBG] Delete_Item: Entry01
2022-08-28 10:25:39.355 +08:00 [DBG] DataStoreTests: Created
2022-08-28 10:25:39.355 +08:00 [DBG] Delete_Item: Group01
2022-08-28 10:25:39.356 +08:00 [DBG] DataStoreTests: Created
2022-08-28 10:25:39.357 +08:00 [DBG] Delete_Item: PxEntry01
2022-08-28 10:25:39.358 +08:00 [DBG] DataStoreTests: Created
2022-08-28 10:25:39.358 +08:00 [DBG] Delete_Item: Notes01
2022-08-28 10:25:39.359 +08:00 [DBG] DataStoreTests: Created
2022-08-28 10:25:39.359 +08:00 [DBG] Create_Item: PxEntry
2022-08-28 10:25:39.360 +08:00 [DBG] DataStoreTests: Created
2022-08-28 10:25:39.360 +08:00 [DBG] Create_Item: Group
2022-08-28 10:25:39.361 +08:00 [DBG] DataStoreTests: Created
2022-08-28 10:25:39.361 +08:00 [DBG] Create_Item: Entry
2022-08-28 10:25:39.362 +08:00 [DBG] DataStoreTests: Created
2022-08-28 10:25:39.362 +08:00 [DBG] Create_Item: Notes
2022-08-28 10:25:39.362 +08:00 [DBG] DataStoreTests: Created
2022-08-28 10:25:39.364 +08:00 [DBG] Add_Item: Done
2022-08-28 10:25:39.367 +08:00 [DBG] SerilogFixture: closed</span></pre>
<p><span class="koboSpan" id="kobo.448.1" xmlns="http://www.w3.org/1999/xhtml">As we expected, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.449.1" xmlns="http://www.w3.org/1999/xhtml">SerilogFixture</span></strong><span class="koboSpan" id="kobo.450.1" xmlns="http://www.w3.org/1999/xhtml"> class is initialized just once, and the instance can be</span><a id="_idIndexMarker825"/><span class="koboSpan" id="kobo.451.1" xmlns="http://www.w3.org/1999/xhtml"> used </span><a id="_idIndexMarker826"/><span class="koboSpan" id="kobo.452.1" xmlns="http://www.w3.org/1999/xhtml">in all the tests in </span><strong class="source-inline"><span class="koboSpan" id="kobo.453.1" xmlns="http://www.w3.org/1999/xhtml">DataStoreTests</span></strong><span class="koboSpan" id="kobo.454.1" xmlns="http://www.w3.org/1999/xhtml">, compared to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.455.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.456.1" xmlns="http://www.w3.org/1999/xhtml"> interface being initialized for </span><span class="No-Break"><span class="koboSpan" id="kobo.457.1" xmlns="http://www.w3.org/1999/xhtml">each test.</span></span></p>
<h3><span class="koboSpan" id="kobo.458.1" xmlns="http://www.w3.org/1999/xhtml">Sharing using collection fixtures</span></h3>
<p><span class="koboSpan" id="kobo.459.1" xmlns="http://www.w3.org/1999/xhtml">Using class</span><a id="_idIndexMarker827"/><span class="koboSpan" id="kobo.460.1" xmlns="http://www.w3.org/1999/xhtml"> fixtures, as shown</span><a id="_idIndexMarker828"/><span class="koboSpan" id="kobo.461.1" xmlns="http://www.w3.org/1999/xhtml"> in the previous section, we can share the test setup context in one test class. </span><span class="koboSpan" id="kobo.461.2" xmlns="http://www.w3.org/1999/xhtml">There are also cases in which we might want to share the test setup in multiple test classes. </span><span class="koboSpan" id="kobo.461.3" xmlns="http://www.w3.org/1999/xhtml">We can do so using </span><span class="No-Break"><span class="koboSpan" id="kobo.462.1" xmlns="http://www.w3.org/1999/xhtml">collection fixtures.</span></span></p>
<p><span class="koboSpan" id="kobo.463.1" xmlns="http://www.w3.org/1999/xhtml">In our case of </span><strong class="source-inline"><span class="koboSpan" id="kobo.464.1" xmlns="http://www.w3.org/1999/xhtml">Serilog</span></strong><span class="koboSpan" id="kobo.465.1" xmlns="http://www.w3.org/1999/xhtml">, we can use it in many test classes as well so that we can see all the log messages in one log file. </span><span class="koboSpan" id="kobo.465.2" xmlns="http://www.w3.org/1999/xhtml">To use one </span><strong class="source-inline"><span class="koboSpan" id="kobo.466.1" xmlns="http://www.w3.org/1999/xhtml">Serilog</span></strong><span class="koboSpan" id="kobo.467.1" xmlns="http://www.w3.org/1999/xhtml"> setup for all the test classes, we can implement collection fixtures in our project. </span><span class="koboSpan" id="kobo.467.2" xmlns="http://www.w3.org/1999/xhtml">To use collection fixtures, we can create two new classes, </span><strong class="source-inline"><span class="koboSpan" id="kobo.468.1" xmlns="http://www.w3.org/1999/xhtml">SerilogFixture</span></strong><span class="koboSpan" id="kobo.469.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.470.1" xmlns="http://www.w3.org/1999/xhtml">SerilogCollection</span></strong><span class="koboSpan" id="kobo.471.1" xmlns="http://www.w3.org/1999/xhtml">, in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.472.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Tests</span></strong><span class="koboSpan" id="kobo.473.1" xmlns="http://www.w3.org/1999/xhtml"> project as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.474.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.1</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.475.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.476.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.1: SerilogFixture.cs (https://epa.ms/SerilogFixture11-1)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.477.1" xmlns="http://www.w3.org/1999/xhtml">
namespace PassXYZ.Vault.Tests;
public class SerilogFixture : IDisposable {
  public ILogger Logger { get; private set; }
  public SerilogFixture() {
      Logger = new LoggerConfiguration()
          .MinimumLevel.Debug()
          .WriteTo.File(@"logs\xunit_log.txt")
          .CreateLogger();
      Logger.Debug("SerilogFixture: initialized");
  }
  public void Dispose() {
      Logger.Debug("SerilogFixture: closed");
      Log.CloseAndFlush();
  }
}
[CollectionDefinition("Serilog collection")]              ❶
public class SerilogCollection:ICollectionFixture&lt;SerilogFixture&gt;
{
}                                                         ❷</span></pre>
<p><span class="koboSpan" id="kobo.478.1" xmlns="http://www.w3.org/1999/xhtml">We can follow the steps below to implement </span><span class="No-Break"><span class="koboSpan" id="kobo.479.1" xmlns="http://www.w3.org/1999/xhtml">collection fixtures:</span></span></p>
<ol>
<li value="1"><span class="koboSpan" id="kobo.480.1" xmlns="http://www.w3.org/1999/xhtml">We create a new class file, </span><strong class="source-inline"><span class="koboSpan" id="kobo.481.1" xmlns="http://www.w3.org/1999/xhtml">SerilogFixture.cs</span></strong><span class="koboSpan" id="kobo.482.1" xmlns="http://www.w3.org/1999/xhtml">, and put both </span><strong class="source-inline"><span class="koboSpan" id="kobo.483.1" xmlns="http://www.w3.org/1999/xhtml">SerilogFixture</span></strong><span class="koboSpan" id="kobo.484.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.485.1" xmlns="http://www.w3.org/1999/xhtml">SerilogCollection</span></strong><span class="koboSpan" id="kobo.486.1" xmlns="http://www.w3.org/1999/xhtml"> into </span><span class="No-Break"><span class="koboSpan" id="kobo.487.1" xmlns="http://www.w3.org/1999/xhtml">this file.</span></span></li>
<li><span class="koboSpan" id="kobo.488.1" xmlns="http://www.w3.org/1999/xhtml">We decorate the collection definition class, </span><strong class="source-inline"><span class="koboSpan" id="kobo.489.1" xmlns="http://www.w3.org/1999/xhtml">SerilogCollection</span></strong><span class="koboSpan" id="kobo.490.1" xmlns="http://www.w3.org/1999/xhtml">, with the </span><strong class="source-inline"><span class="koboSpan" id="kobo.491.1" xmlns="http://www.w3.org/1999/xhtml">[CollectionDefinition]</span></strong><span class="koboSpan" id="kobo.492.1" xmlns="http://www.w3.org/1999/xhtml"> attribute, ❶. </span><span class="koboSpan" id="kobo.492.2" xmlns="http://www.w3.org/1999/xhtml">Then, we give it a unique name that can be used to identify the </span><span class="No-Break"><span class="koboSpan" id="kobo.493.1" xmlns="http://www.w3.org/1999/xhtml">test collection.</span></span></li>
<li><span class="koboSpan" id="kobo.494.1" xmlns="http://www.w3.org/1999/xhtml">The collection definition class, </span><strong class="source-inline"><span class="koboSpan" id="kobo.495.1" xmlns="http://www.w3.org/1999/xhtml">SerilogCollection</span></strong><span class="koboSpan" id="kobo.496.1" xmlns="http://www.w3.org/1999/xhtml">, needs to implement the </span><strong class="source-inline"><span class="koboSpan" id="kobo.497.1" xmlns="http://www.w3.org/1999/xhtml">ICollectionFixture&lt;T&gt;</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.498.1" xmlns="http://www.w3.org/1999/xhtml">interface, </span></span><span class="No-Break"><span class="koboSpan" id="kobo.499.1" xmlns="http://www.w3.org/1999/xhtml">❷</span></span><span class="No-Break"><span class="koboSpan" id="kobo.500.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
</ol>
<p><span class="koboSpan" id="kobo.501.1" xmlns="http://www.w3.org/1999/xhtml">To use a</span><a id="_idIndexMarker829"/><span class="koboSpan" id="kobo.502.1" xmlns="http://www.w3.org/1999/xhtml"> collection fixture, we </span><a id="_idIndexMarker830"/><span class="koboSpan" id="kobo.503.1" xmlns="http://www.w3.org/1999/xhtml">can make the following changes to our </span><span class="No-Break"><span class="koboSpan" id="kobo.504.1" xmlns="http://www.w3.org/1999/xhtml">test classes:</span></span></p>
<ol>
<li value="1"><span class="koboSpan" id="kobo.505.1" xmlns="http://www.w3.org/1999/xhtml">We can add the </span><strong class="source-inline"><span class="koboSpan" id="kobo.506.1" xmlns="http://www.w3.org/1999/xhtml">[Collection]</span></strong><span class="koboSpan" id="kobo.507.1" xmlns="http://www.w3.org/1999/xhtml"> attribute to all the test classes that will be part of the collection. </span><span class="koboSpan" id="kobo.507.2" xmlns="http://www.w3.org/1999/xhtml">We assign </span><strong class="source-inline"><span class="koboSpan" id="kobo.508.1" xmlns="http://www.w3.org/1999/xhtml">Serilog collection</span></strong><span class="koboSpan" id="kobo.509.1" xmlns="http://www.w3.org/1999/xhtml"> as a name to the test collection definition in the attribute. </span><span class="koboSpan" id="kobo.509.2" xmlns="http://www.w3.org/1999/xhtml">In our case, as we can see in </span><em class="italic"><span class="koboSpan" id="kobo.510.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.2</span></em><span class="koboSpan" id="kobo.511.1" xmlns="http://www.w3.org/1999/xhtml">, we add a </span><strong class="source-inline"><span class="koboSpan" id="kobo.512.1" xmlns="http://www.w3.org/1999/xhtml">[Collection("Serilog collection")]</span></strong><span class="koboSpan" id="kobo.513.1" xmlns="http://www.w3.org/1999/xhtml">  attribute, ①, to the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.514.1" xmlns="http://www.w3.org/1999/xhtml">DataStoreTests</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.515.1" xmlns="http://www.w3.org/1999/xhtml"> class.</span></span></li>
<li><span class="koboSpan" id="kobo.516.1" xmlns="http://www.w3.org/1999/xhtml">To access the fixture instance, we can do the same as in the previous section with class fixtures and add it as a constructor argument. </span><span class="koboSpan" id="kobo.516.2" xmlns="http://www.w3.org/1999/xhtml">Then, it will be provided automatically. </span><span class="koboSpan" id="kobo.516.3" xmlns="http://www.w3.org/1999/xhtml">In the constructor of </span><strong class="source-inline"><span class="koboSpan" id="kobo.517.1" xmlns="http://www.w3.org/1999/xhtml">DataStoreTests</span></strong><span class="koboSpan" id="kobo.518.1" xmlns="http://www.w3.org/1999/xhtml">, we assign a </span><strong class="source-inline"><span class="koboSpan" id="kobo.519.1" xmlns="http://www.w3.org/1999/xhtml">fixture</span></strong><span class="koboSpan" id="kobo.520.1" xmlns="http://www.w3.org/1999/xhtml"> argument to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.521.1" xmlns="http://www.w3.org/1999/xhtml">serilogFixture</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.522.1" xmlns="http://www.w3.org/1999/xhtml">variable, </span></span><span class="No-Break"><span class="koboSpan" id="kobo.523.1" xmlns="http://www.w3.org/1999/xhtml">②</span></span><span class="No-Break"><span class="koboSpan" id="kobo.524.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></li>
</ol>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.525.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.2: DataStoreTests.cs (https://epa.ms/DataStoreTests11-2)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.526.1" xmlns="http://www.w3.org/1999/xhtml">
namespace PassXYZ.Vault.Tests;
[Collection("Serilog collection")]                       ①
public class DataStoreTests {
  IDataStore&lt;Item&gt; datastore;
  SerilogFixture serilogFixture;
  public DataStoreTests(SerilogFixture fixture) {
    datastore = new MockDataStore();
    serilogFixture = fixture;                            ②
    serilogFixture.Logger.Debug("DataStoreTests
      initialized");
  }
  [Fact]
  public async void Add_Item() {
    // Arrange
    ItemSubType itemSubType = ItemSubType.Entry;
    // Act
    var newItem = datastore.CreateNewItem(itemSubType);
    newItem.Name = $"{itemSubType.ToString()}01";
    await datastore.AddItemAsync(newItem);
    var item = datastore.GetItem(newItem.Id);
    // Assert
    Assert.Equal(newItem.Id, item.Id);
    serilogFixture.Logger.Debug("Add_Item done");
  }
  [Theory]
  [InlineData(ItemSubType.Entry)]
  [InlineData(ItemSubType.Group)]
  [InlineData(ItemSubType.Notes)]
  [InlineData(ItemSubType.PxEntry)]
  public async void Delete_Item(ItemSubType itemSubType)...
</span><span class="koboSpan" id="kobo.526.2" xmlns="http://www.w3.org/1999/xhtml">  [Theory]
  [InlineData(ItemSubType.Entry)]
  [InlineData(ItemSubType.Group)]
  [InlineData(ItemSubType.Notes)]
  [InlineData(ItemSubType.PxEntry)]
  public void Create_Item(ItemSubType itemSubType) ...
</span><span class="koboSpan" id="kobo.526.3" xmlns="http://www.w3.org/1999/xhtml">}</span></pre>
<p><span class="koboSpan" id="kobo.527.1" xmlns="http://www.w3.org/1999/xhtml">With these examples, we have introduced how to create unit tests in the model layer. </span><span class="koboSpan" id="kobo.527.2" xmlns="http://www.w3.org/1999/xhtml">The</span><a id="_idIndexMarker831"/><span class="koboSpan" id="kobo.528.1" xmlns="http://www.w3.org/1999/xhtml"> knowledge that we have</span><a id="_idIndexMarker832"/><span class="koboSpan" id="kobo.529.1" xmlns="http://www.w3.org/1999/xhtml"> gained so far can be used in unit testing for other .NET applications </span><span class="No-Break"><span class="koboSpan" id="kobo.530.1" xmlns="http://www.w3.org/1999/xhtml">as well.</span></span></p>
<p><span class="koboSpan" id="kobo.531.1" xmlns="http://www.w3.org/1999/xhtml">So far, we have concluded the introduction of the model layer unit test. </span><span class="koboSpan" id="kobo.531.2" xmlns="http://www.w3.org/1999/xhtml">In the next part of this chapter, we will explore the Razor component unit test using the </span><span class="No-Break"><span class="koboSpan" id="kobo.532.1" xmlns="http://www.w3.org/1999/xhtml">bUnit library.</span></span></p>
<h1 id="_idParaDest-217"><a id="_idTextAnchor233"/><span class="koboSpan" id="kobo.533.1" xmlns="http://www.w3.org/1999/xhtml">Razor component testing using bUnit</span></h1>
<p><span class="koboSpan" id="kobo.534.1" xmlns="http://www.w3.org/1999/xhtml">In .NET MAUI </span><a id="_idIndexMarker833"/><span class="koboSpan" id="kobo.535.1" xmlns="http://www.w3.org/1999/xhtml">development, we don’t really have a good unit test framework for XAML-based UI components, but we do have one for Blazor. </span><span class="koboSpan" id="kobo.535.2" xmlns="http://www.w3.org/1999/xhtml">bUnit is an excellent test library that can be used for the unit test development of Razor components. </span><span class="koboSpan" id="kobo.535.3" xmlns="http://www.w3.org/1999/xhtml">With the bUnit library, we can develop unit test cases for Razor components using xUnit, NUnit, or MSTest. </span><span class="koboSpan" id="kobo.535.4" xmlns="http://www.w3.org/1999/xhtml">We will use xUnit with bUnit for the rest of the chapter. </span><span class="koboSpan" id="kobo.535.5" xmlns="http://www.w3.org/1999/xhtml">The structure of unit test cases using bUnit is similar to the xUnit test cases that we introduced in the </span><span class="No-Break"><span class="koboSpan" id="kobo.536.1" xmlns="http://www.w3.org/1999/xhtml">previous section.</span></span></p>
<p><span class="koboSpan" id="kobo.537.1" xmlns="http://www.w3.org/1999/xhtml">The test targets in the rest of this chapter are the following Razor components that we created in the second part of </span><span class="No-Break"><span class="koboSpan" id="kobo.538.1" xmlns="http://www.w3.org/1999/xhtml">this book:</span></span></p>
<ul>
<li><span class="koboSpan" id="kobo.539.1" xmlns="http://www.w3.org/1999/xhtml">Razor components in the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.540.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.BlazorUI</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.541.1" xmlns="http://www.w3.org/1999/xhtml"> project</span></span></li>
<li><span class="koboSpan" id="kobo.542.1" xmlns="http://www.w3.org/1999/xhtml">Razor components in the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.543.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.544.1" xmlns="http://www.w3.org/1999/xhtml"> project</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.545.1" xmlns="http://www.w3.org/1999/xhtml">To test Razor components using bUnit, we need to change the project configuration of </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.546.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Tests</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.547.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<h2 id="_idParaDest-218"><a id="_idTextAnchor234"/><span class="koboSpan" id="kobo.548.1" xmlns="http://www.w3.org/1999/xhtml">Changing project configuration for bUnit</span></h2>
<p><span class="koboSpan" id="kobo.549.1" xmlns="http://www.w3.org/1999/xhtml">To set up the</span><a id="_idIndexMarker834"/><span class="koboSpan" id="kobo.550.1" xmlns="http://www.w3.org/1999/xhtml"> test environment, we need to add the bUnit and </span><strong class="source-inline"><span class="koboSpan" id="kobo.551.1" xmlns="http://www.w3.org/1999/xhtml">Moq</span></strong><span class="koboSpan" id="kobo.552.1" xmlns="http://www.w3.org/1999/xhtml"> packages and, update the SDK type. </span><span class="koboSpan" id="kobo.552.2" xmlns="http://www.w3.org/1999/xhtml">We can make the following changes to the xUnit </span><strong class="source-inline"><span class="koboSpan" id="kobo.553.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Tests</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.554.1" xmlns="http://www.w3.org/1999/xhtml">testing project:</span></span></p>
<ol>
<li value="1"><span class="koboSpan" id="kobo.555.1" xmlns="http://www.w3.org/1999/xhtml">Add bUnit to </span><span class="No-Break"><span class="koboSpan" id="kobo.556.1" xmlns="http://www.w3.org/1999/xhtml">the project.</span></span></li>
</ol>
<p><span class="koboSpan" id="kobo.557.1" xmlns="http://www.w3.org/1999/xhtml">To add the bUnit library to the project, we can change to the project folder first and execute the following command from </span><span class="No-Break"><span class="koboSpan" id="kobo.558.1" xmlns="http://www.w3.org/1999/xhtml">a console:</span></span></p>
<pre class="source-code">
<strong class="bold"><span class="koboSpan" id="kobo.559.1" xmlns="http://www.w3.org/1999/xhtml">cd PassXYZ.Vault.Tests</span></strong>
<strong class="bold"><span class="koboSpan" id="kobo.560.1" xmlns="http://www.w3.org/1999/xhtml">dotnet add package bunit</span></strong></pre>
<ol>
<li value="2"><span class="koboSpan" id="kobo.561.1" xmlns="http://www.w3.org/1999/xhtml">We also need to add the </span><strong class="source-inline"><span class="koboSpan" id="kobo.562.1" xmlns="http://www.w3.org/1999/xhtml">Moq</span></strong><span class="koboSpan" id="kobo.563.1" xmlns="http://www.w3.org/1999/xhtml"> package, which is a mocking library that we will use in the </span><span class="No-Break"><span class="koboSpan" id="kobo.564.1" xmlns="http://www.w3.org/1999/xhtml">test setup:</span></span><pre class="source-code">
<strong class="bold"><span class="koboSpan" id="kobo.565.1" xmlns="http://www.w3.org/1999/xhtml">dotnet add package Moq</span></strong></pre></li>
<li><span class="koboSpan" id="kobo.566.1" xmlns="http://www.w3.org/1999/xhtml">Change the </span><span class="No-Break"><span class="koboSpan" id="kobo.567.1" xmlns="http://www.w3.org/1999/xhtml">project configuration.</span></span></li>
</ol>
<p><span class="koboSpan" id="kobo.568.1" xmlns="http://www.w3.org/1999/xhtml">To test the Razor components, we also need to change the project’s SDK </span><span class="No-Break"><span class="koboSpan" id="kobo.569.1" xmlns="http://www.w3.org/1999/xhtml">to </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.570.1" xmlns="http://www.w3.org/1999/xhtml">Microsoft.NET.Sdk.Razor</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.571.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.572.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.573.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Tests.csproj</span></strong><span class="koboSpan" id="kobo.574.1" xmlns="http://www.w3.org/1999/xhtml"> project file, we need to replace the </span><span class="No-Break"><span class="koboSpan" id="kobo.575.1" xmlns="http://www.w3.org/1999/xhtml">following line:</span></span></p>
<pre class="source-code">
<strong class="bold"><span class="koboSpan" id="kobo.576.1" xmlns="http://www.w3.org/1999/xhtml">&lt;Project Sdk="Microsoft.NET.Sdk"&gt;</span></strong></pre>
<p><span class="koboSpan" id="kobo.577.1" xmlns="http://www.w3.org/1999/xhtml">We will do so </span><span class="No-Break"><span class="koboSpan" id="kobo.578.1" xmlns="http://www.w3.org/1999/xhtml">with this:</span></span></p>
<pre class="source-code">
<strong class="bold"><span class="koboSpan" id="kobo.579.1" xmlns="http://www.w3.org/1999/xhtml">&lt;Project Sdk="Microsoft.NET.Sdk.Razor"&gt;</span></strong></pre>
<p><span class="koboSpan" id="kobo.580.1" xmlns="http://www.w3.org/1999/xhtml">Once we have </span><a id="_idIndexMarker835"/><span class="koboSpan" id="kobo.581.1" xmlns="http://www.w3.org/1999/xhtml">the project configuration ready, we can create a simple unit test case using bUnit to test our </span><span class="No-Break"><span class="koboSpan" id="kobo.582.1" xmlns="http://www.w3.org/1999/xhtml">Razor components.</span></span></p>
<h2 id="_idParaDest-219"><a id="_idTextAnchor235"/><span class="koboSpan" id="kobo.583.1" xmlns="http://www.w3.org/1999/xhtml">Creating a bUnit test case</span></h2>
<p><span class="koboSpan" id="kobo.584.1" xmlns="http://www.w3.org/1999/xhtml">In our </span><strong class="source-inline"><span class="koboSpan" id="kobo.585.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.586.1" xmlns="http://www.w3.org/1999/xhtml"> app, we</span><a id="_idIndexMarker836"/><span class="koboSpan" id="kobo.587.1" xmlns="http://www.w3.org/1999/xhtml"> have two kinds of Razor components that can be tested. </span><span class="koboSpan" id="kobo.587.2" xmlns="http://www.w3.org/1999/xhtml">The shared Razor components reside in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.588.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.BlazorUI</span></strong><span class="koboSpan" id="kobo.589.1" xmlns="http://www.w3.org/1999/xhtml"> project. </span><span class="koboSpan" id="kobo.589.2" xmlns="http://www.w3.org/1999/xhtml">They are generic Razor components that can be used in different projects. </span><span class="koboSpan" id="kobo.589.3" xmlns="http://www.w3.org/1999/xhtml">The other set of Razor components is the one in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.590.1" xmlns="http://www.w3.org/1999/xhtml">Pages</span></strong><span class="koboSpan" id="kobo.591.1" xmlns="http://www.w3.org/1999/xhtml"> folder of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.592.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.593.1" xmlns="http://www.w3.org/1999/xhtml"> project. </span><span class="koboSpan" id="kobo.593.2" xmlns="http://www.w3.org/1999/xhtml">They are specific to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.594.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.595.1" xmlns="http://www.w3.org/1999/xhtml"> app and they use shared components from the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.596.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.BlazorUI</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.597.1" xmlns="http://www.w3.org/1999/xhtml"> project.</span></span></p>
<p><span class="koboSpan" id="kobo.598.1" xmlns="http://www.w3.org/1999/xhtml">To test the Razor components in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.599.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.BlazorUI</span></strong><span class="koboSpan" id="kobo.600.1" xmlns="http://www.w3.org/1999/xhtml"> project, we can test each component separately. </span><span class="koboSpan" id="kobo.600.2" xmlns="http://www.w3.org/1999/xhtml">These test cases are unit test cases. </span><span class="koboSpan" id="kobo.600.3" xmlns="http://www.w3.org/1999/xhtml">The Razor components in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.601.1" xmlns="http://www.w3.org/1999/xhtml">Pages</span></strong><span class="koboSpan" id="kobo.602.1" xmlns="http://www.w3.org/1999/xhtml"> folder of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.603.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.604.1" xmlns="http://www.w3.org/1999/xhtml"> project are UI pages. </span><span class="koboSpan" id="kobo.604.2" xmlns="http://www.w3.org/1999/xhtml">These pages use UI components from other packages, so they have more dependencies. </span><span class="koboSpan" id="kobo.604.3" xmlns="http://www.w3.org/1999/xhtml">These test cases can be considered integration </span><span class="No-Break"><span class="koboSpan" id="kobo.605.1" xmlns="http://www.w3.org/1999/xhtml">test cases.</span></span></p>
<p><span class="koboSpan" id="kobo.606.1" xmlns="http://www.w3.org/1999/xhtml">We can create a test case for the </span><strong class="source-inline"><span class="koboSpan" id="kobo.607.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.608.1" xmlns="http://www.w3.org/1999/xhtml"> Razor component in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.609.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.BlazorUI</span></strong><span class="koboSpan" id="kobo.610.1" xmlns="http://www.w3.org/1999/xhtml"> project first. </span><span class="koboSpan" id="kobo.610.2" xmlns="http://www.w3.org/1999/xhtml">To test </span><strong class="source-inline"><span class="koboSpan" id="kobo.611.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.612.1" xmlns="http://www.w3.org/1999/xhtml">, we can create a xUnit test class, </span><strong class="source-inline"><span class="koboSpan" id="kobo.613.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialogTests</span></strong><span class="koboSpan" id="kobo.614.1" xmlns="http://www.w3.org/1999/xhtml">, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.615.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.3</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.616.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.617.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.3: ModalDialogTests.cs (https://epa.ms/ModalDialogTests11-3)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.618.1" xmlns="http://www.w3.org/1999/xhtml">
namespace PassXYZ.Vault.Tests {
  [Collection("Serilog collection")]
  public class ModalDialogTests : TestContext {           ❶
    SerilogFixture serilogFixture;
    public ModalDialogTests(SerilogFixture serilogFixture) {
      this.serilogFixture = serilogFixture;
    }
    [Fact]
    public void ModalDialogInitTest() {
      string title = "ModalDialog Test";                  ❷
      var cut = RenderComponent&lt;ModalDialog&gt;(             ❸
        parameters =&gt; parameters.Add(p =&gt; p.Title, title) ❹
        .Add(p =&gt; p.CloseButtonText, "Close")
        .Add(p =&gt; p.SaveButtonText, "Save"));
      cut.Find("h5").TextContent.MarkupMatches(title);    ❺
      serilogFixture.Logger.Debug("ModalDialogInitTest:
        done");
    }
    ...
</span><span class="koboSpan" id="kobo.618.2" xmlns="http://www.w3.org/1999/xhtml">  }
}</span></pre>
<p><span class="koboSpan" id="kobo.619.1" xmlns="http://www.w3.org/1999/xhtml">As we can </span><a id="_idIndexMarker837"/><span class="koboSpan" id="kobo.620.1" xmlns="http://www.w3.org/1999/xhtml">see in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.621.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialogTests</span></strong><span class="koboSpan" id="kobo.622.1" xmlns="http://www.w3.org/1999/xhtml"> unit test class, it is very similar to the unit test class that we created for the model layer. </span><span class="koboSpan" id="kobo.622.2" xmlns="http://www.w3.org/1999/xhtml">We reuse the collection fixture that we created before and initialized it in the constructor. </span><span class="koboSpan" id="kobo.622.3" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.623.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialogInitTest</span></strong><span class="koboSpan" id="kobo.624.1" xmlns="http://www.w3.org/1999/xhtml"> test case, we still use the </span><strong class="bold"><span class="koboSpan" id="kobo.625.1" xmlns="http://www.w3.org/1999/xhtml">Arrange</span></strong><span class="koboSpan" id="kobo.626.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="bold"><span class="koboSpan" id="kobo.627.1" xmlns="http://www.w3.org/1999/xhtml">Act</span></strong><span class="koboSpan" id="kobo.628.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><strong class="bold"><span class="koboSpan" id="kobo.629.1" xmlns="http://www.w3.org/1999/xhtml">Assert</span></strong><span class="koboSpan" id="kobo.630.1" xmlns="http://www.w3.org/1999/xhtml"> pattern to implement the </span><span class="No-Break"><span class="koboSpan" id="kobo.631.1" xmlns="http://www.w3.org/1999/xhtml">test case.</span></span></p>
<p><span class="koboSpan" id="kobo.632.1" xmlns="http://www.w3.org/1999/xhtml">All bUnit test classes inherit from </span><strong class="source-inline"><span class="koboSpan" id="kobo.633.1" xmlns="http://www.w3.org/1999/xhtml">TestContext</span></strong><span class="koboSpan" id="kobo.634.1" xmlns="http://www.w3.org/1999/xhtml"> ❶. </span><span class="koboSpan" id="kobo.634.2" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="bold"><span class="koboSpan" id="kobo.635.1" xmlns="http://www.w3.org/1999/xhtml">Arrange</span></strong><span class="koboSpan" id="kobo.636.1" xmlns="http://www.w3.org/1999/xhtml"> phase, we initialize a local </span><strong class="source-inline"><span class="koboSpan" id="kobo.637.1" xmlns="http://www.w3.org/1999/xhtml">title</span></strong><span class="koboSpan" id="kobo.638.1" xmlns="http://www.w3.org/1999/xhtml"> variable, ❷, with a defined string. </span><span class="koboSpan" id="kobo.638.2" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="bold"><span class="koboSpan" id="kobo.639.1" xmlns="http://www.w3.org/1999/xhtml">Act</span></strong><span class="koboSpan" id="kobo.640.1" xmlns="http://www.w3.org/1999/xhtml"> phase, we call a generic method, </span><strong class="source-inline"><span class="koboSpan" id="kobo.641.1" xmlns="http://www.w3.org/1999/xhtml">RenderComponent&lt;T&gt;</span></strong><span class="koboSpan" id="kobo.642.1" xmlns="http://www.w3.org/1999/xhtml">, ❸, and use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.643.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.644.1" xmlns="http://www.w3.org/1999/xhtml"> type as the type parameter. </span><span class="koboSpan" id="kobo.644.2" xmlns="http://www.w3.org/1999/xhtml">We pass the </span><strong class="source-inline"><span class="koboSpan" id="kobo.645.1" xmlns="http://www.w3.org/1999/xhtml">title</span></strong><span class="koboSpan" id="kobo.646.1" xmlns="http://www.w3.org/1999/xhtml"> variable, ❹, as the component parameter. </span><span class="koboSpan" id="kobo.646.2" xmlns="http://www.w3.org/1999/xhtml">The result of </span><strong class="source-inline"><span class="koboSpan" id="kobo.647.1" xmlns="http://www.w3.org/1999/xhtml">RenderComponent&lt;T&gt;</span></strong><span class="koboSpan" id="kobo.648.1" xmlns="http://www.w3.org/1999/xhtml"> is stored in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.649.1" xmlns="http://www.w3.org/1999/xhtml">cut</span></strong><span class="koboSpan" id="kobo.650.1" xmlns="http://www.w3.org/1999/xhtml"> variable. </span><span class="koboSpan" id="kobo.650.2" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="bold"><span class="koboSpan" id="kobo.651.1" xmlns="http://www.w3.org/1999/xhtml">Assert</span></strong><span class="koboSpan" id="kobo.652.1" xmlns="http://www.w3.org/1999/xhtml"> phase, we verify that the title text after rendering is the same as the argument that we pass to it using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.653.1" xmlns="http://www.w3.org/1999/xhtml">Find()</span></strong><span class="koboSpan" id="kobo.654.1" xmlns="http://www.w3.org/1999/xhtml"> bUnit method, ❺. </span><span class="koboSpan" id="kobo.654.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.655.1" xmlns="http://www.w3.org/1999/xhtml">Find()</span></strong><span class="koboSpan" id="kobo.656.1" xmlns="http://www.w3.org/1999/xhtml"> bUnit method can be used to find any HTML tag. </span><span class="koboSpan" id="kobo.656.2" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.657.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.658.1" xmlns="http://www.w3.org/1999/xhtml">, the title is rendered as a </span><strong class="source-inline"><span class="koboSpan" id="kobo.659.1" xmlns="http://www.w3.org/1999/xhtml">&lt;h5&gt;</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.660.1" xmlns="http://www.w3.org/1999/xhtml">HTML tag.</span></span></p>
<p><span class="koboSpan" id="kobo.661.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.662.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialogInitTest</span></strong><span class="koboSpan" id="kobo.663.1" xmlns="http://www.w3.org/1999/xhtml"> test case, we can see the structure of the bUnit tests. </span><span class="koboSpan" id="kobo.663.2" xmlns="http://www.w3.org/1999/xhtml">In bUnit tests, we render the component under test first. </span><span class="koboSpan" id="kobo.663.3" xmlns="http://www.w3.org/1999/xhtml">The result of the rendering is stored in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.664.1" xmlns="http://www.w3.org/1999/xhtml">cut</span></strong><span class="koboSpan" id="kobo.665.1" xmlns="http://www.w3.org/1999/xhtml"> variable, ❸. </span><span class="koboSpan" id="kobo.665.2" xmlns="http://www.w3.org/1999/xhtml">It is an instance of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.666.1" xmlns="http://www.w3.org/1999/xhtml">IRenderedComponent</span></strong><span class="koboSpan" id="kobo.667.1" xmlns="http://www.w3.org/1999/xhtml"> interface. </span><span class="koboSpan" id="kobo.667.2" xmlns="http://www.w3.org/1999/xhtml">We can verify the result by referring to the properties or calling the methods of the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.668.1" xmlns="http://www.w3.org/1999/xhtml">IRenderedComponent</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.669.1" xmlns="http://www.w3.org/1999/xhtml"> instance.</span></span></p>
<p><span class="koboSpan" id="kobo.670.1" xmlns="http://www.w3.org/1999/xhtml">When Razor components are rendered in </span><strong class="source-inline"><span class="koboSpan" id="kobo.671.1" xmlns="http://www.w3.org/1999/xhtml">TestContext</span></strong><span class="koboSpan" id="kobo.672.1" xmlns="http://www.w3.org/1999/xhtml">, they have the same lifecycle as any other Razor component. </span><span class="koboSpan" id="kobo.672.2" xmlns="http://www.w3.org/1999/xhtml">We can pass parameters to components under test, and they can produce output, similar to what happens in </span><span class="No-Break"><span class="koboSpan" id="kobo.673.1" xmlns="http://www.w3.org/1999/xhtml">a browser.</span></span></p>
<p><span class="koboSpan" id="kobo.674.1" xmlns="http://www.w3.org/1999/xhtml">When we render the </span><strong class="source-inline"><span class="koboSpan" id="kobo.675.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.676.1" xmlns="http://www.w3.org/1999/xhtml"> component in the preceding example, we can pass component parameters to it using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.677.1" xmlns="http://www.w3.org/1999/xhtml">Add()</span></strong><span class="koboSpan" id="kobo.678.1" xmlns="http://www.w3.org/1999/xhtml"> method of a parameter builder of the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.679.1" xmlns="http://www.w3.org/1999/xhtml">ComponentParameterCollectionBuilder&lt;TComponent&gt;</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.680.1" xmlns="http://www.w3.org/1999/xhtml"> type.</span></span></p>
<p><span class="koboSpan" id="kobo.681.1" xmlns="http://www.w3.org/1999/xhtml">We may not have a problem rendering simple components using C# code. </span><span class="koboSpan" id="kobo.681.2" xmlns="http://www.w3.org/1999/xhtml">However, we usually need to</span><a id="_idIndexMarker838"/><span class="koboSpan" id="kobo.682.1" xmlns="http://www.w3.org/1999/xhtml"> pass multiple parameters to a component, and it is not convenient to do so in C# code. </span><span class="koboSpan" id="kobo.682.2" xmlns="http://www.w3.org/1999/xhtml">With bUnit, we can develop test cases in Razor files, which can bring a much better experience in unit </span><span class="No-Break"><span class="koboSpan" id="kobo.683.1" xmlns="http://www.w3.org/1999/xhtml">test development.</span></span></p>
<h2 id="_idParaDest-220"><a id="_idTextAnchor236"/><span class="koboSpan" id="kobo.684.1" xmlns="http://www.w3.org/1999/xhtml">Creating test cases in Razor files</span></h2>
<p><span class="koboSpan" id="kobo.685.1" xmlns="http://www.w3.org/1999/xhtml">To create tests</span><a id="_idIndexMarker839"/><span class="koboSpan" id="kobo.686.1" xmlns="http://www.w3.org/1999/xhtml"> in Razor markup</span><a id="_idIndexMarker840"/><span class="koboSpan" id="kobo.687.1" xmlns="http://www.w3.org/1999/xhtml"> files directly, we can declare components using Razor markup as we use them in a Razor page. </span><span class="koboSpan" id="kobo.687.2" xmlns="http://www.w3.org/1999/xhtml">In this way, we don’t have to call Razor components in the C# code and pass parameters using function calls. </span><span class="koboSpan" id="kobo.687.3" xmlns="http://www.w3.org/1999/xhtml">For a Razor page, we can render Razor components </span><a id="_idIndexMarker841"/><span class="koboSpan" id="kobo.688.1" xmlns="http://www.w3.org/1999/xhtml">using </span><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.689.1" xmlns="http://www.w3.org/1999/xhtml">Razor templates</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.690.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.691.1" xmlns="http://www.w3.org/1999/xhtml">We can demonstrate how to create tests in Razor markup files by creating test cases for a more complicated </span><strong class="source-inline"><span class="koboSpan" id="kobo.692.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.693.1" xmlns="http://www.w3.org/1999/xhtml"> component. </span><span class="koboSpan" id="kobo.693.2" xmlns="http://www.w3.org/1999/xhtml">We created the </span><strong class="source-inline"><span class="koboSpan" id="kobo.694.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.695.1" xmlns="http://www.w3.org/1999/xhtml"> component in </span><a href="B16588_09.xhtml#_idTextAnchor186"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.696.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 9</span></em></span></a><span class="koboSpan" id="kobo.697.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.698.1" xmlns="http://www.w3.org/1999/xhtml">Razor Components and Data Binding</span></em><span class="koboSpan" id="kobo.699.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.699.2" xmlns="http://www.w3.org/1999/xhtml">In </span><em class="italic"><span class="koboSpan" id="kobo.700.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.4</span></em><span class="koboSpan" id="kobo.701.1" xmlns="http://www.w3.org/1999/xhtml">, let’s review the unit tests </span><span class="No-Break"><span class="koboSpan" id="kobo.702.1" xmlns="http://www.w3.org/1999/xhtml">for it:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.703.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.4: EditorDialogTests.razor (https://epa.ms/EditorDialogTests11-4)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.704.1" xmlns="http://www.w3.org/1999/xhtml">
@inherits TestContext                                     ❶
&lt;h3&gt;EditorDialogTests&lt;/h3&gt;
@code {
  bool _isOnCloseClicked = false;
  string _key = string.Empty;
  string _value = string.Empty;
  string updated_key = "key updated";
  string updated_value = "value udpated";
  void OnSaveClicked(string key, string value) {
    _key = key; _value = value;
  }
  void OnCloseHandler() {
    _isOnCloseClicked = true;
  }
  [Fact]
  public void EditorDialog_Init_WithoutArgument() ...
</span><span class="koboSpan" id="kobo.704.2" xmlns="http://www.w3.org/1999/xhtml">  [Fact]
  public void Edit_OnClose_Clicked() {
var cut = Render(@&lt;EditorDialog Key="@_key"
  Value="@_value"
  OnSave=@OnSaveClicked OnClose=@OnCloseHandler&gt;
      &lt;/EditorDialog&gt;);                                   ❷
    cut.Find("button[class='btn btn-secondary']").Click();❸
    Assert.True(_isOnCloseClicked);                       ❹
  }
  [Fact]
  public void Edit_With_KeyEditingEnabled() {             ❺
var cut = Render(@&lt;EditorDialog Key="@_key"
  Value="@_value"
  IsKeyEditingEnable="true" OnSave=@OnSaveClicked&gt;
      &lt;/EditorDialog&gt;);
    cut.Find("input").Change(updated_key);
    cut.Find("textarea").Change(updated_value);
    cut.Find("button[type=submit]").Click();
    Assert.Equal(_key, updated_key);
    Assert.Equal(_value, updated_value);
  }
  [Fact]
  public void Edit_With_KeyEditingDisabled() ...
</span><span class="koboSpan" id="kobo.704.3" xmlns="http://www.w3.org/1999/xhtml">}</span></pre>
<p><span class="koboSpan" id="kobo.705.1" xmlns="http://www.w3.org/1999/xhtml">We can create a new Razor component, </span><strong class="source-inline"><span class="koboSpan" id="kobo.706.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialogTests</span></strong><span class="koboSpan" id="kobo.707.1" xmlns="http://www.w3.org/1999/xhtml">, in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.708.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Tests</span></strong><span class="koboSpan" id="kobo.709.1" xmlns="http://www.w3.org/1999/xhtml"> project. </span><span class="koboSpan" id="kobo.709.2" xmlns="http://www.w3.org/1999/xhtml">Since it is a bUnit test class, it is a child class of </span><strong class="source-inline"><span class="koboSpan" id="kobo.710.1" xmlns="http://www.w3.org/1999/xhtml">TestContext</span></strong><span class="koboSpan" id="kobo.711.1" xmlns="http://www.w3.org/1999/xhtml">, ❶. </span><span class="koboSpan" id="kobo.711.2" xmlns="http://www.w3.org/1999/xhtml">In this class, we create test cases in a code block using </span><span class="No-Break"><span class="koboSpan" id="kobo.712.1" xmlns="http://www.w3.org/1999/xhtml">Razor templates.</span></span></p>
<p><span class="koboSpan" id="kobo.713.1" xmlns="http://www.w3.org/1999/xhtml">We can </span><a id="_idIndexMarker842"/><span class="koboSpan" id="kobo.714.1" xmlns="http://www.w3.org/1999/xhtml">review the </span><strong class="source-inline"><span class="koboSpan" id="kobo.715.1" xmlns="http://www.w3.org/1999/xhtml">Edit_OnClose_Clicked</span></strong><span class="koboSpan" id="kobo.716.1" xmlns="http://www.w3.org/1999/xhtml"> test </span><a id="_idIndexMarker843"/><span class="koboSpan" id="kobo.717.1" xmlns="http://www.w3.org/1999/xhtml">case first. </span><span class="koboSpan" id="kobo.717.2" xmlns="http://www.w3.org/1999/xhtml">In this test case, we render the </span><strong class="source-inline"><span class="koboSpan" id="kobo.718.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.719.1" xmlns="http://www.w3.org/1999/xhtml"> component first and after that, we test the </span><span class="No-Break"><span class="koboSpan" id="kobo.720.1" xmlns="http://www.w3.org/1999/xhtml">close button.</span></span></p>
<p><span class="koboSpan" id="kobo.721.1" xmlns="http://www.w3.org/1999/xhtml">To render the </span><strong class="source-inline"><span class="koboSpan" id="kobo.722.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.723.1" xmlns="http://www.w3.org/1999/xhtml"> component, we call the </span><strong class="source-inline"><span class="koboSpan" id="kobo.724.1" xmlns="http://www.w3.org/1999/xhtml">Render()</span></strong><span class="koboSpan" id="kobo.725.1" xmlns="http://www.w3.org/1999/xhtml"> method, ❷, of </span><strong class="source-inline"><span class="koboSpan" id="kobo.726.1" xmlns="http://www.w3.org/1999/xhtml">TestContext</span></strong><span class="koboSpan" id="kobo.727.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.727.2" xmlns="http://www.w3.org/1999/xhtml">Compared to the previous example, here, we can render the Razor markup directly instead of calling the C# function. </span><span class="koboSpan" id="kobo.727.3" xmlns="http://www.w3.org/1999/xhtml">The Razor markup that we use here is called </span><strong class="bold"><span class="koboSpan" id="kobo.728.1" xmlns="http://www.w3.org/1999/xhtml">Razor templates</span></strong><span class="koboSpan" id="kobo.729.1" xmlns="http://www.w3.org/1999/xhtml"> and</span><a id="_idIndexMarker844"/><span class="koboSpan" id="kobo.730.1" xmlns="http://www.w3.org/1999/xhtml"> you can find more information about it in this </span><span class="No-Break"><span class="koboSpan" id="kobo.731.1" xmlns="http://www.w3.org/1999/xhtml">Microsoft document:</span></span></p>
<p><a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#razor-templates-1"><span class="No-Break"><span class="koboSpan" id="kobo.732.1" xmlns="http://www.w3.org/1999/xhtml">https://learn.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#razor-templates-1</span></span></a></p>
<p><strong class="bold"><span class="koboSpan" id="kobo.733.1" xmlns="http://www.w3.org/1999/xhtml">Razor templates</span></strong><span class="koboSpan" id="kobo.734.1" xmlns="http://www.w3.org/1999/xhtml"> can</span><a id="_idIndexMarker845"/><span class="koboSpan" id="kobo.735.1" xmlns="http://www.w3.org/1999/xhtml"> be defined in the </span><span class="No-Break"><span class="koboSpan" id="kobo.736.1" xmlns="http://www.w3.org/1999/xhtml">following format:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.737.1" xmlns="http://www.w3.org/1999/xhtml">
@&lt;{HTML tag}&gt;…&lt;/{HTML tag}&gt;</span></pre>
<p><span class="koboSpan" id="kobo.738.1" xmlns="http://www.w3.org/1999/xhtml">It consists of an </span><strong class="source-inline"><span class="koboSpan" id="kobo.739.1" xmlns="http://www.w3.org/1999/xhtml">@</span></strong><span class="koboSpan" id="kobo.740.1" xmlns="http://www.w3.org/1999/xhtml"> symbol and a pair of open and closed HTML tags. </span><span class="koboSpan" id="kobo.740.2" xmlns="http://www.w3.org/1999/xhtml">Razor templates can be used in the code block of the Razor file. </span><span class="koboSpan" id="kobo.740.3" xmlns="http://www.w3.org/1999/xhtml">It cannot be used in a C# or C# </span><span class="No-Break"><span class="koboSpan" id="kobo.741.1" xmlns="http://www.w3.org/1999/xhtml">code-behind file.</span></span></p>
<p><span class="koboSpan" id="kobo.742.1" xmlns="http://www.w3.org/1999/xhtml">Using this format, we can specify a snippet of the Razor markup as the parameter of a C# function. </span><span class="koboSpan" id="kobo.742.2" xmlns="http://www.w3.org/1999/xhtml">The snippet of the Razor markup is a Razor template and its data type is </span><strong class="source-inline"><span class="koboSpan" id="kobo.743.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong><span class="koboSpan" id="kobo.744.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="source-inline"><span class="koboSpan" id="kobo.745.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment&lt;TValue&gt;</span></strong><span class="koboSpan" id="kobo.746.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.746.2" xmlns="http://www.w3.org/1999/xhtml">In </span><em class="italic"><span class="koboSpan" id="kobo.747.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.4</span></em><span class="koboSpan" id="kobo.748.1" xmlns="http://www.w3.org/1999/xhtml">, we pass parameters to </span><strong class="source-inline"><span class="koboSpan" id="kobo.749.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.750.1" xmlns="http://www.w3.org/1999/xhtml"> using Razor templates, as we can see in the </span><span class="No-Break"><span class="koboSpan" id="kobo.751.1" xmlns="http://www.w3.org/1999/xhtml">following code:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.752.1" xmlns="http://www.w3.org/1999/xhtml">
    var cut = Render(@&lt;EditorDialog Key="@_key" Value=
      "@_value"
  OnSave=@OnSaveClicked OnClose=@OnCloseHandler&gt;
      &lt;/EditorDialog&gt;);</span></pre>
<p><span class="koboSpan" id="kobo.753.1" xmlns="http://www.w3.org/1999/xhtml">After </span><strong class="source-inline"><span class="koboSpan" id="kobo.754.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.755.1" xmlns="http://www.w3.org/1999/xhtml"> is</span><a id="_idIndexMarker846"/><span class="koboSpan" id="kobo.756.1" xmlns="http://www.w3.org/1999/xhtml"> rendered, we </span><a id="_idIndexMarker847"/><span class="koboSpan" id="kobo.757.1" xmlns="http://www.w3.org/1999/xhtml">can find the close button and simulate the click </span><span class="No-Break"><span class="koboSpan" id="kobo.758.1" xmlns="http://www.w3.org/1999/xhtml">action, </span></span><span class="No-Break"><span class="koboSpan" id="kobo.759.1" xmlns="http://www.w3.org/1999/xhtml">❸</span></span><span class="No-Break"><span class="koboSpan" id="kobo.760.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.761.1" xmlns="http://www.w3.org/1999/xhtml">
    cut.Find("button[class='btn btn-secondary']").Click();</span></pre>
<p><span class="koboSpan" id="kobo.762.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.763.1" xmlns="http://www.w3.org/1999/xhtml">OnCloseHandler</span></strong><span class="koboSpan" id="kobo.764.1" xmlns="http://www.w3.org/1999/xhtml"> event handler, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.765.1" xmlns="http://www.w3.org/1999/xhtml">_isOnCloseClicked</span></strong><span class="koboSpan" id="kobo.766.1" xmlns="http://www.w3.org/1999/xhtml"> variable, ❹, is set to </span><strong class="source-inline"><span class="koboSpan" id="kobo.767.1" xmlns="http://www.w3.org/1999/xhtml">true</span></strong><span class="koboSpan" id="kobo.768.1" xmlns="http://www.w3.org/1999/xhtml"> so that we can assert </span><span class="No-Break"><span class="koboSpan" id="kobo.769.1" xmlns="http://www.w3.org/1999/xhtml">the result.</span></span></p>
<p><span class="koboSpan" id="kobo.770.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.771.1" xmlns="http://www.w3.org/1999/xhtml">Edit_With_KeyEditingEnabled</span></strong><span class="koboSpan" id="kobo.772.1" xmlns="http://www.w3.org/1999/xhtml"> test case, ❺, after the component is rendered, we can simulate user interactions to set the key and value fields in the component. </span><span class="koboSpan" id="kobo.772.2" xmlns="http://www.w3.org/1999/xhtml">After that, we can simulate clicking on the save button as we can </span><span class="No-Break"><span class="koboSpan" id="kobo.773.1" xmlns="http://www.w3.org/1999/xhtml">see here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.774.1" xmlns="http://www.w3.org/1999/xhtml">
    cut.Find("input").Change(updated_key);
    cut.Find("textarea").Change(updated_value);
    cut.Find("button[type=submit]").Click();</span></pre>
<p><span class="koboSpan" id="kobo.775.1" xmlns="http://www.w3.org/1999/xhtml">When the button is clicked, the event handler is invoked. </span><span class="koboSpan" id="kobo.775.2" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.776.1" xmlns="http://www.w3.org/1999/xhtml">OnSaveClicked</span></strong><span class="koboSpan" id="kobo.777.1" xmlns="http://www.w3.org/1999/xhtml"> event handler, we save the changed key and value so we can assert </span><span class="No-Break"><span class="koboSpan" id="kobo.778.1" xmlns="http://www.w3.org/1999/xhtml">the result:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.779.1" xmlns="http://www.w3.org/1999/xhtml">
    Assert.Equal(_key, updated_key);
    Assert.Equal(_value, updated_value);</span></pre>
<p><span class="koboSpan" id="kobo.780.1" xmlns="http://www.w3.org/1999/xhtml">As we can see from these two test cases, we can design bUnit tests much more easily by creating tests in a Razor file. </span><span class="koboSpan" id="kobo.780.2" xmlns="http://www.w3.org/1999/xhtml">We can render components using Razor templates and we can also trigger various user interactions to test the </span><span class="No-Break"><span class="koboSpan" id="kobo.781.1" xmlns="http://www.w3.org/1999/xhtml">components interactively.</span></span></p>
<p><span class="koboSpan" id="kobo.782.1" xmlns="http://www.w3.org/1999/xhtml">Razor templates are a great tool to help us combine Razor markup and C# code so that we can leverage</span><a id="_idIndexMarker848"/><span class="koboSpan" id="kobo.783.1" xmlns="http://www.w3.org/1999/xhtml"> the best features </span><a id="_idIndexMarker849"/><span class="koboSpan" id="kobo.784.1" xmlns="http://www.w3.org/1999/xhtml">from both worlds. </span><span class="koboSpan" id="kobo.784.2" xmlns="http://www.w3.org/1999/xhtml">However, we have a limitation when we use Razor templates. </span><span class="koboSpan" id="kobo.784.3" xmlns="http://www.w3.org/1999/xhtml">Let’s see how to overcome it in the </span><span class="No-Break"><span class="koboSpan" id="kobo.785.1" xmlns="http://www.w3.org/1999/xhtml">next section.</span></span></p>
<h2 id="_idParaDest-221"><a id="_idTextAnchor237"/><span class="koboSpan" id="kobo.786.1" xmlns="http://www.w3.org/1999/xhtml">Using the RenderFragment delegate</span></h2>
<p><span class="koboSpan" id="kobo.787.1" xmlns="http://www.w3.org/1999/xhtml">Even though </span><a id="_idIndexMarker850"/><span class="koboSpan" id="kobo.788.1" xmlns="http://www.w3.org/1999/xhtml">Razor</span><a id="_idIndexMarker851"/><span class="koboSpan" id="kobo.789.1" xmlns="http://www.w3.org/1999/xhtml"> templates can help simplify the test setup, there is a limitation, particularly in a complicated test case setup. </span><span class="koboSpan" id="kobo.789.2" xmlns="http://www.w3.org/1999/xhtml">In a complicated test case, the Razor templates can be very long. </span><span class="koboSpan" id="kobo.789.3" xmlns="http://www.w3.org/1999/xhtml">If we want to reuse the same Razor templates in another test case, we need to copy them to the new test case. </span><span class="koboSpan" id="kobo.789.4" xmlns="http://www.w3.org/1999/xhtml">We may have to create a lot of duplicated code, and this is the limitation of </span><span class="No-Break"><span class="koboSpan" id="kobo.790.1" xmlns="http://www.w3.org/1999/xhtml">Razor templates.</span></span></p>
<p><span class="koboSpan" id="kobo.791.1" xmlns="http://www.w3.org/1999/xhtml">In this case, we can use a </span><strong class="source-inline"><span class="koboSpan" id="kobo.792.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong><span class="koboSpan" id="kobo.793.1" xmlns="http://www.w3.org/1999/xhtml"> delegate. </span><span class="koboSpan" id="kobo.793.2" xmlns="http://www.w3.org/1999/xhtml">As its name indicates, it is the delegate type of </span><strong class="source-inline"><span class="koboSpan" id="kobo.794.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong><span class="koboSpan" id="kobo.795.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="source-inline"><span class="koboSpan" id="kobo.796.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment&lt;TValue&gt;</span></strong><span class="koboSpan" id="kobo.797.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.797.2" xmlns="http://www.w3.org/1999/xhtml">The data type of Razor templates is </span><strong class="source-inline"><span class="koboSpan" id="kobo.798.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong><span class="koboSpan" id="kobo.799.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="source-inline"><span class="koboSpan" id="kobo.800.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment&lt;TValue&gt;</span></strong><span class="koboSpan" id="kobo.801.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.801.2" xmlns="http://www.w3.org/1999/xhtml">A </span><strong class="source-inline"><span class="koboSpan" id="kobo.802.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong><span class="koboSpan" id="kobo.803.1" xmlns="http://www.w3.org/1999/xhtml"> delegate is the delegate type for </span><span class="No-Break"><span class="koboSpan" id="kobo.804.1" xmlns="http://www.w3.org/1999/xhtml">Razor templates.</span></span></p>
<p><span class="koboSpan" id="kobo.805.1" xmlns="http://www.w3.org/1999/xhtml">You can find more information about the </span><strong class="source-inline"><span class="koboSpan" id="kobo.806.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong><span class="koboSpan" id="kobo.807.1" xmlns="http://www.w3.org/1999/xhtml"> delegate in the following </span><span class="No-Break"><span class="koboSpan" id="kobo.808.1" xmlns="http://www.w3.org/1999/xhtml">Microsoft document:</span></span></p>
<p><a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/performance?view=aspnetcore-3.1#define-reusable-renderfragments-in-code-2"><span class="No-Break"><span class="koboSpan" id="kobo.809.1" xmlns="http://www.w3.org/1999/xhtml">https://learn.microsoft.com/en-us/aspnet/core/blazor/performance?view=aspnetcore-3.1#define-reusable-renderfragments-in-code-2</span></span></a></p>
<p><span class="koboSpan" id="kobo.810.1" xmlns="http://www.w3.org/1999/xhtml">To demonstrate how to use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.811.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong><span class="koboSpan" id="kobo.812.1" xmlns="http://www.w3.org/1999/xhtml"> delegate, let’s set up a more complex test for the </span><strong class="source-inline"><span class="koboSpan" id="kobo.813.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.814.1" xmlns="http://www.w3.org/1999/xhtml"> component. </span><strong class="source-inline"><span class="koboSpan" id="kobo.815.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.816.1" xmlns="http://www.w3.org/1999/xhtml"> can be used to edit either </span><strong class="source-inline"><span class="koboSpan" id="kobo.817.1" xmlns="http://www.w3.org/1999/xhtml">Item</span></strong><span class="koboSpan" id="kobo.818.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="source-inline"><span class="koboSpan" id="kobo.819.1" xmlns="http://www.w3.org/1999/xhtml">Field</span></strong><span class="koboSpan" id="kobo.820.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.820.2" xmlns="http://www.w3.org/1999/xhtml">We can use an item-editing case to show how to use the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.821.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.822.1" xmlns="http://www.w3.org/1999/xhtml"> delegate.</span></span></p>
<p><span class="koboSpan" id="kobo.823.1" xmlns="http://www.w3.org/1999/xhtml">We can create a new test class, </span><strong class="source-inline"><span class="koboSpan" id="kobo.824.1" xmlns="http://www.w3.org/1999/xhtml">ItemEditTests</span></strong><span class="koboSpan" id="kobo.825.1" xmlns="http://www.w3.org/1999/xhtml">, in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.826.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Tests</span></strong><span class="koboSpan" id="kobo.827.1" xmlns="http://www.w3.org/1999/xhtml"> project. </span><span class="koboSpan" id="kobo.827.2" xmlns="http://www.w3.org/1999/xhtml">To separate the Razor markup and C# code, we can split the </span><strong class="source-inline"><span class="koboSpan" id="kobo.828.1" xmlns="http://www.w3.org/1999/xhtml">ItemEditTests</span></strong><span class="koboSpan" id="kobo.829.1" xmlns="http://www.w3.org/1999/xhtml"> test class into a Razor file (</span><strong class="source-inline"><span class="koboSpan" id="kobo.830.1" xmlns="http://www.w3.org/1999/xhtml">ItemEditTests.razor</span></strong><span class="koboSpan" id="kobo.831.1" xmlns="http://www.w3.org/1999/xhtml">) and a C# code-behind file (</span><strong class="source-inline"><span class="koboSpan" id="kobo.832.1" xmlns="http://www.w3.org/1999/xhtml">ItemEditTests.razor.cs</span></strong><span class="koboSpan" id="kobo.833.1" xmlns="http://www.w3.org/1999/xhtml">). </span><span class="koboSpan" id="kobo.833.2" xmlns="http://www.w3.org/1999/xhtml">We can declare the markup for testing in the Razor file, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.834.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.5</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.835.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.836.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.5: ItemEditTests.razor (https://epa.ms/ItemEditTests11-5)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.837.1" xmlns="http://www.w3.org/1999/xhtml">
@inherits TestContext
@namespace PassXYZ.Vault.Tests
&lt;h3&gt;ItemEditTests&lt;/h3&gt;
@code {
  private RenderFragment _editorDialog =&gt; __builder =&gt;
  {
  &lt;CascadingValue Value="@_dialogId" Name="Id"&gt;
&lt;EditorDialog IsKeyEditingEnable=@isNewItem
  OnSave=@OnSaveClicked Key=@testItem.Name
  Value=@testItem.Notes&gt;
      @if (isNewItem) {
        &lt;select id="itemType" @bind="testItem.ItemType"
          class="form-select" aria-label="Group"&gt;
            &lt;option selected value="Group"&gt;Group&lt;/option&gt;
            &lt;option value="Entry"&gt;Entry&lt;/option&gt;
            &lt;option value="PxEntry"&gt;PxEntry&lt;/option&gt;
            &lt;option value="Notes"&gt;Notes&lt;/option&gt;
        &lt;/select&gt;
        }
    &lt;/EditorDialog&gt;
  &lt;/CascadingValue&gt;
  };
}</span></pre>
<p><span class="koboSpan" id="kobo.838.1" xmlns="http://www.w3.org/1999/xhtml">We define a </span><strong class="source-inline"><span class="koboSpan" id="kobo.839.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong><span class="koboSpan" id="kobo.840.1" xmlns="http://www.w3.org/1999/xhtml"> delegate, </span><strong class="source-inline"><span class="koboSpan" id="kobo.841.1" xmlns="http://www.w3.org/1999/xhtml">_editorDialog</span></strong><span class="koboSpan" id="kobo.842.1" xmlns="http://www.w3.org/1999/xhtml">, in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.843.1" xmlns="http://www.w3.org/1999/xhtml">@code</span></strong><span class="koboSpan" id="kobo.844.1" xmlns="http://www.w3.org/1999/xhtml"> block of </span><strong class="source-inline"><span class="koboSpan" id="kobo.845.1" xmlns="http://www.w3.org/1999/xhtml">ItemEditTests.razor</span></strong><span class="koboSpan" id="kobo.846.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.846.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.847.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong><span class="koboSpan" id="kobo.848.1" xmlns="http://www.w3.org/1999/xhtml"> delegate must accept a parameter called </span><strong class="source-inline"><span class="koboSpan" id="kobo.849.1" xmlns="http://www.w3.org/1999/xhtml">__builder</span></strong><span class="koboSpan" id="kobo.850.1" xmlns="http://www.w3.org/1999/xhtml"> of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.851.1" xmlns="http://www.w3.org/1999/xhtml">RenderTreeBuilder</span></strong><span class="koboSpan" id="kobo.852.1" xmlns="http://www.w3.org/1999/xhtml"> type. </span><span class="koboSpan" id="kobo.852.2" xmlns="http://www.w3.org/1999/xhtml">In the markup code, we can access the variables defined in the </span><span class="No-Break"><span class="koboSpan" id="kobo.853.1" xmlns="http://www.w3.org/1999/xhtml">test class.</span></span></p>
<p><span class="koboSpan" id="kobo.854.1" xmlns="http://www.w3.org/1999/xhtml">Now let’s look </span><a id="_idIndexMarker852"/><span class="koboSpan" id="kobo.855.1" xmlns="http://www.w3.org/1999/xhtml">at the </span><a id="_idIndexMarker853"/><span class="koboSpan" id="kobo.856.1" xmlns="http://www.w3.org/1999/xhtml">usage of </span><strong class="source-inline"><span class="koboSpan" id="kobo.857.1" xmlns="http://www.w3.org/1999/xhtml">_editorDialog</span></strong><span class="koboSpan" id="kobo.858.1" xmlns="http://www.w3.org/1999/xhtml"> in the C# code-behind file in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.859.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.6</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.860.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.861.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.6: ItemEditTests.razor.cs (https://epa.ms/ItemEditTests11-6)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.862.1" xmlns="http://www.w3.org/1999/xhtml">
namespace PassXYZ.Vault.Tests;
[Collection("Serilog collection")]
public partial class ItemEditTests : TestContext {
  readonly SerilogFixture serilogFixture;
  bool isNewItem { get; set; } = false;
  NewItem testItem { get; set; }
  string _dialogId = "editItem";
  string updated_key = "Updated item";
  string updated_value = "This item is updated.";
  public ItemEditTests(SerilogFixture fixture) {
    testItem = new() {
        Name = "New item",
        Notes = "This is a new item."
</span><span class="koboSpan" id="kobo.862.2" xmlns="http://www.w3.org/1999/xhtml">    };
    serilogFixture = fixture;
  }
  void OnSaveClicked(string key, string value) {
    testItem.Name = key; testItem.Notes = value;
  }
  [Fact]
  public void Edit_New_Item() {
    isNewItem = true;
    var cut = Render(_editorDialog);                      ❶
    cut.Find("#itemType").Change("Entry");
    cut.Find("input").Change(updated_key);
    cut.Find("textarea").Change(updated_value);
    cut.Find("button[type=submit]").Click();
    Assert.Equal(updated_key, testItem.Name);
    Assert.Equal(updated_value, testItem.Notes);
  }
  [Fact]
  public void Edit_Existing_Item() {
    isNewItem = false;                                    ❸
    var cut = Render(_editorDialog);                      ❶
var ex = Assert.Throws&lt;ElementNotFoundException&gt;(() =&gt;
  cut.Find("#itemType").Change("Entry"));                 ❷
    Assert.Equal("No elements were found that matches the
selector '#itemType'", ex.Message);                       ❹
    cut.Find("textarea").Change(updated_value);
    cut.Find("button[type=submit]").Click();
    Assert.Equal(updated_value, testItem.Notes);
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.863.1" xmlns="http://www.w3.org/1999/xhtml">Since </span><strong class="source-inline"><span class="koboSpan" id="kobo.864.1" xmlns="http://www.w3.org/1999/xhtml">_editorDialog</span></strong><span class="koboSpan" id="kobo.865.1" xmlns="http://www.w3.org/1999/xhtml"> defines</span><a id="_idIndexMarker854"/><span class="koboSpan" id="kobo.866.1" xmlns="http://www.w3.org/1999/xhtml"> the </span><strong class="source-inline"><span class="koboSpan" id="kobo.867.1" xmlns="http://www.w3.org/1999/xhtml">Item</span></strong><span class="koboSpan" id="kobo.868.1" xmlns="http://www.w3.org/1999/xhtml"> editing, we</span><a id="_idIndexMarker855"/><span class="koboSpan" id="kobo.869.1" xmlns="http://www.w3.org/1999/xhtml"> can implement multiple test cases against </span><strong class="source-inline"><span class="koboSpan" id="kobo.870.1" xmlns="http://www.w3.org/1999/xhtml">_editorDialog</span></strong><span class="koboSpan" id="kobo.871.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.871.2" xmlns="http://www.w3.org/1999/xhtml">We can see that we render </span><strong class="source-inline"><span class="koboSpan" id="kobo.872.1" xmlns="http://www.w3.org/1999/xhtml">_editorDialog</span></strong><span class="koboSpan" id="kobo.873.1" xmlns="http://www.w3.org/1999/xhtml">, ❶, for multiple test cases, such as </span><strong class="source-inline"><span class="koboSpan" id="kobo.874.1" xmlns="http://www.w3.org/1999/xhtml">Edit_New_Item</span></strong><span class="koboSpan" id="kobo.875.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.876.1" xmlns="http://www.w3.org/1999/xhtml">Edit_Existing_Item</span></strong><span class="koboSpan" id="kobo.877.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.877.2" xmlns="http://www.w3.org/1999/xhtml">Using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.878.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong><span class="koboSpan" id="kobo.879.1" xmlns="http://www.w3.org/1999/xhtml"> delegate, our testing code looks much more elegant and cleaner. </span><span class="koboSpan" id="kobo.879.2" xmlns="http://www.w3.org/1999/xhtml">If we did not go this way, we would need to repeat long markup code in multiple places. </span><span class="koboSpan" id="kobo.879.3" xmlns="http://www.w3.org/1999/xhtml">Using C# code directly may have even led to more </span><span class="No-Break"><span class="koboSpan" id="kobo.880.1" xmlns="http://www.w3.org/1999/xhtml">duplicated code.</span></span></p>
<p><span class="koboSpan" id="kobo.881.1" xmlns="http://www.w3.org/1999/xhtml">In both test cases, we follow a similar process to testing </span><strong class="source-inline"><span class="koboSpan" id="kobo.882.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.883.1" xmlns="http://www.w3.org/1999/xhtml"> by setting values and then clicking on the </span><strong class="bold"><span class="koboSpan" id="kobo.884.1" xmlns="http://www.w3.org/1999/xhtml">Save</span></strong><span class="koboSpan" id="kobo.885.1" xmlns="http://www.w3.org/1999/xhtml"> button. </span><span class="koboSpan" id="kobo.885.2" xmlns="http://www.w3.org/1999/xhtml">In the markup code, we have a </span><strong class="source-inline"><span class="koboSpan" id="kobo.886.1" xmlns="http://www.w3.org/1999/xhtml">&lt;select&gt;</span></strong><span class="koboSpan" id="kobo.887.1" xmlns="http://www.w3.org/1999/xhtml"> tag defined. </span><span class="koboSpan" id="kobo.887.2" xmlns="http://www.w3.org/1999/xhtml">We can change the option, ❷, of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.888.1" xmlns="http://www.w3.org/1999/xhtml">&lt;select&gt;</span></strong><span class="koboSpan" id="kobo.889.1" xmlns="http://www.w3.org/1999/xhtml"> tag in the test code. </span><span class="koboSpan" id="kobo.889.2" xmlns="http://www.w3.org/1999/xhtml">This </span><strong class="source-inline"><span class="koboSpan" id="kobo.890.1" xmlns="http://www.w3.org/1999/xhtml">&lt;select&gt;</span></strong><span class="koboSpan" id="kobo.891.1" xmlns="http://www.w3.org/1999/xhtml"> tag is rendered conditionally referring to the value of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.892.1" xmlns="http://www.w3.org/1999/xhtml">isNewItem</span></strong><span class="koboSpan" id="kobo.893.1" xmlns="http://www.w3.org/1999/xhtml"> variable. </span><span class="koboSpan" id="kobo.893.2" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.894.1" xmlns="http://www.w3.org/1999/xhtml">Edit_Existing_Item</span></strong><span class="koboSpan" id="kobo.895.1" xmlns="http://www.w3.org/1999/xhtml"> test, we can also test the negative case when the </span><strong class="source-inline"><span class="koboSpan" id="kobo.896.1" xmlns="http://www.w3.org/1999/xhtml">isNewItem</span></strong><span class="koboSpan" id="kobo.897.1" xmlns="http://www.w3.org/1999/xhtml"> variable,❸, is set to </span><strong class="source-inline"><span class="koboSpan" id="kobo.898.1" xmlns="http://www.w3.org/1999/xhtml">false</span></strong><span class="koboSpan" id="kobo.899.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.899.2" xmlns="http://www.w3.org/1999/xhtml">In this case, an exception is thrown since the </span><strong class="source-inline"><span class="koboSpan" id="kobo.900.1" xmlns="http://www.w3.org/1999/xhtml">&lt;select&gt;</span></strong><span class="koboSpan" id="kobo.901.1" xmlns="http://www.w3.org/1999/xhtml"> tag is not rendered. </span><span class="koboSpan" id="kobo.901.2" xmlns="http://www.w3.org/1999/xhtml">We can see that bUnit can also be used to test negative cases by verifying the content of </span><span class="No-Break"><span class="koboSpan" id="kobo.902.1" xmlns="http://www.w3.org/1999/xhtml">exception, </span></span><span class="No-Break"><span class="koboSpan" id="kobo.903.1" xmlns="http://www.w3.org/1999/xhtml">❹</span></span><span class="No-Break"><span class="koboSpan" id="kobo.904.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.905.1" xmlns="http://www.w3.org/1999/xhtml">We created</span><a id="_idIndexMarker856"/><span class="koboSpan" id="kobo.906.1" xmlns="http://www.w3.org/1999/xhtml"> bUnit tests for the shared components in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.907.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.BlazorUI</span></strong><span class="koboSpan" id="kobo.908.1" xmlns="http://www.w3.org/1999/xhtml"> project in the previous examples. </span><span class="koboSpan" id="kobo.908.2" xmlns="http://www.w3.org/1999/xhtml">Since these shared components are reusable building blocks for a high-level UI, most of them declare many component parameters. </span><span class="koboSpan" id="kobo.908.3" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.909.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong><span class="koboSpan" id="kobo.910.1" xmlns="http://www.w3.org/1999/xhtml"> delegate or Razor templates can help to simplify the </span><span class="No-Break"><span class="koboSpan" id="kobo.911.1" xmlns="http://www.w3.org/1999/xhtml">test setup.</span></span></p>
<p><span class="koboSpan" id="kobo.912.1" xmlns="http://www.w3.org/1999/xhtml">If we move to the Razor pages in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.913.1" xmlns="http://www.w3.org/1999/xhtml">Pages</span></strong><span class="koboSpan" id="kobo.914.1" xmlns="http://www.w3.org/1999/xhtml"> folder of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.915.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.916.1" xmlns="http://www.w3.org/1999/xhtml"> project, </span><strong class="source-inline"><span class="koboSpan" id="kobo.917.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.918.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.919.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.920.1" xmlns="http://www.w3.org/1999/xhtml">, or </span><strong class="source-inline"><span class="koboSpan" id="kobo.921.1" xmlns="http://www.w3.org/1999/xhtml">Login</span></strong><span class="koboSpan" id="kobo.922.1" xmlns="http://www.w3.org/1999/xhtml"> are Razor components as well, but they are not designed for reuse. </span><span class="koboSpan" id="kobo.922.2" xmlns="http://www.w3.org/1999/xhtml">They are Razor pages with route templates defined and they don’t have many component parameters defined. </span><span class="koboSpan" id="kobo.922.3" xmlns="http://www.w3.org/1999/xhtml">The component parameters declared in these Razor pages are used for routing purposes. </span><span class="koboSpan" id="kobo.922.4" xmlns="http://www.w3.org/1999/xhtml">When we design test cases for these Razor pages, we can implement tests in a C# class rather than </span><span class="No-Break"><span class="koboSpan" id="kobo.923.1" xmlns="http://www.w3.org/1999/xhtml">Razor files.</span></span></p>
<h2 id="_idParaDest-222"><a id="_idTextAnchor238"/><span class="koboSpan" id="kobo.924.1" xmlns="http://www.w3.org/1999/xhtml">Testing Razor pages</span></h2>
<p><span class="koboSpan" id="kobo.925.1" xmlns="http://www.w3.org/1999/xhtml">In the process of </span><a id="_idIndexMarker857"/><span class="koboSpan" id="kobo.926.1" xmlns="http://www.w3.org/1999/xhtml">development testing for Razor pages, we will learn about some very useful bUnit features. </span><span class="koboSpan" id="kobo.926.2" xmlns="http://www.w3.org/1999/xhtml">We won’t be able to review all the tests of Razor pages in our app, so we will use </span><strong class="source-inline"><span class="koboSpan" id="kobo.927.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.928.1" xmlns="http://www.w3.org/1999/xhtml"> as an example. </span><strong class="source-inline"><span class="koboSpan" id="kobo.929.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.930.1" xmlns="http://www.w3.org/1999/xhtml"> is a Razor page for displaying the content of a password entry. </span><span class="koboSpan" id="kobo.930.2" xmlns="http://www.w3.org/1999/xhtml">There is a route defined </span><span class="No-Break"><span class="koboSpan" id="kobo.931.1" xmlns="http://www.w3.org/1999/xhtml">for it:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.932.1" xmlns="http://www.w3.org/1999/xhtml">
@page "/entry/{SelectedItemId}"</span></pre>
<p><span class="koboSpan" id="kobo.933.1" xmlns="http://www.w3.org/1999/xhtml">When we want to display the </span><strong class="source-inline"><span class="koboSpan" id="kobo.934.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.935.1" xmlns="http://www.w3.org/1999/xhtml"> page, we need to pass the </span><strong class="source-inline"><span class="koboSpan" id="kobo.936.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.937.1" xmlns="http://www.w3.org/1999/xhtml"> info for an </span><strong class="source-inline"><span class="koboSpan" id="kobo.938.1" xmlns="http://www.w3.org/1999/xhtml">Item</span></strong><span class="koboSpan" id="kobo.939.1" xmlns="http://www.w3.org/1999/xhtml"> instance to it, and this instance cannot be a group. </span><span class="koboSpan" id="kobo.939.2" xmlns="http://www.w3.org/1999/xhtml">The initialization of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.940.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.941.1" xmlns="http://www.w3.org/1999/xhtml"> page is done in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.942.1" xmlns="http://www.w3.org/1999/xhtml">OnParametersSet()</span></strong><span class="koboSpan" id="kobo.943.1" xmlns="http://www.w3.org/1999/xhtml"> life cycle method as we can </span><span class="No-Break"><span class="koboSpan" id="kobo.944.1" xmlns="http://www.w3.org/1999/xhtml">see here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.945.1" xmlns="http://www.w3.org/1999/xhtml">
protected override void OnParametersSet() {
  base.OnParametersSet();
  if (SelectedItemId != null) {
    selectedItem = DataStore.GetItem(SelectedItemId, true);
    if (selectedItem == null) {
        throw new InvalidOperationException(              ❷
  "ItemDetail: entry cannot be found with SelectedItemId");
    }
    else {
      if (selectedItem.IsGroup) {
          throw new InvalidOperationException(            ❸
   "ItemDetail: SelectedItemId should not be group here.");
      }
      else {                                              ❹
        fields.Clear();
        List&lt;Field&gt; tmpFields = selectedItem.GetFields();
        foreach (Field field in tmpFields) {
            fields.Add(field);
        }
        notes = selectedItem.GetNotesInHtml();
      }
    }
  }
  else {
throw new InvalidOperationException(                      ❶
  "ItemDetail: SelectedItemId is null");
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.946.1" xmlns="http://www.w3.org/1999/xhtml">We will develop an </span><strong class="source-inline"><span class="koboSpan" id="kobo.947.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailTests</span></strong><span class="koboSpan" id="kobo.948.1" xmlns="http://www.w3.org/1999/xhtml"> test class to cover all the execution paths in </span><strong class="source-inline"><span class="koboSpan" id="kobo.949.1" xmlns="http://www.w3.org/1999/xhtml">OnParametersSet()</span></strong><span class="koboSpan" id="kobo.950.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.950.2" xmlns="http://www.w3.org/1999/xhtml">To cover all the execution paths, we can find the following </span><span class="No-Break"><span class="koboSpan" id="kobo.951.1" xmlns="http://www.w3.org/1999/xhtml">test cases:</span></span></p>
<ul>
<li><strong class="bold"><span class="koboSpan" id="kobo.952.1" xmlns="http://www.w3.org/1999/xhtml">Test case 1</span></strong><span class="koboSpan" id="kobo.953.1" xmlns="http://www.w3.org/1999/xhtml">: Initialize the </span><strong class="source-inline"><span class="koboSpan" id="kobo.954.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.955.1" xmlns="http://www.w3.org/1999/xhtml"> instance without a selected item </span><strong class="source-inline"><span class="koboSpan" id="kobo.956.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.957.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.957.2" xmlns="http://www.w3.org/1999/xhtml">We will get an </span><strong class="source-inline"><span class="koboSpan" id="kobo.958.1" xmlns="http://www.w3.org/1999/xhtml">InvalidOperationException</span></strong><span class="koboSpan" id="kobo.959.1" xmlns="http://www.w3.org/1999/xhtml"> exception, ❶, in </span><span class="No-Break"><span class="koboSpan" id="kobo.960.1" xmlns="http://www.w3.org/1999/xhtml">this case.</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.961.1" xmlns="http://www.w3.org/1999/xhtml">Test case 2</span></strong><span class="koboSpan" id="kobo.962.1" xmlns="http://www.w3.org/1999/xhtml">: Initialize </span><a id="_idIndexMarker858"/><span class="koboSpan" id="kobo.963.1" xmlns="http://www.w3.org/1999/xhtml">the </span><strong class="source-inline"><span class="koboSpan" id="kobo.964.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.965.1" xmlns="http://www.w3.org/1999/xhtml"> instance with the wrong item </span><strong class="source-inline"><span class="koboSpan" id="kobo.966.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.967.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.967.2" xmlns="http://www.w3.org/1999/xhtml">In this case, we will get an </span><strong class="source-inline"><span class="koboSpan" id="kobo.968.1" xmlns="http://www.w3.org/1999/xhtml">InvalidOperationException</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.969.1" xmlns="http://www.w3.org/1999/xhtml">exception, </span></span><span class="No-Break"><span class="koboSpan" id="kobo.970.1" xmlns="http://www.w3.org/1999/xhtml">❷</span></span><span class="No-Break"><span class="koboSpan" id="kobo.971.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.972.1" xmlns="http://www.w3.org/1999/xhtml">Test case 3</span></strong><span class="koboSpan" id="kobo.973.1" xmlns="http://www.w3.org/1999/xhtml">: Initialize the </span><strong class="source-inline"><span class="koboSpan" id="kobo.974.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.975.1" xmlns="http://www.w3.org/1999/xhtml"> instance with a valid item </span><strong class="source-inline"><span class="koboSpan" id="kobo.976.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.977.1" xmlns="http://www.w3.org/1999/xhtml">, but the item type as a group. </span><span class="koboSpan" id="kobo.977.2" xmlns="http://www.w3.org/1999/xhtml">In this case, we will get an </span><strong class="source-inline"><span class="koboSpan" id="kobo.978.1" xmlns="http://www.w3.org/1999/xhtml">InvalidOperationException</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.979.1" xmlns="http://www.w3.org/1999/xhtml">exception, </span></span><span class="No-Break"><span class="koboSpan" id="kobo.980.1" xmlns="http://www.w3.org/1999/xhtml">❸</span></span><span class="No-Break"><span class="koboSpan" id="kobo.981.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.982.1" xmlns="http://www.w3.org/1999/xhtml">Test case 4</span></strong><span class="koboSpan" id="kobo.983.1" xmlns="http://www.w3.org/1999/xhtml">: Initialize the </span><strong class="source-inline"><span class="koboSpan" id="kobo.984.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.985.1" xmlns="http://www.w3.org/1999/xhtml"> instance with a valid item </span><strong class="source-inline"><span class="koboSpan" id="kobo.986.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.987.1" xmlns="http://www.w3.org/1999/xhtml"> and the item type is an </span><span class="No-Break"><span class="koboSpan" id="kobo.988.1" xmlns="http://www.w3.org/1999/xhtml">entry, </span></span><span class="No-Break"><span class="koboSpan" id="kobo.989.1" xmlns="http://www.w3.org/1999/xhtml">❹</span></span><span class="No-Break"><span class="koboSpan" id="kobo.990.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.991.1" xmlns="http://www.w3.org/1999/xhtml">We can implement these test cases in an </span><strong class="source-inline"><span class="koboSpan" id="kobo.992.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailTests</span></strong><span class="koboSpan" id="kobo.993.1" xmlns="http://www.w3.org/1999/xhtml"> bUnit test class as shown here in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.994.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.7</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.995.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.996.1" xmlns="http://www.w3.org/1999/xhtml">Listing 11.7: ItemDetailTests.cs (https://epa.ms/ItemDetailTests11-7)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.997.1" xmlns="http://www.w3.org/1999/xhtml">
namespace PassXYZ.Vault.Tests;
[Collection("Serilog collection")]
public class ItemDetailTests : TestContext {
  SerilogFixture serilogFixture;
  Mock&lt;IDataStore&lt;Item&gt;&gt; dataStore;
  public ItemDetailTests(SerilogFixture fixture) {
      serilogFixture = fixture;
      dataStore = new Mock&lt;IDataStore&lt;Item&gt;&gt;();          ①
      Services.AddSingleton&lt;IDataStore&lt;Item&gt;&gt;
        (dataStore.Object);                              ②
  }
  [Fact]
  public void Init_Empty_ItemDetail() {                  ③
      var ex = Assert.Throws&lt;InvalidOperationException&gt;(
        () =&gt; RenderComponent&lt;ItemDetail&gt;());
      Assert.Equal(
        "ItemDetail: SelectedItemId is null", ex.Message);
  }
  [Fact]
  public void Load_ItemDetail_WithWrongId() {
    var ex = Assert.Throws&lt;InvalidOperationException&gt;(() =&gt;
      RenderComponent&lt;ItemDetail&gt;(parameters =&gt;
      parameters.Add(p =&gt; p.SelectedItemId, "Wrong Id")));
    Assert.Equal("ItemDetail: entry cannot be found with
        SelectedItemId", ex.Message);
  }
  [Fact]
  public void Load_ItemDetail_WithGroup() {
    Item testGroup = new PwGroup(true, true) {
      Name = "Default Group",
      Notes = "This is a group in ItemDetailTests."
</span><span class="koboSpan" id="kobo.997.2" xmlns="http://www.w3.org/1999/xhtml">    };
    dataStore.Setup(x =&gt; x.GetItem(It.IsAny&lt;string&gt;(),
      It.IsAny&lt;bool&gt;())).Returns(testGroup);
    var ex = Assert.Throws&lt;InvalidOperationException&gt;(() =&gt;
      RenderComponent&lt;ItemDetail&gt;(parameters =&gt;
     parameters.Add(p =&gt; p.SelectedItemId, testGroup.Id)));
    Assert.Equal("ItemDetail: SelectedItemId should not be
      group here.", ex.Message);
  }
  [Fact]
  public void Load_ItemDetail_WithEmptyFieldList() {
    Item testEntry = new PwEntry(true, true) {
      Name = "Default Entry",
      Notes = "This is an entry with empty field list."
</span><span class="koboSpan" id="kobo.997.3" xmlns="http://www.w3.org/1999/xhtml">    };
    dataStore.Setup(x =&gt; x.GetItem(It.IsAny&lt;string&gt;(),
        It.IsAny&lt;bool&gt;())).Returns(testEntry);
    var cut = RenderComponent&lt;ItemDetail&gt;(parameters =&gt;
      parameters.Add(p =&gt; p.SelectedItemId, testEntry.Id));
    cut.Find("article").MarkupMatches(
      $"&lt;article&gt;&lt;p&gt;{testEntry.Notes}&lt;/p&gt;&lt;/article&gt;");
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.998.1" xmlns="http://www.w3.org/1999/xhtml">The first test </span><a id="_idIndexMarker859"/><span class="koboSpan" id="kobo.999.1" xmlns="http://www.w3.org/1999/xhtml">case is implemented in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1000.1" xmlns="http://www.w3.org/1999/xhtml">Init_Empty_ItemDetail</span></strong><span class="koboSpan" id="kobo.1001.1" xmlns="http://www.w3.org/1999/xhtml">, ③. </span><span class="koboSpan" id="kobo.1001.2" xmlns="http://www.w3.org/1999/xhtml">In the test setup, we just try to render the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1002.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.1003.1" xmlns="http://www.w3.org/1999/xhtml"> component directly without passing it a selected item </span><strong class="source-inline"><span class="koboSpan" id="kobo.1004.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.1005.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1005.2" xmlns="http://www.w3.org/1999/xhtml">We expect an </span><strong class="source-inline"><span class="koboSpan" id="kobo.1006.1" xmlns="http://www.w3.org/1999/xhtml">InvalidOperationException</span></strong><span class="koboSpan" id="kobo.1007.1" xmlns="http://www.w3.org/1999/xhtml"> exception to </span><span class="No-Break"><span class="koboSpan" id="kobo.1008.1" xmlns="http://www.w3.org/1999/xhtml">be thrown.</span></span></p>
<p><span class="koboSpan" id="kobo.1009.1" xmlns="http://www.w3.org/1999/xhtml">Before we can run the test case, we need to resolve the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1010.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1011.1" xmlns="http://www.w3.org/1999/xhtml"> dependency first. </span><strong class="source-inline"><span class="koboSpan" id="kobo.1012.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.1013.1" xmlns="http://www.w3.org/1999/xhtml"> has a dependency on the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1014.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore&lt;Item&gt;</span></strong><span class="koboSpan" id="kobo.1015.1" xmlns="http://www.w3.org/1999/xhtml"> interface. </span><span class="koboSpan" id="kobo.1015.2" xmlns="http://www.w3.org/1999/xhtml">We can resolve this using dependency injection. </span><span class="koboSpan" id="kobo.1015.3" xmlns="http://www.w3.org/1999/xhtml">In our app, this dependency is registered </span><span class="No-Break"><span class="koboSpan" id="kobo.1016.1" xmlns="http://www.w3.org/1999/xhtml">in </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1017.1" xmlns="http://www.w3.org/1999/xhtml">MauiProgram.cs</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1018.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.1019.1" xmlns="http://www.w3.org/1999/xhtml">With bUnit, dependency injection is supported using </span><strong class="source-inline"><span class="koboSpan" id="kobo.1020.1" xmlns="http://www.w3.org/1999/xhtml">TestContext</span></strong><span class="koboSpan" id="kobo.1021.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1021.2" xmlns="http://www.w3.org/1999/xhtml">We can register the dependency using </span><strong class="source-inline"><span class="koboSpan" id="kobo.1022.1" xmlns="http://www.w3.org/1999/xhtml">AddSingleton()</span></strong><span class="koboSpan" id="kobo.1023.1" xmlns="http://www.w3.org/1999/xhtml">, ②. </span><span class="koboSpan" id="kobo.1023.2" xmlns="http://www.w3.org/1999/xhtml">To isolate the test, we use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1024.1" xmlns="http://www.w3.org/1999/xhtml">Moq</span></strong><span class="koboSpan" id="kobo.1025.1" xmlns="http://www.w3.org/1999/xhtml"> mocking framework, ①, to replace the actual implementation of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1026.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1027.1" xmlns="http://www.w3.org/1999/xhtml">, so we can reduce the complexity of the </span><span class="No-Break"><span class="koboSpan" id="kobo.1028.1" xmlns="http://www.w3.org/1999/xhtml">test setup.</span></span></p>
<p><span class="koboSpan" id="kobo.1029.1" xmlns="http://www.w3.org/1999/xhtml">Using </span><strong class="source-inline"><span class="koboSpan" id="kobo.1030.1" xmlns="http://www.w3.org/1999/xhtml">Moq</span></strong><span class="koboSpan" id="kobo.1031.1" xmlns="http://www.w3.org/1999/xhtml">, we only need to fake the method or property that we need in our test setup. </span><span class="koboSpan" id="kobo.1031.2" xmlns="http://www.w3.org/1999/xhtml">It can help to isolate our tests from their dependencies. </span><span class="koboSpan" id="kobo.1031.3" xmlns="http://www.w3.org/1999/xhtml">To use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1032.1" xmlns="http://www.w3.org/1999/xhtml">Moq</span></strong><span class="koboSpan" id="kobo.1033.1" xmlns="http://www.w3.org/1999/xhtml"> framework, we can create a </span><strong class="source-inline"><span class="koboSpan" id="kobo.1034.1" xmlns="http://www.w3.org/1999/xhtml">Moq</span></strong><span class="koboSpan" id="kobo.1035.1" xmlns="http://www.w3.org/1999/xhtml"> object using the interface or class that we need as a type parameter. </span><span class="koboSpan" id="kobo.1035.2" xmlns="http://www.w3.org/1999/xhtml">Later, we can define the behavior of the target interface or class when we use it. </span><span class="koboSpan" id="kobo.1035.3" xmlns="http://www.w3.org/1999/xhtml">In the constructor, we create a </span><strong class="source-inline"><span class="koboSpan" id="kobo.1036.1" xmlns="http://www.w3.org/1999/xhtml">Mock</span></strong><span class="koboSpan" id="kobo.1037.1" xmlns="http://www.w3.org/1999/xhtml"> object and register the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1038.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore&lt;Item&gt;</span></strong><span class="koboSpan" id="kobo.1039.1" xmlns="http://www.w3.org/1999/xhtml"> interface </span><span class="No-Break"><span class="koboSpan" id="kobo.1040.1" xmlns="http://www.w3.org/1999/xhtml">using </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1041.1" xmlns="http://www.w3.org/1999/xhtml">dataStore.Object</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1042.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1043.1" xmlns="http://www.w3.org/1999/xhtml">
      dataStore = new Mock&lt;IDataStore&lt;Item&gt;&gt;();
      Services.AddSingleton&lt;IDataStore&lt;Item&gt;&gt;(dataStore.        </span><span class="koboSpan" id="kobo.1043.2" xmlns="http://www.w3.org/1999/xhtml">Object);</span></pre>
<p><span class="koboSpan" id="kobo.1044.1" xmlns="http://www.w3.org/1999/xhtml">After we </span><a id="_idIndexMarker860"/><span class="koboSpan" id="kobo.1045.1" xmlns="http://www.w3.org/1999/xhtml">register </span><strong class="source-inline"><span class="koboSpan" id="kobo.1046.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1047.1" xmlns="http://www.w3.org/1999/xhtml"> in the constructor, we can execute the first test case again. </span><span class="koboSpan" id="kobo.1047.2" xmlns="http://www.w3.org/1999/xhtml">This time, we can get the exception and verify the message is what </span><span class="No-Break"><span class="koboSpan" id="kobo.1048.1" xmlns="http://www.w3.org/1999/xhtml">we expect:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1049.1" xmlns="http://www.w3.org/1999/xhtml">
[Fact]
public void Init_Empty_ItemDetail() {
  var ex = Assert.Throws&lt;InvalidOperationException&gt;(
    () =&gt; RenderComponent&lt;ItemDetail&gt;());
  Assert.Equal("ItemDetail: SelectedItemId is null",
    ex.Message);
}</span></pre>
<p><span class="koboSpan" id="kobo.1050.1" xmlns="http://www.w3.org/1999/xhtml">Next, let us look at the second test case. </span><span class="koboSpan" id="kobo.1050.2" xmlns="http://www.w3.org/1999/xhtml">In the second test case, we pass an invalid </span><strong class="source-inline"><span class="koboSpan" id="kobo.1051.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.1052.1" xmlns="http://www.w3.org/1999/xhtml"> to </span><strong class="source-inline"><span class="koboSpan" id="kobo.1053.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.1054.1" xmlns="http://www.w3.org/1999/xhtml"> and try to </span><span class="No-Break"><span class="koboSpan" id="kobo.1055.1" xmlns="http://www.w3.org/1999/xhtml">render it:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1056.1" xmlns="http://www.w3.org/1999/xhtml">
[Fact]
public void Load_ItemDetail_WithWrongId() {
  var ex = Assert.Throws&lt;InvalidOperationException&gt;(() =&gt;
RenderComponent&lt;ItemDetail&gt;(parameters =&gt;
  parameters.Add(
p =&gt; p.SelectedItemId, "Wrong Id")));
  Assert.Equal("ItemDetail: entry cannot be found with
    SelectedItemId", ex.Message);
}</span></pre>
<p><span class="koboSpan" id="kobo.1057.1" xmlns="http://www.w3.org/1999/xhtml">In this case, we also get an expected exception, and we can verify its content </span><span class="No-Break"><span class="koboSpan" id="kobo.1058.1" xmlns="http://www.w3.org/1999/xhtml">using </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1059.1" xmlns="http://www.w3.org/1999/xhtml">Assert.Equal</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1060.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.1061.1" xmlns="http://www.w3.org/1999/xhtml">In the third </span><a id="_idIndexMarker861"/><span class="koboSpan" id="kobo.1062.1" xmlns="http://www.w3.org/1999/xhtml">test case, we pass a valid </span><strong class="source-inline"><span class="koboSpan" id="kobo.1063.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.1064.1" xmlns="http://www.w3.org/1999/xhtml"> to </span><strong class="source-inline"><span class="koboSpan" id="kobo.1065.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.1066.1" xmlns="http://www.w3.org/1999/xhtml">, but the item type is a group. </span><span class="koboSpan" id="kobo.1066.2" xmlns="http://www.w3.org/1999/xhtml">This is a case that is hard to repeat in an integration test or user acceptance test. </span><span class="koboSpan" id="kobo.1066.3" xmlns="http://www.w3.org/1999/xhtml">In a unit test, it is quite easy to verify as we can </span><span class="No-Break"><span class="koboSpan" id="kobo.1067.1" xmlns="http://www.w3.org/1999/xhtml">see here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1068.1" xmlns="http://www.w3.org/1999/xhtml">
[Fact]
public void Load_ItemDetail_WithGroup() {
  Item testGroup = new PwGroup(true, true) {
    Name = "Default Group",
    Notes = "This is a group in ItemDetailTests."
</span><span class="koboSpan" id="kobo.1068.2" xmlns="http://www.w3.org/1999/xhtml">  };
  dataStore.Setup(x =&gt; x.GetItem(It.IsAny&lt;string&gt;(),
    It.IsAny&lt;bool&gt;())).Returns(testGroup);
  var ex = Assert.Throws&lt;InvalidOperationException&gt;(() =&gt;
RenderComponent&lt;ItemDetail&gt;(parameters =&gt;
parameters.Add(p =&gt; p.SelectedItemId, testGroup.Id)));
  Assert.Equal("ItemDetail: SelectedItemId should not be
    group here.", ex.Message);
  }</span></pre>
<p><span class="koboSpan" id="kobo.1069.1" xmlns="http://www.w3.org/1999/xhtml">To test it, we need to create a group and assign it to a </span><strong class="source-inline"><span class="koboSpan" id="kobo.1070.1" xmlns="http://www.w3.org/1999/xhtml">testGroup</span></strong><span class="koboSpan" id="kobo.1071.1" xmlns="http://www.w3.org/1999/xhtml"> variable. </span><span class="koboSpan" id="kobo.1071.2" xmlns="http://www.w3.org/1999/xhtml">In this test case, we need to call the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1072.1" xmlns="http://www.w3.org/1999/xhtml">GetItem()</span></strong><span class="koboSpan" id="kobo.1073.1" xmlns="http://www.w3.org/1999/xhtml"> method of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1074.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1075.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1075.2" xmlns="http://www.w3.org/1999/xhtml">Since we mocked </span><strong class="source-inline"><span class="koboSpan" id="kobo.1076.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1077.1" xmlns="http://www.w3.org/1999/xhtml"> in our setup, here, we need to mock the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1078.1" xmlns="http://www.w3.org/1999/xhtml">GetItem()</span></strong><span class="koboSpan" id="kobo.1079.1" xmlns="http://www.w3.org/1999/xhtml"> method as well. </span><span class="koboSpan" id="kobo.1079.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.1080.1" xmlns="http://www.w3.org/1999/xhtml">Moq</span></strong><span class="koboSpan" id="kobo.1081.1" xmlns="http://www.w3.org/1999/xhtml"> method returns </span><strong class="source-inline"><span class="koboSpan" id="kobo.1082.1" xmlns="http://www.w3.org/1999/xhtml">testGroup</span></strong><span class="koboSpan" id="kobo.1083.1" xmlns="http://www.w3.org/1999/xhtml"> when it is called. </span><span class="koboSpan" id="kobo.1083.2" xmlns="http://www.w3.org/1999/xhtml">After the test setup is ready, we can render </span><strong class="source-inline"><span class="koboSpan" id="kobo.1084.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.1085.1" xmlns="http://www.w3.org/1999/xhtml"> with </span><strong class="source-inline"><span class="koboSpan" id="kobo.1086.1" xmlns="http://www.w3.org/1999/xhtml">testGroup.Id</span></strong><span class="koboSpan" id="kobo.1087.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1087.2" xmlns="http://www.w3.org/1999/xhtml">The test result is the exception that </span><span class="No-Break"><span class="koboSpan" id="kobo.1088.1" xmlns="http://www.w3.org/1999/xhtml">we expect.</span></span></p>
<p><span class="koboSpan" id="kobo.1089.1" xmlns="http://www.w3.org/1999/xhtml">In the final </span><a id="_idIndexMarker862"/><span class="koboSpan" id="kobo.1090.1" xmlns="http://www.w3.org/1999/xhtml">test case, we will pass a valid Item </span><strong class="source-inline"><span class="koboSpan" id="kobo.1091.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.1092.1" xmlns="http://www.w3.org/1999/xhtml"> and the item type is </span><span class="No-Break"><span class="koboSpan" id="kobo.1093.1" xmlns="http://www.w3.org/1999/xhtml">an entry:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1094.1" xmlns="http://www.w3.org/1999/xhtml">
[Fact]
public void Load_ItemDetail_WithEmptyFieldList() {
  Item testEntry = new PwEntry(true, true) {
    Name = "Default Entry",
    Notes = "This is an entry with empty field list."
</span><span class="koboSpan" id="kobo.1094.2" xmlns="http://www.w3.org/1999/xhtml">  };
  dataStore.Setup(x =&gt; x.GetItem(It.IsAny&lt;string&gt;(),
    It.IsAny&lt;bool&gt;())).Returns(testEntry);
  var cut = RenderComponent&lt;ItemDetail&gt;(parameters =&gt;
    parameters.Add(p =&gt; p.SelectedItemId, testEntry.Id));
  cut.Find("article").MarkupMatches(
    $"&lt;article&gt;&lt;p&gt;{testEntry.Notes}&lt;/p&gt;&lt;/article&gt;");
  Debug.WriteLine($"{cut.Markup}");
}</span></pre>
<p><span class="koboSpan" id="kobo.1095.1" xmlns="http://www.w3.org/1999/xhtml">This test case is similar to the third test case, except we can create an entry and assign it to </span><strong class="source-inline"><span class="koboSpan" id="kobo.1096.1" xmlns="http://www.w3.org/1999/xhtml">testEntry</span></strong><span class="koboSpan" id="kobo.1097.1" xmlns="http://www.w3.org/1999/xhtml"> variable. </span><span class="koboSpan" id="kobo.1097.2" xmlns="http://www.w3.org/1999/xhtml">After we render </span><strong class="source-inline"><span class="koboSpan" id="kobo.1098.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.1099.1" xmlns="http://www.w3.org/1999/xhtml"> with </span><strong class="source-inline"><span class="koboSpan" id="kobo.1100.1" xmlns="http://www.w3.org/1999/xhtml">testEntry.Id</span></strong><span class="koboSpan" id="kobo.1101.1" xmlns="http://www.w3.org/1999/xhtml">, we can verify that the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1102.1" xmlns="http://www.w3.org/1999/xhtml">&lt;article&gt;</span></strong><span class="koboSpan" id="kobo.1103.1" xmlns="http://www.w3.org/1999/xhtml"> rendered HTML tag is the one that </span><span class="No-Break"><span class="koboSpan" id="kobo.1104.1" xmlns="http://www.w3.org/1999/xhtml">we expect.</span></span></p>
<p><span class="koboSpan" id="kobo.1105.1" xmlns="http://www.w3.org/1999/xhtml">So far, we have learned how to test Razor components using bUnit. </span><span class="koboSpan" id="kobo.1105.2" xmlns="http://www.w3.org/1999/xhtml">We can see that we can achieve a very high level of test coverage using bUnit. </span><span class="koboSpan" id="kobo.1105.3" xmlns="http://www.w3.org/1999/xhtml">This is one of the advantages of Blazor </span><span class="No-Break"><span class="koboSpan" id="kobo.1106.1" xmlns="http://www.w3.org/1999/xhtml">UI design.</span></span></p>
<p><span class="koboSpan" id="kobo.1107.1" xmlns="http://www.w3.org/1999/xhtml">We have now </span><a id="_idIndexMarker863"/><span class="koboSpan" id="kobo.1108.1" xmlns="http://www.w3.org/1999/xhtml">completed all the topics that we wanted to explore on unit test development with .NET MAUI in </span><span class="No-Break"><span class="koboSpan" id="kobo.1109.1" xmlns="http://www.w3.org/1999/xhtml">this chapter.</span></span></p>
<h1 id="_idParaDest-223"><a id="_idTextAnchor239"/><span class="koboSpan" id="kobo.1110.1" xmlns="http://www.w3.org/1999/xhtml">Summary</span></h1>
<p><span class="koboSpan" id="kobo.1111.1" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we introduced unit test development for .NET MAUI apps. </span><span class="koboSpan" id="kobo.1111.2" xmlns="http://www.w3.org/1999/xhtml">There are multiple test frameworks available. </span><span class="koboSpan" id="kobo.1111.3" xmlns="http://www.w3.org/1999/xhtml">We chose xUnit as the framework in this chapter. </span><span class="koboSpan" id="kobo.1111.4" xmlns="http://www.w3.org/1999/xhtml">In the MVVM pattern, the unit test of the model layer is the same as with any other .NET application. </span><span class="koboSpan" id="kobo.1111.5" xmlns="http://www.w3.org/1999/xhtml">We developed test cases for the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1112.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1113.1" xmlns="http://www.w3.org/1999/xhtml"> interface to test our model layer. </span><span class="koboSpan" id="kobo.1113.2" xmlns="http://www.w3.org/1999/xhtml">For the unit test of the view and view model, we focused on the eBlazor Hybrid app using the bUnit test library. </span><span class="koboSpan" id="kobo.1113.3" xmlns="http://www.w3.org/1999/xhtml">We can develop an end-to-end unit test for a Blazor Hybrid app with the xUnit framework and bUnit library. </span><span class="koboSpan" id="kobo.1113.4" xmlns="http://www.w3.org/1999/xhtml">With bUnit, we covered topics such as Razor templates, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1114.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong><span class="koboSpan" id="kobo.1115.1" xmlns="http://www.w3.org/1999/xhtml"> delegate, dependency injection, and the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1116.1" xmlns="http://www.w3.org/1999/xhtml">Moq</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1117.1" xmlns="http://www.w3.org/1999/xhtml"> framework.</span></span></p>
<p><span class="koboSpan" id="kobo.1118.1" xmlns="http://www.w3.org/1999/xhtml">Given the knowledge about unit testing in this chapter, you should now be able to work on your own unit test development. </span><span class="koboSpan" id="kobo.1118.2" xmlns="http://www.w3.org/1999/xhtml">Please refer to the </span><em class="italic"><span class="koboSpan" id="kobo.1119.1" xmlns="http://www.w3.org/1999/xhtml">Further reading</span></em><span class="koboSpan" id="kobo.1120.1" xmlns="http://www.w3.org/1999/xhtml"> section to find more information on.NET unit </span><span class="No-Break"><span class="koboSpan" id="kobo.1121.1" xmlns="http://www.w3.org/1999/xhtml">test development.</span></span></p>
<p><span class="koboSpan" id="kobo.1122.1" xmlns="http://www.w3.org/1999/xhtml">Unit testing can be part of a CI/CD pipeline. </span><span class="koboSpan" id="kobo.1122.2" xmlns="http://www.w3.org/1999/xhtml">With the CI/CD setup, we can run unit tests automatically in the development process. </span><span class="koboSpan" id="kobo.1122.3" xmlns="http://www.w3.org/1999/xhtml">We will discuss this topic further in the </span><span class="No-Break"><span class="koboSpan" id="kobo.1123.1" xmlns="http://www.w3.org/1999/xhtml">next chapter.</span></span></p>
<h1 id="_idParaDest-224"><a id="_idTextAnchor240"/><span class="koboSpan" id="kobo.1124.1" xmlns="http://www.w3.org/1999/xhtml">Further reading</span></h1>
<ul>
<li><em class="italic"><span class="koboSpan" id="kobo.1125.1" xmlns="http://www.w3.org/1999/xhtml">Microsoft Visual Studio 2005 Unleashed</span></em><span class="koboSpan" id="kobo.1126.1" xmlns="http://www.w3.org/1999/xhtml"> by Lars Powers and </span><span class="No-Break"><span class="koboSpan" id="kobo.1127.1" xmlns="http://www.w3.org/1999/xhtml">Mike Snell</span></span></li>
<li><a href="https://www.amazon.com/Microsoft-Visual-Studio-2005-Unleashed/dp/0672328194"><span class="No-Break"><span class="koboSpan" id="kobo.1128.1" xmlns="http://www.w3.org/1999/xhtml">https://www.amazon.com/Microsoft-Visual-Studio-2005-Unleashed/dp/0672328194</span></span></a></li>
<li><span class="No-Break"><span class="koboSpan" id="kobo.1129.1" xmlns="http://www.w3.org/1999/xhtml">MSTest</span></span></li>
<li><a href="https://github.com/microsoft/testfx"><span class="No-Break"><span class="koboSpan" id="kobo.1130.1" xmlns="http://www.w3.org/1999/xhtml">https://github.com/microsoft/testfx</span></span></a></li>
<li><em class="italic"><span class="koboSpan" id="kobo.1131.1" xmlns="http://www.w3.org/1999/xhtml">Strengthening Visual Studio Unit Tests</span></em><span class="koboSpan" id="kobo.1132.1" xmlns="http://www.w3.org/1999/xhtml"> by </span><span class="No-Break"><span class="koboSpan" id="kobo.1133.1" xmlns="http://www.w3.org/1999/xhtml">John Robbins</span></span></li>
<li><a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2006/march/bugslayer-strengthening-visual-studio-unit-tests"><span class="No-Break"><span class="koboSpan" id="kobo.1134.1" xmlns="http://www.w3.org/1999/xhtml">https://learn.microsoft.com/en-us/archive/msdn-magazine/2006/march/bugslayer-strengthening-visual-studio-unit-tests</span></span></a></li>
<li><em class="italic"><span class="koboSpan" id="kobo.1135.1" xmlns="http://www.w3.org/1999/xhtml">NUnit Pocket Reference</span></em><span class="koboSpan" id="kobo.1136.1" xmlns="http://www.w3.org/1999/xhtml"> by </span><span class="No-Break"><span class="koboSpan" id="kobo.1137.1" xmlns="http://www.w3.org/1999/xhtml">Bill Hamilton</span></span></li>
<li><a href="https://www.amazon.com/NUnit-Pocket-Reference-Running-OReilly/dp/0596007396"><span class="No-Break"><span class="koboSpan" id="kobo.1138.1" xmlns="http://www.w3.org/1999/xhtml">https://www.amazon.com/NUnit-Pocket-Reference-Running-OReilly/dp/0596007396</span></span></a></li>
<li><span class="koboSpan" id="kobo.1139.1" xmlns="http://www.w3.org/1999/xhtml">NUnit Releases </span><span class="No-Break"><span class="koboSpan" id="kobo.1140.1" xmlns="http://www.w3.org/1999/xhtml">at SourceForge</span></span></li>
<li><a href="https://sourceforge.net/projects/nunit/"><span class="No-Break"><span class="koboSpan" id="kobo.1141.1" xmlns="http://www.w3.org/1999/xhtml">https://sourceforge.net/projects/nunit/</span></span></a></li>
<li><em class="italic"><span class="koboSpan" id="kobo.1142.1" xmlns="http://www.w3.org/1999/xhtml">Why Did we Build </span></em><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1143.1" xmlns="http://www.w3.org/1999/xhtml">xUnit 1.0</span></em></span></li>
<li><a href="https://xunit.net/docs/why-did-we-build-xunit-1.0"><span class="No-Break"><span class="koboSpan" id="kobo.1144.1" xmlns="http://www.w3.org/1999/xhtml">https://xunit.net/docs/why-did-we-build-xunit-1.0</span></span></a></li>
<li><span class="No-Break"><span class="koboSpan" id="kobo.1145.1" xmlns="http://www.w3.org/1999/xhtml">xUnit documentation</span></span></li>
<li><a href="https://xunit.net/"><span class="No-Break"><span class="koboSpan" id="kobo.1146.1" xmlns="http://www.w3.org/1999/xhtml">https://xunit.net/</span></span></a></li>
<li><span class="koboSpan" id="kobo.1147.1" xmlns="http://www.w3.org/1999/xhtml">xUnit.NET 2.0 </span><span class="No-Break"><span class="koboSpan" id="kobo.1148.1" xmlns="http://www.w3.org/1999/xhtml">release note</span></span></li>
<li><a href="https://xunit.net/releases/2.0"><span class="No-Break"><span class="koboSpan" id="kobo.1149.1" xmlns="http://www.w3.org/1999/xhtml">https://xunit.net/releases/2.0</span></span></a></li>
</ul>
</div>
</body>
</html>
