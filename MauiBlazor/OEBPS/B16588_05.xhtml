<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>B16588_05</title>
<link href="css/style-JRserifv6.css" rel="stylesheet" type="text/css"/>
<!-- kobo-style -->
<style id="koboSpanStyle" type="text/css" xmlns="http://www.w3.org/1999/xhtml">.koboSpan { -webkit-text-combine: inherit; }</style>
</head>
<body id="B16588_05" xml:lang="en-GB">
<div id="_idContainer068">
<h1 class="chapter-number" id="_idParaDest-99"><a id="_idTextAnchor107"/><span class="koboSpan" id="kobo.1.1" xmlns="http://www.w3.org/1999/xhtml">5</span></h1>
<h1 id="_idParaDest-100"><a id="_idTextAnchor108"/><span class="koboSpan" id="kobo.2.1" xmlns="http://www.w3.org/1999/xhtml">Navigation using .NET MAUI Shell and NavigationPage</span></h1>
<p><span class="koboSpan" id="kobo.3.1" xmlns="http://www.w3.org/1999/xhtml">In the previous chapter, we introduced the MVVM pattern and data binding. </span><span class="koboSpan" id="kobo.3.2" xmlns="http://www.w3.org/1999/xhtml">We improved the user interface design and introduced our data model. </span><span class="koboSpan" id="kobo.3.3" xmlns="http://www.w3.org/1999/xhtml">In our app, we can select a page from the flyout menu, and we can switch to the item detail when an item is selected. </span><span class="koboSpan" id="kobo.3.4" xmlns="http://www.w3.org/1999/xhtml">This is part of the navigation mechanism in .NET MAUI. </span><span class="koboSpan" id="kobo.3.5" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we will dive deeper into the navigation design, and we will learn how navigation works in .</span><span class="No-Break"><span class="koboSpan" id="kobo.4.1" xmlns="http://www.w3.org/1999/xhtml">NET MAUI.</span></span></p>
<p><span class="koboSpan" id="kobo.5.1" xmlns="http://www.w3.org/1999/xhtml">The following topics will be covered in </span><span class="No-Break"><span class="koboSpan" id="kobo.6.1" xmlns="http://www.w3.org/1999/xhtml">this chapter:</span></span></p>
<ul>
<li><span class="No-Break"><span class="koboSpan" id="kobo.7.1" xmlns="http://www.w3.org/1999/xhtml">Implementing navigation</span></span></li>
<li><span class="No-Break"><span class="koboSpan" id="kobo.8.1" xmlns="http://www.w3.org/1999/xhtml">Using </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.9.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong></span></li>
<li><span class="koboSpan" id="kobo.10.1" xmlns="http://www.w3.org/1999/xhtml">Improving design </span><span class="No-Break"><span class="koboSpan" id="kobo.11.1" xmlns="http://www.w3.org/1999/xhtml">and navigation</span></span></li>
</ul>
<h1 id="_idParaDest-101"><a id="_idTextAnchor109"/><span class="koboSpan" id="kobo.12.1" xmlns="http://www.w3.org/1999/xhtml">Technical requirements</span></h1>
<p><span class="koboSpan" id="kobo.13.1" xmlns="http://www.w3.org/1999/xhtml">To test and debug the source code in this chapter, you need to have Visual Studio 2022 installed on your PC or Mac. </span><span class="koboSpan" id="kobo.13.2" xmlns="http://www.w3.org/1999/xhtml">Please refer to the </span><em class="italic"><span class="koboSpan" id="kobo.14.1" xmlns="http://www.w3.org/1999/xhtml">Development environment setup</span></em><span class="koboSpan" id="kobo.15.1" xmlns="http://www.w3.org/1999/xhtml"> section in </span><a href="B16588_01.xhtml#_idTextAnchor015"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.16.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 1</span></em></span></a><span class="koboSpan" id="kobo.17.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.18.1" xmlns="http://www.w3.org/1999/xhtml">Getting Started with .NET MAUI</span></em><span class="koboSpan" id="kobo.19.1" xmlns="http://www.w3.org/1999/xhtml">, for </span><span class="No-Break"><span class="koboSpan" id="kobo.20.1" xmlns="http://www.w3.org/1999/xhtml">the details.</span></span></p>
<p><span class="koboSpan" id="kobo.21.1" xmlns="http://www.w3.org/1999/xhtml">The source code for this chapter is available in the following branch on </span><span class="No-Break"><span class="koboSpan" id="kobo.22.1" xmlns="http://www.w3.org/1999/xhtml">GitHub: </span></span><a href="https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development/tree/main/Chapter05"><span class="No-Break"><span class="koboSpan" id="kobo.23.1" xmlns="http://www.w3.org/1999/xhtml">https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development/tree/main/Chapter05</span></span></a><span class="No-Break"><span class="koboSpan" id="kobo.24.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.25.1" xmlns="http://www.w3.org/1999/xhtml">The source code can be downloaded using the following </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.26.1" xmlns="http://www.w3.org/1999/xhtml">git</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.27.1" xmlns="http://www.w3.org/1999/xhtml"> command:</span></span></p>
<pre class="console"><span class="koboSpan" id="kobo.28.1" xmlns="http://www.w3.org/1999/xhtml">
git clone -b chapter05 https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development</span></pre>
<h1 id="_idParaDest-102"><a id="_idTextAnchor110"/><span class="koboSpan" id="kobo.29.1" xmlns="http://www.w3.org/1999/xhtml">Implementing navigation</span></h1>
<p><span class="koboSpan" id="kobo.30.1" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we are going to implement the navigation logic of our password manager app. </span><span class="koboSpan" id="kobo.30.2" xmlns="http://www.w3.org/1999/xhtml">It will include the </span><span class="No-Break"><span class="koboSpan" id="kobo.31.1" xmlns="http://www.w3.org/1999/xhtml">following functionalities:</span></span></p>
<ul>
<li><span class="koboSpan" id="kobo.32.1" xmlns="http://www.w3.org/1999/xhtml">Logging in and connecting to </span><span class="No-Break"><span class="koboSpan" id="kobo.33.1" xmlns="http://www.w3.org/1999/xhtml">the database</span></span></li>
<li><span class="koboSpan" id="kobo.34.1" xmlns="http://www.w3.org/1999/xhtml">Exploring data in the </span><span class="No-Break"><span class="koboSpan" id="kobo.35.1" xmlns="http://www.w3.org/1999/xhtml">password database</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.36.1" xmlns="http://www.w3.org/1999/xhtml">Navigation design has a significant impact on the user experience. </span><span class="koboSpan" id="kobo.36.2" xmlns="http://www.w3.org/1999/xhtml">In .NET MAUI, there is a built-in mechanism to help developers implement the navigation efficiently. </span><span class="koboSpan" id="kobo.36.3" xmlns="http://www.w3.org/1999/xhtml">As we saw in the previous chapters, we can use </span><strong class="source-inline"><span class="koboSpan" id="kobo.37.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.38.1" xmlns="http://www.w3.org/1999/xhtml"> in our app. </span><span class="koboSpan" id="kobo.38.2" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we will learn about </span><strong class="source-inline"><span class="koboSpan" id="kobo.39.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.40.1" xmlns="http://www.w3.org/1999/xhtml"> and improve our app with features provided by </span><strong class="source-inline"><span class="koboSpan" id="kobo.41.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.42.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.42.2" xmlns="http://www.w3.org/1999/xhtml">Before we dive into </span><strong class="source-inline"><span class="koboSpan" id="kobo.43.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.44.1" xmlns="http://www.w3.org/1999/xhtml">, we will learn</span><a id="_idIndexMarker305"/><span class="koboSpan" id="kobo.45.1" xmlns="http://www.w3.org/1999/xhtml"> the basic navigation mechanism in .</span><span class="No-Break"><span class="koboSpan" id="kobo.46.1" xmlns="http://www.w3.org/1999/xhtml">NET MAUI.</span></span></p>
<p><span class="koboSpan" id="kobo.47.1" xmlns="http://www.w3.org/1999/xhtml">There are two most common ways to implement navigation – hierarchical </span><span class="No-Break"><span class="koboSpan" id="kobo.48.1" xmlns="http://www.w3.org/1999/xhtml">and modal:</span></span></p>
<ul>
<li><strong class="bold"><span class="koboSpan" id="kobo.49.1" xmlns="http://www.w3.org/1999/xhtml">Hierarchical navigation</span></strong><span class="koboSpan" id="kobo.50.1" xmlns="http://www.w3.org/1999/xhtml"> provides a </span><a id="_idIndexMarker306"/><span class="koboSpan" id="kobo.51.1" xmlns="http://www.w3.org/1999/xhtml">navigation experience where the user can navigate through </span><a id="_idIndexMarker307"/><span class="koboSpan" id="kobo.52.1" xmlns="http://www.w3.org/1999/xhtml">pages, both forward and backward. </span><span class="koboSpan" id="kobo.52.2" xmlns="http://www.w3.org/1999/xhtml">This pattern typically uses a toolbar or navigation bar at the top of the screen to display an Up or Back button in the top-left corner. </span><span class="koboSpan" id="kobo.52.3" xmlns="http://www.w3.org/1999/xhtml">It usually maintains a LIFO stack of pages to handle the navigation. </span><strong class="bold"><span class="koboSpan" id="kobo.53.1" xmlns="http://www.w3.org/1999/xhtml">LIFO</span></strong><span class="koboSpan" id="kobo.54.1" xmlns="http://www.w3.org/1999/xhtml"> stands for </span><strong class="bold"><span class="koboSpan" id="kobo.55.1" xmlns="http://www.w3.org/1999/xhtml">last in, first out</span></strong><span class="koboSpan" id="kobo.56.1" xmlns="http://www.w3.org/1999/xhtml">, which means the last page to enter is the first one to </span><span class="No-Break"><span class="koboSpan" id="kobo.57.1" xmlns="http://www.w3.org/1999/xhtml">pop out.</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.58.1" xmlns="http://www.w3.org/1999/xhtml">Modal navigation</span></strong><span class="koboSpan" id="kobo.59.1" xmlns="http://www.w3.org/1999/xhtml"> is </span><a id="_idIndexMarker308"/><span class="koboSpan" id="kobo.60.1" xmlns="http://www.w3.org/1999/xhtml">different from</span><a id="_idIndexMarker309"/><span class="koboSpan" id="kobo.61.1" xmlns="http://www.w3.org/1999/xhtml"> hierarchical navigation in terms of how users can respond to it. </span><span class="koboSpan" id="kobo.61.2" xmlns="http://www.w3.org/1999/xhtml">If a modal page is displayed on the screen, the users must complete or cancel the required task on the page before they can take other actions. </span><span class="koboSpan" id="kobo.61.3" xmlns="http://www.w3.org/1999/xhtml">The users cannot navigate away from modal pages before the required task is completed </span><span class="No-Break"><span class="koboSpan" id="kobo.62.1" xmlns="http://www.w3.org/1999/xhtml">or canceled.</span></span></li>
</ul>
<h2 id="_idParaDest-103"><a id="_idTextAnchor111"/><span class="koboSpan" id="kobo.63.1" xmlns="http://www.w3.org/1999/xhtml">INavigation interface and NavigationPage</span></h2>
<p><span class="koboSpan" id="kobo.64.1" xmlns="http://www.w3.org/1999/xhtml">In .NET MAUI, both </span><a id="_idIndexMarker310"/><span class="koboSpan" id="kobo.65.1" xmlns="http://www.w3.org/1999/xhtml">hierarchical navigation and model navigation are supported through the </span><strong class="source-inline"><span class="koboSpan" id="kobo.66.1" xmlns="http://www.w3.org/1999/xhtml">INavigation</span></strong><span class="koboSpan" id="kobo.67.1" xmlns="http://www.w3.org/1999/xhtml"> interface. </span><span class="koboSpan" id="kobo.67.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.68.1" xmlns="http://www.w3.org/1999/xhtml">INavigation</span></strong><span class="koboSpan" id="kobo.69.1" xmlns="http://www.w3.org/1999/xhtml"> interface </span><a id="_idIndexMarker311"/><span class="koboSpan" id="kobo.70.1" xmlns="http://www.w3.org/1999/xhtml">is supported by a special page called </span><strong class="source-inline"><span class="koboSpan" id="kobo.71.1" xmlns="http://www.w3.org/1999/xhtml">NavigationPage</span></strong><span class="koboSpan" id="kobo.72.1" xmlns="http://www.w3.org/1999/xhtml">. </span><strong class="source-inline"><span class="koboSpan" id="kobo.73.1" xmlns="http://www.w3.org/1999/xhtml">NavigationPage</span></strong><span class="koboSpan" id="kobo.74.1" xmlns="http://www.w3.org/1999/xhtml"> is used to manage the navigation of a stack of other pages. </span><span class="koboSpan" id="kobo.74.2" xmlns="http://www.w3.org/1999/xhtml">The inheritance hierarchy of </span><strong class="source-inline"><span class="koboSpan" id="kobo.75.1" xmlns="http://www.w3.org/1999/xhtml">NavigationPage</span></strong><span class="koboSpan" id="kobo.76.1" xmlns="http://www.w3.org/1999/xhtml"> looks </span><span class="No-Break"><span class="koboSpan" id="kobo.77.1" xmlns="http://www.w3.org/1999/xhtml">like this:</span></span></p>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.78.1" xmlns="http://www.w3.org/1999/xhtml">Object</span></strong><span class="koboSpan" id="kobo.79.1" xmlns="http://www.w3.org/1999/xhtml"> &gt; </span><strong class="source-inline"><span class="koboSpan" id="kobo.80.1" xmlns="http://www.w3.org/1999/xhtml">BindableObject</span></strong><span class="koboSpan" id="kobo.81.1" xmlns="http://www.w3.org/1999/xhtml"> &gt; </span><strong class="source-inline"><span class="koboSpan" id="kobo.82.1" xmlns="http://www.w3.org/1999/xhtml">Element</span></strong><span class="koboSpan" id="kobo.83.1" xmlns="http://www.w3.org/1999/xhtml"> &gt; </span><strong class="source-inline"><span class="koboSpan" id="kobo.84.1" xmlns="http://www.w3.org/1999/xhtml">NavigableElement</span></strong><span class="koboSpan" id="kobo.85.1" xmlns="http://www.w3.org/1999/xhtml"> &gt; </span><strong class="source-inline"><span class="koboSpan" id="kobo.86.1" xmlns="http://www.w3.org/1999/xhtml">VisualElement</span></strong><span class="koboSpan" id="kobo.87.1" xmlns="http://www.w3.org/1999/xhtml"> &gt; </span><strong class="source-inline"><span class="koboSpan" id="kobo.88.1" xmlns="http://www.w3.org/1999/xhtml">Page</span></strong><span class="koboSpan" id="kobo.89.1" xmlns="http://www.w3.org/1999/xhtml"> &gt; </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.90.1" xmlns="http://www.w3.org/1999/xhtml">NavigationPage</span></strong></span></p>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.91.1" xmlns="http://www.w3.org/1999/xhtml">NavigableElement</span></strong><span class="koboSpan" id="kobo.92.1" xmlns="http://www.w3.org/1999/xhtml"> defines a property called </span><strong class="source-inline"><span class="koboSpan" id="kobo.93.1" xmlns="http://www.w3.org/1999/xhtml">Navigation</span></strong><span class="koboSpan" id="kobo.94.1" xmlns="http://www.w3.org/1999/xhtml"> that implements the </span><strong class="source-inline"><span class="koboSpan" id="kobo.95.1" xmlns="http://www.w3.org/1999/xhtml">INavigation</span></strong><span class="koboSpan" id="kobo.96.1" xmlns="http://www.w3.org/1999/xhtml"> interface. </span><span class="koboSpan" id="kobo.96.2" xmlns="http://www.w3.org/1999/xhtml">This inherited property can be called from any </span><strong class="source-inline"><span class="koboSpan" id="kobo.97.1" xmlns="http://www.w3.org/1999/xhtml">VisualElement</span></strong><span class="koboSpan" id="kobo.98.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="source-inline"><span class="koboSpan" id="kobo.99.1" xmlns="http://www.w3.org/1999/xhtml">Page</span></strong><span class="koboSpan" id="kobo.100.1" xmlns="http://www.w3.org/1999/xhtml"> for navigation purposes, as </span><span class="No-Break"><span class="koboSpan" id="kobo.101.1" xmlns="http://www.w3.org/1999/xhtml">shown here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.102.1" xmlns="http://www.w3.org/1999/xhtml">
public Microsoft.Maui.Controls.INavigation Navigation { get; }</span></pre>
<p><span class="koboSpan" id="kobo.103.1" xmlns="http://www.w3.org/1999/xhtml">To use </span><strong class="source-inline"><span class="koboSpan" id="kobo.104.1" xmlns="http://www.w3.org/1999/xhtml">NavigationPage</span></strong><span class="koboSpan" id="kobo.105.1" xmlns="http://www.w3.org/1999/xhtml">, we </span><a id="_idIndexMarker312"/><span class="koboSpan" id="kobo.106.1" xmlns="http://www.w3.org/1999/xhtml">must add</span><a id="_idIndexMarker313"/><span class="koboSpan" id="kobo.107.1" xmlns="http://www.w3.org/1999/xhtml"> the first page to a navigation stack as the root page of the application. </span><span class="koboSpan" id="kobo.107.2" xmlns="http://www.w3.org/1999/xhtml">We can see an example of this in the following </span><span class="No-Break"><span class="koboSpan" id="kobo.108.1" xmlns="http://www.w3.org/1999/xhtml">code snippet:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.109.1" xmlns="http://www.w3.org/1999/xhtml">
public partial class App : Application
{
  ...
</span><span class="koboSpan" id="kobo.109.2" xmlns="http://www.w3.org/1999/xhtml">  public App ()
  {
    InitializeComponent();
    MainPage = new NavigationPage (new TheFirstPage());
  }
  ...
</span><span class="koboSpan" id="kobo.109.3" xmlns="http://www.w3.org/1999/xhtml">}</span></pre>
<p><span class="koboSpan" id="kobo.110.1" xmlns="http://www.w3.org/1999/xhtml">We build the navigation stack in the constructor of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.111.1" xmlns="http://www.w3.org/1999/xhtml">App</span></strong><span class="koboSpan" id="kobo.112.1" xmlns="http://www.w3.org/1999/xhtml"> class, which is a derived class of </span><strong class="source-inline"><span class="koboSpan" id="kobo.113.1" xmlns="http://www.w3.org/1999/xhtml">Application</span></strong><span class="koboSpan" id="kobo.114.1" xmlns="http://www.w3.org/1999/xhtml">. </span><strong class="source-inline"><span class="koboSpan" id="kobo.115.1" xmlns="http://www.w3.org/1999/xhtml">TheFirstPage</span></strong><span class="koboSpan" id="kobo.116.1" xmlns="http://www.w3.org/1999/xhtml">, which is a derived class of </span><strong class="source-inline"><span class="koboSpan" id="kobo.117.1" xmlns="http://www.w3.org/1999/xhtml">ContentPage</span></strong><span class="koboSpan" id="kobo.118.1" xmlns="http://www.w3.org/1999/xhtml">, is pushed onto the </span><span class="No-Break"><span class="koboSpan" id="kobo.119.1" xmlns="http://www.w3.org/1999/xhtml">navigation stack.</span></span></p>
<h2 id="_idParaDest-104"><a id="_idTextAnchor112"/><span class="koboSpan" id="kobo.120.1" xmlns="http://www.w3.org/1999/xhtml">Using the navigation stack</span></h2>
<p><span class="koboSpan" id="kobo.121.1" xmlns="http://www.w3.org/1999/xhtml">There</span><a id="_idIndexMarker314"/><span class="koboSpan" id="kobo.122.1" xmlns="http://www.w3.org/1999/xhtml"> are two ways to navigate to or from a page. </span><span class="koboSpan" id="kobo.122.2" xmlns="http://www.w3.org/1999/xhtml">When we want to browse a new page, we can add the new page to the navigation stack. </span><span class="koboSpan" id="kobo.122.3" xmlns="http://www.w3.org/1999/xhtml">This action is </span><a id="_idIndexMarker315"/><span class="koboSpan" id="kobo.123.1" xmlns="http://www.w3.org/1999/xhtml">called a </span><strong class="bold"><span class="koboSpan" id="kobo.124.1" xmlns="http://www.w3.org/1999/xhtml">push</span></strong><span class="koboSpan" id="kobo.125.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.125.2" xmlns="http://www.w3.org/1999/xhtml">If we want to go back to the previous page, we</span><a id="_idIndexMarker316"/><span class="koboSpan" id="kobo.126.1" xmlns="http://www.w3.org/1999/xhtml"> can </span><strong class="bold"><span class="koboSpan" id="kobo.127.1" xmlns="http://www.w3.org/1999/xhtml">pop</span></strong><span class="koboSpan" id="kobo.128.1" xmlns="http://www.w3.org/1999/xhtml"> the previous page from </span><span class="No-Break"><span class="koboSpan" id="kobo.129.1" xmlns="http://www.w3.org/1999/xhtml">the stack:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer057">
<span class="koboSpan" id="kobo.130.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 5.1: Push and pop " src="image/Figure_5.01_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.131.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5.1: Push and pop</span></p>
<p><span class="koboSpan" id="kobo.132.1" xmlns="http://www.w3.org/1999/xhtml">As shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.133.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><em class="italic"><span class="koboSpan" id="kobo.134.1" xmlns="http://www.w3.org/1999/xhtml">.1</span></em><span class="koboSpan" id="kobo.135.1" xmlns="http://www.w3.org/1999/xhtml">, we can use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.136.1" xmlns="http://www.w3.org/1999/xhtml">PushAsync()</span></strong><span class="koboSpan" id="kobo.137.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="source-inline"><span class="koboSpan" id="kobo.138.1" xmlns="http://www.w3.org/1999/xhtml">PopAsync()</span></strong><span class="koboSpan" id="kobo.139.1" xmlns="http://www.w3.org/1999/xhtml"> method in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.140.1" xmlns="http://www.w3.org/1999/xhtml">INavigation</span></strong><span class="koboSpan" id="kobo.141.1" xmlns="http://www.w3.org/1999/xhtml"> interface to change to a new page or go back to the previous </span><span class="No-Break"><span class="koboSpan" id="kobo.142.1" xmlns="http://www.w3.org/1999/xhtml">page, respectively.</span></span></p>
<p><span class="koboSpan" id="kobo.143.1" xmlns="http://www.w3.org/1999/xhtml">If we are on </span><strong class="source-inline"><span class="koboSpan" id="kobo.144.1" xmlns="http://www.w3.org/1999/xhtml">Page1</span></strong><span class="koboSpan" id="kobo.145.1" xmlns="http://www.w3.org/1999/xhtml">, we can change to </span><strong class="source-inline"><span class="koboSpan" id="kobo.146.1" xmlns="http://www.w3.org/1999/xhtml">Page2</span></strong><span class="koboSpan" id="kobo.147.1" xmlns="http://www.w3.org/1999/xhtml"> with the </span><strong class="source-inline"><span class="koboSpan" id="kobo.148.1" xmlns="http://www.w3.org/1999/xhtml">GotoPage2()</span></strong><span class="koboSpan" id="kobo.149.1" xmlns="http://www.w3.org/1999/xhtml"> event handler. </span><span class="koboSpan" id="kobo.149.2" xmlns="http://www.w3.org/1999/xhtml">In this function, we are pushing the new page, </span><strong class="source-inline"><span class="koboSpan" id="kobo.150.1" xmlns="http://www.w3.org/1999/xhtml">Page2</span></strong><span class="koboSpan" id="kobo.151.1" xmlns="http://www.w3.org/1999/xhtml">, to </span><span class="No-Break"><span class="koboSpan" id="kobo.152.1" xmlns="http://www.w3.org/1999/xhtml">the stack:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.153.1" xmlns="http://www.w3.org/1999/xhtml">
async void GotoPage2 (object sender, EventArgs e) {
         await Navigation.PushAsync(new Page2());
}</span></pre>
<p><span class="koboSpan" id="kobo.154.1" xmlns="http://www.w3.org/1999/xhtml">Once we are on </span><strong class="source-inline"><span class="koboSpan" id="kobo.155.1" xmlns="http://www.w3.org/1999/xhtml">Page2</span></strong><span class="koboSpan" id="kobo.156.1" xmlns="http://www.w3.org/1999/xhtml">, we can go back with the </span><strong class="source-inline"><span class="koboSpan" id="kobo.157.1" xmlns="http://www.w3.org/1999/xhtml">BackToPage1()</span></strong><span class="koboSpan" id="kobo.158.1" xmlns="http://www.w3.org/1999/xhtml"> event handler. </span><span class="koboSpan" id="kobo.158.2" xmlns="http://www.w3.org/1999/xhtml">In this function, we are popping the previous page from </span><span class="No-Break"><span class="koboSpan" id="kobo.159.1" xmlns="http://www.w3.org/1999/xhtml">the stack:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.160.1" xmlns="http://www.w3.org/1999/xhtml">
async void BackToPage1 (object sender, EventArgs e) {
        await Navigation.PopAsync();
}</span></pre>
<p><span class="koboSpan" id="kobo.161.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><a id="_idIndexMarker317"/><span class="koboSpan" id="kobo.162.1" xmlns="http://www.w3.org/1999/xhtml">preceding example, we navigated to a new page using the hierarchical navigation method. </span><span class="koboSpan" id="kobo.162.2" xmlns="http://www.w3.org/1999/xhtml">To display a modal page, we can use the modal stack. </span><span class="koboSpan" id="kobo.162.3" xmlns="http://www.w3.org/1999/xhtml">For example, in our app, if we want to create a new item in </span><strong class="source-inline"><span class="koboSpan" id="kobo.163.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.164.1" xmlns="http://www.w3.org/1999/xhtml">, we can call </span><strong class="source-inline"><span class="koboSpan" id="kobo.165.1" xmlns="http://www.w3.org/1999/xhtml">PushModalAsync()</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.166.1" xmlns="http://www.w3.org/1999/xhtml">in </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.167.1" xmlns="http://www.w3.org/1999/xhtml">ItemsViewModel</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.168.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.169.1" xmlns="http://www.w3.org/1999/xhtml">
await Shell.Current.Navigation.PushModalAsync(NewItemPage(type));</span></pre>
<p><span class="koboSpan" id="kobo.170.1" xmlns="http://www.w3.org/1999/xhtml">After the new item has been created, we can call </span><strong class="source-inline"><span class="koboSpan" id="kobo.171.1" xmlns="http://www.w3.org/1999/xhtml">PopModalAsync()</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.172.1" xmlns="http://www.w3.org/1999/xhtml">in </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.173.1" xmlns="http://www.w3.org/1999/xhtml">NewItemViewModel</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.174.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.175.1" xmlns="http://www.w3.org/1999/xhtml">
_ = await Shell.Current.Navigation.PopModalAsync();</span></pre>
<p><span class="koboSpan" id="kobo.176.1" xmlns="http://www.w3.org/1999/xhtml">On the model page’s </span><strong class="source-inline"><span class="koboSpan" id="kobo.177.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></strong><span class="koboSpan" id="kobo.178.1" xmlns="http://www.w3.org/1999/xhtml">, we cannot navigate to other pages before we complete or cancel the task. </span><span class="koboSpan" id="kobo.178.2" xmlns="http://www.w3.org/1999/xhtml">Both </span><strong class="source-inline"><span class="koboSpan" id="kobo.179.1" xmlns="http://www.w3.org/1999/xhtml">PopAsync()</span></strong><span class="koboSpan" id="kobo.180.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.181.1" xmlns="http://www.w3.org/1999/xhtml">PopModalAsync()</span></strong><span class="koboSpan" id="kobo.182.1" xmlns="http://www.w3.org/1999/xhtml"> return an awaitable task of the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.183.1" xmlns="http://www.w3.org/1999/xhtml">Task&lt;Page&gt;</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.184.1" xmlns="http://www.w3.org/1999/xhtml"> type.</span></span></p>
<h2 id="_idParaDest-105"><a id="_idTextAnchor113"/><span class="koboSpan" id="kobo.185.1" xmlns="http://www.w3.org/1999/xhtml">Manipulating the navigation stack</span></h2>
<p><span class="koboSpan" id="kobo.186.1" xmlns="http://www.w3.org/1999/xhtml">In </span><a id="_idIndexMarker318"/><span class="koboSpan" id="kobo.187.1" xmlns="http://www.w3.org/1999/xhtml">hierarchical navigation, we </span><a id="_idIndexMarker319"/><span class="koboSpan" id="kobo.188.1" xmlns="http://www.w3.org/1999/xhtml">can not only push or pop pages from the stack, but we can also manipulate the </span><span class="No-Break"><span class="koboSpan" id="kobo.189.1" xmlns="http://www.w3.org/1999/xhtml">navigation stack.</span></span></p>
<h3><span class="koboSpan" id="kobo.190.1" xmlns="http://www.w3.org/1999/xhtml">Inserting a page</span></h3>
<p><span class="koboSpan" id="kobo.191.1" xmlns="http://www.w3.org/1999/xhtml">We can</span><a id="_idIndexMarker320"/><span class="koboSpan" id="kobo.192.1" xmlns="http://www.w3.org/1999/xhtml"> insert a page into the stack using the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.193.1" xmlns="http://www.w3.org/1999/xhtml">InsertPageBefore()</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.194.1" xmlns="http://www.w3.org/1999/xhtml"> method:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.195.1" xmlns="http://www.w3.org/1999/xhtml">
public void InsertPageBefore (Page page, Page before);</span></pre>
<p><span class="koboSpan" id="kobo.196.1" xmlns="http://www.w3.org/1999/xhtml">The following are two parameters </span><span class="No-Break"><span class="koboSpan" id="kobo.197.1" xmlns="http://www.w3.org/1999/xhtml">of </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.198.1" xmlns="http://www.w3.org/1999/xhtml">InsertPageBefore()</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.199.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<ul>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.200.1" xmlns="http://www.w3.org/1999/xhtml">page</span></strong><span class="koboSpan" id="kobo.201.1" xmlns="http://www.w3.org/1999/xhtml">: This is the page to </span><span class="No-Break"><span class="koboSpan" id="kobo.202.1" xmlns="http://www.w3.org/1999/xhtml">be added</span></span></li>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.203.1" xmlns="http://www.w3.org/1999/xhtml">before</span></strong><span class="koboSpan" id="kobo.204.1" xmlns="http://www.w3.org/1999/xhtml">: This is the page before which the page </span><span class="No-Break"><span class="koboSpan" id="kobo.205.1" xmlns="http://www.w3.org/1999/xhtml">is inserted</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.206.1" xmlns="http://www.w3.org/1999/xhtml">In </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.207.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><em class="italic"><span class="koboSpan" id="kobo.208.1" xmlns="http://www.w3.org/1999/xhtml">.1</span></em><span class="koboSpan" id="kobo.209.1" xmlns="http://www.w3.org/1999/xhtml">, when we are at </span><strong class="source-inline"><span class="koboSpan" id="kobo.210.1" xmlns="http://www.w3.org/1999/xhtml">Page2</span></strong><span class="koboSpan" id="kobo.211.1" xmlns="http://www.w3.org/1999/xhtml">, we can insert another page, </span><strong class="source-inline"><span class="koboSpan" id="kobo.212.1" xmlns="http://www.w3.org/1999/xhtml">Page1</span></strong><span class="koboSpan" id="kobo.213.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="No-Break"><span class="koboSpan" id="kobo.214.1" xmlns="http://www.w3.org/1999/xhtml">before it:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.215.1" xmlns="http://www.w3.org/1999/xhtml">
Navigation.InsertPageBefore(new Page1(), this);</span></pre>
<h3><span class="koboSpan" id="kobo.216.1" xmlns="http://www.w3.org/1999/xhtml">Removing a page</span></h3>
<p><span class="koboSpan" id="kobo.217.1" xmlns="http://www.w3.org/1999/xhtml">We can also</span><a id="_idIndexMarker321"/><span class="koboSpan" id="kobo.218.1" xmlns="http://www.w3.org/1999/xhtml"> remove a specific page from the stack using the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.219.1" xmlns="http://www.w3.org/1999/xhtml">RemovePage()</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.220.1" xmlns="http://www.w3.org/1999/xhtml"> method:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.221.1" xmlns="http://www.w3.org/1999/xhtml">
public void RemovePage (Page page);</span></pre>
<p><span class="koboSpan" id="kobo.222.1" xmlns="http://www.w3.org/1999/xhtml">In </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.223.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><em class="italic"><span class="koboSpan" id="kobo.224.1" xmlns="http://www.w3.org/1999/xhtml">.1</span></em><span class="koboSpan" id="kobo.225.1" xmlns="http://www.w3.org/1999/xhtml">, given we have a reference of </span><strong class="source-inline"><span class="koboSpan" id="kobo.226.1" xmlns="http://www.w3.org/1999/xhtml">Page2</span></strong><span class="koboSpan" id="kobo.227.1" xmlns="http://www.w3.org/1999/xhtml"> when we are at </span><strong class="source-inline"><span class="koboSpan" id="kobo.228.1" xmlns="http://www.w3.org/1999/xhtml">Page3</span></strong><span class="koboSpan" id="kobo.229.1" xmlns="http://www.w3.org/1999/xhtml">, we can remove </span><strong class="source-inline"><span class="koboSpan" id="kobo.230.1" xmlns="http://www.w3.org/1999/xhtml">Page2</span></strong><span class="koboSpan" id="kobo.231.1" xmlns="http://www.w3.org/1999/xhtml"> from the stack. </span><span class="koboSpan" id="kobo.231.2" xmlns="http://www.w3.org/1999/xhtml">After </span><strong class="source-inline"><span class="koboSpan" id="kobo.232.1" xmlns="http://www.w3.org/1999/xhtml">PopAsync()</span></strong><span class="koboSpan" id="kobo.233.1" xmlns="http://www.w3.org/1999/xhtml"> is called, we will be back </span><span class="No-Break"><span class="koboSpan" id="kobo.234.1" xmlns="http://www.w3.org/1999/xhtml">at </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.235.1" xmlns="http://www.w3.org/1999/xhtml">Page1</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.236.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.237.1" xmlns="http://www.w3.org/1999/xhtml">
// the reference page2 is an instance of Page2
Navigation.RemovePage(page2);
await Navigation.PopAsync();</span></pre>
<p><span class="koboSpan" id="kobo.238.1" xmlns="http://www.w3.org/1999/xhtml">With that, we have learned how to build a navigation stack using </span><strong class="source-inline"><span class="koboSpan" id="kobo.239.1" xmlns="http://www.w3.org/1999/xhtml">NavigationPage</span></strong><span class="koboSpan" id="kobo.240.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.240.2" xmlns="http://www.w3.org/1999/xhtml">Once we have a navigation stack, we can use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.241.1" xmlns="http://www.w3.org/1999/xhtml">INavigation</span></strong><span class="koboSpan" id="kobo.242.1" xmlns="http://www.w3.org/1999/xhtml"> interface to perform navigation actions. </span><span class="koboSpan" id="kobo.242.2" xmlns="http://www.w3.org/1999/xhtml">For a simple application, this may be good enough. </span><span class="koboSpan" id="kobo.242.3" xmlns="http://www.w3.org/1999/xhtml">However, there will be a lot of work involved for a complex application. </span><span class="koboSpan" id="kobo.242.4" xmlns="http://www.w3.org/1999/xhtml">We have a better choice in .NET MAUI known as </span><strong class="source-inline"><span class="koboSpan" id="kobo.243.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.244.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.244.2" xmlns="http://www.w3.org/1999/xhtml">With </span><strong class="source-inline"><span class="koboSpan" id="kobo.245.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.246.1" xmlns="http://www.w3.org/1999/xhtml">, we can provide a better navigation experience to the users with </span><span class="No-Break"><span class="koboSpan" id="kobo.247.1" xmlns="http://www.w3.org/1999/xhtml">less work.</span></span></p>
<h1 id="_idParaDest-106"><a id="_idTextAnchor114"/><span class="koboSpan" id="kobo.248.1" xmlns="http://www.w3.org/1999/xhtml">Using Shell</span></h1>
<p><span class="koboSpan" id="kobo.249.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.250.1" xmlns="http://www.w3.org/1999/xhtml">INavigation</span></strong><span class="koboSpan" id="kobo.251.1" xmlns="http://www.w3.org/1999/xhtml"> interface and </span><strong class="source-inline"><span class="koboSpan" id="kobo.252.1" xmlns="http://www.w3.org/1999/xhtml">NavigationPage</span></strong><span class="koboSpan" id="kobo.253.1" xmlns="http://www.w3.org/1999/xhtml"> provide basic navigation functionalities. </span><span class="koboSpan" id="kobo.253.2" xmlns="http://www.w3.org/1999/xhtml">If </span><a id="_idIndexMarker322"/><span class="koboSpan" id="kobo.254.1" xmlns="http://www.w3.org/1999/xhtml">we rely on them only, we have to create complicated navigation mechanisms by ourselves. </span><span class="koboSpan" id="kobo.254.2" xmlns="http://www.w3.org/1999/xhtml">In .NET MAUI, there are built-in page templates to choose from, and they can provide different </span><span class="No-Break"><span class="koboSpan" id="kobo.255.1" xmlns="http://www.w3.org/1999/xhtml">navigation experiences.</span></span></p>
<p><span class="koboSpan" id="kobo.256.1" xmlns="http://www.w3.org/1999/xhtml">As shown in the class diagram in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.257.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><em class="italic"><span class="koboSpan" id="kobo.258.1" xmlns="http://www.w3.org/1999/xhtml">.2</span></em><span class="koboSpan" id="kobo.259.1" xmlns="http://www.w3.org/1999/xhtml">, there are built-in pages available for different use cases. </span><span class="koboSpan" id="kobo.259.2" xmlns="http://www.w3.org/1999/xhtml">All these pages – </span><strong class="source-inline"><span class="koboSpan" id="kobo.260.1" xmlns="http://www.w3.org/1999/xhtml">TabbedPage</span></strong><span class="koboSpan" id="kobo.261.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.262.1" xmlns="http://www.w3.org/1999/xhtml">ContentPage</span></strong><span class="koboSpan" id="kobo.263.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.264.1" xmlns="http://www.w3.org/1999/xhtml">FlyoutPage</span></strong><span class="koboSpan" id="kobo.265.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.266.1" xmlns="http://www.w3.org/1999/xhtml">NavigationPage</span></strong><span class="koboSpan" id="kobo.267.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><strong class="source-inline"><span class="koboSpan" id="kobo.268.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.269.1" xmlns="http://www.w3.org/1999/xhtml"> – are derived classes </span><span class="No-Break"><span class="koboSpan" id="kobo.270.1" xmlns="http://www.w3.org/1999/xhtml">of </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.271.1" xmlns="http://www.w3.org/1999/xhtml">Page</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.272.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer058">
<span class="koboSpan" id="kobo.273.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 5.2: Class diagram of the built-in pages in .NET MAUI " src="image/Figure_5.02_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.274.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5.2: Class diagram of the built-in pages in .NET MAUI</span></p>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.275.1" xmlns="http://www.w3.org/1999/xhtml">ContentPage</span></strong><span class="koboSpan" id="kobo.276.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.277.1" xmlns="http://www.w3.org/1999/xhtml">TabbedPage</span></strong><span class="koboSpan" id="kobo.278.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><strong class="source-inline"><span class="koboSpan" id="kobo.279.1" xmlns="http://www.w3.org/1999/xhtml">FlyoutPage</span></strong><span class="koboSpan" id="kobo.280.1" xmlns="http://www.w3.org/1999/xhtml"> can be used to create various user interfaces per </span><span class="No-Break"><span class="koboSpan" id="kobo.281.1" xmlns="http://www.w3.org/1999/xhtml">your requirements.</span></span></p>
<ul>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.282.1" xmlns="http://www.w3.org/1999/xhtml">ContentPage</span></strong><span class="koboSpan" id="kobo.283.1" xmlns="http://www.w3.org/1999/xhtml"> is</span><a id="_idIndexMarker323"/><span class="koboSpan" id="kobo.284.1" xmlns="http://www.w3.org/1999/xhtml"> the most </span><a id="_idIndexMarker324"/><span class="koboSpan" id="kobo.285.1" xmlns="http://www.w3.org/1999/xhtml">used page and can include any layout and view elements. </span><span class="koboSpan" id="kobo.285.2" xmlns="http://www.w3.org/1999/xhtml">It is suitable in the case of a </span><span class="No-Break"><span class="koboSpan" id="kobo.286.1" xmlns="http://www.w3.org/1999/xhtml">single-page design.</span></span></li>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.287.1" xmlns="http://www.w3.org/1999/xhtml">TabbedPage</span></strong><span class="koboSpan" id="kobo.288.1" xmlns="http://www.w3.org/1999/xhtml"> can</span><a id="_idIndexMarker325"/><span class="koboSpan" id="kobo.289.1" xmlns="http://www.w3.org/1999/xhtml"> be used to host multiple pages. </span><span class="koboSpan" id="kobo.289.2" xmlns="http://www.w3.org/1999/xhtml">Each child page can be selected by a series of tabs at the top or bottom of </span><span class="No-Break"><span class="koboSpan" id="kobo.290.1" xmlns="http://www.w3.org/1999/xhtml">the page.</span></span></li>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.291.1" xmlns="http://www.w3.org/1999/xhtml">Flyoutpage</span></strong><span class="koboSpan" id="kobo.292.1" xmlns="http://www.w3.org/1999/xhtml"> can </span><a id="_idIndexMarker326"/><span class="koboSpan" id="kobo.293.1" xmlns="http://www.w3.org/1999/xhtml">display a list of items, which is similar to the menu items in a desktop application. </span><span class="koboSpan" id="kobo.293.2" xmlns="http://www.w3.org/1999/xhtml">The user can navigate to individual pages through the items in </span><span class="No-Break"><span class="koboSpan" id="kobo.294.1" xmlns="http://www.w3.org/1999/xhtml">the menu.</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.295.1" xmlns="http://www.w3.org/1999/xhtml">Even though </span><strong class="source-inline"><span class="koboSpan" id="kobo.296.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.297.1" xmlns="http://www.w3.org/1999/xhtml"> is also a derived class of </span><strong class="source-inline"><span class="koboSpan" id="kobo.298.1" xmlns="http://www.w3.org/1999/xhtml">Page</span></strong><span class="koboSpan" id="kobo.299.1" xmlns="http://www.w3.org/1999/xhtml">, it includes a common navigation user experience, which can make developers’ lives easier. </span><span class="koboSpan" id="kobo.299.2" xmlns="http://www.w3.org/1999/xhtml">It helps the developers by reducing the</span><a id="_idIndexMarker327"/><span class="koboSpan" id="kobo.300.1" xmlns="http://www.w3.org/1999/xhtml"> complexity of application development with highly customizable and rich features in </span><span class="No-Break"><span class="koboSpan" id="kobo.301.1" xmlns="http://www.w3.org/1999/xhtml">one place.</span></span></p>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.302.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.303.1" xmlns="http://www.w3.org/1999/xhtml"> provides the</span><a id="_idIndexMarker328"/> <span class="No-Break"><span class="koboSpan" id="kobo.304.1" xmlns="http://www.w3.org/1999/xhtml">following features:</span></span></p>
<ul>
<li><span class="koboSpan" id="kobo.305.1" xmlns="http://www.w3.org/1999/xhtml">A single place to describe the visual hierarchy of </span><span class="No-Break"><span class="koboSpan" id="kobo.306.1" xmlns="http://www.w3.org/1999/xhtml">an app</span></span></li>
<li><span class="koboSpan" id="kobo.307.1" xmlns="http://www.w3.org/1999/xhtml">A highly customizable common navigation </span><span class="No-Break"><span class="koboSpan" id="kobo.308.1" xmlns="http://www.w3.org/1999/xhtml">user experience</span></span></li>
<li><span class="koboSpan" id="kobo.309.1" xmlns="http://www.w3.org/1999/xhtml">A URI-based navigation scheme that is very similar to what we have in a </span><span class="No-Break"><span class="koboSpan" id="kobo.310.1" xmlns="http://www.w3.org/1999/xhtml">web browser</span></span></li>
<li><span class="koboSpan" id="kobo.311.1" xmlns="http://www.w3.org/1999/xhtml">An integrated </span><span class="No-Break"><span class="koboSpan" id="kobo.312.1" xmlns="http://www.w3.org/1999/xhtml">search handler</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.313.1" xmlns="http://www.w3.org/1999/xhtml">The top-level building blocks of </span><strong class="source-inline"><span class="koboSpan" id="kobo.314.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.315.1" xmlns="http://www.w3.org/1999/xhtml"> are flyouts and tabs. </span><span class="koboSpan" id="kobo.315.2" xmlns="http://www.w3.org/1999/xhtml">We can use flyouts and tabs to create the navigation structure of </span><span class="No-Break"><span class="koboSpan" id="kobo.316.1" xmlns="http://www.w3.org/1999/xhtml">our app.</span></span></p>
<h2 id="_idParaDest-107"><a id="_idTextAnchor115"/><span class="koboSpan" id="kobo.317.1" xmlns="http://www.w3.org/1999/xhtml">Flyout</span></h2>
<p><span class="koboSpan" id="kobo.318.1" xmlns="http://www.w3.org/1999/xhtml">A </span><a id="_idIndexMarker329"/><span class="koboSpan" id="kobo.319.1" xmlns="http://www.w3.org/1999/xhtml">flyout</span><a id="_idIndexMarker330"/><span class="koboSpan" id="kobo.320.1" xmlns="http://www.w3.org/1999/xhtml"> can be used as the top-level menu of a </span><strong class="source-inline"><span class="koboSpan" id="kobo.321.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.322.1" xmlns="http://www.w3.org/1999/xhtml"> app. </span><span class="koboSpan" id="kobo.322.2" xmlns="http://www.w3.org/1999/xhtml">In our app, we must use both flyouts and tabs to create the top-level navigation design. </span><span class="koboSpan" id="kobo.322.3" xmlns="http://www.w3.org/1999/xhtml">We will explore flyouts in this section; in the next section, we will discuss how to use tabs in </span><span class="No-Break"><span class="koboSpan" id="kobo.323.1" xmlns="http://www.w3.org/1999/xhtml">our app.</span></span></p>
<p><span class="koboSpan" id="kobo.324.1" xmlns="http://www.w3.org/1999/xhtml">In </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.325.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><em class="italic"><span class="koboSpan" id="kobo.326.1" xmlns="http://www.w3.org/1999/xhtml">.3</span></em><span class="koboSpan" id="kobo.327.1" xmlns="http://www.w3.org/1999/xhtml">, we can see what the flyout looks like in our app. </span><span class="koboSpan" id="kobo.327.2" xmlns="http://www.w3.org/1999/xhtml">From the flyout menu, we can switch to </span><strong class="source-inline"><span class="koboSpan" id="kobo.328.1" xmlns="http://www.w3.org/1999/xhtml">AboutPage</span></strong><span class="koboSpan" id="kobo.329.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.330.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.331.1" xmlns="http://www.w3.org/1999/xhtml">, or </span><strong class="source-inline"><span class="koboSpan" id="kobo.332.1" xmlns="http://www.w3.org/1999/xhtml">LoginPage</span></strong><span class="koboSpan" id="kobo.333.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.333.2" xmlns="http://www.w3.org/1999/xhtml">To access the flyout menu, we can either swipe from the left of the screen or click the flyout icon, which is the hamburger icon ①. </span><span class="koboSpan" id="kobo.333.3" xmlns="http://www.w3.org/1999/xhtml">When we click </span><strong class="bold"><span class="koboSpan" id="kobo.334.1" xmlns="http://www.w3.org/1999/xhtml">Root Group</span></strong><span class="koboSpan" id="kobo.335.1" xmlns="http://www.w3.org/1999/xhtml"> ② in the flyout menu, we will see a list of password entries </span><span class="No-Break"><span class="koboSpan" id="kobo.336.1" xmlns="http://www.w3.org/1999/xhtml">or groups:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer059">
<span class="koboSpan" id="kobo.337.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 5.3: Flyout " src="image/Figure_5.03_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.338.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5.3: Flyout</span></p>
<p><span class="koboSpan" id="kobo.339.1" xmlns="http://www.w3.org/1999/xhtml">The flyout menu </span><a id="_idIndexMarker331"/><span class="koboSpan" id="kobo.340.1" xmlns="http://www.w3.org/1999/xhtml">consists of flyout items or menu items. </span><span class="koboSpan" id="kobo.340.2" xmlns="http://www.w3.org/1999/xhtml">In </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.341.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><em class="italic"><span class="koboSpan" id="kobo.342.1" xmlns="http://www.w3.org/1999/xhtml">.3</span></em><span class="koboSpan" id="kobo.343.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="bold"><span class="koboSpan" id="kobo.344.1" xmlns="http://www.w3.org/1999/xhtml">About</span></strong><span class="koboSpan" id="kobo.345.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="bold"><span class="koboSpan" id="kobo.346.1" xmlns="http://www.w3.org/1999/xhtml">Root Group</span></strong><span class="koboSpan" id="kobo.347.1" xmlns="http://www.w3.org/1999/xhtml"> are flyout items, while </span><strong class="bold"><span class="koboSpan" id="kobo.348.1" xmlns="http://www.w3.org/1999/xhtml">Logout</span></strong><span class="koboSpan" id="kobo.349.1" xmlns="http://www.w3.org/1999/xhtml"> is a </span><span class="No-Break"><span class="koboSpan" id="kobo.350.1" xmlns="http://www.w3.org/1999/xhtml">menu item.</span></span></p>
<h3><span class="koboSpan" id="kobo.351.1" xmlns="http://www.w3.org/1999/xhtml">Flyout items</span></h3>
<p><span class="koboSpan" id="kobo.352.1" xmlns="http://www.w3.org/1999/xhtml">Each</span><a id="_idIndexMarker332"/><span class="koboSpan" id="kobo.353.1" xmlns="http://www.w3.org/1999/xhtml"> flyout item is a </span><strong class="source-inline"><span class="koboSpan" id="kobo.354.1" xmlns="http://www.w3.org/1999/xhtml">FlyoutItem</span></strong><span class="koboSpan" id="kobo.355.1" xmlns="http://www.w3.org/1999/xhtml"> object that contains a </span><strong class="source-inline"><span class="koboSpan" id="kobo.356.1" xmlns="http://www.w3.org/1999/xhtml">ShellContent</span></strong><span class="koboSpan" id="kobo.357.1" xmlns="http://www.w3.org/1999/xhtml"> object. </span><span class="koboSpan" id="kobo.357.2" xmlns="http://www.w3.org/1999/xhtml">We can define flyout items like so in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.358.1" xmlns="http://www.w3.org/1999/xhtml">AppShell.xaml</span></strong><span class="koboSpan" id="kobo.359.1" xmlns="http://www.w3.org/1999/xhtml"> file. </span><span class="koboSpan" id="kobo.359.2" xmlns="http://www.w3.org/1999/xhtml">We assign a string resource to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.360.1" xmlns="http://www.w3.org/1999/xhtml">Title</span></strong><span class="koboSpan" id="kobo.361.1" xmlns="http://www.w3.org/1999/xhtml"> ① attribute and an </span><strong class="source-inline"><span class="koboSpan" id="kobo.362.1" xmlns="http://www.w3.org/1999/xhtml">ImageSource</span></strong><span class="koboSpan" id="kobo.363.1" xmlns="http://www.w3.org/1999/xhtml"> to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.364.1" xmlns="http://www.w3.org/1999/xhtml">Icon</span></strong><span class="koboSpan" id="kobo.365.1" xmlns="http://www.w3.org/1999/xhtml"> ② attribute. </span><span class="koboSpan" id="kobo.365.2" xmlns="http://www.w3.org/1999/xhtml">These correspond to the properties of the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.366.1" xmlns="http://www.w3.org/1999/xhtml">FlyoutItem</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.367.1" xmlns="http://www.w3.org/1999/xhtml"> class:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.368.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;FlyoutItem ① Title="{x:Static resources:Resources.About}" ② Icon="tab_info.png" &gt;
  &lt;Tab&gt;
    &lt;ShellContent Route="AboutPage" ContentTemplate=
        "{DataTemplate local:AboutPage}" /&gt;
  &lt;/Tab&gt;
&lt;/FlyoutItem&gt;
&lt;FlyoutItem x:Name="RootItem" Title="Browse"
    Icon="tab_home.png"&gt;
  &lt;Tab&gt;
    &lt;ShellContent Route="RootPage" ContentTemplate=
        "{DataTemplate local:ItemsPage}" /&gt;
  &lt;/Tab&gt;
&lt;/FlyoutItem&gt;</span></pre>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.369.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.370.1" xmlns="http://www.w3.org/1999/xhtml"> has </span><a id="_idIndexMarker333"/><span class="koboSpan" id="kobo.371.1" xmlns="http://www.w3.org/1999/xhtml">implicit conversion operators that can be used to remove the </span><strong class="source-inline"><span class="koboSpan" id="kobo.372.1" xmlns="http://www.w3.org/1999/xhtml">FlyoutItem</span></strong><span class="koboSpan" id="kobo.373.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.374.1" xmlns="http://www.w3.org/1999/xhtml">Tab</span></strong><span class="koboSpan" id="kobo.375.1" xmlns="http://www.w3.org/1999/xhtml"> objects so that the preceding XAML code can also be simplified, </span><span class="No-Break"><span class="koboSpan" id="kobo.376.1" xmlns="http://www.w3.org/1999/xhtml">like so:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.377.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;ShellContent Title="{x:Static resources:Resources.About}" Icon="tab_info.png" Route="AboutPage" ContentTemplate="{DataTemplate local:AboutPage}" /&gt;
&lt;ShellContent x:Name="RootItem" Title="Browse" Icon="tab_home.png" Route="RootPage" ContentTemplate="{DataTemplate local:ItemsPage}" /&gt;</span></pre>
<h3><span class="koboSpan" id="kobo.378.1" xmlns="http://www.w3.org/1999/xhtml">Menu items</span></h3>
<p><span class="koboSpan" id="kobo.379.1" xmlns="http://www.w3.org/1999/xhtml">Flyout items can </span><a id="_idIndexMarker334"/><span class="koboSpan" id="kobo.380.1" xmlns="http://www.w3.org/1999/xhtml">be used to navigate to a content page, but sometimes, we may want to take an action instead of navigating to a content page. </span><span class="koboSpan" id="kobo.380.2" xmlns="http://www.w3.org/1999/xhtml">In this case, we can use menu items. </span><span class="koboSpan" id="kobo.380.3" xmlns="http://www.w3.org/1999/xhtml">In our case, we have defined </span><strong class="bold"><span class="koboSpan" id="kobo.381.1" xmlns="http://www.w3.org/1999/xhtml">Logout</span></strong><span class="koboSpan" id="kobo.382.1" xmlns="http://www.w3.org/1999/xhtml"> as a </span><span class="No-Break"><span class="koboSpan" id="kobo.383.1" xmlns="http://www.w3.org/1999/xhtml">menu item:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.384.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;MenuItem Text="Logout" IconImageSource="tab_login.png"
    Clicked="OnMenuItemClicked"&gt;
&lt;/MenuItem&gt;</span></pre>
<p><span class="koboSpan" id="kobo.385.1" xmlns="http://www.w3.org/1999/xhtml">As we can see from the preceding XAML code, each menu item is a </span><strong class="source-inline"><span class="koboSpan" id="kobo.386.1" xmlns="http://www.w3.org/1999/xhtml">MenuItem</span></strong><span class="koboSpan" id="kobo.387.1" xmlns="http://www.w3.org/1999/xhtml"> object. </span><span class="koboSpan" id="kobo.387.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.388.1" xmlns="http://www.w3.org/1999/xhtml">MenuItem</span></strong><span class="koboSpan" id="kobo.389.1" xmlns="http://www.w3.org/1999/xhtml"> class has a </span><strong class="source-inline"><span class="koboSpan" id="kobo.390.1" xmlns="http://www.w3.org/1999/xhtml">Clicked</span></strong><span class="koboSpan" id="kobo.391.1" xmlns="http://www.w3.org/1999/xhtml"> event and a </span><strong class="source-inline"><span class="koboSpan" id="kobo.392.1" xmlns="http://www.w3.org/1999/xhtml">Command</span></strong><span class="koboSpan" id="kobo.393.1" xmlns="http://www.w3.org/1999/xhtml"> property. </span><span class="koboSpan" id="kobo.393.2" xmlns="http://www.w3.org/1999/xhtml">When </span><strong class="source-inline"><span class="koboSpan" id="kobo.394.1" xmlns="http://www.w3.org/1999/xhtml">MenuItem</span></strong><span class="koboSpan" id="kobo.395.1" xmlns="http://www.w3.org/1999/xhtml"> is tapped, we can execute an action. </span><span class="koboSpan" id="kobo.395.2" xmlns="http://www.w3.org/1999/xhtml">In the preceding menu item, we assigned </span><strong class="source-inline"><span class="koboSpan" id="kobo.396.1" xmlns="http://www.w3.org/1999/xhtml">OnMenuItemClicked()</span></strong><span class="koboSpan" id="kobo.397.1" xmlns="http://www.w3.org/1999/xhtml"> as the </span><span class="No-Break"><span class="koboSpan" id="kobo.398.1" xmlns="http://www.w3.org/1999/xhtml">event handler.</span></span></p>
<p><span class="koboSpan" id="kobo.399.1" xmlns="http://www.w3.org/1999/xhtml">Let’s</span><a id="_idIndexMarker335"/><span class="koboSpan" id="kobo.400.1" xmlns="http://www.w3.org/1999/xhtml"> review </span><strong class="source-inline"><span class="koboSpan" id="kobo.401.1" xmlns="http://www.w3.org/1999/xhtml">AppShell.xaml</span></strong><span class="koboSpan" id="kobo.402.1" xmlns="http://www.w3.org/1999/xhtml"> in our app in </span><em class="italic"><span class="koboSpan" id="kobo.403.1" xmlns="http://www.w3.org/1999/xhtml">Listing 5.1</span></em><span class="koboSpan" id="kobo.404.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.404.2" xmlns="http://www.w3.org/1999/xhtml">Here, we defined two flyout items and one menu item. </span><span class="koboSpan" id="kobo.404.3" xmlns="http://www.w3.org/1999/xhtml">We can select </span><strong class="source-inline"><span class="koboSpan" id="kobo.405.1" xmlns="http://www.w3.org/1999/xhtml">AboutPage</span></strong><span class="koboSpan" id="kobo.406.1" xmlns="http://www.w3.org/1999/xhtml"> ➊ and </span><strong class="source-inline"><span class="koboSpan" id="kobo.407.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.408.1" xmlns="http://www.w3.org/1999/xhtml"> ➋ with flyout items and log out ➌ through the </span><span class="No-Break"><span class="koboSpan" id="kobo.409.1" xmlns="http://www.w3.org/1999/xhtml">menu item:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.410.1" xmlns="http://www.w3.org/1999/xhtml">Listing 5.1: AppShell.xaml in PassXYZ.Vault (https://epa.ms/AppShell5-1)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.411.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;Shell xmlns="http://schemas.microsoft.com
    /dotnet/2021/maui"
       xmlns:x="http://schemas.microsoft.com
           /winfx/2009/xaml"
       xmlns:local="clr-namespace:PassXYZ.Vault.Views"
       xmlns:style="clr-namespace:PassXYZ.
</span><span class="koboSpan" id="kobo.411.2" xmlns="http://www.w3.org/1999/xhtml">           Vault.Resources.Styles"
       xmlns:resources="clr-namespace:PassXYZ.
</span><span class="koboSpan" id="kobo.411.3" xmlns="http://www.w3.org/1999/xhtml">           Vault.Properties"
       xmlns:app="clr-namespace:PassXYZ.Vault"
       Title="PassXYZ.Vault"
       x:Class="PassXYZ.Vault.AppShell"&gt;
  &lt;Shel</span><a id="_idTextAnchor116"/><span class="koboSpan" id="kobo.412.1" xmlns="http://www.w3.org/1999/xhtml">l.Resources...&gt;
  &lt;TabBar&gt;                                              ➍
    &lt;Tab Title="{x:Static resources:Resources.
</span><span class="koboSpan" id="kobo.412.2" xmlns="http://www.w3.org/1999/xhtml">        action_id_login}" Icon="tab_login.png"&gt;
      &lt;ShellContent Route="LoginPage" ContentTemplate=
          "{DataTemplate local:LoginPage}" /&gt;
    &lt;/Tab&gt;
    &lt;Tab Title="{x:Static resources:Resources.menu
        _id_users}" Icon="tab_users.png"&gt;
      &lt;ShellContent Route="SignUpPage" ContentTemplate=
          "{DataTemplate local:SignUpPage}" /&gt;
    &lt;/Tab&gt;
  &lt;/TabBar&gt;
  &lt;FlyoutItem Title="{x:Static resources:Resources.About}"
      Icon="tab_info.png" &gt;
    &lt;ShellContent Route="AboutPage" ContentTemplate=
        "{DataTe</span><a id="_idTextAnchor117"/><span class="koboSpan" id="kobo.413.1" xmlns="http://www.w3.org/1999/xhtml">mplate local:AboutPage}" /&gt;             ➊
  &lt;/FlyoutItem&gt;
  &lt;FlyoutItem x:Name="RootItem" Title="Browse"
      Icon="tab_home.png"&gt;
    &lt;ShellContent Route="RootPage" ContentTemplate=
        "{DataTe</span><a id="_idTextAnchor118"/><span class="koboSpan" id="kobo.414.1" xmlns="http://www.w3.org/1999/xhtml">mplate local:ItemsPage}" /&gt;             ➋
  &lt;/FlyoutItem&gt;
  &lt;MenuItem Text="Logout" IconImageSource="tab_login.png"
       C</span><a id="_idTextAnchor119"/><span class="koboSpan" id="kobo.415.1" xmlns="http://www.w3.org/1999/xhtml">licked="OnMenuItemClicked"&gt;                     ➌
  &lt;/MenuItem&gt;
&lt;/Shell&gt;</span></pre>
<p><span class="koboSpan" id="kobo.416.1" xmlns="http://www.w3.org/1999/xhtml">There</span><a id="_idIndexMarker336"/><span class="koboSpan" id="kobo.417.1" xmlns="http://www.w3.org/1999/xhtml"> is also a </span><strong class="source-inline"><span class="koboSpan" id="kobo.418.1" xmlns="http://www.w3.org/1999/xhtml">TabBar</span></strong><span class="koboSpan" id="kobo.419.1" xmlns="http://www.w3.org/1999/xhtml"> ➍ defined for </span><strong class="source-inline"><span class="koboSpan" id="kobo.420.1" xmlns="http://www.w3.org/1999/xhtml">LoginPage</span></strong><span class="koboSpan" id="kobo.421.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.422.1" xmlns="http://www.w3.org/1999/xhtml">SignUpPage</span></strong><span class="koboSpan" id="kobo.423.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.423.2" xmlns="http://www.w3.org/1999/xhtml">Let’s review </span><span class="No-Break"><span class="koboSpan" id="kobo.424.1" xmlns="http://www.w3.org/1999/xhtml">tabs now.</span></span></p>
<h2 id="_idParaDest-108"><a id="_idTextAnchor120"/><span class="koboSpan" id="kobo.425.1" xmlns="http://www.w3.org/1999/xhtml">Tabs</span></h2>
<p><span class="koboSpan" id="kobo.426.1" xmlns="http://www.w3.org/1999/xhtml">When we </span><a id="_idIndexMarker337"/><span class="koboSpan" id="kobo.427.1" xmlns="http://www.w3.org/1999/xhtml">use tabs, </span><strong class="source-inline"><span class="koboSpan" id="kobo.428.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.429.1" xmlns="http://www.w3.org/1999/xhtml"> can</span><a id="_idIndexMarker338"/><span class="koboSpan" id="kobo.430.1" xmlns="http://www.w3.org/1999/xhtml"> create a navigation experience similar to </span><strong class="source-inline"><span class="koboSpan" id="kobo.431.1" xmlns="http://www.w3.org/1999/xhtml">TabbedPage</span></strong><span class="koboSpan" id="kobo.432.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.432.2" xmlns="http://www.w3.org/1999/xhtml">As shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.433.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><em class="italic"><span class="koboSpan" id="kobo.434.1" xmlns="http://www.w3.org/1999/xhtml">.4</span></em><span class="koboSpan" id="kobo.435.1" xmlns="http://www.w3.org/1999/xhtml">, there are two tabs at the bottom tab bar on the</span><a id="_idIndexMarker339"/><span class="koboSpan" id="kobo.436.1" xmlns="http://www.w3.org/1999/xhtml"> Android and iOS platforms, but it looks different on the </span><span class="No-Break"><span class="koboSpan" id="kobo.437.1" xmlns="http://www.w3.org/1999/xhtml">Windows platform:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer060">
<span class="koboSpan" id="kobo.438.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 5.4: TabBar and tabs on Android " src="image/Figure_5.04_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.439.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5.4: TabBar and tabs on Android</span></p>
<p><span class="koboSpan" id="kobo.440.1" xmlns="http://www.w3.org/1999/xhtml">As we can</span><a id="_idIndexMarker340"/><span class="koboSpan" id="kobo.441.1" xmlns="http://www.w3.org/1999/xhtml"> see in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.442.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><em class="italic"><span class="koboSpan" id="kobo.443.1" xmlns="http://www.w3.org/1999/xhtml">.5</span></em><span class="koboSpan" id="kobo.444.1" xmlns="http://www.w3.org/1999/xhtml">, on Windows, the tab bar is at </span><span class="No-Break"><span class="koboSpan" id="kobo.445.1" xmlns="http://www.w3.org/1999/xhtml">the top:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer061">
<span class="koboSpan" id="kobo.446.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 5.5: TabBar and tabs on Windows " src="image/Figure_5.05_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.447.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5.5: TabBar and tabs on Windows</span></p>
<p><span class="koboSpan" id="kobo.448.1" xmlns="http://www.w3.org/1999/xhtml">To </span><a id="_idIndexMarker341"/><span class="koboSpan" id="kobo.449.1" xmlns="http://www.w3.org/1999/xhtml">create tabs in our app, we must define a </span><strong class="source-inline"><span class="koboSpan" id="kobo.450.1" xmlns="http://www.w3.org/1999/xhtml">TabBar</span></strong><span class="koboSpan" id="kobo.451.1" xmlns="http://www.w3.org/1999/xhtml"> object. </span><span class="koboSpan" id="kobo.451.2" xmlns="http://www.w3.org/1999/xhtml">A </span><strong class="source-inline"><span class="koboSpan" id="kobo.452.1" xmlns="http://www.w3.org/1999/xhtml">TabBar</span></strong><span class="koboSpan" id="kobo.453.1" xmlns="http://www.w3.org/1999/xhtml"> object can contain one or more </span><strong class="source-inline"><span class="koboSpan" id="kobo.454.1" xmlns="http://www.w3.org/1999/xhtml">Tab</span></strong><span class="koboSpan" id="kobo.455.1" xmlns="http://www.w3.org/1999/xhtml"> objects and each </span><strong class="source-inline"><span class="koboSpan" id="kobo.456.1" xmlns="http://www.w3.org/1999/xhtml">Tab</span></strong><span class="koboSpan" id="kobo.457.1" xmlns="http://www.w3.org/1999/xhtml"> object represents a tab on the tab bar. </span><span class="koboSpan" id="kobo.457.2" xmlns="http://www.w3.org/1999/xhtml">Each </span><strong class="source-inline"><span class="koboSpan" id="kobo.458.1" xmlns="http://www.w3.org/1999/xhtml">Tab</span></strong><span class="koboSpan" id="kobo.459.1" xmlns="http://www.w3.org/1999/xhtml"> object can contain one or more </span><strong class="source-inline"><span class="koboSpan" id="kobo.460.1" xmlns="http://www.w3.org/1999/xhtml">ShellContent</span></strong><span class="koboSpan" id="kobo.461.1" xmlns="http://www.w3.org/1999/xhtml"> objects. </span><span class="koboSpan" id="kobo.461.2" xmlns="http://www.w3.org/1999/xhtml">The following XAML code shows that it is very similar to the one we get when we define </span><span class="No-Break"><span class="koboSpan" id="kobo.462.1" xmlns="http://www.w3.org/1999/xhtml">a flyout:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.463.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;TabBar&gt;
  &lt;Tab Title="{x:Static resources:Resources.
</span><span class="koboSpan" id="kobo.463.2" xmlns="http://www.w3.org/1999/xhtml">      action_id_login}" Icon="tab_login.png"&gt;
    &lt;ShellContent Route="LoginPage" ContentTemplate=
        "{DataTemplate local:LoginPage}" /&gt;
  &lt;/Tab&gt;
  &lt;Tab Title="{x:Static resources:Resources.menu_id_users}"
      Icon="tab_users.png"&gt;
    &lt;ShellContent Route="SignUpPage" ContentTemplate=
        "{DataTemplate local:SignUpPage}" /&gt;
  &lt;/Tab&gt;
&lt;/TabBar&gt;</span></pre>
<p><span class="koboSpan" id="kobo.464.1" xmlns="http://www.w3.org/1999/xhtml">Just like </span><a id="_idIndexMarker342"/><span class="koboSpan" id="kobo.465.1" xmlns="http://www.w3.org/1999/xhtml">what we did in the flyout XAML code, we can make the preceding code a little simpler by removing </span><strong class="source-inline"><span class="koboSpan" id="kobo.466.1" xmlns="http://www.w3.org/1999/xhtml">Tab</span></strong><span class="koboSpan" id="kobo.467.1" xmlns="http://www.w3.org/1999/xhtml"> tags. </span><span class="koboSpan" id="kobo.467.2" xmlns="http://www.w3.org/1999/xhtml">We can use the implicit conversion operators of </span><strong class="source-inline"><span class="koboSpan" id="kobo.468.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.469.1" xmlns="http://www.w3.org/1999/xhtml"> to remove </span><strong class="source-inline"><span class="koboSpan" id="kobo.470.1" xmlns="http://www.w3.org/1999/xhtml">Tab</span></strong><span class="koboSpan" id="kobo.471.1" xmlns="http://www.w3.org/1999/xhtml"> objects. </span><span class="koboSpan" id="kobo.471.2" xmlns="http://www.w3.org/1999/xhtml">As we can see, we can remove </span><strong class="source-inline"><span class="koboSpan" id="kobo.472.1" xmlns="http://www.w3.org/1999/xhtml">Tab</span></strong><span class="koboSpan" id="kobo.473.1" xmlns="http://www.w3.org/1999/xhtml"> tags and define </span><strong class="source-inline"><span class="koboSpan" id="kobo.474.1" xmlns="http://www.w3.org/1999/xhtml">Title</span></strong><span class="koboSpan" id="kobo.475.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.476.1" xmlns="http://www.w3.org/1999/xhtml">Icon</span></strong><span class="koboSpan" id="kobo.477.1" xmlns="http://www.w3.org/1999/xhtml"> attributes in </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.478.1" xmlns="http://www.w3.org/1999/xhtml">ShellContent</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.479.1" xmlns="http://www.w3.org/1999/xhtml"> tags:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.480.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;TabBar&gt;
  &lt;ShellContent Title="{x:Static resources:Resources.
</span><span class="koboSpan" id="kobo.480.2" xmlns="http://www.w3.org/1999/xhtml">      action_id_login}" Icon="tab_login.png"
          Route="LoginPage" ContentTemplate="{DataTemplate
              local:LoginPage}" /&gt;
  &lt;ShellContent Title="{x:Static resources:Resources.
</span><span class="koboSpan" id="kobo.480.3" xmlns="http://www.w3.org/1999/xhtml">      menu_id_users}" Icon="tab_users.png"
          Route="SignUpPage" ContentTemplate="{DataTemplate             local:SignUpPage}" /&gt;
&lt;/TabBar&gt;</span></pre>
<p><span class="koboSpan" id="kobo.481.1" xmlns="http://www.w3.org/1999/xhtml">If we define both </span><strong class="source-inline"><span class="koboSpan" id="kobo.482.1" xmlns="http://www.w3.org/1999/xhtml">TabBar</span></strong><span class="koboSpan" id="kobo.483.1" xmlns="http://www.w3.org/1999/xhtml"> objects and </span><strong class="source-inline"><span class="koboSpan" id="kobo.484.1" xmlns="http://www.w3.org/1999/xhtml">FlyoutItem</span></strong><span class="koboSpan" id="kobo.485.1" xmlns="http://www.w3.org/1999/xhtml"> objects in </span><strong class="source-inline"><span class="koboSpan" id="kobo.486.1" xmlns="http://www.w3.org/1999/xhtml">AppShell.xaml</span></strong><span class="koboSpan" id="kobo.487.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.488.1" xmlns="http://www.w3.org/1999/xhtml">TabBar</span></strong><span class="koboSpan" id="kobo.489.1" xmlns="http://www.w3.org/1999/xhtml"> disables the flyout items. </span><span class="koboSpan" id="kobo.489.2" xmlns="http://www.w3.org/1999/xhtml">That’s the reason why, when we start our app, we can see a screen of tabs showing login or signup pages. </span><span class="koboSpan" id="kobo.489.3" xmlns="http://www.w3.org/1999/xhtml">After the user logs in successfully, we can bring the user to </span><strong class="source-inline"><span class="koboSpan" id="kobo.490.1" xmlns="http://www.w3.org/1999/xhtml">RootPage</span></strong><span class="koboSpan" id="kobo.491.1" xmlns="http://www.w3.org/1999/xhtml">, which is the registered route in </span><em class="italic"><span class="koboSpan" id="kobo.492.1" xmlns="http://www.w3.org/1999/xhtml">Listing 5.1</span></em><span class="koboSpan" id="kobo.493.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.493.2" xmlns="http://www.w3.org/1999/xhtml">We’ll learn how to register routes and navigate using registered routes in the </span><span class="No-Break"><span class="koboSpan" id="kobo.494.1" xmlns="http://www.w3.org/1999/xhtml">next section.</span></span></p>
<h2 id="_idParaDest-109"><a id="_idTextAnchor121"/><span class="koboSpan" id="kobo.495.1" xmlns="http://www.w3.org/1999/xhtml">Shell navigation</span></h2>
<p><span class="koboSpan" id="kobo.496.1" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.497.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.498.1" xmlns="http://www.w3.org/1999/xhtml">, we </span><a id="_idIndexMarker343"/><span class="koboSpan" id="kobo.499.1" xmlns="http://www.w3.org/1999/xhtml">can navigate to pages through registered routes. </span><span class="koboSpan" id="kobo.499.2" xmlns="http://www.w3.org/1999/xhtml">There are two ways to register routes. </span><span class="koboSpan" id="kobo.499.3" xmlns="http://www.w3.org/1999/xhtml">The first way is to register routes in Shell’s visual hierarchy. </span><span class="koboSpan" id="kobo.499.4" xmlns="http://www.w3.org/1999/xhtml">The second way is to register them explicitly using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.500.1" xmlns="http://www.w3.org/1999/xhtml">RegisterRoute()</span></strong><span class="koboSpan" id="kobo.501.1" xmlns="http://www.w3.org/1999/xhtml"> static method of the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.502.1" xmlns="http://www.w3.org/1999/xhtml">Routing</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.503.1" xmlns="http://www.w3.org/1999/xhtml"> class.</span></span></p>
<h3><span class="koboSpan" id="kobo.504.1" xmlns="http://www.w3.org/1999/xhtml">Registering absolute routes</span></h3>
<p><span class="koboSpan" id="kobo.505.1" xmlns="http://www.w3.org/1999/xhtml">We can register routes in Shell’s visual hierarchy as we did in </span><em class="italic"><span class="koboSpan" id="kobo.506.1" xmlns="http://www.w3.org/1999/xhtml">Listing 5.1</span></em><span class="koboSpan" id="kobo.507.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.507.2" xmlns="http://www.w3.org/1999/xhtml">We can specify a route</span><a id="_idIndexMarker344"/><span class="koboSpan" id="kobo.508.1" xmlns="http://www.w3.org/1999/xhtml"> through the </span><strong class="source-inline"><span class="koboSpan" id="kobo.509.1" xmlns="http://www.w3.org/1999/xhtml">Route</span></strong><span class="koboSpan" id="kobo.510.1" xmlns="http://www.w3.org/1999/xhtml"> property of </span><strong class="source-inline"><span class="koboSpan" id="kobo.511.1" xmlns="http://www.w3.org/1999/xhtml">FlyoutItem</span></strong><span class="koboSpan" id="kobo.512.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.513.1" xmlns="http://www.w3.org/1999/xhtml">TabBar</span></strong><span class="koboSpan" id="kobo.514.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.515.1" xmlns="http://www.w3.org/1999/xhtml">Tab</span></strong><span class="koboSpan" id="kobo.516.1" xmlns="http://www.w3.org/1999/xhtml">, or </span><strong class="source-inline"><span class="koboSpan" id="kobo.517.1" xmlns="http://www.w3.org/1999/xhtml">ShellContent</span></strong><span class="koboSpan" id="kobo.518.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.518.2" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.519.1" xmlns="http://www.w3.org/1999/xhtml">AppShell.xaml</span></strong><span class="koboSpan" id="kobo.520.1" xmlns="http://www.w3.org/1999/xhtml">, we registered the </span><span class="No-Break"><span class="koboSpan" id="kobo.521.1" xmlns="http://www.w3.org/1999/xhtml">following routes:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer062">
<table class="No-Table-Style" id="table001-4">
<colgroup>
<col/>
<col/>
<col/>
</colgroup>
<tbody>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.522.1" xmlns="http://www.w3.org/1999/xhtml">Route</span></strong></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.523.1" xmlns="http://www.w3.org/1999/xhtml">Page</span></strong></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.524.1" xmlns="http://www.w3.org/1999/xhtml">Description</span></strong></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.525.1" xmlns="http://www.w3.org/1999/xhtml">LoginPage</span></strong></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.526.1" xmlns="http://www.w3.org/1999/xhtml">LoginPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="koboSpan" id="kobo.527.1" xmlns="http://www.w3.org/1999/xhtml">This route displays a page for </span><span class="No-Break"><span class="koboSpan" id="kobo.528.1" xmlns="http://www.w3.org/1999/xhtml">user login</span></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.529.1" xmlns="http://www.w3.org/1999/xhtml">SignUpPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.530.1" xmlns="http://www.w3.org/1999/xhtml">SignUpPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="koboSpan" id="kobo.531.1" xmlns="http://www.w3.org/1999/xhtml">This route displays a page for </span><span class="No-Break"><span class="koboSpan" id="kobo.532.1" xmlns="http://www.w3.org/1999/xhtml">user signup</span></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.533.1" xmlns="http://www.w3.org/1999/xhtml">AboutPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.534.1" xmlns="http://www.w3.org/1999/xhtml">AboutPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="koboSpan" id="kobo.535.1" xmlns="http://www.w3.org/1999/xhtml">This route displays a page about </span><span class="No-Break"><span class="koboSpan" id="kobo.536.1" xmlns="http://www.w3.org/1999/xhtml">our app</span></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.537.1" xmlns="http://www.w3.org/1999/xhtml">RootPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.538.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="koboSpan" id="kobo.539.1" xmlns="http://www.w3.org/1999/xhtml">This route displays a page for navigating the </span><span class="No-Break"><span class="koboSpan" id="kobo.540.1" xmlns="http://www.w3.org/1999/xhtml">password database</span></span></p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.541.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.1: Registered routes in the visual hierarchy</span></p>
<p><span class="koboSpan" id="kobo.542.1" xmlns="http://www.w3.org/1999/xhtml">To navigate to a route in Shell’s visual hierarchy, we can use an absolute route URI, such </span><span class="No-Break"><span class="koboSpan" id="kobo.543.1" xmlns="http://www.w3.org/1999/xhtml">as </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.544.1" xmlns="http://www.w3.org/1999/xhtml">//LoginPage</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.545.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<h3><span class="koboSpan" id="kobo.546.1" xmlns="http://www.w3.org/1999/xhtml">Registering relative routes</span></h3>
<p><span class="koboSpan" id="kobo.547.1" xmlns="http://www.w3.org/1999/xhtml">We can</span><a id="_idIndexMarker345"/><span class="koboSpan" id="kobo.548.1" xmlns="http://www.w3.org/1999/xhtml"> also navigate to a page without pre-defining it in the visual hierarchy. </span><span class="koboSpan" id="kobo.548.2" xmlns="http://www.w3.org/1999/xhtml">For example, we can navigate to the password detail page, </span><strong class="source-inline"><span class="koboSpan" id="kobo.549.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailPage</span></strong><span class="koboSpan" id="kobo.550.1" xmlns="http://www.w3.org/1999/xhtml">, at any hierarchy level of the password groups. </span><span class="koboSpan" id="kobo.550.2" xmlns="http://www.w3.org/1999/xhtml">In our app, we can register the following routes explicitly using </span><strong class="source-inline"><span class="koboSpan" id="kobo.551.1" xmlns="http://www.w3.org/1999/xhtml">RegisterRoute()</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.552.1" xmlns="http://www.w3.org/1999/xhtml">in </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.553.1" xmlns="http://www.w3.org/1999/xhtml">App.xaml.cs</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.554.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.555.1" xmlns="http://www.w3.org/1999/xhtml">
public App()
{
    InitializeComponent();
    Routing.RegisterRoute(nameof(ItemsPage),
        typeof(ItemsPage));
    Routing.RegisterRoute(nameof(ItemDetailPage),
        typeof(ItemDetailPage));
    Routing.RegisterRoute(nameof(NewItemPage),
        typeof(NewItemPage));
DependencyService.Register&lt;MockDataStore&gt;();
DependencyService.Register&lt;UserService&gt;();
    MainPage = new AppShell();
}</span></pre>
<p><span class="koboSpan" id="kobo.556.1" xmlns="http://www.w3.org/1999/xhtml">In the</span><a id="_idIndexMarker346"/><span class="koboSpan" id="kobo.557.1" xmlns="http://www.w3.org/1999/xhtml"> preceding code, we defined the </span><span class="No-Break"><span class="koboSpan" id="kobo.558.1" xmlns="http://www.w3.org/1999/xhtml">following routes:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer063">
<table class="No-Table-Style" id="table002-2">
<colgroup>
<col/>
<col/>
<col/>
</colgroup>
<tbody>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.559.1" xmlns="http://www.w3.org/1999/xhtml">Route</span></strong></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.560.1" xmlns="http://www.w3.org/1999/xhtml">Page</span></strong></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.561.1" xmlns="http://www.w3.org/1999/xhtml">Description</span></strong></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.562.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailPage</span></strong></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.563.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="koboSpan" id="kobo.564.1" xmlns="http://www.w3.org/1999/xhtml">This is the route to display details about a </span><span class="No-Break"><span class="koboSpan" id="kobo.565.1" xmlns="http://www.w3.org/1999/xhtml">password entry</span></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.566.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.567.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="koboSpan" id="kobo.568.1" xmlns="http://www.w3.org/1999/xhtml">This is the route to add a new item (entry </span><span class="No-Break"><span class="koboSpan" id="kobo.569.1" xmlns="http://www.w3.org/1999/xhtml">or group)</span></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.570.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.571.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="koboSpan" id="kobo.572.1" xmlns="http://www.w3.org/1999/xhtml">This is the route to display a page for navigating the </span><span class="No-Break"><span class="koboSpan" id="kobo.573.1" xmlns="http://www.w3.org/1999/xhtml">password database</span></span></p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p class="IMG---Figure"><span class="koboSpan" id="kobo.574.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.2: Registered detail page routes</span></p>
<p><span class="koboSpan" id="kobo.575.1" xmlns="http://www.w3.org/1999/xhtml">To demonstrate how to use relative routes, we will add a new item. </span><span class="koboSpan" id="kobo.575.2" xmlns="http://www.w3.org/1999/xhtml">When we want to add a new item, we can navigate to </span><strong class="source-inline"><span class="koboSpan" id="kobo.576.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></strong><span class="koboSpan" id="kobo.577.1" xmlns="http://www.w3.org/1999/xhtml"> using a relative route, </span><span class="No-Break"><span class="koboSpan" id="kobo.578.1" xmlns="http://www.w3.org/1999/xhtml">like so:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.579.1" xmlns="http://www.w3.org/1999/xhtml">
await Shell.Current.GoToAsync(nameof(NewItemPage));</span></pre>
<p><span class="koboSpan" id="kobo.580.1" xmlns="http://www.w3.org/1999/xhtml">In this case, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.581.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></strong><span class="koboSpan" id="kobo.582.1" xmlns="http://www.w3.org/1999/xhtml"> route is searched and if the route is found, the page will be displayed and pushed to the navigation stack. </span><span class="koboSpan" id="kobo.582.2" xmlns="http://www.w3.org/1999/xhtml">The navigation stack here is the same as the one when we explained basic navigation using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.583.1" xmlns="http://www.w3.org/1999/xhtml">INavigation</span></strong><span class="koboSpan" id="kobo.584.1" xmlns="http://www.w3.org/1999/xhtml"> interface. </span><span class="koboSpan" id="kobo.584.2" xmlns="http://www.w3.org/1999/xhtml">When we define a relative route and navigate to it, we pass a string as the name of the route. </span><span class="koboSpan" id="kobo.584.3" xmlns="http://www.w3.org/1999/xhtml">To avoid typos, we can use the class name as the route name by using the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.585.1" xmlns="http://www.w3.org/1999/xhtml">nameof</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.586.1" xmlns="http://www.w3.org/1999/xhtml"> expression.</span></span></p>
<p><span class="koboSpan" id="kobo.587.1" xmlns="http://www.w3.org/1999/xhtml">After we have filled in the information for the new item in </span><strong class="source-inline"><span class="koboSpan" id="kobo.588.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></strong><span class="koboSpan" id="kobo.589.1" xmlns="http://www.w3.org/1999/xhtml">, we may click the </span><strong class="bold"><span class="koboSpan" id="kobo.590.1" xmlns="http://www.w3.org/1999/xhtml">Save</span></strong><span class="koboSpan" id="kobo.591.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="bold"><span class="koboSpan" id="kobo.592.1" xmlns="http://www.w3.org/1999/xhtml">Cancel</span></strong><span class="koboSpan" id="kobo.593.1" xmlns="http://www.w3.org/1999/xhtml"> button. </span><span class="koboSpan" id="kobo.593.2" xmlns="http://www.w3.org/1999/xhtml">In the event handler of the </span><strong class="bold"><span class="koboSpan" id="kobo.594.1" xmlns="http://www.w3.org/1999/xhtml">Save</span></strong><span class="koboSpan" id="kobo.595.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="bold"><span class="koboSpan" id="kobo.596.1" xmlns="http://www.w3.org/1999/xhtml">Cancel</span></strong><span class="koboSpan" id="kobo.597.1" xmlns="http://www.w3.org/1999/xhtml"> button, we can navigate back to the previous page using the </span><span class="No-Break"><span class="koboSpan" id="kobo.598.1" xmlns="http://www.w3.org/1999/xhtml">following code:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.599.1" xmlns="http://www.w3.org/1999/xhtml">
await Shell.Current.Navigation.PopModalAsync();</span></pre>
<p><span class="koboSpan" id="kobo.600.1" xmlns="http://www.w3.org/1999/xhtml">Alternatively, we can use the </span><span class="No-Break"><span class="koboSpan" id="kobo.601.1" xmlns="http://www.w3.org/1999/xhtml">following code:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.602.1" xmlns="http://www.w3.org/1999/xhtml">
await Shell.Current.GoToAsync("..");</span></pre>
<p><span class="koboSpan" id="kobo.603.1" xmlns="http://www.w3.org/1999/xhtml">As you</span><a id="_idIndexMarker347"/><span class="koboSpan" id="kobo.604.1" xmlns="http://www.w3.org/1999/xhtml"> can see from the preceding code, there are two ways we can navigate back. </span><span class="koboSpan" id="kobo.604.2" xmlns="http://www.w3.org/1999/xhtml">The first one uses the </span><strong class="source-inline"><span class="koboSpan" id="kobo.605.1" xmlns="http://www.w3.org/1999/xhtml">PopModalAsync()</span></strong><span class="koboSpan" id="kobo.606.1" xmlns="http://www.w3.org/1999/xhtml"> method of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.607.1" xmlns="http://www.w3.org/1999/xhtml">INavigation</span></strong><span class="koboSpan" id="kobo.608.1" xmlns="http://www.w3.org/1999/xhtml"> interface. </span><span class="koboSpan" id="kobo.608.2" xmlns="http://www.w3.org/1999/xhtml">Since </span><strong class="source-inline"><span class="koboSpan" id="kobo.609.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.610.1" xmlns="http://www.w3.org/1999/xhtml"> itself is a derived class of </span><strong class="source-inline"><span class="koboSpan" id="kobo.611.1" xmlns="http://www.w3.org/1999/xhtml">Page</span></strong><span class="koboSpan" id="kobo.612.1" xmlns="http://www.w3.org/1999/xhtml">, it implements the </span><strong class="source-inline"><span class="koboSpan" id="kobo.613.1" xmlns="http://www.w3.org/1999/xhtml">INavigation</span></strong><span class="koboSpan" id="kobo.614.1" xmlns="http://www.w3.org/1999/xhtml"> interface through the inherited </span><strong class="source-inline"><span class="koboSpan" id="kobo.615.1" xmlns="http://www.w3.org/1999/xhtml">Navigation</span></strong><span class="koboSpan" id="kobo.616.1" xmlns="http://www.w3.org/1999/xhtml"> property. </span><span class="koboSpan" id="kobo.616.2" xmlns="http://www.w3.org/1999/xhtml">We can call the modal </span><strong class="source-inline"><span class="koboSpan" id="kobo.617.1" xmlns="http://www.w3.org/1999/xhtml">PopModalAsync()</span></strong><span class="koboSpan" id="kobo.618.1" xmlns="http://www.w3.org/1999/xhtml"> navigation method to navigate back. </span><span class="koboSpan" id="kobo.618.2" xmlns="http://www.w3.org/1999/xhtml">Here, </span><strong class="source-inline"><span class="koboSpan" id="kobo.619.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></strong><span class="koboSpan" id="kobo.620.1" xmlns="http://www.w3.org/1999/xhtml"> is a </span><span class="No-Break"><span class="koboSpan" id="kobo.621.1" xmlns="http://www.w3.org/1999/xhtml">modal page.</span></span></p>
<p><span class="koboSpan" id="kobo.622.1" xmlns="http://www.w3.org/1999/xhtml">The second approach is that we can use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.623.1" xmlns="http://www.w3.org/1999/xhtml">GoToAsync()</span></strong><span class="koboSpan" id="kobo.624.1" xmlns="http://www.w3.org/1999/xhtml"> method to navigate back. </span><span class="koboSpan" id="kobo.624.2" xmlns="http://www.w3.org/1999/xhtml">Since </span><strong class="source-inline"><span class="koboSpan" id="kobo.625.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></strong><span class="koboSpan" id="kobo.626.1" xmlns="http://www.w3.org/1999/xhtml"> is a modal page, you may be wondering how we can differentiate whether a page is a modal page or not when we call </span><strong class="source-inline"><span class="koboSpan" id="kobo.627.1" xmlns="http://www.w3.org/1999/xhtml">GoToAsync()</span></strong><span class="koboSpan" id="kobo.628.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.628.2" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.629.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.630.1" xmlns="http://www.w3.org/1999/xhtml"> navigation, this is defined through page presentation mode. </span><span class="koboSpan" id="kobo.630.2" xmlns="http://www.w3.org/1999/xhtml">The content page of </span><strong class="source-inline"><span class="koboSpan" id="kobo.631.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></strong><span class="koboSpan" id="kobo.632.1" xmlns="http://www.w3.org/1999/xhtml"> is defined </span><span class="No-Break"><span class="koboSpan" id="kobo.633.1" xmlns="http://www.w3.org/1999/xhtml">like so:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.634.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ContentPage xmlns="http://schemas.microsoft.com
    /dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com
                 /winfx/2009/xaml"
             x:Class="PassXYZ.Vault.Views.NewItemPage"
             </span><strong class="bold"><span class="koboSpan" id="kobo.635.1" xmlns="http://www.w3.org/1999/xhtml">Shell.PresentationMode</span></strong><span class="koboSpan" id="kobo.636.1" xmlns="http://www.w3.org/1999/xhtml">="ModalAnimated" ➊
             Title="New Item"&gt;
    &lt;ContentPage.Content...&gt;
&lt;/ContentPage &gt;</span></pre>
<p><span class="koboSpan" id="kobo.637.1" xmlns="http://www.w3.org/1999/xhtml">As we can see, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.638.1" xmlns="http://www.w3.org/1999/xhtml">Shell.PresentationMode</span></strong><span class="koboSpan" id="kobo.639.1" xmlns="http://www.w3.org/1999/xhtml"> ➊ property is defined on the content page. </span><span class="koboSpan" id="kobo.639.2" xmlns="http://www.w3.org/1999/xhtml">Depending on whether we want to use animation, we can set a different value for this property. </span><span class="koboSpan" id="kobo.639.3" xmlns="http://www.w3.org/1999/xhtml">For a normal content page, we can set it to </span><strong class="source-inline"><span class="koboSpan" id="kobo.640.1" xmlns="http://www.w3.org/1999/xhtml">NotAnimated</span></strong><span class="koboSpan" id="kobo.641.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="source-inline"><span class="koboSpan" id="kobo.642.1" xmlns="http://www.w3.org/1999/xhtml">Animated</span></strong><span class="koboSpan" id="kobo.643.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.643.2" xmlns="http://www.w3.org/1999/xhtml">For a modal page, we can set it to </span><strong class="source-inline"><span class="koboSpan" id="kobo.644.1" xmlns="http://www.w3.org/1999/xhtml">Modal</span></strong><span class="koboSpan" id="kobo.645.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.646.1" xmlns="http://www.w3.org/1999/xhtml">ModalAnimated</span></strong><span class="koboSpan" id="kobo.647.1" xmlns="http://www.w3.org/1999/xhtml">, or </span><strong class="source-inline"><span class="koboSpan" id="kobo.648.1" xmlns="http://www.w3.org/1999/xhtml">ModalNotAnimated</span></strong><span class="koboSpan" id="kobo.649.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.649.2" xmlns="http://www.w3.org/1999/xhtml">If we use the default value, </span><strong class="source-inline"><span class="koboSpan" id="kobo.650.1" xmlns="http://www.w3.org/1999/xhtml">Animated</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.651.1" xmlns="http://www.w3.org/1999/xhtml">is set.</span></span></p>
<p><span class="koboSpan" id="kobo.652.1" xmlns="http://www.w3.org/1999/xhtml">To</span><a id="_idIndexMarker348"/><span class="koboSpan" id="kobo.653.1" xmlns="http://www.w3.org/1999/xhtml"> navigate back, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.654.1" xmlns="http://www.w3.org/1999/xhtml">GoToAsync()</span></strong><span class="koboSpan" id="kobo.655.1" xmlns="http://www.w3.org/1999/xhtml"> method is used with the route set to </span><strong class="source-inline"><span class="koboSpan" id="kobo.656.1" xmlns="http://www.w3.org/1999/xhtml">..</span></strong><span class="koboSpan" id="kobo.657.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.657.2" xmlns="http://www.w3.org/1999/xhtml">This is a similar mechanism to filesystem navigation or browser URL navigation. </span><span class="koboSpan" id="kobo.657.3" xmlns="http://www.w3.org/1999/xhtml">The relative route, </span><strong class="source-inline"><span class="koboSpan" id="kobo.658.1" xmlns="http://www.w3.org/1999/xhtml">..</span></strong><span class="koboSpan" id="kobo.659.1" xmlns="http://www.w3.org/1999/xhtml">, means navigating back to the parent route. </span><span class="koboSpan" id="kobo.659.2" xmlns="http://www.w3.org/1999/xhtml">It can be combined with a route to navigate a page at the parent level, </span><span class="No-Break"><span class="koboSpan" id="kobo.660.1" xmlns="http://www.w3.org/1999/xhtml">like so:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.661.1" xmlns="http://www.w3.org/1999/xhtml">
await Shell.Current.GoToAsync("../AboutPage");</span></pre>
<p><span class="koboSpan" id="kobo.662.1" xmlns="http://www.w3.org/1999/xhtml">In </span><em class="italic"><span class="koboSpan" id="kobo.663.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.1</span></em><span class="koboSpan" id="kobo.664.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><em class="italic"><span class="koboSpan" id="kobo.665.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.2</span></em><span class="koboSpan" id="kobo.666.1" xmlns="http://www.w3.org/1999/xhtml">, you will see that </span><strong class="source-inline"><span class="koboSpan" id="kobo.667.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.668.1" xmlns="http://www.w3.org/1999/xhtml"> is registered as both the absolute route </span><strong class="source-inline"><span class="koboSpan" id="kobo.669.1" xmlns="http://www.w3.org/1999/xhtml">RootPage</span></strong><span class="koboSpan" id="kobo.670.1" xmlns="http://www.w3.org/1999/xhtml"> and relative route </span><strong class="source-inline"><span class="koboSpan" id="kobo.671.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.672.1" xmlns="http://www.w3.org/1999/xhtml">. </span><strong class="source-inline"><span class="koboSpan" id="kobo.673.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.674.1" xmlns="http://www.w3.org/1999/xhtml"> may contain password groups at different levels. </span><span class="koboSpan" id="kobo.674.2" xmlns="http://www.w3.org/1999/xhtml">At the top level, it is an absolute route, but it is a relative route at all other navigation </span><span class="No-Break"><span class="koboSpan" id="kobo.675.1" xmlns="http://www.w3.org/1999/xhtml">hierarchy levels.</span></span></p>
<h3><span class="koboSpan" id="kobo.676.1" xmlns="http://www.w3.org/1999/xhtml">Passing data to pages</span></h3>
<p><span class="koboSpan" id="kobo.677.1" xmlns="http://www.w3.org/1999/xhtml">To further </span><a id="_idIndexMarker349"/><span class="koboSpan" id="kobo.678.1" xmlns="http://www.w3.org/1999/xhtml">explain why we register </span><strong class="source-inline"><span class="koboSpan" id="kobo.679.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.680.1" xmlns="http://www.w3.org/1999/xhtml"> as both absolute and relative routes, let’s review the navigation hierarchy of our app, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.681.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.682.1" xmlns="http://www.w3.org/1999/xhtml">.6</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.683.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer064">
<span class="koboSpan" id="kobo.684.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 5.6: Navigation hierarchy " src="image/Figure_5.06_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.685.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5.6: Navigation hierarchy</span></p>
<p><span class="koboSpan" id="kobo.686.1" xmlns="http://www.w3.org/1999/xhtml">In our </span><a id="_idIndexMarker350"/><span class="koboSpan" id="kobo.687.1" xmlns="http://www.w3.org/1999/xhtml">app, after successfully logging in, the main page displays a list of entries and groups at the top level of the password database called Root Group. </span><span class="koboSpan" id="kobo.687.2" xmlns="http://www.w3.org/1999/xhtml">This is similar to the navigation of the filesystem. </span><span class="koboSpan" id="kobo.687.3" xmlns="http://www.w3.org/1999/xhtml">At the root of the filesystem, the top level of files and folders </span><span class="No-Break"><span class="koboSpan" id="kobo.688.1" xmlns="http://www.w3.org/1999/xhtml">are displayed.</span></span></p>
<p><span class="koboSpan" id="kobo.689.1" xmlns="http://www.w3.org/1999/xhtml">The first instance of </span><strong class="source-inline"><span class="koboSpan" id="kobo.690.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.691.1" xmlns="http://www.w3.org/1999/xhtml"> uses the </span><strong class="source-inline"><span class="koboSpan" id="kobo.692.1" xmlns="http://www.w3.org/1999/xhtml">RootPage</span></strong><span class="koboSpan" id="kobo.693.1" xmlns="http://www.w3.org/1999/xhtml"> route, which we can access through the flyout item. </span><span class="koboSpan" id="kobo.693.2" xmlns="http://www.w3.org/1999/xhtml">Let’s say there are sub-groups called Group1 and Group2 in the Root Group, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.694.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><em class="italic"><span class="koboSpan" id="kobo.695.1" xmlns="http://www.w3.org/1999/xhtml">.6</span></em><span class="koboSpan" id="kobo.696.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.696.2" xmlns="http://www.w3.org/1999/xhtml">We can navigate to these sub-groups, which are instances of </span><strong class="source-inline"><span class="koboSpan" id="kobo.697.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.698.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.698.2" xmlns="http://www.w3.org/1999/xhtml">These instances of </span><strong class="source-inline"><span class="koboSpan" id="kobo.699.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.700.1" xmlns="http://www.w3.org/1999/xhtml"> cannot be pre-defined as they are relative routes and are pushed to the navigation stacks on demand. </span><span class="koboSpan" id="kobo.700.2" xmlns="http://www.w3.org/1999/xhtml">These navigation stacks can be as deep as the actual data stored in the </span><span class="No-Break"><span class="koboSpan" id="kobo.701.1" xmlns="http://www.w3.org/1999/xhtml">password database.</span></span></p>
<p><span class="koboSpan" id="kobo.702.1" xmlns="http://www.w3.org/1999/xhtml">These two different routes of </span><strong class="source-inline"><span class="koboSpan" id="kobo.703.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.704.1" xmlns="http://www.w3.org/1999/xhtml"> are defined in </span><strong class="source-inline"><span class="koboSpan" id="kobo.705.1" xmlns="http://www.w3.org/1999/xhtml">AppShell.xaml</span></strong><span class="koboSpan" id="kobo.706.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.707.1" xmlns="http://www.w3.org/1999/xhtml">App.xaml.cs</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.708.1" xmlns="http://www.w3.org/1999/xhtml">like so:</span></span></p>
<ol>
<li><span class="koboSpan" id="kobo.709.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.710.1" xmlns="http://www.w3.org/1999/xhtml">RootPage</span></strong><span class="koboSpan" id="kobo.711.1" xmlns="http://www.w3.org/1999/xhtml"> route (</span><span class="No-Break"><span class="koboSpan" id="kobo.712.1" xmlns="http://www.w3.org/1999/xhtml">absolute route):</span></span><pre class="source-code"><span class="koboSpan" id="kobo.713.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;FlyoutItem x:Name="RootItem" Title="Browse" Icon="tab_home.png"&gt;</span></pre><pre class="source-code"><span class="koboSpan" id="kobo.714.1" xmlns="http://www.w3.org/1999/xhtml">
  &lt;ShellContent Route="</span><strong class="bold"><span class="koboSpan" id="kobo.715.1" xmlns="http://www.w3.org/1999/xhtml">RootPage</span></strong><span class="koboSpan" id="kobo.716.1" xmlns="http://www.w3.org/1999/xhtml">" ContentTemplate=</span></pre><pre class="source-code"><span class="koboSpan" id="kobo.717.1" xmlns="http://www.w3.org/1999/xhtml">
      "{DataTemplate local:ItemsPage}" /&gt;</span></pre><pre class="source-code"><span class="koboSpan" id="kobo.718.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;/FlyoutItem&gt;</span></pre></li>
<li><span class="koboSpan" id="kobo.719.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.720.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.721.1" xmlns="http://www.w3.org/1999/xhtml"> route (</span><span class="No-Break"><span class="koboSpan" id="kobo.722.1" xmlns="http://www.w3.org/1999/xhtml">relative route):</span></span><pre class="source-code"><span class="koboSpan" id="kobo.723.1" xmlns="http://www.w3.org/1999/xhtml">
Routing.RegisterRoute(nameof(</span><strong class="bold"><span class="koboSpan" id="kobo.724.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.725.1" xmlns="http://www.w3.org/1999/xhtml">),</span></pre><pre class="source-code"><span class="koboSpan" id="kobo.726.1" xmlns="http://www.w3.org/1999/xhtml">
    typeof(ItemsPage));</span></pre></li>
</ol>
<p><span class="koboSpan" id="kobo.727.1" xmlns="http://www.w3.org/1999/xhtml">Here, you </span><a id="_idIndexMarker351"/><span class="koboSpan" id="kobo.728.1" xmlns="http://www.w3.org/1999/xhtml">may be wondering how we can navigate to Group1 or Group2 from Root Group. </span><span class="koboSpan" id="kobo.728.2" xmlns="http://www.w3.org/1999/xhtml">If </span><strong class="source-inline"><span class="koboSpan" id="kobo.729.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.730.1" xmlns="http://www.w3.org/1999/xhtml"> can be used to display the content of either Group1 or Group2, how can we tell </span><strong class="source-inline"><span class="koboSpan" id="kobo.731.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.732.1" xmlns="http://www.w3.org/1999/xhtml"> which group </span><span class="No-Break"><span class="koboSpan" id="kobo.733.1" xmlns="http://www.w3.org/1999/xhtml">to display?</span></span></p>
<p><span class="koboSpan" id="kobo.734.1" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.735.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.736.1" xmlns="http://www.w3.org/1999/xhtml"> navigation, data can be passed to a content page through query parameters. </span><span class="koboSpan" id="kobo.736.2" xmlns="http://www.w3.org/1999/xhtml">The syntax is similar to what we pass to a URL in the web browser. </span><span class="koboSpan" id="kobo.736.3" xmlns="http://www.w3.org/1999/xhtml">For example, we can use the following URL to search for </span><strong class="source-inline"><span class="koboSpan" id="kobo.737.1" xmlns="http://www.w3.org/1999/xhtml">.net</span></strong><span class="koboSpan" id="kobo.738.1" xmlns="http://www.w3.org/1999/xhtml"> in Google </span><span class="No-Break"><span class="koboSpan" id="kobo.739.1" xmlns="http://www.w3.org/1999/xhtml">search: </span></span><a href="https://www.google.com.hk/search?q=.net"><span class="No-Break"><span class="koboSpan" id="kobo.740.1" xmlns="http://www.w3.org/1999/xhtml">https://www.google.com.hk/search?q=.net</span></span></a><span class="No-Break"><span class="koboSpan" id="kobo.741.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.742.1" xmlns="http://www.w3.org/1999/xhtml">This is achieved by appending </span><strong class="source-inline"><span class="koboSpan" id="kobo.743.1" xmlns="http://www.w3.org/1999/xhtml">?</span></strong><span class="koboSpan" id="kobo.744.1" xmlns="http://www.w3.org/1999/xhtml"> after a route with a pair of query parameter IDs and the value. </span><span class="koboSpan" id="kobo.744.2" xmlns="http://www.w3.org/1999/xhtml">In the preceding example, the key is q and the value </span><span class="No-Break"><span class="koboSpan" id="kobo.745.1" xmlns="http://www.w3.org/1999/xhtml">is .net.</span></span></p>
<p><span class="koboSpan" id="kobo.746.1" xmlns="http://www.w3.org/1999/xhtml">When an item in the list of Root Groups is selected, it can be an entry or a group. </span><span class="koboSpan" id="kobo.746.2" xmlns="http://www.w3.org/1999/xhtml">The click event triggers the </span><strong class="source-inline"><span class="koboSpan" id="kobo.747.1" xmlns="http://www.w3.org/1999/xhtml">OnItemSelection()</span></strong><span class="koboSpan" id="kobo.748.1" xmlns="http://www.w3.org/1999/xhtml"> method in </span><strong class="source-inline"><span class="koboSpan" id="kobo.749.1" xmlns="http://www.w3.org/1999/xhtml">ItemsViewModel</span></strong><span class="koboSpan" id="kobo.750.1" xmlns="http://www.w3.org/1999/xhtml">, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.751.1" xmlns="http://www.w3.org/1999/xhtml">Listing 5.2</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.752.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.753.1" xmlns="http://www.w3.org/1999/xhtml">Listing 5.2: ItemsViewModel.cs (https://epa.ms/ItemsViewModel5-2)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.754.1" xmlns="http://www.w3.org/1999/xhtml">
using PassXYZ.Vault.Views;
using System.Collections.ObjectModel;
using System.Diagnostics;
using KPCLib;
using PassXYZLib;
namespace PassXYZ.Vault.ViewModels;
[QueryProperty(nameof(ItemId), nameof(ItemId))]           ➊
public class ItemsViewModel : BaseViewModel {
  private Item? </span><span class="koboSpan" id="kobo.754.2" xmlns="http://www.w3.org/1999/xhtml">_selectedItem = default;
  public ObservableCollection&lt;Item&gt; Items { get; }
  public Command LoadItemsCommand { get; }
  public Command AddItemCommand { get; }
  public Command&lt;Item&gt; ItemTapped { get; }
  public string ItemId {                                  ➋
    get {
      return _selectedItem == null ? </span><span class="koboSpan" id="kobo.754.3" xmlns="http://www.w3.org/1999/xhtml">string.Empty :
         _selectedItem.Id;
    }
    set {
      if (!string.IsNullOrEmpty(value)) {
        var item = DataStore.GetItem(value, true);
        if (item != null) {
          _selectedItem = DataStore.CurrentGroup =
              DataStore.GetItem(value, true);
        }
        else {
          throw new ArgumentNullException("ItemId");
        }
      }
      else {
        _selectedItem = null;
        DataStore.CurrentGroup = DataStore.RootGroup;
      }
      ExecuteLoadItemsCommand();
    }
  }
  public ItemsViewModel()...
</span><span class="koboSpan" id="kobo.754.4" xmlns="http://www.w3.org/1999/xhtml">  ~ItemsViewModel()...
</span><span class="koboSpan" id="kobo.754.5" xmlns="http://www.w3.org/1999/xhtml">  public async Task ExecuteLoadItemsCommand()...
</span><span class="koboSpan" id="kobo.754.6" xmlns="http://www.w3.org/1999/xhtml">  async public void OnAppearing()...
</span><span class="koboSpan" id="kobo.754.7" xmlns="http://www.w3.org/1999/xhtml">  public Item? </span><span class="koboSpan" id="kobo.754.8" xmlns="http://www.w3.org/1999/xhtml">SelectedItem...
</span><span class="koboSpan" id="kobo.754.9" xmlns="http://www.w3.org/1999/xhtml">  private async void OnAddItem(object obj)...
</span><span class="koboSpan" id="kobo.754.10" xmlns="http://www.w3.org/1999/xhtml">  public async void OnItemSelected(Item item) {
    if (item == null) return;
    if (item.IsGroup) {
      await Shell.Current.GoToAsync
         ($"{nameof(ItemsPage)}?
</span><span class="koboSpan" id="kobo.754.11" xmlns="http://www.w3.org/1999/xhtml">             {nameof(ItemsViewModel.ItemId)}={item.Id}"); ➌
    }
    else {
      await Shell.Current.GoToAsync
         ($"{nameof(ItemDetailPage)}?
</span><span class="koboSpan" id="kobo.754.12" xmlns="http://www.w3.org/1999/xhtml">         {nameof(ItemDetailViewModel.ItemId)}={item.Id}");➍
    }
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.755.1" xmlns="http://www.w3.org/1999/xhtml">According to</span><a id="_idIndexMarker352"/><span class="koboSpan" id="kobo.756.1" xmlns="http://www.w3.org/1999/xhtml"> the type of item, we may navigate to </span><strong class="source-inline"><span class="koboSpan" id="kobo.757.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.758.1" xmlns="http://www.w3.org/1999/xhtml"> ➌ or </span><strong class="source-inline"><span class="koboSpan" id="kobo.759.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailPage</span></strong><span class="koboSpan" id="kobo.760.1" xmlns="http://www.w3.org/1999/xhtml"> ➍.In both cases, we pass the </span><strong class="source-inline"><span class="koboSpan" id="kobo.761.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.762.1" xmlns="http://www.w3.org/1999/xhtml"> item to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.763.1" xmlns="http://www.w3.org/1999/xhtml">ItemId</span></strong><span class="koboSpan" id="kobo.764.1" xmlns="http://www.w3.org/1999/xhtml"> query parameter, which is defined in both </span><strong class="source-inline"><span class="koboSpan" id="kobo.765.1" xmlns="http://www.w3.org/1999/xhtml">ItemsViewModel</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.766.1" xmlns="http://www.w3.org/1999/xhtml">and </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.767.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailViewModel</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.768.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.769.1" xmlns="http://www.w3.org/1999/xhtml">In </span><em class="italic"><span class="koboSpan" id="kobo.770.1" xmlns="http://www.w3.org/1999/xhtml">Listing 5.2</span></em><span class="koboSpan" id="kobo.771.1" xmlns="http://www.w3.org/1999/xhtml">, ➊ </span><strong class="source-inline"><span class="koboSpan" id="kobo.772.1" xmlns="http://www.w3.org/1999/xhtml">ItemId</span></strong><span class="koboSpan" id="kobo.773.1" xmlns="http://www.w3.org/1999/xhtml"> is defined in </span><strong class="source-inline"><span class="koboSpan" id="kobo.774.1" xmlns="http://www.w3.org/1999/xhtml">ItemsViewModel</span></strong><span class="koboSpan" id="kobo.775.1" xmlns="http://www.w3.org/1999/xhtml"> as the </span><strong class="source-inline"><span class="koboSpan" id="kobo.776.1" xmlns="http://www.w3.org/1999/xhtml">QueryPropertyAttribute</span></strong><span class="koboSpan" id="kobo.777.1" xmlns="http://www.w3.org/1999/xhtml"> attribute. </span><span class="koboSpan" id="kobo.777.2" xmlns="http://www.w3.org/1999/xhtml">The first argument of </span><strong class="source-inline"><span class="koboSpan" id="kobo.778.1" xmlns="http://www.w3.org/1999/xhtml">QueryPropertyAttribute</span></strong><span class="koboSpan" id="kobo.779.1" xmlns="http://www.w3.org/1999/xhtml"> is the name of the property that will receive the data. </span><span class="koboSpan" id="kobo.779.2" xmlns="http://www.w3.org/1999/xhtml">It is </span><strong class="source-inline"><span class="koboSpan" id="kobo.780.1" xmlns="http://www.w3.org/1999/xhtml">ItemId</span></strong><span class="koboSpan" id="kobo.781.1" xmlns="http://www.w3.org/1999/xhtml"> ➋ in </span><span class="No-Break"><span class="koboSpan" id="kobo.782.1" xmlns="http://www.w3.org/1999/xhtml">this case.</span></span></p>
<p><span class="koboSpan" id="kobo.783.1" xmlns="http://www.w3.org/1999/xhtml">The second argument is the </span><strong class="source-inline"><span class="koboSpan" id="kobo.784.1" xmlns="http://www.w3.org/1999/xhtml">id</span></strong><span class="koboSpan" id="kobo.785.1" xmlns="http://www.w3.org/1999/xhtml"> parameter. </span><span class="koboSpan" id="kobo.785.2" xmlns="http://www.w3.org/1999/xhtml">When we select a group from the list, the view model’s </span><strong class="source-inline"><span class="koboSpan" id="kobo.786.1" xmlns="http://www.w3.org/1999/xhtml">OnItemSelected()</span></strong><span class="koboSpan" id="kobo.787.1" xmlns="http://www.w3.org/1999/xhtml"> method is invoked ➌ and the item </span><strong class="source-inline"><span class="koboSpan" id="kobo.788.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.789.1" xmlns="http://www.w3.org/1999/xhtml"> of the selected group is passed as the value of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.790.1" xmlns="http://www.w3.org/1999/xhtml">ItemId</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.791.1" xmlns="http://www.w3.org/1999/xhtml">query parameter.</span></span></p>
<p><span class="koboSpan" id="kobo.792.1" xmlns="http://www.w3.org/1999/xhtml">When </span><strong class="source-inline"><span class="koboSpan" id="kobo.793.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.794.1" xmlns="http://www.w3.org/1999/xhtml"> is loaded with the </span><strong class="source-inline"><span class="koboSpan" id="kobo.795.1" xmlns="http://www.w3.org/1999/xhtml">ItemId</span></strong><span class="koboSpan" id="kobo.796.1" xmlns="http://www.w3.org/1999/xhtml"> query parameter, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.797.1" xmlns="http://www.w3.org/1999/xhtml">ItemId</span></strong><span class="koboSpan" id="kobo.798.1" xmlns="http://www.w3.org/1999/xhtml"> ➋ property is set. </span><span class="koboSpan" id="kobo.798.2" xmlns="http://www.w3.org/1999/xhtml">In the setter of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.799.1" xmlns="http://www.w3.org/1999/xhtml">ItemId</span></strong><span class="koboSpan" id="kobo.800.1" xmlns="http://www.w3.org/1999/xhtml"> property, we check whether the query parameter value is empty. </span><span class="koboSpan" id="kobo.800.2" xmlns="http://www.w3.org/1999/xhtml">If it is empty, it could be the first time we navigate to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.801.1" xmlns="http://www.w3.org/1999/xhtml">RootPage</span></strong><span class="koboSpan" id="kobo.802.1" xmlns="http://www.w3.org/1999/xhtml"> route without a </span><span class="No-Break"><span class="koboSpan" id="kobo.803.1" xmlns="http://www.w3.org/1999/xhtml">query parameter.</span></span></p>
<p><span class="koboSpan" id="kobo.804.1" xmlns="http://www.w3.org/1999/xhtml">In this case, we set </span><strong class="source-inline"><span class="koboSpan" id="kobo.805.1" xmlns="http://www.w3.org/1999/xhtml">CurrentGroup</span></strong><span class="koboSpan" id="kobo.806.1" xmlns="http://www.w3.org/1999/xhtml"> of the data service to </span><strong class="source-inline"><span class="koboSpan" id="kobo.807.1" xmlns="http://www.w3.org/1999/xhtml">RootGroup</span></strong><span class="koboSpan" id="kobo.808.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.808.2" xmlns="http://www.w3.org/1999/xhtml">If it is not empty, we will find the item and set it to </span><strong class="source-inline"><span class="koboSpan" id="kobo.809.1" xmlns="http://www.w3.org/1999/xhtml">CurrentGroup</span></strong><span class="koboSpan" id="kobo.810.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.810.2" xmlns="http://www.w3.org/1999/xhtml">The content of </span><strong class="source-inline"><span class="koboSpan" id="kobo.811.1" xmlns="http://www.w3.org/1999/xhtml">CurrentGroup</span></strong><span class="koboSpan" id="kobo.812.1" xmlns="http://www.w3.org/1999/xhtml"> is loaded using the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.813.1" xmlns="http://www.w3.org/1999/xhtml">ExecuteLoadItemsCommand()</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.814.1" xmlns="http://www.w3.org/1999/xhtml"> method.</span></span></p>
<p><span class="koboSpan" id="kobo.815.1" xmlns="http://www.w3.org/1999/xhtml">➍ If we select an entry from the list, we can navigate to </span><strong class="source-inline"><span class="koboSpan" id="kobo.816.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailPage</span></strong><span class="koboSpan" id="kobo.817.1" xmlns="http://www.w3.org/1999/xhtml"> with the item </span><strong class="source-inline"><span class="koboSpan" id="kobo.818.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.819.1" xmlns="http://www.w3.org/1999/xhtml"> as the value of the query parameter. </span><span class="koboSpan" id="kobo.819.2" xmlns="http://www.w3.org/1999/xhtml">We can change </span><strong class="source-inline"><span class="koboSpan" id="kobo.820.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailViewModel</span></strong><span class="koboSpan" id="kobo.821.1" xmlns="http://www.w3.org/1999/xhtml"> like so to handle this </span><span class="No-Break"><span class="koboSpan" id="kobo.822.1" xmlns="http://www.w3.org/1999/xhtml">query parameter:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.823.1" xmlns="http://www.w3.org/1999/xhtml">
public string? </span><span class="koboSpan" id="kobo.823.2" xmlns="http://www.w3.org/1999/xhtml">ItemId {                                   ①
  get {
      return itemId;
  }
  set {
    if (value == null) throw new ArgumentNullException
        (nameof(value));
    itemId = value;
    LoadItemId(value);                                    ②
  }
}
public ItemDetailViewModel() {
  Fields = new ObservableCollection&lt;Field&gt;();
  Id = default;
}
public async void LoadItemId(string itemId) {
  try {
      var item = await DataStore.GetItemAsync(itemId);    ③
      if (item == null) {
          throw new ArgumentNullException(nameof(itemId));
      }
      Id = item.Id;
      Title = item.Name;
      Description = item.Description;
      PwEntry dataEntry = (PwEntry)item;                  ④
      Fields.Clear();
      List&lt;Field&gt; fields = dataEntry.GetFields(GetImage:
          FieldIcons.GetImage);                           ⑤
      foreach (Field field in fields) {
          Fields.Add(field);
      }
  }
  catch (Exception) {
      Debug.WriteLine("Failed to Load Item");
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.824.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.825.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailViewModel</span></strong><span class="koboSpan" id="kobo.826.1" xmlns="http://www.w3.org/1999/xhtml"> class, we</span><a id="_idIndexMarker353"/><span class="koboSpan" id="kobo.827.1" xmlns="http://www.w3.org/1999/xhtml"> have </span><span class="No-Break"><span class="koboSpan" id="kobo.828.1" xmlns="http://www.w3.org/1999/xhtml">the following:</span></span></p>
<ul>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.829.1" xmlns="http://www.w3.org/1999/xhtml">ItemId</span></strong><span class="koboSpan" id="kobo.830.1" xmlns="http://www.w3.org/1999/xhtml"> ① is the property that receives the </span><span class="No-Break"><span class="koboSpan" id="kobo.831.1" xmlns="http://www.w3.org/1999/xhtml">query parameter.</span></span></li>
<li><span class="koboSpan" id="kobo.832.1" xmlns="http://www.w3.org/1999/xhtml">In the setter of </span><strong class="source-inline"><span class="koboSpan" id="kobo.833.1" xmlns="http://www.w3.org/1999/xhtml">ItemId</span></strong><span class="koboSpan" id="kobo.834.1" xmlns="http://www.w3.org/1999/xhtml">, we call the </span><strong class="source-inline"><span class="koboSpan" id="kobo.835.1" xmlns="http://www.w3.org/1999/xhtml">LoadItemId()</span></strong><span class="koboSpan" id="kobo.836.1" xmlns="http://www.w3.org/1999/xhtml"> method ② to load </span><span class="No-Break"><span class="koboSpan" id="kobo.837.1" xmlns="http://www.w3.org/1999/xhtml">the item.</span></span></li>
<li><span class="koboSpan" id="kobo.838.1" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.839.1" xmlns="http://www.w3.org/1999/xhtml">LoadItemId()</span></strong><span class="koboSpan" id="kobo.840.1" xmlns="http://www.w3.org/1999/xhtml">, we can call the data service </span><strong class="source-inline"><span class="koboSpan" id="kobo.841.1" xmlns="http://www.w3.org/1999/xhtml">GetItemAsync()</span></strong><span class="koboSpan" id="kobo.842.1" xmlns="http://www.w3.org/1999/xhtml"> method ③ to get the item using the </span><span class="No-Break"><span class="koboSpan" id="kobo.843.1" xmlns="http://www.w3.org/1999/xhtml">item </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.844.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.845.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
<li><span class="koboSpan" id="kobo.846.1" xmlns="http://www.w3.org/1999/xhtml">Here, the item is an instance of </span><strong class="source-inline"><span class="koboSpan" id="kobo.847.1" xmlns="http://www.w3.org/1999/xhtml">PwEntry</span></strong><span class="koboSpan" id="kobo.848.1" xmlns="http://www.w3.org/1999/xhtml"> ④, so we can cast it as </span><span class="No-Break"><span class="koboSpan" id="kobo.849.1" xmlns="http://www.w3.org/1999/xhtml">a </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.850.1" xmlns="http://www.w3.org/1999/xhtml">PwEntry</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.851.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
<li><span class="koboSpan" id="kobo.852.1" xmlns="http://www.w3.org/1999/xhtml">We have an extension method called </span><strong class="source-inline"><span class="koboSpan" id="kobo.853.1" xmlns="http://www.w3.org/1999/xhtml">GetFields()</span></strong><span class="koboSpan" id="kobo.854.1" xmlns="http://www.w3.org/1999/xhtml">⑤ in PassXYZLib. </span><span class="koboSpan" id="kobo.854.2" xmlns="http://www.w3.org/1999/xhtml">We use this method to update the list </span><span class="No-Break"><span class="koboSpan" id="kobo.855.1" xmlns="http://www.w3.org/1999/xhtml">of fields.</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.856.1" xmlns="http://www.w3.org/1999/xhtml">We learned about basic navigation and </span><strong class="source-inline"><span class="koboSpan" id="kobo.857.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.858.1" xmlns="http://www.w3.org/1999/xhtml"> navigation in the last two sections. </span><span class="koboSpan" id="kobo.858.2" xmlns="http://www.w3.org/1999/xhtml">We also improved our navigation design using </span><strong class="source-inline"><span class="koboSpan" id="kobo.859.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.860.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.860.2" xmlns="http://www.w3.org/1999/xhtml">Now, it’s time to review the MVVM pattern and refine our data model again to make our password manager </span><span class="No-Break"><span class="koboSpan" id="kobo.861.1" xmlns="http://www.w3.org/1999/xhtml">app better.</span></span></p>
<h1 id="_idParaDest-110"><a id="_idTextAnchor122"/><span class="koboSpan" id="kobo.862.1" xmlns="http://www.w3.org/1999/xhtml">Improving our model</span></h1>
<p><span class="koboSpan" id="kobo.863.1" xmlns="http://www.w3.org/1999/xhtml">We </span><a id="_idIndexMarker354"/><span class="koboSpan" id="kobo.864.1" xmlns="http://www.w3.org/1999/xhtml">studied use cases and created some in </span><a href="B16588_04.xhtml#_idTextAnchor087"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.865.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 4</span></em></span></a><span class="koboSpan" id="kobo.866.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.867.1" xmlns="http://www.w3.org/1999/xhtml">Exploring MVVM and Data Binding</span></em><span class="koboSpan" id="kobo.868.1" xmlns="http://www.w3.org/1999/xhtml"> In this section, we will enhance existing use cases and implement new use cases using the knowledge that </span><span class="No-Break"><span class="koboSpan" id="kobo.869.1" xmlns="http://www.w3.org/1999/xhtml">we’ve learned.</span></span></p>
<p><span class="koboSpan" id="kobo.870.1" xmlns="http://www.w3.org/1999/xhtml">We will work on the</span><a id="_idIndexMarker355"/><span class="koboSpan" id="kobo.871.1" xmlns="http://www.w3.org/1999/xhtml"> following </span><span class="No-Break"><span class="koboSpan" id="kobo.872.1" xmlns="http://www.w3.org/1999/xhtml">use cases.</span></span></p>
<p><strong class="bold"><span class="koboSpan" id="kobo.873.1" xmlns="http://www.w3.org/1999/xhtml">Use Case 1</span></strong><span class="koboSpan" id="kobo.874.1" xmlns="http://www.w3.org/1999/xhtml">: As a password manager user, I want to log in to the password manager app so that I can access my </span><span class="No-Break"><span class="koboSpan" id="kobo.875.1" xmlns="http://www.w3.org/1999/xhtml">password data.</span></span></p>
<p><span class="koboSpan" id="kobo.876.1" xmlns="http://www.w3.org/1999/xhtml">For this use case, we haven’t fully implemented the user login yet; we will complete this in the next chapter. </span><span class="koboSpan" id="kobo.876.2" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we will implement some pseudo logic that includes everything except the </span><span class="No-Break"><span class="koboSpan" id="kobo.877.1" xmlns="http://www.w3.org/1999/xhtml">data layer.</span></span></p>
<p><span class="koboSpan" id="kobo.878.1" xmlns="http://www.w3.org/1999/xhtml">In </span><a href="B16588_04.xhtml#_idTextAnchor087"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.879.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 4</span></em></span></a><span class="koboSpan" id="kobo.880.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.881.1" xmlns="http://www.w3.org/1999/xhtml">Exploring MVVM and Data Binding</span></em><span class="koboSpan" id="kobo.882.1" xmlns="http://www.w3.org/1999/xhtml">, we have the following use case, which can support one level </span><span class="No-Break"><span class="koboSpan" id="kobo.883.1" xmlns="http://www.w3.org/1999/xhtml">of navigation.</span></span></p>
<p><strong class="bold"><span class="koboSpan" id="kobo.884.1" xmlns="http://www.w3.org/1999/xhtml">Use case 3</span></strong><span class="koboSpan" id="kobo.885.1" xmlns="http://www.w3.org/1999/xhtml">: As a password manager user, I want to see a list of groups and entries so that I can explore my </span><span class="No-Break"><span class="koboSpan" id="kobo.886.1" xmlns="http://www.w3.org/1999/xhtml">password data.</span></span></p>
<p><span class="koboSpan" id="kobo.887.1" xmlns="http://www.w3.org/1999/xhtml">To support multiple levels of navigation, we will implement the following use case in </span><span class="No-Break"><span class="koboSpan" id="kobo.888.1" xmlns="http://www.w3.org/1999/xhtml">this section.</span></span></p>
<p><strong class="bold"><span class="koboSpan" id="kobo.889.1" xmlns="http://www.w3.org/1999/xhtml">Use case 6</span></strong><span class="koboSpan" id="kobo.890.1" xmlns="http://www.w3.org/1999/xhtml">: As a password manager user, when I click a group in the current list, I want to see the groups and entries belonging to </span><span class="No-Break"><span class="koboSpan" id="kobo.891.1" xmlns="http://www.w3.org/1999/xhtml">this group.</span></span></p>
<p><strong class="bold"><span class="koboSpan" id="kobo.892.1" xmlns="http://www.w3.org/1999/xhtml">Use case 7</span></strong><span class="koboSpan" id="kobo.893.1" xmlns="http://www.w3.org/1999/xhtml">: As a password manager user, when I navigate my password data, I want to navigate back to the previous group or </span><span class="No-Break"><span class="koboSpan" id="kobo.894.1" xmlns="http://www.w3.org/1999/xhtml">parent group.</span></span></p>
<p><span class="koboSpan" id="kobo.895.1" xmlns="http://www.w3.org/1999/xhtml">In use cases 6 and 7, we want to navigate forward or backward using the </span><span class="No-Break"><span class="koboSpan" id="kobo.896.1" xmlns="http://www.w3.org/1999/xhtml">relative routes.</span></span></p>
<p><span class="koboSpan" id="kobo.897.1" xmlns="http://www.w3.org/1999/xhtml">In the MVVM pattern, we access our model through services. </span><span class="koboSpan" id="kobo.897.2" xmlns="http://www.w3.org/1999/xhtml">These services are usually abstracted as interfaces so that they’re separate from the actual implementation. </span><span class="koboSpan" id="kobo.897.3" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.898.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.899.1" xmlns="http://www.w3.org/1999/xhtml"> interface is one of them. </span><span class="koboSpan" id="kobo.899.2" xmlns="http://www.w3.org/1999/xhtml">To support use case 6 and improve use case 1, we need to create a new interface called </span><strong class="source-inline"><span class="koboSpan" id="kobo.900.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.901.1" xmlns="http://www.w3.org/1999/xhtml"> to support </span><span class="No-Break"><span class="koboSpan" id="kobo.902.1" xmlns="http://www.w3.org/1999/xhtml">user login.</span></span></p>
<h2 id="_idParaDest-111"><a id="_idTextAnchor123"/><span class="koboSpan" id="kobo.903.1" xmlns="http://www.w3.org/1999/xhtml">Understanding the data model and its services</span></h2>
<p><span class="koboSpan" id="kobo.904.1" xmlns="http://www.w3.org/1999/xhtml">To understand the </span><a id="_idIndexMarker356"/><span class="koboSpan" id="kobo.905.1" xmlns="http://www.w3.org/1999/xhtml">services and the enhanced model, let’s review the </span><a id="_idIndexMarker357"/><span class="koboSpan" id="kobo.906.1" xmlns="http://www.w3.org/1999/xhtml">enhanced design in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.907.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.908.1" xmlns="http://www.w3.org/1999/xhtml">.7</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.909.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer065">
<span class="koboSpan" id="kobo.910.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 5.7: Model and service in MVVM " src="image/Figure_5.07_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.911.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5.7: Model and service in MVVM</span></p>
<p><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.912.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><em class="italic"><span class="koboSpan" id="kobo.913.1" xmlns="http://www.w3.org/1999/xhtml">.7</span></em><span class="koboSpan" id="kobo.914.1" xmlns="http://www.w3.org/1999/xhtml"> is a class</span><a id="_idIndexMarker358"/><span class="koboSpan" id="kobo.915.1" xmlns="http://www.w3.org/1999/xhtml"> diagram that depicts most of our design in the MVVM pattern. </span><span class="koboSpan" id="kobo.915.2" xmlns="http://www.w3.org/1999/xhtml">We can read this class diagram together with the following table to understand</span><a id="_idIndexMarker359"/><span class="koboSpan" id="kobo.916.1" xmlns="http://www.w3.org/1999/xhtml"> the MVVM pattern in our app. </span><span class="koboSpan" id="kobo.916.2" xmlns="http://www.w3.org/1999/xhtml">For simplicity, I have not included everything. </span><span class="koboSpan" id="kobo.916.3" xmlns="http://www.w3.org/1999/xhtml">For example, you can add </span><strong class="source-inline"><span class="koboSpan" id="kobo.917.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></strong><span class="koboSpan" id="kobo.918.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="source-inline"><span class="koboSpan" id="kobo.919.1" xmlns="http://www.w3.org/1999/xhtml">SignUpPage</span></strong><span class="koboSpan" id="kobo.920.1" xmlns="http://www.w3.org/1999/xhtml"> to </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.921.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><em class="italic"><span class="koboSpan" id="kobo.922.1" xmlns="http://www.w3.org/1999/xhtml">.7</span></em><span class="koboSpan" id="kobo.923.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><em class="italic"><span class="koboSpan" id="kobo.924.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.3</span></em> <span class="No-Break"><span class="koboSpan" id="kobo.925.1" xmlns="http://www.w3.org/1999/xhtml">by yourself:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer066">
<table class="No-Table-Style" id="table003-2">
<colgroup>
<col/>
<col/>
<col/>
<col/>
</colgroup>
<tbody>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body" colspan="2">
<p><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.926.1" xmlns="http://www.w3.org/1999/xhtml">Model</span></strong></span></p>
</td>
<td class="No-Table-Style T---Body" rowspan="2">
<p><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.927.1" xmlns="http://www.w3.org/1999/xhtml">View</span></strong></span></p>
</td>
<td class="No-Table-Style T---Body" rowspan="2">
<p><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.928.1" xmlns="http://www.w3.org/1999/xhtml">View Model</span></strong></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.929.1" xmlns="http://www.w3.org/1999/xhtml">Data Model</span></strong></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.930.1" xmlns="http://www.w3.org/1999/xhtml">Service</span></strong></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.931.1" xmlns="http://www.w3.org/1999/xhtml">User</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.932.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.933.1" xmlns="http://www.w3.org/1999/xhtml">LoginPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.934.1" xmlns="http://www.w3.org/1999/xhtml">LoginViewModel</span></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.935.1" xmlns="http://www.w3.org/1999/xhtml">Item</span></span></p>
</td>
<td class="No-Table-Style T---Body" rowspan="2">
<p><span class="No-Break"><span class="koboSpan" id="kobo.936.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.937.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.938.1" xmlns="http://www.w3.org/1999/xhtml">ItemsViewModel</span></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.939.1" xmlns="http://www.w3.org/1999/xhtml">Field</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.940.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailPage</span></span></p>
</td>
<td class="No-Table-Style T---Body">
<p><span class="No-Break"><span class="koboSpan" id="kobo.941.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailViewModel</span></span></p>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.942.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.3: Classes and interfaces in the MVVM pattern</span></p>
<p><span class="koboSpan" id="kobo.943.1" xmlns="http://www.w3.org/1999/xhtml">To store application data, we </span><a id="_idIndexMarker360"/><span class="koboSpan" id="kobo.944.1" xmlns="http://www.w3.org/1999/xhtml">usually store data in a database, which can be a relational database or NoSQL database. </span><span class="koboSpan" id="kobo.944.2" xmlns="http://www.w3.org/1999/xhtml">In our case, our password database is not a relational database. </span><span class="koboSpan" id="kobo.944.3" xmlns="http://www.w3.org/1999/xhtml">However, when we work on our design, we can still use the similar logic of relational databases to design our business logic. </span><span class="koboSpan" id="kobo.944.4" xmlns="http://www.w3.org/1999/xhtml">We have three classes to represent our model – </span><strong class="source-inline"><span class="koboSpan" id="kobo.945.1" xmlns="http://www.w3.org/1999/xhtml">User</span></strong><span class="koboSpan" id="kobo.946.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.947.1" xmlns="http://www.w3.org/1999/xhtml">Item</span></strong><span class="koboSpan" id="kobo.948.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="No-Break"><span class="koboSpan" id="kobo.949.1" xmlns="http://www.w3.org/1999/xhtml">and </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.950.1" xmlns="http://www.w3.org/1999/xhtml">Field</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.951.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.952.1" xmlns="http://www.w3.org/1999/xhtml">Item</span></strong><span class="koboSpan" id="kobo.953.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.954.1" xmlns="http://www.w3.org/1999/xhtml">Field</span></strong><span class="koboSpan" id="kobo.955.1" xmlns="http://www.w3.org/1999/xhtml"> are </span><a id="_idIndexMarker361"/><span class="koboSpan" id="kobo.956.1" xmlns="http://www.w3.org/1999/xhtml">used to represent a password entry and the content of an entry. </span><span class="koboSpan" id="kobo.956.2" xmlns="http://www.w3.org/1999/xhtml">We can imagine that an entry looks like a row in a table and that a </span><strong class="source-inline"><span class="koboSpan" id="kobo.957.1" xmlns="http://www.w3.org/1999/xhtml">Field</span></strong><span class="koboSpan" id="kobo.958.1" xmlns="http://www.w3.org/1999/xhtml"> is similar to a cell. </span><span class="koboSpan" id="kobo.958.2" xmlns="http://www.w3.org/1999/xhtml">We use </span><strong class="source-inline"><span class="koboSpan" id="kobo.959.1" xmlns="http://www.w3.org/1999/xhtml">PwEntry</span></strong><span class="koboSpan" id="kobo.960.1" xmlns="http://www.w3.org/1999/xhtml"> in KeePassLib to model a password entry. </span><span class="koboSpan" id="kobo.960.2" xmlns="http://www.w3.org/1999/xhtml">A list of entries is a group and we use </span><strong class="source-inline"><span class="koboSpan" id="kobo.961.1" xmlns="http://www.w3.org/1999/xhtml">PwGroup</span></strong><span class="koboSpan" id="kobo.962.1" xmlns="http://www.w3.org/1999/xhtml"> to model a group. </span><span class="koboSpan" id="kobo.962.2" xmlns="http://www.w3.org/1999/xhtml">Here, a group is similar to a table in a database. </span><span class="koboSpan" id="kobo.962.3" xmlns="http://www.w3.org/1999/xhtml">Fields with the same key values in a group are similar to a column. </span><span class="koboSpan" id="kobo.962.4" xmlns="http://www.w3.org/1999/xhtml">To design the interface of our data services, we can use a similar strategy to process data in </span><span class="No-Break"><span class="koboSpan" id="kobo.963.1" xmlns="http://www.w3.org/1999/xhtml">our database.</span></span></p>
<p><span class="koboSpan" id="kobo.964.1" xmlns="http://www.w3.org/1999/xhtml">How do we handle data in a database? </span><span class="koboSpan" id="kobo.964.2" xmlns="http://www.w3.org/1999/xhtml">You may have heard about CRUD operations. </span><span class="koboSpan" id="kobo.964.3" xmlns="http://www.w3.org/1999/xhtml">In our case, we can use the enhanced </span><strong class="bold"><span class="koboSpan" id="kobo.965.1" xmlns="http://www.w3.org/1999/xhtml">Create, Read, Update, Delete, and List</span></strong><span class="koboSpan" id="kobo.966.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="bold"><span class="koboSpan" id="kobo.967.1" xmlns="http://www.w3.org/1999/xhtml">CRUDL</span></strong><span class="koboSpan" id="kobo.968.1" xmlns="http://www.w3.org/1999/xhtml">) operations </span><a id="_idIndexMarker362"/><span class="koboSpan" id="kobo.969.1" xmlns="http://www.w3.org/1999/xhtml">to define the interface of </span><span class="No-Break"><span class="koboSpan" id="kobo.970.1" xmlns="http://www.w3.org/1999/xhtml">our service.</span></span></p>
<p><span class="koboSpan" id="kobo.971.1" xmlns="http://www.w3.org/1999/xhtml">To process </span><a id="_idIndexMarker363"/><span class="koboSpan" id="kobo.972.1" xmlns="http://www.w3.org/1999/xhtml">password entries and groups, we can use the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.973.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.974.1" xmlns="http://www.w3.org/1999/xhtml"> interface:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.975.1" xmlns="http://www.w3.org/1999/xhtml">
public interface IDataStore&lt;T&gt;
{
    T? </span><span class="koboSpan" id="kobo.975.2" xmlns="http://www.w3.org/1999/xhtml">GetItem(string id, bool SearchRecursive = false);
    Task&lt;T?&gt; GetItemAsync(string id, bool SearchRecursive =
        false);
    Task AddItemAsync(T item);
    Task UpdateItemAsync(T item);
    Task&lt;bool&gt; DeleteItemAsync(string id);
    Task&lt;IEnumerable&lt;T&gt;&gt; GetItemsAsync(bool forceRefresh =
        false);
}</span></pre>
<p><span class="koboSpan" id="kobo.976.1" xmlns="http://www.w3.org/1999/xhtml">In</span><a id="_idIndexMarker364"/><span class="koboSpan" id="kobo.977.1" xmlns="http://www.w3.org/1999/xhtml"> the </span><strong class="source-inline"><span class="koboSpan" id="kobo.978.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.979.1" xmlns="http://www.w3.org/1999/xhtml"> interface, we define the following </span><span class="No-Break"><span class="koboSpan" id="kobo.980.1" xmlns="http://www.w3.org/1999/xhtml">CRUDL operations:</span></span></p>
<ul>
<li><strong class="bold"><span class="koboSpan" id="kobo.981.1" xmlns="http://www.w3.org/1999/xhtml">Create</span></strong><span class="koboSpan" id="kobo.982.1" xmlns="http://www.w3.org/1999/xhtml">: We use </span><strong class="source-inline"><span class="koboSpan" id="kobo.983.1" xmlns="http://www.w3.org/1999/xhtml">AddItemAsync()</span></strong><span class="koboSpan" id="kobo.984.1" xmlns="http://www.w3.org/1999/xhtml"> to add an entry or </span><span class="No-Break"><span class="koboSpan" id="kobo.985.1" xmlns="http://www.w3.org/1999/xhtml">a group</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.986.1" xmlns="http://www.w3.org/1999/xhtml">Read</span></strong><span class="koboSpan" id="kobo.987.1" xmlns="http://www.w3.org/1999/xhtml">: We use </span><strong class="source-inline"><span class="koboSpan" id="kobo.988.1" xmlns="http://www.w3.org/1999/xhtml">GetItem()</span></strong><span class="koboSpan" id="kobo.989.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="source-inline"><span class="koboSpan" id="kobo.990.1" xmlns="http://www.w3.org/1999/xhtml">GetItemAsync()</span></strong><span class="koboSpan" id="kobo.991.1" xmlns="http://www.w3.org/1999/xhtml"> to read an entry or </span><span class="No-Break"><span class="koboSpan" id="kobo.992.1" xmlns="http://www.w3.org/1999/xhtml">a group</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.993.1" xmlns="http://www.w3.org/1999/xhtml">Update</span></strong><span class="koboSpan" id="kobo.994.1" xmlns="http://www.w3.org/1999/xhtml">: We use </span><strong class="source-inline"><span class="koboSpan" id="kobo.995.1" xmlns="http://www.w3.org/1999/xhtml">UpdateItemAsync()</span></strong><span class="koboSpan" id="kobo.996.1" xmlns="http://www.w3.org/1999/xhtml"> to update an entry or </span><span class="No-Break"><span class="koboSpan" id="kobo.997.1" xmlns="http://www.w3.org/1999/xhtml">a group</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.998.1" xmlns="http://www.w3.org/1999/xhtml">Delete</span></strong><span class="koboSpan" id="kobo.999.1" xmlns="http://www.w3.org/1999/xhtml">: We use </span><strong class="source-inline"><span class="koboSpan" id="kobo.1000.1" xmlns="http://www.w3.org/1999/xhtml">DeleteItemAsync()</span></strong><span class="koboSpan" id="kobo.1001.1" xmlns="http://www.w3.org/1999/xhtml"> to delete an entry or </span><span class="No-Break"><span class="koboSpan" id="kobo.1002.1" xmlns="http://www.w3.org/1999/xhtml">a group</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.1003.1" xmlns="http://www.w3.org/1999/xhtml">List</span></strong><span class="koboSpan" id="kobo.1004.1" xmlns="http://www.w3.org/1999/xhtml">: We use </span><strong class="source-inline"><span class="koboSpan" id="kobo.1005.1" xmlns="http://www.w3.org/1999/xhtml">GetItemsAsync()</span></strong><span class="koboSpan" id="kobo.1006.1" xmlns="http://www.w3.org/1999/xhtml"> to get a list of entries and groups in the </span><span class="No-Break"><span class="koboSpan" id="kobo.1007.1" xmlns="http://www.w3.org/1999/xhtml">current group</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.1008.1" xmlns="http://www.w3.org/1999/xhtml">To </span><a id="_idIndexMarker365"/><span class="koboSpan" id="kobo.1009.1" xmlns="http://www.w3.org/1999/xhtml">process users, we can use the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1010.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1011.1" xmlns="http://www.w3.org/1999/xhtml"> interface:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1012.1" xmlns="http://www.w3.org/1999/xhtml">
public interface IUserService&lt;T&gt;
{
    T GetUser(string username);
    Task AddUserAsync(T user);
    Task UpdateUserAsync(T user);
    Task DeleteUserAsync(T user);
    List&lt;string&gt; GetUsersList();
    Task&lt;bool&gt; LoginAsync(T user);
    void Logout();
}</span></pre>
<p><span class="koboSpan" id="kobo.1013.1" xmlns="http://www.w3.org/1999/xhtml">We can define a </span><a id="_idIndexMarker366"/><span class="koboSpan" id="kobo.1014.1" xmlns="http://www.w3.org/1999/xhtml">set of CRUDL operations to handle users </span><span class="No-Break"><span class="koboSpan" id="kobo.1015.1" xmlns="http://www.w3.org/1999/xhtml">as well:</span></span></p>
<ul>
<li><strong class="bold"><span class="koboSpan" id="kobo.1016.1" xmlns="http://www.w3.org/1999/xhtml">Create</span></strong><span class="koboSpan" id="kobo.1017.1" xmlns="http://www.w3.org/1999/xhtml">: We can create a new user </span><span class="No-Break"><span class="koboSpan" id="kobo.1018.1" xmlns="http://www.w3.org/1999/xhtml">using </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1019.1" xmlns="http://www.w3.org/1999/xhtml">AddUserAsync()</span></strong></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.1020.1" xmlns="http://www.w3.org/1999/xhtml">Read</span></strong><span class="koboSpan" id="kobo.1021.1" xmlns="http://www.w3.org/1999/xhtml">: We can get the user information </span><span class="No-Break"><span class="koboSpan" id="kobo.1022.1" xmlns="http://www.w3.org/1999/xhtml">using </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1023.1" xmlns="http://www.w3.org/1999/xhtml">GetUser()</span></strong></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.1024.1" xmlns="http://www.w3.org/1999/xhtml">Update</span></strong><span class="koboSpan" id="kobo.1025.1" xmlns="http://www.w3.org/1999/xhtml">: We can update a user </span><span class="No-Break"><span class="koboSpan" id="kobo.1026.1" xmlns="http://www.w3.org/1999/xhtml">using </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1027.1" xmlns="http://www.w3.org/1999/xhtml">UpdateUserAsync()</span></strong></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.1028.1" xmlns="http://www.w3.org/1999/xhtml">Delete</span></strong><span class="koboSpan" id="kobo.1029.1" xmlns="http://www.w3.org/1999/xhtml">: We can delete a user </span><span class="No-Break"><span class="koboSpan" id="kobo.1030.1" xmlns="http://www.w3.org/1999/xhtml">using </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1031.1" xmlns="http://www.w3.org/1999/xhtml">DeleteUserAsync()</span></strong></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.1032.1" xmlns="http://www.w3.org/1999/xhtml">List</span></strong><span class="koboSpan" id="kobo.1033.1" xmlns="http://www.w3.org/1999/xhtml">: We can get a list of users </span><span class="No-Break"><span class="koboSpan" id="kobo.1034.1" xmlns="http://www.w3.org/1999/xhtml">using </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1035.1" xmlns="http://www.w3.org/1999/xhtml">GetUsersList()</span></strong></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.1036.1" xmlns="http://www.w3.org/1999/xhtml">Login</span></strong><span class="koboSpan" id="kobo.1037.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="bold"><span class="koboSpan" id="kobo.1038.1" xmlns="http://www.w3.org/1999/xhtml">Logout</span></strong><span class="koboSpan" id="kobo.1039.1" xmlns="http://www.w3.org/1999/xhtml">: We can log in or log out using an instance </span><span class="No-Break"><span class="koboSpan" id="kobo.1040.1" xmlns="http://www.w3.org/1999/xhtml">of </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1041.1" xmlns="http://www.w3.org/1999/xhtml">User</span></strong></span></li>
</ul>
<p><span class="koboSpan" id="kobo.1042.1" xmlns="http://www.w3.org/1999/xhtml">To further separate the dependency of model and service, we can use generic types in the interface definition instead of concrete types. </span><span class="koboSpan" id="kobo.1042.2" xmlns="http://www.w3.org/1999/xhtml">We use these services in our view models to manage our models. </span><span class="koboSpan" id="kobo.1042.3" xmlns="http://www.w3.org/1999/xhtml">To improve</span><a id="_idIndexMarker367"/><span class="koboSpan" id="kobo.1043.1" xmlns="http://www.w3.org/1999/xhtml"> the efficiency of our code, we will initialize the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1044.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1045.1" xmlns="http://www.w3.org/1999/xhtml"> service in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1046.1" xmlns="http://www.w3.org/1999/xhtml">BaseViewModel</span></strong><span class="koboSpan" id="kobo.1047.1" xmlns="http://www.w3.org/1999/xhtml"> so that they are available in all derived view </span><span class="No-Break"><span class="koboSpan" id="kobo.1048.1" xmlns="http://www.w3.org/1999/xhtml">models automatically:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1049.1" xmlns="http://www.w3.org/1999/xhtml">
public class BaseViewModel : INotifyPropertyChanged {
  public static IDataStore&lt;Item&gt; DataStore =&gt;
    DependencyService.Get&lt;IDataStore&lt;Item&gt;&gt;();
  bool isBusy = false;
  public bool IsBusy...
</span><span class="koboSpan" id="kobo.1049.2" xmlns="http://www.w3.org/1999/xhtml">  string title = string.Empty;
  public string Title...
</span><span class="koboSpan" id="kobo.1049.3" xmlns="http://www.w3.org/1999/xhtml">  ...
</span><span class="koboSpan" id="kobo.1049.4" xmlns="http://www.w3.org/1999/xhtml">}</span></pre>
<p><span class="koboSpan" id="kobo.1050.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1051.1" xmlns="http://www.w3.org/1999/xhtml">BaseViewModel</span></strong><span class="koboSpan" id="kobo.1052.1" xmlns="http://www.w3.org/1999/xhtml"> class, we initialize the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1053.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1054.1" xmlns="http://www.w3.org/1999/xhtml"> service through a dependency service. </span><span class="koboSpan" id="kobo.1054.2" xmlns="http://www.w3.org/1999/xhtml">We will explain dependency services and dependency injection in the </span><span class="No-Break"><span class="koboSpan" id="kobo.1055.1" xmlns="http://www.w3.org/1999/xhtml">next chapter.</span></span></p>
<h2 id="_idParaDest-112"><a id="_idTextAnchor124"/><span class="koboSpan" id="kobo.1056.1" xmlns="http://www.w3.org/1999/xhtml">Improving the login process</span></h2>
<p><span class="koboSpan" id="kobo.1057.1" xmlns="http://www.w3.org/1999/xhtml">For user </span><a id="_idIndexMarker368"/><span class="koboSpan" id="kobo.1058.1" xmlns="http://www.w3.org/1999/xhtml">management, we may add new users or delete obsolete users in the system. </span><span class="koboSpan" id="kobo.1058.2" xmlns="http://www.w3.org/1999/xhtml">We only have one user who can log in to our app at a time, so we must define a singleton class called </span><strong class="source-inline"><span class="koboSpan" id="kobo.1059.1" xmlns="http://www.w3.org/1999/xhtml">LoginUser</span></strong><span class="koboSpan" id="kobo.1060.1" xmlns="http://www.w3.org/1999/xhtml"> to model </span><span class="No-Break"><span class="koboSpan" id="kobo.1061.1" xmlns="http://www.w3.org/1999/xhtml">this case:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.1062.1" xmlns="http://www.w3.org/1999/xhtml">Listing 5.3: LoginUser.cs (https://epa.ms/LoginUser5-3)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1063.1" xmlns="http://www.w3.org/1999/xhtml">
using System.Diagnostics;
using PassXYZLib;
namespace PassXYZ.Vault.Services;
public class LoginUser : PxUser
{
    private const string PrivacyNotice = "Privacy Notice";
    public static bool IsPrivacyNoticeAccepted...
</span><span class="koboSpan" id="kobo.1063.2" xmlns="http://www.w3.org/1999/xhtml">    private bool _isFingerprintEnabled = false;
    public bool IsFingerprintEnabled =&gt;
        _isFingerprintEnabled;
    public static IUserService&lt;User&gt; UserService =&gt;
        DependencyService.Get&lt;IUserService&lt;User&gt;&gt;();      ➊
    public override void Logout() {
        UserService.Logout();
    }
    public async Task&lt;string&gt; GetSecurityAsync()...
</span><span class="koboSpan" id="kobo.1063.3" xmlns="http://www.w3.org/1999/xhtml">    public async Task SetSecurityAsync(string passwd)...
</span><span class="koboSpan" id="kobo.1063.4" xmlns="http://www.w3.org/1999/xhtml">    public async Task&lt;bool&gt; DisableSecurityAsync()...
</span><span class="koboSpan" id="kobo.1063.5" xmlns="http://www.w3.org/1999/xhtml">    private LoginUser() { }                               ➋
    private static LoginUser? </span><span class="koboSpan" id="kobo.1063.6" xmlns="http://www.w3.org/1999/xhtml">instance = null;
    public static LoginUser Instance {                    ➌
        get {
            if (instance == null) { instance = new
                LoginUser(); }
            return instance;
        }
    }    }    }
}</span></pre>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.1064.1" xmlns="http://www.w3.org/1999/xhtml">LoginUser</span></strong><span class="koboSpan" id="kobo.1065.1" xmlns="http://www.w3.org/1999/xhtml"> is inherited from the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1066.1" xmlns="http://www.w3.org/1999/xhtml">User</span></strong><span class="koboSpan" id="kobo.1067.1" xmlns="http://www.w3.org/1999/xhtml"> class through a sub-class </span><span class="No-Break"><span class="koboSpan" id="kobo.1068.1" xmlns="http://www.w3.org/1999/xhtml">called </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1069.1" xmlns="http://www.w3.org/1999/xhtml">PxUser</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1070.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.1071.1" xmlns="http://www.w3.org/1999/xhtml">➊ In </span><strong class="source-inline"><span class="koboSpan" id="kobo.1072.1" xmlns="http://www.w3.org/1999/xhtml">LoginUser</span></strong><span class="koboSpan" id="kobo.1073.1" xmlns="http://www.w3.org/1999/xhtml">, we initialize the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1074.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.1075.1" xmlns="http://www.w3.org/1999/xhtml"> interface through a </span><span class="No-Break"><span class="koboSpan" id="kobo.1076.1" xmlns="http://www.w3.org/1999/xhtml">dependency service.</span></span></p>
<p><span class="koboSpan" id="kobo.1077.1" xmlns="http://www.w3.org/1999/xhtml">➋ To implement a singleton class, we make the default constructor private to disable the creation of this class using a </span><span class="No-Break"><span class="koboSpan" id="kobo.1078.1" xmlns="http://www.w3.org/1999/xhtml">new operator.</span></span></p>
<p><span class="koboSpan" id="kobo.1079.1" xmlns="http://www.w3.org/1999/xhtml">➌ To get an</span><a id="_idIndexMarker369"/><span class="koboSpan" id="kobo.1080.1" xmlns="http://www.w3.org/1999/xhtml"> instance of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1081.1" xmlns="http://www.w3.org/1999/xhtml">LoginUser</span></strong><span class="koboSpan" id="kobo.1082.1" xmlns="http://www.w3.org/1999/xhtml">, we must define a static property </span><strong class="source-inline"><span class="koboSpan" id="kobo.1083.1" xmlns="http://www.w3.org/1999/xhtml">Instance</span></strong><span class="koboSpan" id="kobo.1084.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1084.2" xmlns="http://www.w3.org/1999/xhtml">Please be aware that I chose to use a no-thread-safe implementation here to keep the code simple. </span><span class="koboSpan" id="kobo.1084.3" xmlns="http://www.w3.org/1999/xhtml">In production implementation, we should use a lock to make </span><span class="No-Break"><span class="koboSpan" id="kobo.1085.1" xmlns="http://www.w3.org/1999/xhtml">it thread-safe.</span></span></p>
<p><span class="koboSpan" id="kobo.1086.1" xmlns="http://www.w3.org/1999/xhtml">Once we have implemented the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1087.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.1088.1" xmlns="http://www.w3.org/1999/xhtml"> interface and the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1089.1" xmlns="http://www.w3.org/1999/xhtml">LoginUser</span></strong><span class="koboSpan" id="kobo.1090.1" xmlns="http://www.w3.org/1999/xhtml"> class, we can improve the login process. </span><span class="koboSpan" id="kobo.1090.2" xmlns="http://www.w3.org/1999/xhtml">So far, we only have one </span><strong class="source-inline"><span class="koboSpan" id="kobo.1091.1" xmlns="http://www.w3.org/1999/xhtml">Button</span></strong><span class="koboSpan" id="kobo.1092.1" xmlns="http://www.w3.org/1999/xhtml"> on the login page. </span><span class="koboSpan" id="kobo.1092.2" xmlns="http://www.w3.org/1999/xhtml">Let’s add a username field and a password field to </span><strong class="source-inline"><span class="koboSpan" id="kobo.1093.1" xmlns="http://www.w3.org/1999/xhtml">LoginPage.xam</span></strong><span class="koboSpan" id="kobo.1094.1" xmlns="http://www.w3.org/1999/xhtml">, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1095.1" xmlns="http://www.w3.org/1999/xhtml">Listing 5.4</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.1096.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.1097.1" xmlns="http://www.w3.org/1999/xhtml">Listing 5.4: LoginPage.xaml (https://epa.ms/LoginPage5-4)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1098.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;ContentPage...&gt;
  &lt;ContentPage.Content&gt;
    &lt;StackLayout Padding="30" Spacing="10"&gt;
      &lt;Image HorizontalOptions="Center"
          HeightRequest="96"...&gt;
      &lt;Label FontSize="Small".../&gt;
      &lt;Frame Margin="10"&gt;
      &lt;Grid x:DataType="viewmodels:LoginViewModel"...&gt;    ➊
        &lt;Grid.RowDefinitions...&gt;
        &lt;Grid.ColumnDefinitions...&gt;
        &lt;!-- Row 1 (Username) --&gt;
        &lt;Image Grid.Row="0" Grid.Column="0"...&gt;
        &lt;Entry x:Name="usernameEntry" Placeholder="{x:Static resources:Resources.
</span><span class="koboSpan" id="kobo.1098.2" xmlns="http://www.w3.org/1999/xhtml">    field_id_username}" ReturnType="Next" Text="{Binding
        CurrentUser.Username}" HorizontalOptions="Fill"
            Grid.Row="0" Grid.Column="1" /&gt;               ➋
        &lt;ImageButton x:Name="switchUsersButton"...&gt;
        &lt;!-- Row 2 (Password) --&gt;
        &lt;Image Grid.Row="1" Grid.Column="0"...&gt;
        &lt;Entry x:Name="passwordEntry" Placeholder="{x:Static           resources:Resources.
</span><span class="koboSpan" id="kobo.1098.3" xmlns="http://www.w3.org/1999/xhtml">    field_id_password}" IsPassword="true" Text="{Binding
        CurrentUser.Password}" HorizontalOptions="Fill"
            Grid.Row="1" Grid.Column="1" /&gt;               ➌
        &lt;!-- Row 3 (ActivityIndicator ) --&gt;
        &lt;ActivityIndicator IsRunning="{Binding IsBusy}"
        Grid.Row="2" Grid.Column="1" IsVisible="{Binding
            IsBusy}" /&gt;                                   ➍
        &lt;!-- Row 4 (Login Button) --&gt;
        &lt;Button Text="{x:Static resources:Resources.
</span><span class="koboSpan" id="kobo.1098.4" xmlns="http://www.w3.org/1999/xhtml">          LoginPageTitle}" HorizontalOptions=
          "CenterAndExpand" Command="{Binding
          LoginCommand}" Grid.Row="3" Grid.Column="1" /&gt;  ❺
        &lt;/Grid&gt;
      &lt;/Frame&gt;
      &lt;Label x:Name="messageLabel" /&gt;
    &lt;/StackLayout&gt;
  &lt;/ContentPage.Content&gt;
&lt;/ContentPage&gt;</span></pre>
<p><span class="koboSpan" id="kobo.1099.1" xmlns="http://www.w3.org/1999/xhtml">In this new</span><a id="_idIndexMarker370"/><span class="koboSpan" id="kobo.1100.1" xmlns="http://www.w3.org/1999/xhtml"> user interface design, we did </span><span class="No-Break"><span class="koboSpan" id="kobo.1101.1" xmlns="http://www.w3.org/1999/xhtml">the following:</span></span></p>
<ul>
<li><span class="koboSpan" id="kobo.1102.1" xmlns="http://www.w3.org/1999/xhtml"> ➊ We created a 4x3 grid layout in </span><span class="No-Break"><span class="koboSpan" id="kobo.1103.1" xmlns="http://www.w3.org/1999/xhtml">a frame.</span></span></li>
<li><span class="koboSpan" id="kobo.1104.1" xmlns="http://www.w3.org/1999/xhtml">In the first two rows, we used two instances of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1105.1" xmlns="http://www.w3.org/1999/xhtml">Entry</span></strong><span class="koboSpan" id="kobo.1106.1" xmlns="http://www.w3.org/1999/xhtml"> to hold the username ➋ and password ➌. </span><span class="koboSpan" id="kobo.1106.2" xmlns="http://www.w3.org/1999/xhtml">We created a data binding between the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1107.1" xmlns="http://www.w3.org/1999/xhtml">Text</span></strong><span class="koboSpan" id="kobo.1108.1" xmlns="http://www.w3.org/1999/xhtml"> fields of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1109.1" xmlns="http://www.w3.org/1999/xhtml">Entry</span></strong><span class="koboSpan" id="kobo.1110.1" xmlns="http://www.w3.org/1999/xhtml"> and the properties of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1111.1" xmlns="http://www.w3.org/1999/xhtml">CurrentUser</span></strong><span class="koboSpan" id="kobo.1112.1" xmlns="http://www.w3.org/1999/xhtml">, which is defined in the view model. </span><span class="koboSpan" id="kobo.1112.2" xmlns="http://www.w3.org/1999/xhtml">It is an object </span><span class="No-Break"><span class="koboSpan" id="kobo.1113.1" xmlns="http://www.w3.org/1999/xhtml">of </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1114.1" xmlns="http://www.w3.org/1999/xhtml">LoginUser</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1115.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
<li><span class="koboSpan" id="kobo.1116.1" xmlns="http://www.w3.org/1999/xhtml"> ➍ In the third row, we used an </span><strong class="source-inline"><span class="koboSpan" id="kobo.1117.1" xmlns="http://www.w3.org/1999/xhtml">ActivityIndicator</span></strong><span class="koboSpan" id="kobo.1118.1" xmlns="http://www.w3.org/1999/xhtml"> control to show the login status, which is bound to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1119.1" xmlns="http://www.w3.org/1999/xhtml">IsBusy</span></strong><span class="koboSpan" id="kobo.1120.1" xmlns="http://www.w3.org/1999/xhtml"> property of the </span><span class="No-Break"><span class="koboSpan" id="kobo.1121.1" xmlns="http://www.w3.org/1999/xhtml">v</span><a id="_idTextAnchor125"/><span class="koboSpan" id="kobo.1122.1" xmlns="http://www.w3.org/1999/xhtml">iew model.</span></span></li>
<li><span class="koboSpan" id="kobo.1123.1" xmlns="http://www.w3.org/1999/xhtml"> ➎ In the last row, we defined a </span><strong class="source-inline"><span class="koboSpan" id="kobo.1124.1" xmlns="http://www.w3.org/1999/xhtml">Button</span></strong><span class="koboSpan" id="kobo.1125.1" xmlns="http://www.w3.org/1999/xhtml"> control for the login activity. </span><span class="koboSpan" id="kobo.1125.2" xmlns="http://www.w3.org/1999/xhtml">There is a </span><strong class="source-inline"><span class="koboSpan" id="kobo.1126.1" xmlns="http://www.w3.org/1999/xhtml">Command</span></strong><span class="koboSpan" id="kobo.1127.1" xmlns="http://www.w3.org/1999/xhtml"> property defined in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1128.1" xmlns="http://www.w3.org/1999/xhtml">Button</span></strong><span class="koboSpan" id="kobo.1129.1" xmlns="http://www.w3.org/1999/xhtml"> that implements the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1130.1" xmlns="http://www.w3.org/1999/xhtml">ICommand</span></strong><span class="koboSpan" id="kobo.1131.1" xmlns="http://www.w3.org/1999/xhtml"> interface. </span><span class="koboSpan" id="kobo.1131.2" xmlns="http://www.w3.org/1999/xhtml">We used data binding to link this </span><strong class="source-inline"><span class="koboSpan" id="kobo.1132.1" xmlns="http://www.w3.org/1999/xhtml">Command</span></strong><span class="koboSpan" id="kobo.1133.1" xmlns="http://www.w3.org/1999/xhtml"> property to the method in the view model to perform the </span><span class="No-Break"><span class="koboSpan" id="kobo.1134.1" xmlns="http://www.w3.org/1999/xhtml">login activity.</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.1135.1" xmlns="http://www.w3.org/1999/xhtml">We can see </span><a id="_idIndexMarker371"/><span class="koboSpan" id="kobo.1136.1" xmlns="http://www.w3.org/1999/xhtml">the improved login user interface in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1137.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1138.1" xmlns="http://www.w3.org/1999/xhtml">.8</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.1139.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer067">
<span class="koboSpan" id="kobo.1140.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 5.8: LoginPage " src="image/Figure_5.08_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.1141.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5.8: LoginPage</span></p>
<h2 id="_idParaDest-113"><a id="_idTextAnchor126"/><span class="koboSpan" id="kobo.1142.1" xmlns="http://www.w3.org/1999/xhtml">The Command interface</span></h2>
<p><span class="koboSpan" id="kobo.1143.1" xmlns="http://www.w3.org/1999/xhtml">Without </span><strong class="source-inline"><span class="koboSpan" id="kobo.1144.1" xmlns="http://www.w3.org/1999/xhtml">Command</span></strong><span class="koboSpan" id="kobo.1145.1" xmlns="http://www.w3.org/1999/xhtml"> property support, we </span><a id="_idIndexMarker372"/><span class="koboSpan" id="kobo.1146.1" xmlns="http://www.w3.org/1999/xhtml">must create an event handler of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1147.1" xmlns="http://www.w3.org/1999/xhtml">Clicked</span></strong><span class="koboSpan" id="kobo.1148.1" xmlns="http://www.w3.org/1999/xhtml"> event in the code-behind file of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1149.1" xmlns="http://www.w3.org/1999/xhtml">LoginPage</span></strong><span class="koboSpan" id="kobo.1150.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1150.2" xmlns="http://www.w3.org/1999/xhtml">In the event handler, we call a method defined in the view model that invokes </span><strong class="source-inline"><span class="koboSpan" id="kobo.1151.1" xmlns="http://www.w3.org/1999/xhtml">LoginAsync()</span></strong><span class="koboSpan" id="kobo.1152.1" xmlns="http://www.w3.org/1999/xhtml"> in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1153.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.1154.1" xmlns="http://www.w3.org/1999/xhtml"> to process login activity. </span><span class="koboSpan" id="kobo.1154.2" xmlns="http://www.w3.org/1999/xhtml">Using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1155.1" xmlns="http://www.w3.org/1999/xhtml">Command</span></strong><span class="koboSpan" id="kobo.1156.1" xmlns="http://www.w3.org/1999/xhtml"> property, we can bind to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1157.1" xmlns="http://www.w3.org/1999/xhtml">LoginCommand</span></strong><span class="koboSpan" id="kobo.1158.1" xmlns="http://www.w3.org/1999/xhtml"> property in the view model directly, so we don’t need to create the event handler in the code-behind file of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1159.1" xmlns="http://www.w3.org/1999/xhtml">LoginPage</span></strong><span class="koboSpan" id="kobo.1160.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1160.2" xmlns="http://www.w3.org/1999/xhtml">The code looks cleaner </span><span class="No-Break"><span class="koboSpan" id="kobo.1161.1" xmlns="http://www.w3.org/1999/xhtml">and simpler.</span></span></p>
<p><span class="koboSpan" id="kobo.1162.1" xmlns="http://www.w3.org/1999/xhtml">Let’s review the improved </span><strong class="source-inline"><span class="koboSpan" id="kobo.1163.1" xmlns="http://www.w3.org/1999/xhtml">LoginViewModel.cs</span></strong><span class="koboSpan" id="kobo.1164.1" xmlns="http://www.w3.org/1999/xhtml"> file to find out </span><span class="No-Break"><span class="koboSpan" id="kobo.1165.1" xmlns="http://www.w3.org/1999/xhtml">more details:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.1166.1" xmlns="http://www.w3.org/1999/xhtml">Listing 5.5: LoginViewModel.cs (https://epa.ms/LoginViewModel5-5)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1167.1" xmlns="http://www.w3.org/1999/xhtml">
public class LoginViewModel : BaseViewModel
{
  readonly IUserService&lt;User&gt; userService = LoginUser.UserService;
  private Action&lt;string&gt; _signUpAction;
  public Command LoginCommand { get; }
  public Command SignUpCommand { get; }
  public Command CancelCommand { get; }
  public LoginUser CurrentUser =&gt; LoginUser.Instance;
  public ObservableCollection&lt;User&gt;? </span><span class="koboSpan" id="kobo.1167.2" xmlns="http://www.w3.org/1999/xhtml">Users ...
</span><span class="koboSpan" id="kobo.1167.3" xmlns="http://www.w3.org/1999/xhtml">  public LoginViewModel() {
    LoginCommand = new Command(OnLoginClicked,
        ValidateLogin);                                   ➊
    SignUpCommand = new Command(OnSignUpClicked,
        ValidateSignUp);
    CancelCommand = new Command(OnCancelClicked);
    CurrentUser.PropertyChanged +=
            (_, __) =&gt; LoginCommand.ChangeCanExecute();   ➋
    CurrentUser.PropertyChanged +=
            (_, __) =&gt; SignUpCommand.ChangeCanExecute();
  }
  public LoginViewModel(Action&lt;string&gt; signUpAction) ...
</span><span class="koboSpan" id="kobo.1167.4" xmlns="http://www.w3.org/1999/xhtml">  private bool ValidateLogin() {                          ➌
    return !string.IsNullOrWhiteSpace(CurrentUser.Username)
       &amp;&amp; !string.IsNullOrWhiteSpace(CurrentUser.Password);
  }
  private bool ValidateSignUp() ...
</span><span class="koboSpan" id="kobo.1167.5" xmlns="http://www.w3.org/1999/xhtml">  public void OnAppearing() ...
</span><span class="koboSpan" id="kobo.1167.6" xmlns="http://www.w3.org/1999/xhtml">  public async void OnLoginClicked() {
    try {
      IsBusy = true;
      if (string.IsNullOrWhiteSpace
          (CurrentUser.Password))...
</span><span class="koboSpan" id="kobo.1167.7" xmlns="http://www.w3.org/1999/xhtml">      bool status = await userService.LoginAsync
          (CurrentUser);                                  ➍
      if (status) {
        if (AppShell.CurrentAppShell != null) {
            AppShell.CurrentAppShell.SetRootPageTitle
               (DataStore.RootGroup.Name);
          string path = Path.Combine
              (PxDataFile.TmpFilePath,
                  CurrentUser.FileName);
          if (File.Exists(path))...
</span><span class="koboSpan" id="kobo.1167.8" xmlns="http://www.w3.org/1999/xhtml">          await Shell.Current.GoToAsync($"//RootPage");
        }
        else {
          throw (new NullReferenceException
              ("CurrentAppShell is null"));
        }
      }
      IsBusy = false;
    }
    catch (Exception ex) {
      IsBusy = false;
      string msg = ex.Message;
      if (ex is System.IO.IOException ioException) {
        msg = Properties.Resources.message_
            id_recover_datafile;
      }
      Await Shell.Current.DisplayAlert
          (Properties.Resources.LoginErrorMessage, msg,
              Properties.Resources.alert_id_ok);
    }
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.1168.1" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.1169.1" xmlns="http://www.w3.org/1999/xhtml">LoginViewModel</span></strong><span class="koboSpan" id="kobo.1170.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><em class="italic"><span class="koboSpan" id="kobo.1171.1" xmlns="http://www.w3.org/1999/xhtml">Listing 5.5</span></em><span class="koboSpan" id="kobo.1172.1" xmlns="http://www.w3.org/1999/xhtml">), we defined a few </span><strong class="source-inline"><span class="koboSpan" id="kobo.1173.1" xmlns="http://www.w3.org/1999/xhtml">Command</span></strong><span class="koboSpan" id="kobo.1174.1" xmlns="http://www.w3.org/1999/xhtml"> properties. </span><span class="koboSpan" id="kobo.1174.2" xmlns="http://www.w3.org/1999/xhtml">Let’s look at </span><strong class="source-inline"><span class="koboSpan" id="kobo.1175.1" xmlns="http://www.w3.org/1999/xhtml">LoginCommand</span></strong><span class="koboSpan" id="kobo.1176.1" xmlns="http://www.w3.org/1999/xhtml"> to </span><a id="_idIndexMarker373"/><span class="koboSpan" id="kobo.1177.1" xmlns="http://www.w3.org/1999/xhtml">understand how to use the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1178.1" xmlns="http://www.w3.org/1999/xhtml">ICommand</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1179.1" xmlns="http://www.w3.org/1999/xhtml"> interface.</span></span></p>
<p><span class="koboSpan" id="kobo.1180.1" xmlns="http://www.w3.org/1999/xhtml">In .NET MAUI, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1181.1" xmlns="http://www.w3.org/1999/xhtml">Command</span></strong><span class="koboSpan" id="kobo.1182.1" xmlns="http://www.w3.org/1999/xhtml"> class is defined </span><span class="No-Break"><span class="koboSpan" id="kobo.1183.1" xmlns="http://www.w3.org/1999/xhtml">like so:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1184.1" xmlns="http://www.w3.org/1999/xhtml">
public class Command : System.Windows.Input.ICommand</span></pre>
<p><span class="koboSpan" id="kobo.1185.1" xmlns="http://www.w3.org/1999/xhtml">➊ We use the following constructor to </span><span class="No-Break"><span class="koboSpan" id="kobo.1186.1" xmlns="http://www.w3.org/1999/xhtml">initialize </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1187.1" xmlns="http://www.w3.org/1999/xhtml">LoginCommand</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1188.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1189.1" xmlns="http://www.w3.org/1999/xhtml">
public Command (Action execute, Func&lt;bool&gt; canExecute);</span></pre>
<p><span class="koboSpan" id="kobo.1190.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.1191.1" xmlns="http://www.w3.org/1999/xhtml">execute</span></strong><span class="koboSpan" id="kobo.1192.1" xmlns="http://www.w3.org/1999/xhtml"> parameter, which is of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1193.1" xmlns="http://www.w3.org/1999/xhtml">Action</span></strong><span class="koboSpan" id="kobo.1194.1" xmlns="http://www.w3.org/1999/xhtml"> type, is the action to be invoked. </span><span class="koboSpan" id="kobo.1194.2" xmlns="http://www.w3.org/1999/xhtml">Here, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1195.1" xmlns="http://www.w3.org/1999/xhtml">OnLoginClicked()</span></strong><span class="koboSpan" id="kobo.1196.1" xmlns="http://www.w3.org/1999/xhtml"> method is assigned. </span><span class="koboSpan" id="kobo.1196.2" xmlns="http://www.w3.org/1999/xhtml">When the user clicks the button, it will </span><span class="No-Break"><span class="koboSpan" id="kobo.1197.1" xmlns="http://www.w3.org/1999/xhtml">be executed.</span></span></p>
<p><span class="koboSpan" id="kobo.1198.1" xmlns="http://www.w3.org/1999/xhtml">We also assigned another method called </span><strong class="source-inline"><span class="koboSpan" id="kobo.1199.1" xmlns="http://www.w3.org/1999/xhtml">ValidateLogin()</span></strong><span class="koboSpan" id="kobo.1200.1" xmlns="http://www.w3.org/1999/xhtml">➌ to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1201.1" xmlns="http://www.w3.org/1999/xhtml">canExecute</span></strong><span class="koboSpan" id="kobo.1202.1" xmlns="http://www.w3.org/1999/xhtml"> parameter. </span><span class="koboSpan" id="kobo.1202.2" xmlns="http://www.w3.org/1999/xhtml">This parameter is used to indicate whether this </span><strong class="source-inline"><span class="koboSpan" id="kobo.1203.1" xmlns="http://www.w3.org/1999/xhtml">Command</span></strong><span class="koboSpan" id="kobo.1204.1" xmlns="http://www.w3.org/1999/xhtml"> can be executed. </span><span class="koboSpan" id="kobo.1204.2" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1205.1" xmlns="http://www.w3.org/1999/xhtml">ValidateLogin()</span></strong><span class="koboSpan" id="kobo.1206.1" xmlns="http://www.w3.org/1999/xhtml"> method, we check whether the username or password in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1207.1" xmlns="http://www.w3.org/1999/xhtml">CurrentUser</span></strong><span class="koboSpan" id="kobo.1208.1" xmlns="http://www.w3.org/1999/xhtml"> is empty. </span><span class="koboSpan" id="kobo.1208.2" xmlns="http://www.w3.org/1999/xhtml">If either of them is empty, this </span><strong class="source-inline"><span class="koboSpan" id="kobo.1209.1" xmlns="http://www.w3.org/1999/xhtml">Command</span></strong><span class="koboSpan" id="kobo.1210.1" xmlns="http://www.w3.org/1999/xhtml"> cannot be executed, and the button should be </span><span class="No-Break"><span class="koboSpan" id="kobo.1211.1" xmlns="http://www.w3.org/1999/xhtml">grayed out.</span></span></p>
<p><span class="koboSpan" id="kobo.1212.1" xmlns="http://www.w3.org/1999/xhtml">To detect a change in the username or password, we can register </span><strong class="source-inline"><span class="koboSpan" id="kobo.1213.1" xmlns="http://www.w3.org/1999/xhtml">ChangeCanExecute()</span></strong><span class="koboSpan" id="kobo.1214.1" xmlns="http://www.w3.org/1999/xhtml"> to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1215.1" xmlns="http://www.w3.org/1999/xhtml">PropertyChanged</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.1216.1" xmlns="http://www.w3.org/1999/xhtml">handler </span></span><span class="No-Break"><span class="koboSpan" id="kobo.1217.1" xmlns="http://www.w3.org/1999/xhtml">➋</span></span><span class="No-Break"><span class="koboSpan" id="kobo.1218.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.1219.1" xmlns="http://www.w3.org/1999/xhtml">After the user clicks the button, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1220.1" xmlns="http://www.w3.org/1999/xhtml">OnLoginClicked()</span></strong><span class="koboSpan" id="kobo.1221.1" xmlns="http://www.w3.org/1999/xhtml"> method is called. </span><span class="koboSpan" id="kobo.1221.2" xmlns="http://www.w3.org/1999/xhtml">In this method, we pass </span><strong class="source-inline"><span class="koboSpan" id="kobo.1222.1" xmlns="http://www.w3.org/1999/xhtml">CurrentUser</span></strong><span class="koboSpan" id="kobo.1223.1" xmlns="http://www.w3.org/1999/xhtml"> to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1224.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.1225.1" xmlns="http://www.w3.org/1999/xhtml"> method’s </span><strong class="source-inline"><span class="koboSpan" id="kobo.1226.1" xmlns="http://www.w3.org/1999/xhtml">LoginAsync()</span></strong><span class="koboSpan" id="kobo.1227.1" xmlns="http://www.w3.org/1999/xhtml">➍ to handle the </span><span class="No-Break"><span class="koboSpan" id="kobo.1228.1" xmlns="http://www.w3.org/1999/xhtml">login process.</span></span></p>
<p><span class="koboSpan" id="kobo.1229.1" xmlns="http://www.w3.org/1999/xhtml">So far, we have improved our model and service to enhance the login process. </span><span class="koboSpan" id="kobo.1229.2" xmlns="http://www.w3.org/1999/xhtml">If we recall the class diagram in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1230.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5</span></em></span><em class="italic"><span class="koboSpan" id="kobo.1231.1" xmlns="http://www.w3.org/1999/xhtml">.7</span></em><span class="koboSpan" id="kobo.1232.1" xmlns="http://www.w3.org/1999/xhtml">, we have changed the source code at the view, view model, and service layers to enhance our app. </span><span class="koboSpan" id="kobo.1232.2" xmlns="http://www.w3.org/1999/xhtml">The actual model is encapsulated in two libraries called </span><strong class="source-inline"><span class="koboSpan" id="kobo.1233.1" xmlns="http://www.w3.org/1999/xhtml">KPCLib</span></strong><span class="koboSpan" id="kobo.1234.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.1235.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZLib</span></strong><span class="koboSpan" id="kobo.1236.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1236.2" xmlns="http://www.w3.org/1999/xhtml">We exposed the functionalities of these two libraries through the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1237.1" xmlns="http://www.w3.org/1999/xhtml">IdataStore</span></strong><span class="koboSpan" id="kobo.1238.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.1239.1" xmlns="http://www.w3.org/1999/xhtml">IuserService</span></strong><span class="koboSpan" id="kobo.1240.1" xmlns="http://www.w3.org/1999/xhtml"> interfaces. </span><span class="koboSpan" id="kobo.1240.2" xmlns="http://www.w3.org/1999/xhtml">We enhanced our model by building the actual implementation classes of these two interfaces. </span><span class="koboSpan" id="kobo.1240.3" xmlns="http://www.w3.org/1999/xhtml">In the next chapter, we will continue improving these two service interfaces and build a fully </span><span class="No-Break"><span class="koboSpan" id="kobo.1241.1" xmlns="http://www.w3.org/1999/xhtml">functional app.</span></span></p>
<h1 id="_idParaDest-114"><a id="_idTextAnchor127"/><span class="koboSpan" id="kobo.1242.1" xmlns="http://www.w3.org/1999/xhtml">Summary</span></h1>
<p><span class="koboSpan" id="kobo.1243.1" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we learned about basic navigation and </span><strong class="source-inline"><span class="koboSpan" id="kobo.1244.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.1245.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1245.2" xmlns="http://www.w3.org/1999/xhtml">We used </span><strong class="source-inline"><span class="koboSpan" id="kobo.1246.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.1247.1" xmlns="http://www.w3.org/1999/xhtml"> as the navigation framework in our app design. </span><span class="koboSpan" id="kobo.1247.2" xmlns="http://www.w3.org/1999/xhtml">We explored the features of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1248.1" xmlns="http://www.w3.org/1999/xhtml">Shell</span></strong><span class="koboSpan" id="kobo.1249.1" xmlns="http://www.w3.org/1999/xhtml"> and explained how to use it in our </span><span class="No-Break"><span class="koboSpan" id="kobo.1250.1" xmlns="http://www.w3.org/1999/xhtml">app design.</span></span></p>
<p><span class="koboSpan" id="kobo.1251.1" xmlns="http://www.w3.org/1999/xhtml">After we completed most of the user interface design, we enhanced our model by making changes to two service interfaces: </span><strong class="source-inline"><span class="koboSpan" id="kobo.1252.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1253.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.1254.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.1255.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1255.2" xmlns="http://www.w3.org/1999/xhtml">We improved the login process after making changes in the view, view model, and service layers. </span><span class="koboSpan" id="kobo.1255.3" xmlns="http://www.w3.org/1999/xhtml">In the service layer, we are still using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1256.1" xmlns="http://www.w3.org/1999/xhtml">MockDataStore</span></strong><span class="koboSpan" id="kobo.1257.1" xmlns="http://www.w3.org/1999/xhtml"> class. </span><span class="koboSpan" id="kobo.1257.2" xmlns="http://www.w3.org/1999/xhtml">However, we haven’t finalized the implementation in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1258.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1259.1" xmlns="http://www.w3.org/1999/xhtml"> service to perform the actual login activities yet. </span><span class="koboSpan" id="kobo.1259.2" xmlns="http://www.w3.org/1999/xhtml">We will leave this to the </span><span class="No-Break"><span class="koboSpan" id="kobo.1260.1" xmlns="http://www.w3.org/1999/xhtml">next chapter.</span></span></p>
<p><span class="koboSpan" id="kobo.1261.1" xmlns="http://www.w3.org/1999/xhtml">In the next chapter, we will explain dependency injection in .NET MAUI, which is a major difference compared to Xamarin.Forms. </span><span class="koboSpan" id="kobo.1261.2" xmlns="http://www.w3.org/1999/xhtml">We will learn how to register our services via dependency injection and how to initialize our service through constructor injection or property injection. </span><span class="koboSpan" id="kobo.1261.3" xmlns="http://www.w3.org/1999/xhtml">We will also create the actual service to </span><span class="No-Break"><span class="koboSpan" id="kobo.1262.1" xmlns="http://www.w3.org/1999/xhtml">replace </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1263.1" xmlns="http://www.w3.org/1999/xhtml">MockDataStore</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1264.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
</div>
</body>
</html>
