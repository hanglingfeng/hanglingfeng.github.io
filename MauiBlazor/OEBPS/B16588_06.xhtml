<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>B16588_06</title>
<link href="css/style-JRserifv6.css" rel="stylesheet" type="text/css"/>
<!-- kobo-style -->
<style id="koboSpanStyle" type="text/css" xmlns="http://www.w3.org/1999/xhtml">.koboSpan { -webkit-text-combine: inherit; }</style>
</head>
<body id="B16588_06" xml:lang="en-GB">
<div id="_idContainer078">
<h1 class="chapter-number" id="_idParaDest-115"><a id="_idTextAnchor128"/><span class="koboSpan" id="kobo.1.1" xmlns="http://www.w3.org/1999/xhtml">6</span></h1>
<h1 id="_idParaDest-116"><a id="_idTextAnchor129"/><span class="koboSpan" id="kobo.2.1" xmlns="http://www.w3.org/1999/xhtml">Introducing Dependency Injection and Platform-Specific Services</span></h1>
<p><span class="koboSpan" id="kobo.3.1" xmlns="http://www.w3.org/1999/xhtml">In the last chapter, we introduced navigation and Shell in </span><strong class="bold"><span class="koboSpan" id="kobo.4.1" xmlns="http://www.w3.org/1999/xhtml">.NET Multi-platform App UI</span></strong><span class="koboSpan" id="kobo.5.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="bold"><span class="koboSpan" id="kobo.6.1" xmlns="http://www.w3.org/1999/xhtml">.NET MAUI</span></strong><span class="koboSpan" id="kobo.7.1" xmlns="http://www.w3.org/1999/xhtml">), and we completed the navigation design of our app. </span><span class="koboSpan" id="kobo.7.2" xmlns="http://www.w3.org/1999/xhtml">We improved two interfaces, </span><strong class="source-inline"><span class="koboSpan" id="kobo.8.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.9.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.10.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.11.1" xmlns="http://www.w3.org/1999/xhtml">, to separate the model from the view and view model. </span><span class="koboSpan" id="kobo.11.2" xmlns="http://www.w3.org/1999/xhtml">In the current code, we used the </span><strong class="source-inline"><span class="koboSpan" id="kobo.12.1" xmlns="http://www.w3.org/1999/xhtml">DependencyService</span></strong><span class="koboSpan" id="kobo.13.1" xmlns="http://www.w3.org/1999/xhtml"> class to decouple the interface implementations. </span><span class="koboSpan" id="kobo.13.2" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we will refine our design using </span><strong class="bold"><span class="koboSpan" id="kobo.14.1" xmlns="http://www.w3.org/1999/xhtml">dependency injection</span></strong><span class="koboSpan" id="kobo.15.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="bold"><span class="koboSpan" id="kobo.16.1" xmlns="http://www.w3.org/1999/xhtml">DI</span></strong><span class="koboSpan" id="kobo.17.1" xmlns="http://www.w3.org/1999/xhtml">) to</span><a id="_idIndexMarker374"/><span class="koboSpan" id="kobo.18.1" xmlns="http://www.w3.org/1999/xhtml"> replace the </span><strong class="source-inline"><span class="koboSpan" id="kobo.19.1" xmlns="http://www.w3.org/1999/xhtml">DependencyService</span></strong><span class="koboSpan" id="kobo.20.1" xmlns="http://www.w3.org/1999/xhtml"> class. </span><span class="koboSpan" id="kobo.20.2" xmlns="http://www.w3.org/1999/xhtml">There is a built-in service to support DI in .NET MAUI. </span><span class="koboSpan" id="kobo.20.3" xmlns="http://www.w3.org/1999/xhtml">With the help of DI, we can refine our design and decouple the dependencies in a more </span><span class="No-Break"><span class="koboSpan" id="kobo.21.1" xmlns="http://www.w3.org/1999/xhtml">elegant way.</span></span></p>
<p><span class="koboSpan" id="kobo.22.1" xmlns="http://www.w3.org/1999/xhtml">We will cover the following topics in </span><span class="No-Break"><span class="koboSpan" id="kobo.23.1" xmlns="http://www.w3.org/1999/xhtml">this chapter:</span></span></p>
<ul>
<li><span class="koboSpan" id="kobo.24.1" xmlns="http://www.w3.org/1999/xhtml">A quick review of </span><span class="No-Break"><span class="koboSpan" id="kobo.25.1" xmlns="http://www.w3.org/1999/xhtml">design principles</span></span></li>
<li><span class="No-Break"><span class="koboSpan" id="kobo.26.1" xmlns="http://www.w3.org/1999/xhtml">Using DI</span></span></li>
<li><span class="koboSpan" id="kobo.27.1" xmlns="http://www.w3.org/1999/xhtml">Connecting to </span><span class="No-Break"><span class="koboSpan" id="kobo.28.1" xmlns="http://www.w3.org/1999/xhtml">the database</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.29.1" xmlns="http://www.w3.org/1999/xhtml">DI is a technique to realize the design principle of dependency inversion or </span><strong class="bold"><span class="koboSpan" id="kobo.30.1" xmlns="http://www.w3.org/1999/xhtml">Dependency Inversion Principle</span></strong><span class="koboSpan" id="kobo.31.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="bold"><span class="koboSpan" id="kobo.32.1" xmlns="http://www.w3.org/1999/xhtml">DIP</span></strong><span class="koboSpan" id="kobo.33.1" xmlns="http://www.w3.org/1999/xhtml">). </span><span class="koboSpan" id="kobo.33.2" xmlns="http://www.w3.org/1999/xhtml">DIP</span><a id="_idIndexMarker375"/><span class="koboSpan" id="kobo.34.1" xmlns="http://www.w3.org/1999/xhtml"> is one of the SOLID design principles, and we will learn how to use SOLID design principles in our design. </span><span class="koboSpan" id="kobo.34.2" xmlns="http://www.w3.org/1999/xhtml">We will have a quick overview of SOLID design principles at the beginning of this chapter before we dive </span><span class="No-Break"><span class="koboSpan" id="kobo.35.1" xmlns="http://www.w3.org/1999/xhtml">into DI.</span></span></p>
<h1 id="_idParaDest-117"><a id="_idTextAnchor130"/><span class="koboSpan" id="kobo.36.1" xmlns="http://www.w3.org/1999/xhtml">Technical requirements</span></h1>
<p><span class="koboSpan" id="kobo.37.1" xmlns="http://www.w3.org/1999/xhtml">To test and debug the source code in this chapter, you need to have Visual Studio 2022 installed on your PC. </span><span class="koboSpan" id="kobo.37.2" xmlns="http://www.w3.org/1999/xhtml">Please refer to the </span><em class="italic"><span class="koboSpan" id="kobo.38.1" xmlns="http://www.w3.org/1999/xhtml">Development environment setup</span></em><span class="koboSpan" id="kobo.39.1" xmlns="http://www.w3.org/1999/xhtml"> section in </span><a href="B16588_01.xhtml#_idTextAnchor015"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.40.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 1</span></em></span></a><span class="koboSpan" id="kobo.41.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.42.1" xmlns="http://www.w3.org/1999/xhtml">Getting Started with .NET MAUI</span></em><span class="koboSpan" id="kobo.43.1" xmlns="http://www.w3.org/1999/xhtml">, for </span><span class="No-Break"><span class="koboSpan" id="kobo.44.1" xmlns="http://www.w3.org/1999/xhtml">further details.</span></span></p>
<p><span class="koboSpan" id="kobo.45.1" xmlns="http://www.w3.org/1999/xhtml">The source code for this chapter is available in the following </span><span class="No-Break"><span class="koboSpan" id="kobo.46.1" xmlns="http://www.w3.org/1999/xhtml">GitHub repository:</span></span></p>
<p><a href="https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development/tree/main/Chapter06"><span class="No-Break"><span class="koboSpan" id="kobo.47.1" xmlns="http://www.w3.org/1999/xhtml">https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development/tree/main/Chapter06</span></span></a></p>
<p><span class="koboSpan" id="kobo.48.1" xmlns="http://www.w3.org/1999/xhtml">The source code can be downloaded using the following </span><span class="No-Break"><span class="koboSpan" id="kobo.49.1" xmlns="http://www.w3.org/1999/xhtml">Git command:</span></span></p>
<pre class="console"><span class="koboSpan" id="kobo.50.1" xmlns="http://www.w3.org/1999/xhtml">
git clone -b chapter06 https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development PassXYZ.Vault2</span></pre>
<h1 id="_idParaDest-118"><a id="_idTextAnchor131"/><span class="koboSpan" id="kobo.51.1" xmlns="http://www.w3.org/1999/xhtml">A quick review of design principles</span></h1>
<p><span class="koboSpan" id="kobo.52.1" xmlns="http://www.w3.org/1999/xhtml">Design principles</span><a id="_idIndexMarker376"/><span class="koboSpan" id="kobo.53.1" xmlns="http://www.w3.org/1999/xhtml"> are high-level guidelines about design considerations. </span><span class="koboSpan" id="kobo.53.2" xmlns="http://www.w3.org/1999/xhtml">They can give fundamental pieces of advice for you to make a better design decision. </span><span class="koboSpan" id="kobo.53.3" xmlns="http://www.w3.org/1999/xhtml">There are general design principles that can be used not only for software design but are also applicable to other </span><span class="No-Break"><span class="koboSpan" id="kobo.54.1" xmlns="http://www.w3.org/1999/xhtml">design works.</span></span></p>
<p><span class="koboSpan" id="kobo.55.1" xmlns="http://www.w3.org/1999/xhtml">Let’s review some general design principles before we move to commonly used design principles (SOLID) in </span><span class="No-Break"><span class="koboSpan" id="kobo.56.1" xmlns="http://www.w3.org/1999/xhtml">software development.</span></span></p>
<h2 id="_idParaDest-119"><a id="_idTextAnchor132"/><span class="koboSpan" id="kobo.57.1" xmlns="http://www.w3.org/1999/xhtml">Exploring types of design principles</span></h2>
<p><span class="koboSpan" id="kobo.58.1" xmlns="http://www.w3.org/1999/xhtml">Design </span><a id="_idIndexMarker377"/><span class="koboSpan" id="kobo.59.1" xmlns="http://www.w3.org/1999/xhtml">principles can be a huge topic. </span><span class="koboSpan" id="kobo.59.2" xmlns="http://www.w3.org/1999/xhtml">So, instead of a detailed description, here, I will share my experience of applying design principles in development by giving you a quick review of the design principles used in this book. </span><span class="koboSpan" id="kobo.59.3" xmlns="http://www.w3.org/1999/xhtml">We will start with high-level principles such as </span><strong class="bold"><span class="koboSpan" id="kobo.60.1" xmlns="http://www.w3.org/1999/xhtml">DRY</span></strong><span class="koboSpan" id="kobo.61.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="bold"><span class="koboSpan" id="kobo.62.1" xmlns="http://www.w3.org/1999/xhtml">KISS</span></strong><span class="koboSpan" id="kobo.63.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="bold"><span class="koboSpan" id="kobo.64.1" xmlns="http://www.w3.org/1999/xhtml">YAGNI</span></strong><span class="koboSpan" id="kobo.65.1" xmlns="http://www.w3.org/1999/xhtml">, and so on first, and then we move to the ones that are mostly used in software development. </span><span class="koboSpan" id="kobo.65.2" xmlns="http://www.w3.org/1999/xhtml">The most commonly used ones </span><a id="_idIndexMarker378"/><span class="koboSpan" id="kobo.66.1" xmlns="http://www.w3.org/1999/xhtml">in </span><strong class="bold"><span class="koboSpan" id="kobo.67.1" xmlns="http://www.w3.org/1999/xhtml">object-oriented programming</span></strong><span class="koboSpan" id="kobo.68.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="bold"><span class="koboSpan" id="kobo.69.1" xmlns="http://www.w3.org/1999/xhtml">OOP</span></strong><span class="koboSpan" id="kobo.70.1" xmlns="http://www.w3.org/1999/xhtml">) are SOLID </span><span class="No-Break"><span class="koboSpan" id="kobo.71.1" xmlns="http://www.w3.org/1999/xhtml">design principles.</span></span></p>
<h3><span class="koboSpan" id="kobo.72.1" xmlns="http://www.w3.org/1999/xhtml">Don’t Repeat Yourself (DRY)</span></h3>
<p><span class="koboSpan" id="kobo.73.1" xmlns="http://www.w3.org/1999/xhtml">As people often say, don’t reinvent the wheel; we should try to reuse existing components</span><a id="_idIndexMarker379"/><span class="koboSpan" id="kobo.74.1" xmlns="http://www.w3.org/1999/xhtml"> rather than redevelop something</span><a id="_idIndexMarker380"/><span class="koboSpan" id="kobo.75.1" xmlns="http://www.w3.org/1999/xhtml"> that </span><span class="No-Break"><span class="koboSpan" id="kobo.76.1" xmlns="http://www.w3.org/1999/xhtml">already exists.</span></span></p>
<h3><span class="koboSpan" id="kobo.77.1" xmlns="http://www.w3.org/1999/xhtml">Keep It Simple, Stupid (KISS)</span></h3>
<p><span class="koboSpan" id="kobo.78.1" xmlns="http://www.w3.org/1999/xhtml">We </span><a id="_idIndexMarker381"/><span class="koboSpan" id="kobo.79.1" xmlns="http://www.w3.org/1999/xhtml">should choose a simple and straightforward </span><a id="_idIndexMarker382"/><span class="koboSpan" id="kobo.80.1" xmlns="http://www.w3.org/1999/xhtml">approach rather than involve unnecessary complexity in </span><span class="No-Break"><span class="koboSpan" id="kobo.81.1" xmlns="http://www.w3.org/1999/xhtml">a design.</span></span></p>
<h3><span class="koboSpan" id="kobo.82.1" xmlns="http://www.w3.org/1999/xhtml">You Aren’t Gonna Need It (YAGNI)</span></h3>
<p><span class="koboSpan" id="kobo.83.1" xmlns="http://www.w3.org/1999/xhtml">We should</span><a id="_idIndexMarker383"/><span class="koboSpan" id="kobo.84.1" xmlns="http://www.w3.org/1999/xhtml"> implement functionality </span><a id="_idIndexMarker384"/><span class="koboSpan" id="kobo.85.1" xmlns="http://www.w3.org/1999/xhtml">when it is required. </span><span class="koboSpan" id="kobo.85.2" xmlns="http://www.w3.org/1999/xhtml">In software development, there is a tendency to futureproof a design. </span><span class="koboSpan" id="kobo.85.3" xmlns="http://www.w3.org/1999/xhtml">This may create something that is actually not needed and increase the complexity of </span><span class="No-Break"><span class="koboSpan" id="kobo.86.1" xmlns="http://www.w3.org/1999/xhtml">the solution.</span></span></p>
<h3><span class="koboSpan" id="kobo.87.1" xmlns="http://www.w3.org/1999/xhtml">SOLID design principles</span></h3>
<p><span class="koboSpan" id="kobo.88.1" xmlns="http://www.w3.org/1999/xhtml">SOLID design principles</span><a id="_idIndexMarker385"/><span class="koboSpan" id="kobo.89.1" xmlns="http://www.w3.org/1999/xhtml"> are the ones used in </span><a id="_idIndexMarker386"/><span class="koboSpan" id="kobo.90.1" xmlns="http://www.w3.org/1999/xhtml">software development. </span><span class="koboSpan" id="kobo.90.2" xmlns="http://www.w3.org/1999/xhtml">They are high-level guidelines for many design patterns. </span><span class="koboSpan" id="kobo.90.3" xmlns="http://www.w3.org/1999/xhtml">SOLID is an acronym for the following </span><span class="No-Break"><span class="koboSpan" id="kobo.91.1" xmlns="http://www.w3.org/1999/xhtml">five principles:</span></span></p>
<ul>
<li><strong class="bold"><span class="koboSpan" id="kobo.92.1" xmlns="http://www.w3.org/1999/xhtml">Single Responsibility Principle (SRP)</span></strong><span class="koboSpan" id="kobo.93.1" xmlns="http://www.w3.org/1999/xhtml">—A</span><a id="_idIndexMarker387"/><span class="koboSpan" id="kobo.94.1" xmlns="http://www.w3.org/1999/xhtml"> class should only have one responsibility. </span><span class="koboSpan" id="kobo.94.2" xmlns="http://www.w3.org/1999/xhtml">As a </span><a id="_idIndexMarker388"/><span class="koboSpan" id="kobo.95.1" xmlns="http://www.w3.org/1999/xhtml">developer, you have one and only one reason to change a class. </span><span class="koboSpan" id="kobo.95.2" xmlns="http://www.w3.org/1999/xhtml">With this design principle in mind, the implementation is easier to understand and more efficient to deal with as </span><span class="No-Break"><span class="koboSpan" id="kobo.96.1" xmlns="http://www.w3.org/1999/xhtml">requirements change.</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.97.1" xmlns="http://www.w3.org/1999/xhtml">Open/Closed Principle (OCP)</span></strong><span class="koboSpan" id="kobo.98.1" xmlns="http://www.w3.org/1999/xhtml">—Classes should be open for extension but closed</span><a id="_idIndexMarker389"/><span class="koboSpan" id="kobo.99.1" xmlns="http://www.w3.org/1999/xhtml"> for modification. </span><span class="koboSpan" id="kobo.99.2" xmlns="http://www.w3.org/1999/xhtml">The </span><a id="_idIndexMarker390"/><span class="koboSpan" id="kobo.100.1" xmlns="http://www.w3.org/1999/xhtml">main idea of this principle is to keep the existing code from breaking when you implement </span><span class="No-Break"><span class="koboSpan" id="kobo.101.1" xmlns="http://www.w3.org/1999/xhtml">new features.</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.102.1" xmlns="http://www.w3.org/1999/xhtml">Liskov Substitution Principle (LSP)</span></strong><span class="koboSpan" id="kobo.103.1" xmlns="http://www.w3.org/1999/xhtml">—If the </span><a id="_idIndexMarker391"/><span class="koboSpan" id="kobo.104.1" xmlns="http://www.w3.org/1999/xhtml">object of the parent type can be used in </span><a id="_idIndexMarker392"/><span class="koboSpan" id="kobo.105.1" xmlns="http://www.w3.org/1999/xhtml">a context, the object of the child type should be able to be used the same way without </span><span class="No-Break"><span class="koboSpan" id="kobo.106.1" xmlns="http://www.w3.org/1999/xhtml">anything breaking.</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.107.1" xmlns="http://www.w3.org/1999/xhtml">Interface Segregation Principle (ISP)</span></strong><span class="koboSpan" id="kobo.108.1" xmlns="http://www.w3.org/1999/xhtml">—A design should not implement an interface </span><a id="_idIndexMarker393"/><span class="koboSpan" id="kobo.109.1" xmlns="http://www.w3.org/1999/xhtml">that it </span><a id="_idIndexMarker394"/><span class="koboSpan" id="kobo.110.1" xmlns="http://www.w3.org/1999/xhtml">doesn’t use, and a class should not be forced to depend on methods it doesn’t intend to implement. </span><span class="koboSpan" id="kobo.110.2" xmlns="http://www.w3.org/1999/xhtml">We should design concise and simple interfaces rather than large and </span><span class="No-Break"><span class="koboSpan" id="kobo.111.1" xmlns="http://www.w3.org/1999/xhtml">complex ones.</span></span></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.112.1" xmlns="http://www.w3.org/1999/xhtml">Dependency Inversion Principle (DIP)</span></strong><span class="koboSpan" id="kobo.113.1" xmlns="http://www.w3.org/1999/xhtml">—This principle emphasizes the decoupling </span><a id="_idIndexMarker395"/><span class="koboSpan" id="kobo.114.1" xmlns="http://www.w3.org/1999/xhtml">of software </span><a id="_idIndexMarker396"/><span class="koboSpan" id="kobo.115.1" xmlns="http://www.w3.org/1999/xhtml">modules. </span><span class="koboSpan" id="kobo.115.2" xmlns="http://www.w3.org/1999/xhtml">High-level modules should not depend on low-level modules directly. </span><span class="koboSpan" id="kobo.115.3" xmlns="http://www.w3.org/1999/xhtml">Both should depend on abstractions. </span><span class="koboSpan" id="kobo.115.4" xmlns="http://www.w3.org/1999/xhtml">Abstractions should not depend on details. </span><span class="koboSpan" id="kobo.115.5" xmlns="http://www.w3.org/1999/xhtml">Details should depend </span><span class="No-Break"><span class="koboSpan" id="kobo.116.1" xmlns="http://www.w3.org/1999/xhtml">on abstractions.</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.117.1" xmlns="http://www.w3.org/1999/xhtml">Design principles are guidelines to help us to make better design decisions. </span><span class="koboSpan" id="kobo.117.2" xmlns="http://www.w3.org/1999/xhtml">However, it is up to us to decide what to do in the actual implementation, not the </span><span class="No-Break"><span class="koboSpan" id="kobo.118.1" xmlns="http://www.w3.org/1999/xhtml">design principles.</span></span></p>
<h2 id="_idParaDest-120"><a id="_idTextAnchor133"/><span class="koboSpan" id="kobo.119.1" xmlns="http://www.w3.org/1999/xhtml">Using design principles</span></h2>
<p><span class="koboSpan" id="kobo.120.1" xmlns="http://www.w3.org/1999/xhtml">Now that </span><a id="_idIndexMarker397"/><span class="koboSpan" id="kobo.121.1" xmlns="http://www.w3.org/1999/xhtml">we’ve talked about the different design principles, let me share my lessons learned when using </span><span class="No-Break"><span class="koboSpan" id="kobo.122.1" xmlns="http://www.w3.org/1999/xhtml">design principles.</span></span></p>
<p><span class="koboSpan" id="kobo.123.1" xmlns="http://www.w3.org/1999/xhtml">In the model of our app, I reused </span><strong class="source-inline"><span class="koboSpan" id="kobo.124.1" xmlns="http://www.w3.org/1999/xhtml">KeePassLib</span></strong><span class="koboSpan" id="kobo.125.1" xmlns="http://www.w3.org/1999/xhtml"> from Dominik Reichl. </span><span class="koboSpan" id="kobo.125.2" xmlns="http://www.w3.org/1999/xhtml">When I ported it to .NET Standard, I changed the inheritance hierarchy, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.126.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.127.1" xmlns="http://www.w3.org/1999/xhtml">.1</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.128.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer069">
<span class="koboSpan" id="kobo.129.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 6.1: Class diagram of Item, PwEntry, and PwGroup" src="image/Figure_6.01_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.130.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6.1: Class diagram of Item, PwEntry, and PwGroup</span></p>
<p><span class="koboSpan" id="kobo.131.1" xmlns="http://www.w3.org/1999/xhtml">I created an abstract parent class, </span><strong class="source-inline"><span class="koboSpan" id="kobo.132.1" xmlns="http://www.w3.org/1999/xhtml">Item</span></strong><span class="koboSpan" id="kobo.133.1" xmlns="http://www.w3.org/1999/xhtml">, for the group (</span><strong class="source-inline"><span class="koboSpan" id="kobo.134.1" xmlns="http://www.w3.org/1999/xhtml">PwGroup</span></strong><span class="koboSpan" id="kobo.135.1" xmlns="http://www.w3.org/1999/xhtml">) and entry (</span><strong class="source-inline"><span class="koboSpan" id="kobo.136.1" xmlns="http://www.w3.org/1999/xhtml">PwEntry</span></strong><span class="koboSpan" id="kobo.137.1" xmlns="http://www.w3.org/1999/xhtml">). </span><span class="koboSpan" id="kobo.137.2" xmlns="http://www.w3.org/1999/xhtml">It looks like this change breaks OCP in SOLID. </span><span class="koboSpan" id="kobo.137.3" xmlns="http://www.w3.org/1999/xhtml">The reason that I did it this way is influenced by a lesson I learned in the </span><span class="No-Break"><span class="koboSpan" id="kobo.138.1" xmlns="http://www.w3.org/1999/xhtml">previous implementation.</span></span></p>
<p><span class="koboSpan" id="kobo.139.1" xmlns="http://www.w3.org/1999/xhtml">So, previously I</span><a id="_idIndexMarker398"/><span class="koboSpan" id="kobo.140.1" xmlns="http://www.w3.org/1999/xhtml"> did not implement </span><strong class="source-inline"><span class="koboSpan" id="kobo.141.1" xmlns="http://www.w3.org/1999/xhtml">KPCLib</span></strong><span class="koboSpan" id="kobo.142.1" xmlns="http://www.w3.org/1999/xhtml"> this way before </span><em class="italic"><span class="koboSpan" id="kobo.143.1" xmlns="http://www.w3.org/1999/xhtml">version 1.2.3</span></em><span class="koboSpan" id="kobo.144.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.144.2" xmlns="http://www.w3.org/1999/xhtml">At that time, I used </span><strong class="source-inline"><span class="koboSpan" id="kobo.145.1" xmlns="http://www.w3.org/1999/xhtml">PwGroup</span></strong><span class="koboSpan" id="kobo.146.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.147.1" xmlns="http://www.w3.org/1999/xhtml">PwEntry</span></strong><span class="koboSpan" id="kobo.148.1" xmlns="http://www.w3.org/1999/xhtml"> directly, so I had to handle groups and entries separately. </span><span class="koboSpan" id="kobo.148.2" xmlns="http://www.w3.org/1999/xhtml">You can imagine the increased complexity in </span><strong class="source-inline"><span class="koboSpan" id="kobo.149.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.150.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.151.1" xmlns="http://www.w3.org/1999/xhtml">ItemsViewModel</span></strong><span class="koboSpan" id="kobo.152.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.152.2" xmlns="http://www.w3.org/1999/xhtml">The most important side effect is that I couldn’t separate the model and view model clearly. </span><span class="koboSpan" id="kobo.152.3" xmlns="http://www.w3.org/1999/xhtml">In the view model, I had to handle a lot of details using </span><strong class="source-inline"><span class="koboSpan" id="kobo.153.1" xmlns="http://www.w3.org/1999/xhtml">KeePassLib</span></strong><span class="koboSpan" id="kobo.154.1" xmlns="http://www.w3.org/1999/xhtml"> directly. </span><span class="koboSpan" id="kobo.154.2" xmlns="http://www.w3.org/1999/xhtml">After the </span><strong class="source-inline"><span class="koboSpan" id="kobo.155.1" xmlns="http://www.w3.org/1999/xhtml">Item</span></strong><span class="koboSpan" id="kobo.156.1" xmlns="http://www.w3.org/1999/xhtml"> abstract parent class is introduced, I can hide most of the detailed implementation in services (</span><strong class="source-inline"><span class="koboSpan" id="kobo.157.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.158.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.159.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.160.1" xmlns="http://www.w3.org/1999/xhtml">) and </span><strong class="source-inline"><span class="koboSpan" id="kobo.161.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZLib</span></strong><span class="koboSpan" id="kobo.162.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.162.2" xmlns="http://www.w3.org/1999/xhtml">No code that is dependent on </span><strong class="source-inline"><span class="koboSpan" id="kobo.163.1" xmlns="http://www.w3.org/1999/xhtml">KeePassLib</span></strong><span class="koboSpan" id="kobo.164.1" xmlns="http://www.w3.org/1999/xhtml"> is present in the view and view model anymore. </span><span class="koboSpan" id="kobo.164.2" xmlns="http://www.w3.org/1999/xhtml">The thought behind this change is influenced more by KISS rather than just sticking to OCP. </span><span class="koboSpan" id="kobo.164.3" xmlns="http://www.w3.org/1999/xhtml">The result is that the overall architecture looks much better if we consider other SOLID principles, such as LSP and SRP. </span><span class="koboSpan" id="kobo.164.4" xmlns="http://www.w3.org/1999/xhtml">The point that I want to share here is that we may find conflicts among various design principles in the actual work. </span><span class="koboSpan" id="kobo.164.5" xmlns="http://www.w3.org/1999/xhtml">It’s up to us to make decisions rather than just sticking to design principles. </span><span class="koboSpan" id="kobo.164.6" xmlns="http://www.w3.org/1999/xhtml">The best design decision usually comes from the lessons learned in previous </span><span class="No-Break"><span class="koboSpan" id="kobo.165.1" xmlns="http://www.w3.org/1999/xhtml">failure cases.</span></span></p>
<p><span class="koboSpan" id="kobo.166.1" xmlns="http://www.w3.org/1999/xhtml">Now, coming </span><a id="_idIndexMarker399"/><span class="koboSpan" id="kobo.167.1" xmlns="http://www.w3.org/1999/xhtml">back to our primary topic, we’ll talk about refining design using one of the SOLID principles—dependency inversion. </span><span class="koboSpan" id="kobo.167.2" xmlns="http://www.w3.org/1999/xhtml">In SOLID design principles, dependency inversion emphasizes the decoupling of software modules, and it also gives guidelines about how to do it. </span><span class="koboSpan" id="kobo.167.3" xmlns="http://www.w3.org/1999/xhtml">The key idea behind it is we should try to depend on abstractions whenever possible. </span><span class="koboSpan" id="kobo.167.4" xmlns="http://www.w3.org/1999/xhtml">In the actual implementation, DI is the technique that we use frequently to apply the idea of </span><span class="No-Break"><span class="koboSpan" id="kobo.168.1" xmlns="http://www.w3.org/1999/xhtml">dependency inversion.</span></span></p>
<h1 id="_idParaDest-121"><a id="_idTextAnchor134"/><span class="koboSpan" id="kobo.169.1" xmlns="http://www.w3.org/1999/xhtml">Using DI</span></h1>
<p><span class="koboSpan" id="kobo.170.1" xmlns="http://www.w3.org/1999/xhtml">DI is one of</span><a id="_idIndexMarker400"/><span class="koboSpan" id="kobo.171.1" xmlns="http://www.w3.org/1999/xhtml"> the tools that we can use in .NET MAUI. </span><span class="koboSpan" id="kobo.171.2" xmlns="http://www.w3.org/1999/xhtml">It is actually not something new, and it has been used heavily in backend frameworks such as ASP.NET Core or the Java Spring Framework. </span><span class="koboSpan" id="kobo.171.3" xmlns="http://www.w3.org/1999/xhtml">DI is a technique for achieving dependency inversion (DIP). </span><span class="koboSpan" id="kobo.171.4" xmlns="http://www.w3.org/1999/xhtml">It can help to decouple the usage of an object from its creation so that we don’t have to depend on the object we use directly. </span><span class="koboSpan" id="kobo.171.5" xmlns="http://www.w3.org/1999/xhtml">In our app, after we decouple the implementation of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.172.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.173.1" xmlns="http://www.w3.org/1999/xhtml"> interface, we can start with a mock implementation first and replace it with the actual </span><span class="No-Break"><span class="koboSpan" id="kobo.174.1" xmlns="http://www.w3.org/1999/xhtml">implementation later.</span></span></p>
<p><span class="koboSpan" id="kobo.175.1" xmlns="http://www.w3.org/1999/xhtml">In .NET MAUI, </span><strong class="source-inline"><span class="koboSpan" id="kobo.176.1" xmlns="http://www.w3.org/1999/xhtml">Microsoft.Extensions.DependencyInjection</span></strong><span class="koboSpan" id="kobo.177.1" xmlns="http://www.w3.org/1999/xhtml">—or MS.DI, as we shorten the name in this chapter—is a built-in service that we can </span><span class="No-Break"><span class="koboSpan" id="kobo.178.1" xmlns="http://www.w3.org/1999/xhtml">use directly.</span></span></p>
<p><span class="koboSpan" id="kobo.179.1" xmlns="http://www.w3.org/1999/xhtml">In the .NET world, there </span><a id="_idIndexMarker401"/><span class="koboSpan" id="kobo.180.1" xmlns="http://www.w3.org/1999/xhtml">are many DI containers available other than MS.DI. </span><span class="koboSpan" id="kobo.180.2" xmlns="http://www.w3.org/1999/xhtml">They may be more powerful and flexible than MS.DI, such as the Autofac DI container or the Simple Injector DI container, and so on. </span><span class="koboSpan" id="kobo.180.3" xmlns="http://www.w3.org/1999/xhtml">Then, why do we choose MS.DI instead of other powerful and flexible DI containers? </span><span class="koboSpan" id="kobo.180.4" xmlns="http://www.w3.org/1999/xhtml">Here, we may want to think about KISS and YAGNI principles again. </span><span class="koboSpan" id="kobo.180.5" xmlns="http://www.w3.org/1999/xhtml">We should not choose a more powerful solution by assuming that we may use some features in the future. </span><span class="koboSpan" id="kobo.180.6" xmlns="http://www.w3.org/1999/xhtml">The simplest and easiest solution is to use what we already have without any extra effect. </span><span class="koboSpan" id="kobo.180.7" xmlns="http://www.w3.org/1999/xhtml">With MS.DI, we don’t have to involve any extra dependencies. </span><span class="koboSpan" id="kobo.180.8" xmlns="http://www.w3.org/1999/xhtml">Irrespective of whether we want to use it or not, it is already there in the configuration of .NET MAUI. </span><span class="koboSpan" id="kobo.180.9" xmlns="http://www.w3.org/1999/xhtml">We can just add a few lines of code to make our design better. </span><span class="koboSpan" id="kobo.180.10" xmlns="http://www.w3.org/1999/xhtml">For other DI containers, it may be better at imagining the future, but we have to introduce additional dependencies and do the necessary configuration in our code before we can really use them. </span><span class="koboSpan" id="kobo.180.11" xmlns="http://www.w3.org/1999/xhtml">If you are working on a complex system design, you may want to evaluate the available DI containers and choose the right one for your system. </span><span class="koboSpan" id="kobo.180.12" xmlns="http://www.w3.org/1999/xhtml">For our case, </span><strong class="source-inline"><span class="koboSpan" id="kobo.181.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.182.1" xmlns="http://www.w3.org/1999/xhtml"> is a relatively simple app, and we won’t benefit directly from the advanced DI features provided by Autofac or Simple Injector. </span><span class="koboSpan" id="kobo.182.2" xmlns="http://www.w3.org/1999/xhtml">The functionalities provided by MS.DI are sufficient for </span><span class="No-Break"><span class="koboSpan" id="kobo.183.1" xmlns="http://www.w3.org/1999/xhtml">our implementation.</span></span></p>
<p><span class="koboSpan" id="kobo.184.1" xmlns="http://www.w3.org/1999/xhtml">Before we move to the topic of DI, let’s look at our current implementation first. </span><span class="koboSpan" id="kobo.184.2" xmlns="http://www.w3.org/1999/xhtml">Instead of using DI, we are using </span><strong class="bold"><span class="koboSpan" id="kobo.185.1" xmlns="http://www.w3.org/1999/xhtml">DependencyService</span></strong><span class="koboSpan" id="kobo.186.1" xmlns="http://www.w3.org/1999/xhtml"> from Xamarin.Forms in our app to decouple the interface and its implementation. </span><span class="koboSpan" id="kobo.186.2" xmlns="http://www.w3.org/1999/xhtml">We will refine our code to replace </span><strong class="source-inline"><span class="koboSpan" id="kobo.187.1" xmlns="http://www.w3.org/1999/xhtml">DependencyService</span></strong><span class="koboSpan" id="kobo.188.1" xmlns="http://www.w3.org/1999/xhtml"> with DI in </span><span class="No-Break"><span class="koboSpan" id="kobo.189.1" xmlns="http://www.w3.org/1999/xhtml">this chapter.</span></span></p>
<h2 id="_idParaDest-122"><a id="_idTextAnchor135"/><span class="koboSpan" id="kobo.190.1" xmlns="http://www.w3.org/1999/xhtml">Dependency Service</span></h2>
<p><span class="koboSpan" id="kobo.191.1" xmlns="http://www.w3.org/1999/xhtml">In </span><a href="B16588_02.xhtml#_idTextAnchor041"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.192.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 2</span></em></span></a><span class="koboSpan" id="kobo.193.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.194.1" xmlns="http://www.w3.org/1999/xhtml">Building Our First .NET MAUI App</span></em><span class="koboSpan" id="kobo.195.1" xmlns="http://www.w3.org/1999/xhtml">, we created our app from a Xamarin.Forms template</span><a id="_idIndexMarker402"/><span class="koboSpan" id="kobo.196.1" xmlns="http://www.w3.org/1999/xhtml"> and migrated it to .NET MAUI. </span><span class="koboSpan" id="kobo.196.2" xmlns="http://www.w3.org/1999/xhtml">Whatever works in Xamarin.Forms can still work in .NET MAUI, including </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.197.1" xmlns="http://www.w3.org/1999/xhtml">Dependency Service</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.198.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.199.1" xmlns="http://www.w3.org/1999/xhtml">DependencyService</span></strong><span class="koboSpan" id="kobo.200.1" xmlns="http://www.w3.org/1999/xhtml"> is a </span><a id="_idIndexMarker403"/><span class="koboSpan" id="kobo.201.1" xmlns="http://www.w3.org/1999/xhtml">service locator that enables Xamarin.Forms applications to invoke native functionality from shared code, but it can also be used to play a DI container role for simple </span><span class="No-Break"><span class="koboSpan" id="kobo.202.1" xmlns="http://www.w3.org/1999/xhtml">use cases.</span></span></p>
<p><span class="koboSpan" id="kobo.203.1" xmlns="http://www.w3.org/1999/xhtml">The module that we want to decouple in our app is the model layer, which is a third-party library from KeePass. </span><span class="koboSpan" id="kobo.203.2" xmlns="http://www.w3.org/1999/xhtml">As we can see in the package diagram in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.204.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><em class="italic"><span class="koboSpan" id="kobo.205.1" xmlns="http://www.w3.org/1999/xhtml">.2</span></em><span class="koboSpan" id="kobo.206.1" xmlns="http://www.w3.org/1999/xhtml">, our system includes three separate assemblies: </span><strong class="source-inline"><span class="koboSpan" id="kobo.207.1" xmlns="http://www.w3.org/1999/xhtml">KPCLib</span></strong><span class="koboSpan" id="kobo.208.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.209.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZLib</span></strong><span class="koboSpan" id="kobo.210.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="No-Break"><span class="koboSpan" id="kobo.211.1" xmlns="http://www.w3.org/1999/xhtml">and </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.212.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.213.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer070">
<span class="koboSpan" id="kobo.214.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 6.2: Package diagram" src="image/Figure_6.02_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.215.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6.2: Package diagram</span></p>
<p><span class="koboSpan" id="kobo.216.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.217.1" xmlns="http://www.w3.org/1999/xhtml">KPCLib</span></strong><span class="koboSpan" id="kobo.218.1" xmlns="http://www.w3.org/1999/xhtml"> package</span><a id="_idIndexMarker404"/><span class="koboSpan" id="kobo.219.1" xmlns="http://www.w3.org/1999/xhtml"> includes two </span><a id="_idIndexMarker405"/><span class="koboSpan" id="kobo.220.1" xmlns="http://www.w3.org/1999/xhtml">namespaces, </span><strong class="source-inline"><span class="koboSpan" id="kobo.221.1" xmlns="http://www.w3.org/1999/xhtml">KeePassLib</span></strong><span class="koboSpan" id="kobo.222.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.223.1" xmlns="http://www.w3.org/1999/xhtml">KPCLib</span></strong><span class="koboSpan" id="kobo.224.1" xmlns="http://www.w3.org/1999/xhtml">. </span><strong class="source-inline"><span class="koboSpan" id="kobo.225.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZLib</span></strong><span class="koboSpan" id="kobo.226.1" xmlns="http://www.w3.org/1999/xhtml"> is a </span><a id="_idIndexMarker406"/><span class="koboSpan" id="kobo.227.1" xmlns="http://www.w3.org/1999/xhtml">package to extend the functionality of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.228.1" xmlns="http://www.w3.org/1999/xhtml">KPCLib</span></strong><span class="koboSpan" id="kobo.229.1" xmlns="http://www.w3.org/1999/xhtml"> package with .NET MAUI-specific implementation. </span><strong class="source-inline"><span class="koboSpan" id="kobo.230.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.231.1" xmlns="http://www.w3.org/1999/xhtml"> is</span><a id="_idIndexMarker407"/><span class="koboSpan" id="kobo.232.1" xmlns="http://www.w3.org/1999/xhtml"> our app that depends on the </span><strong class="source-inline"><span class="koboSpan" id="kobo.233.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZLib</span></strong><span class="koboSpan" id="kobo.234.1" xmlns="http://www.w3.org/1999/xhtml"> package directly and depends on the </span><strong class="source-inline"><span class="koboSpan" id="kobo.235.1" xmlns="http://www.w3.org/1999/xhtml">KPCLib</span></strong><span class="koboSpan" id="kobo.236.1" xmlns="http://www.w3.org/1999/xhtml"> package indirectly. </span><span class="koboSpan" id="kobo.236.2" xmlns="http://www.w3.org/1999/xhtml">According to the DI principle, we want to create dependencies on abstractions rather than actual implementations. </span><span class="koboSpan" id="kobo.236.3" xmlns="http://www.w3.org/1999/xhtml">We created two interfaces, </span><strong class="source-inline"><span class="koboSpan" id="kobo.237.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.238.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.239.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.240.1" xmlns="http://www.w3.org/1999/xhtml">, which we can use to decouple from the </span><span class="No-Break"><span class="koboSpan" id="kobo.241.1" xmlns="http://www.w3.org/1999/xhtml">actual implementations.</span></span></p>
<p><span class="koboSpan" id="kobo.242.1" xmlns="http://www.w3.org/1999/xhtml">Using </span><strong class="source-inline"><span class="koboSpan" id="kobo.243.1" xmlns="http://www.w3.org/1999/xhtml">DependencyService</span></strong><span class="koboSpan" id="kobo.244.1" xmlns="http://www.w3.org/1999/xhtml"> includes two steps—registration and resolution. </span><span class="koboSpan" id="kobo.244.2" xmlns="http://www.w3.org/1999/xhtml">Let’s look at this in </span><span class="No-Break"><span class="koboSpan" id="kobo.245.1" xmlns="http://www.w3.org/1999/xhtml">more detail:</span></span></p>
<ol>
<li><strong class="bold"><span class="koboSpan" id="kobo.246.1" xmlns="http://www.w3.org/1999/xhtml">Registering </span></strong><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.247.1" xmlns="http://www.w3.org/1999/xhtml">a service</span></strong></span></li>
</ol>
<p><span class="koboSpan" id="kobo.248.1" xmlns="http://www.w3.org/1999/xhtml">We need to</span><a id="_idIndexMarker408"/><span class="koboSpan" id="kobo.249.1" xmlns="http://www.w3.org/1999/xhtml"> register the </span><strong class="source-inline"><span class="koboSpan" id="kobo.250.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.251.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.252.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.253.1" xmlns="http://www.w3.org/1999/xhtml"> interfaces first before can we use them. </span><span class="koboSpan" id="kobo.253.2" xmlns="http://www.w3.org/1999/xhtml">In the current code, they are registered in the constructor of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.254.1" xmlns="http://www.w3.org/1999/xhtml">App</span></strong><span class="koboSpan" id="kobo.255.1" xmlns="http://www.w3.org/1999/xhtml"> class, as </span><span class="No-Break"><span class="koboSpan" id="kobo.256.1" xmlns="http://www.w3.org/1999/xhtml">shown here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.257.1" xmlns="http://www.w3.org/1999/xhtml">
DependencyService.Register&lt;MockDataStore&gt;();
DependencyService.Register&lt;UserService&gt;();</span></pre>
<p><span class="koboSpan" id="kobo.258.1" xmlns="http://www.w3.org/1999/xhtml">We can use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.259.1" xmlns="http://www.w3.org/1999/xhtml">Register()</span></strong><span class="koboSpan" id="kobo.260.1" xmlns="http://www.w3.org/1999/xhtml"> method of </span><strong class="source-inline"><span class="koboSpan" id="kobo.261.1" xmlns="http://www.w3.org/1999/xhtml">Dependency Service</span></strong><span class="koboSpan" id="kobo.262.1" xmlns="http://www.w3.org/1999/xhtml"> to register the implementation of services. </span><span class="koboSpan" id="kobo.262.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.263.1" xmlns="http://www.w3.org/1999/xhtml">MockDataStore</span></strong><span class="koboSpan" id="kobo.264.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.265.1" xmlns="http://www.w3.org/1999/xhtml">UserService</span></strong><span class="koboSpan" id="kobo.266.1" xmlns="http://www.w3.org/1999/xhtml"> classes implement </span><strong class="source-inline"><span class="koboSpan" id="kobo.267.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.268.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.269.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.270.1" xmlns="http://www.w3.org/1999/xhtml"> interfaces. </span><strong class="source-inline"><span class="koboSpan" id="kobo.271.1" xmlns="http://www.w3.org/1999/xhtml">MockDataStore</span></strong><span class="koboSpan" id="kobo.272.1" xmlns="http://www.w3.org/1999/xhtml"> is not the actual implementation, and it is used for testing purposes only. </span><span class="koboSpan" id="kobo.272.2" xmlns="http://www.w3.org/1999/xhtml">We will replace it with the actual implementation later in this chapter. </span><span class="koboSpan" id="kobo.272.3" xmlns="http://www.w3.org/1999/xhtml">This is one of the benefits that we can see after we decouple from the </span><span class="No-Break"><span class="koboSpan" id="kobo.273.1" xmlns="http://www.w3.org/1999/xhtml">actual implementation.</span></span></p>
<ol>
<li value="2"><strong class="bold"><span class="koboSpan" id="kobo.274.1" xmlns="http://www.w3.org/1999/xhtml">Resolving </span></strong><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.275.1" xmlns="http://www.w3.org/1999/xhtml">a service</span></strong></span></li>
</ol>
<p><span class="koboSpan" id="kobo.276.1" xmlns="http://www.w3.org/1999/xhtml">To resolve</span><a id="_idIndexMarker409"/><span class="koboSpan" id="kobo.277.1" xmlns="http://www.w3.org/1999/xhtml"> the dependency </span><a id="_idIndexMarker410"/><span class="koboSpan" id="kobo.278.1" xmlns="http://www.w3.org/1999/xhtml">in our code, we defined a </span><strong class="source-inline"><span class="koboSpan" id="kobo.279.1" xmlns="http://www.w3.org/1999/xhtml">DataStore</span></strong><span class="koboSpan" id="kobo.280.1" xmlns="http://www.w3.org/1999/xhtml"> public property of type </span><strong class="source-inline"><span class="koboSpan" id="kobo.281.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.282.1" xmlns="http://www.w3.org/1999/xhtml"> in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.283.1" xmlns="http://www.w3.org/1999/xhtml">BaseViewModel</span></strong><span class="koboSpan" id="kobo.284.1" xmlns="http://www.w3.org/1999/xhtml"> class, as </span><span class="No-Break"><span class="koboSpan" id="kobo.285.1" xmlns="http://www.w3.org/1999/xhtml">shown here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.286.1" xmlns="http://www.w3.org/1999/xhtml">
public static IDataStore&lt;Item&gt; DataStore =&gt;
    DependencyService.Get&lt;IDataStore&lt;Item&gt;&gt;();</span></pre>
<p><span class="koboSpan" id="kobo.287.1" xmlns="http://www.w3.org/1999/xhtml">We can use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.288.1" xmlns="http://www.w3.org/1999/xhtml">Get()</span></strong><span class="koboSpan" id="kobo.289.1" xmlns="http://www.w3.org/1999/xhtml"> method of </span><strong class="source-inline"><span class="koboSpan" id="kobo.290.1" xmlns="http://www.w3.org/1999/xhtml">DependencyService</span></strong><span class="koboSpan" id="kobo.291.1" xmlns="http://www.w3.org/1999/xhtml"> to resolve the dependency. </span><span class="koboSpan" id="kobo.291.2" xmlns="http://www.w3.org/1999/xhtml">Since </span><strong class="source-inline"><span class="koboSpan" id="kobo.292.1" xmlns="http://www.w3.org/1999/xhtml">BaseViewModel</span></strong><span class="koboSpan" id="kobo.293.1" xmlns="http://www.w3.org/1999/xhtml"> is the parent class of all other view models, we can access the </span><strong class="source-inline"><span class="koboSpan" id="kobo.294.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.295.1" xmlns="http://www.w3.org/1999/xhtml"> interface in all view models with </span><span class="No-Break"><span class="koboSpan" id="kobo.296.1" xmlns="http://www.w3.org/1999/xhtml">this setup.</span></span></p>
<p><span class="koboSpan" id="kobo.297.1" xmlns="http://www.w3.org/1999/xhtml">For the </span><strong class="source-inline"><span class="koboSpan" id="kobo.298.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.299.1" xmlns="http://www.w3.org/1999/xhtml"> interface, we created a </span><strong class="source-inline"><span class="koboSpan" id="kobo.300.1" xmlns="http://www.w3.org/1999/xhtml">LoginUser</span></strong><span class="koboSpan" id="kobo.301.1" xmlns="http://www.w3.org/1999/xhtml"> singleton class and defined a </span><strong class="source-inline"><span class="koboSpan" id="kobo.302.1" xmlns="http://www.w3.org/1999/xhtml">UserService</span></strong><span class="koboSpan" id="kobo.303.1" xmlns="http://www.w3.org/1999/xhtml"> public property in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.304.1" xmlns="http://www.w3.org/1999/xhtml">LoginUser</span></strong><span class="koboSpan" id="kobo.305.1" xmlns="http://www.w3.org/1999/xhtml"> class, as </span><span class="No-Break"><span class="koboSpan" id="kobo.306.1" xmlns="http://www.w3.org/1999/xhtml">shown here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.307.1" xmlns="http://www.w3.org/1999/xhtml">
public static IUserService&lt;User&gt; UserService =&gt;
    DependencyService.Get&lt;IUserService&lt;User&gt;&gt;();</span></pre>
<p><span class="koboSpan" id="kobo.308.1" xmlns="http://www.w3.org/1999/xhtml">This is the current implementation of </span><strong class="source-inline"><span class="koboSpan" id="kobo.309.1" xmlns="http://www.w3.org/1999/xhtml">DependencyService</span></strong><span class="koboSpan" id="kobo.310.1" xmlns="http://www.w3.org/1999/xhtml"> in our app. </span><span class="koboSpan" id="kobo.310.2" xmlns="http://www.w3.org/1999/xhtml">Let’s replace it with DI </span><a id="_idTextAnchor136"/><span class="koboSpan" id="kobo.311.1" xmlns="http://www.w3.org/1999/xhtml">supported </span><span class="No-Break"><span class="koboSpan" id="kobo.312.1" xmlns="http://www.w3.org/1999/xhtml">in MS.DI.</span></span></p>
<h2 id="_idParaDest-123"><a id="_idTextAnchor137"/><span class="koboSpan" id="kobo.313.1" xmlns="http://www.w3.org/1999/xhtml">Using built-in MS.DI DI service</span></h2>
<p><span class="koboSpan" id="kobo.314.1" xmlns="http://www.w3.org/1999/xhtml">To use </span><a id="_idIndexMarker411"/><span class="koboSpan" id="kobo.315.1" xmlns="http://www.w3.org/1999/xhtml">MS.DI as a DI service, the </span><a id="_idIndexMarker412"/><span class="koboSpan" id="kobo.316.1" xmlns="http://www.w3.org/1999/xhtml">usage is similar to </span><strong class="source-inline"><span class="koboSpan" id="kobo.317.1" xmlns="http://www.w3.org/1999/xhtml">DependencyService</span></strong><span class="koboSpan" id="kobo.318.1" xmlns="http://www.w3.org/1999/xhtml">, which includes two steps—registration and resolution. </span><span class="koboSpan" id="kobo.318.2" xmlns="http://www.w3.org/1999/xhtml">We can use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.319.1" xmlns="http://www.w3.org/1999/xhtml">ServiceCollection</span></strong><span class="koboSpan" id="kobo.320.1" xmlns="http://www.w3.org/1999/xhtml"> class for the registration and the </span><strong class="source-inline"><span class="koboSpan" id="kobo.321.1" xmlns="http://www.w3.org/1999/xhtml">ServiceProvider</span></strong><span class="koboSpan" id="kobo.322.1" xmlns="http://www.w3.org/1999/xhtml"> class for the resolution, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.323.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.324.1" xmlns="http://www.w3.org/1999/xhtml">.3</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.325.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer071">
<span class="koboSpan" id="kobo.326.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 6.3: Usage of MS.DI" src="image/Figure_6.03_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.327.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6.3: Usage of MS.DI</span></p>
<p><span class="koboSpan" id="kobo.328.1" xmlns="http://www.w3.org/1999/xhtml">If we want to use DI to resolve the </span><strong class="source-inline"><span class="koboSpan" id="kobo.329.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.330.1" xmlns="http://www.w3.org/1999/xhtml"> service, we can use the steps in the following </span><span class="No-Break"><span class="koboSpan" id="kobo.331.1" xmlns="http://www.w3.org/1999/xhtml">code block:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.332.1" xmlns="http://www.w3.org/1999/xhtml">
// Registration
var services = new ServiceCollection();                   ❶
services.AddSingleton &lt;IDataStore&lt;Item&gt;, MockDataStore&gt;();❷
// Resolution
ServiceProvider provider =
    services.BuildServiceProvider(validateScopes: true);  ❸
IDataStore&lt;Item&gt; dataStore =
    provider.GetRequiredService&lt;IDataStore&lt;Item&gt;&gt;();      ❹</span></pre>
<p><span class="koboSpan" id="kobo.333.1" xmlns="http://www.w3.org/1999/xhtml">❶We</span><a id="_idIndexMarker413"/><span class="koboSpan" id="kobo.334.1" xmlns="http://www.w3.org/1999/xhtml"> need to create an instance of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.335.1" xmlns="http://www.w3.org/1999/xhtml">ServiceCollection</span></strong><span class="koboSpan" id="kobo.336.1" xmlns="http://www.w3.org/1999/xhtml"> class first.  </span><strong class="source-inline"><span class="koboSpan" id="kobo.337.1" xmlns="http://www.w3.org/1999/xhtml">ServiceCollection</span></strong><span class="koboSpan" id="kobo.338.1" xmlns="http://www.w3.org/1999/xhtml"> implements the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.339.1" xmlns="http://www.w3.org/1999/xhtml">IServiceCollection</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.340.1" xmlns="http://www.w3.org/1999/xhtml"> interface.</span></span></p>
<p><span class="koboSpan" id="kobo.341.1" xmlns="http://www.w3.org/1999/xhtml">❷ The </span><strong class="source-inline"><span class="koboSpan" id="kobo.342.1" xmlns="http://www.w3.org/1999/xhtml">IServiceCollection</span></strong><span class="koboSpan" id="kobo.343.1" xmlns="http://www.w3.org/1999/xhtml"> interface itself does not define any method directly. </span><span class="koboSpan" id="kobo.343.2" xmlns="http://www.w3.org/1999/xhtml">There are</span><a id="_idIndexMarker414"/><span class="koboSpan" id="kobo.344.1" xmlns="http://www.w3.org/1999/xhtml"> a set of extension methods defined in MS.DI. </span><span class="koboSpan" id="kobo.344.2" xmlns="http://www.w3.org/1999/xhtml">We can use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.345.1" xmlns="http://www.w3.org/1999/xhtml">AddSingleton()</span></strong><span class="koboSpan" id="kobo.346.1" xmlns="http://www.w3.org/1999/xhtml"> extension method to register the concrete </span><strong class="source-inline"><span class="koboSpan" id="kobo.347.1" xmlns="http://www.w3.org/1999/xhtml">MockDataStore</span></strong><span class="koboSpan" id="kobo.348.1" xmlns="http://www.w3.org/1999/xhtml"> class for the </span><strong class="source-inline"><span class="koboSpan" id="kobo.349.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.350.1" xmlns="http://www.w3.org/1999/xhtml"> abstraction. </span><span class="koboSpan" id="kobo.350.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.351.1" xmlns="http://www.w3.org/1999/xhtml">AddSingleton()</span></strong><span class="koboSpan" id="kobo.352.1" xmlns="http://www.w3.org/1999/xhtml"> method can use a generic type to define the interface and the implementation. </span><span class="koboSpan" id="kobo.352.2" xmlns="http://www.w3.org/1999/xhtml">There are multiple overloaded versions of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.353.1" xmlns="http://www.w3.org/1999/xhtml">AddSingleton()</span></strong><span class="koboSpan" id="kobo.354.1" xmlns="http://www.w3.org/1999/xhtml"> extension </span><span class="No-Break"><span class="koboSpan" id="kobo.355.1" xmlns="http://www.w3.org/1999/xhtml">method available.</span></span></p>
<p><span class="koboSpan" id="kobo.356.1" xmlns="http://www.w3.org/1999/xhtml">❸ To resolve objects, we can get an instance of </span><strong class="source-inline"><span class="koboSpan" id="kobo.357.1" xmlns="http://www.w3.org/1999/xhtml">ServiceProvider</span></strong><span class="koboSpan" id="kobo.358.1" xmlns="http://www.w3.org/1999/xhtml"> by calling the </span><strong class="source-inline"><span class="koboSpan" id="kobo.359.1" xmlns="http://www.w3.org/1999/xhtml">BuildServiceProvider()</span></strong><span class="koboSpan" id="kobo.360.1" xmlns="http://www.w3.org/1999/xhtml"> extension method of </span><strong class="source-inline"><span class="koboSpan" id="kobo.361.1" xmlns="http://www.w3.org/1999/xhtml">IServiceCollection</span></strong><span class="koboSpan" id="kobo.362.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.362.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.363.1" xmlns="http://www.w3.org/1999/xhtml">ServiceProvider</span></strong><span class="koboSpan" id="kobo.364.1" xmlns="http://www.w3.org/1999/xhtml"> class implements the </span><strong class="source-inline"><span class="koboSpan" id="kobo.365.1" xmlns="http://www.w3.org/1999/xhtml">IServiceProvider</span></strong><span class="koboSpan" id="kobo.366.1" xmlns="http://www.w3.org/1999/xhtml"> interface. </span><span class="koboSpan" id="kobo.366.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.367.1" xmlns="http://www.w3.org/1999/xhtml">IServiceProvider</span></strong><span class="koboSpan" id="kobo.368.1" xmlns="http://www.w3.org/1999/xhtml"> interface is defined in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.369.1" xmlns="http://www.w3.org/1999/xhtml">System</span></strong><span class="koboSpan" id="kobo.370.1" xmlns="http://www.w3.org/1999/xhtml"> namespace and it defines only one method, </span><strong class="source-inline"><span class="koboSpan" id="kobo.371.1" xmlns="http://www.w3.org/1999/xhtml">GetService()</span></strong><span class="koboSpan" id="kobo.372.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.372.2" xmlns="http://www.w3.org/1999/xhtml">The rest of the methods are extension methods defined in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.373.1" xmlns="http://www.w3.org/1999/xhtml">Microsoft.Extensions.DependencyInjection</span></strong><span class="koboSpan" id="kobo.374.1" xmlns="http://www.w3.org/1999/xhtml"> namespace, as we can see in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.375.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.376.1" xmlns="http://www.w3.org/1999/xhtml">.3</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.377.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.378.1" xmlns="http://www.w3.org/1999/xhtml">❹ Once we have an instance of </span><strong class="source-inline"><span class="koboSpan" id="kobo.379.1" xmlns="http://www.w3.org/1999/xhtml">ServiceProvider</span></strong><span class="koboSpan" id="kobo.380.1" xmlns="http://www.w3.org/1999/xhtml">, we can resolve the </span><strong class="source-inline"><span class="koboSpan" id="kobo.381.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.382.1" xmlns="http://www.w3.org/1999/xhtml"> interface using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.383.1" xmlns="http://www.w3.org/1999/xhtml">GetRequiredService</span></strong><strong class="source-inline"><span class="koboSpan" id="kobo.384.1" xmlns="http://www.w3.org/1999/xhtml">()</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.385.1" xmlns="http://www.w3.org/1999/xhtml">extension method.</span></span></p>
<p><span class="koboSpan" id="kobo.386.1" xmlns="http://www.w3.org/1999/xhtml">Even though MS.DI is a lightweight DI service, it provides enough features for .NET MAUI applications, as set </span><span class="No-Break"><span class="koboSpan" id="kobo.387.1" xmlns="http://www.w3.org/1999/xhtml">out here:</span></span></p>
<ul>
<li><span class="koboSpan" id="kobo.388.1" xmlns="http://www.w3.org/1999/xhtml">Lifetime management </span><span class="No-Break"><span class="koboSpan" id="kobo.389.1" xmlns="http://www.w3.org/1999/xhtml">of instances</span></span></li>
<li><span class="koboSpan" id="kobo.390.1" xmlns="http://www.w3.org/1999/xhtml">Constructor, method, and </span><span class="No-Break"><span class="koboSpan" id="kobo.391.1" xmlns="http://www.w3.org/1999/xhtml">property injections</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.392.1" xmlns="http://www.w3.org/1999/xhtml">Let’s explore these features in the </span><span class="No-Break"><span class="koboSpan" id="kobo.393.1" xmlns="http://www.w3.org/1999/xhtml">next sections.</span></span></p>
<h3><span class="koboSpan" id="kobo.394.1" xmlns="http://www.w3.org/1999/xhtml">Lifetime management</span></h3>
<p><span class="koboSpan" id="kobo.395.1" xmlns="http://www.w3.org/1999/xhtml">We can</span><a id="_idIndexMarker415"/><span class="koboSpan" id="kobo.396.1" xmlns="http://www.w3.org/1999/xhtml"> manage</span><a id="_idIndexMarker416"/><span class="koboSpan" id="kobo.397.1" xmlns="http://www.w3.org/1999/xhtml"> the lifetime of instances by </span><span class="No-Break"><span class="koboSpan" id="kobo.398.1" xmlns="http://www.w3.org/1999/xhtml">configuring </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.399.1" xmlns="http://www.w3.org/1999/xhtml">ServiceCollection</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.400.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.401.1" xmlns="http://www.w3.org/1999/xhtml">To configure </span><strong class="source-inline"><span class="koboSpan" id="kobo.402.1" xmlns="http://www.w3.org/1999/xhtml">ServiceCollection</span></strong><span class="koboSpan" id="kobo.403.1" xmlns="http://www.w3.org/1999/xhtml">, we can use the following three </span><span class="No-Break"><span class="koboSpan" id="kobo.404.1" xmlns="http://www.w3.org/1999/xhtml">extension methods:</span></span></p>
<ul>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.405.1" xmlns="http://www.w3.org/1999/xhtml">AddSingleton</span></strong><span class="koboSpan" id="kobo.406.1" xmlns="http://www.w3.org/1999/xhtml">—This</span><a id="_idIndexMarker417"/><span class="koboSpan" id="kobo.407.1" xmlns="http://www.w3.org/1999/xhtml"> method creates a single instance throughout the life of the application. </span><span class="koboSpan" id="kobo.407.2" xmlns="http://www.w3.org/1999/xhtml">It creates an instance for the first time and reuses it in the </span><span class="No-Break"><span class="koboSpan" id="kobo.408.1" xmlns="http://www.w3.org/1999/xhtml">following calls.</span></span></li>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.409.1" xmlns="http://www.w3.org/1999/xhtml">AddTransient</span></strong><span class="koboSpan" id="kobo.410.1" xmlns="http://www.w3.org/1999/xhtml">—This</span><a id="_idIndexMarker418"/><span class="koboSpan" id="kobo.411.1" xmlns="http://www.w3.org/1999/xhtml"> method creates an instance for each call. </span><span class="koboSpan" id="kobo.411.2" xmlns="http://www.w3.org/1999/xhtml">The lifetime of the instance depends on the scope of the </span><span class="No-Break"><span class="koboSpan" id="kobo.412.1" xmlns="http://www.w3.org/1999/xhtml">programming logic.</span></span></li>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.413.1" xmlns="http://www.w3.org/1999/xhtml">AddScoped</span></strong><span class="koboSpan" id="kobo.414.1" xmlns="http://www.w3.org/1999/xhtml">—The lifetime</span><a id="_idIndexMarker419"/><span class="koboSpan" id="kobo.415.1" xmlns="http://www.w3.org/1999/xhtml"> of the instance resolved by this method is within the scope defined by the design. </span><span class="koboSpan" id="kobo.415.2" xmlns="http://www.w3.org/1999/xhtml">It creates one instance and reuses the same instance within the defined scope. </span><span class="koboSpan" id="kobo.415.3" xmlns="http://www.w3.org/1999/xhtml">In ASP.NET, we can define the scope as the session of each </span><span class="No-Break"><span class="koboSpan" id="kobo.416.1" xmlns="http://www.w3.org/1999/xhtml">HTTP request.</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.417.1" xmlns="http://www.w3.org/1999/xhtml">To explain the lifetime management of MS.DI, we can review the following code snippet, together with </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.418.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.419.1" xmlns="http://www.w3.org/1999/xhtml">.4</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.420.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.421.1" xmlns="http://www.w3.org/1999/xhtml">
var services = new ServiceCollection();
services.AddSingleton&lt; IUserService&lt;User&gt;, UserService&gt;();❶
services.AddScoped&lt;IDataStore&lt;Item&gt;, DataStore&gt;();        ❶
services.AddTransient&lt;ItemsViewModel&gt;();                  ❶
ServiceProvider rootContainer =
    services.BuildServiceProvider(validateScopes: true);  ❷
var userService =
    rootContainer.GetRequiredService&lt;IUserService&lt;User&gt;&gt;();
IServiceScope scope1 = rootContainer.CreateScope();       ❸
  IDataStore&lt;Item&gt; dataStore1 =
    scope1.ServiceProvider.GetRequiredService&lt;IDataStore&lt;Item&gt;&gt;
    ();
IServiceScope scope2 = rootContainer.CreateScope();       ❸
IDataStore&lt;Item&gt; dataStore2 =    Scope2.ServiceProvider.  </span><span class="koboSpan" id="kobo.421.2" xmlns="http://www.w3.org/1999/xhtml">GetRequiredService&lt;IDataStore&lt;Item&gt;&gt;
    ();</span></pre>
<p><span class="koboSpan" id="kobo.422.1" xmlns="http://www.w3.org/1999/xhtml">In</span><a id="_idIndexMarker420"/><span class="koboSpan" id="kobo.423.1" xmlns="http://www.w3.org/1999/xhtml"> the </span><a id="_idIndexMarker421"/><span class="koboSpan" id="kobo.424.1" xmlns="http://www.w3.org/1999/xhtml">preceding code, ❶ we registered </span><strong class="source-inline"><span class="koboSpan" id="kobo.425.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.426.1" xmlns="http://www.w3.org/1999/xhtml"> as a </span><strong class="source-inline"><span class="koboSpan" id="kobo.427.1" xmlns="http://www.w3.org/1999/xhtml">Singleton</span></strong><span class="koboSpan" id="kobo.428.1" xmlns="http://www.w3.org/1999/xhtml"> object, </span><strong class="source-inline"><span class="koboSpan" id="kobo.429.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.430.1" xmlns="http://www.w3.org/1999/xhtml"> as a </span><strong class="source-inline"><span class="koboSpan" id="kobo.431.1" xmlns="http://www.w3.org/1999/xhtml">Scoped</span></strong><span class="koboSpan" id="kobo.432.1" xmlns="http://www.w3.org/1999/xhtml"> object, and </span><strong class="source-inline"><span class="koboSpan" id="kobo.433.1" xmlns="http://www.w3.org/1999/xhtml">ItemsViewModel</span></strong><span class="koboSpan" id="kobo.434.1" xmlns="http://www.w3.org/1999/xhtml"> as a </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.435.1" xmlns="http://www.w3.org/1999/xhtml">Transient</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.436.1" xmlns="http://www.w3.org/1999/xhtml"> object.</span></span></p>
<p><span class="koboSpan" id="kobo.437.1" xmlns="http://www.w3.org/1999/xhtml">After the registration, ❷ we created a </span><strong class="source-inline"><span class="koboSpan" id="kobo.438.1" xmlns="http://www.w3.org/1999/xhtml">ServiceProvider</span></strong><span class="koboSpan" id="kobo.439.1" xmlns="http://www.w3.org/1999/xhtml"> instance and stored it in a </span><strong class="source-inline"><span class="koboSpan" id="kobo.440.1" xmlns="http://www.w3.org/1999/xhtml">rootContainer</span></strong><span class="koboSpan" id="kobo.441.1" xmlns="http://www.w3.org/1999/xhtml"> variable. </span><span class="koboSpan" id="kobo.441.2" xmlns="http://www.w3.org/1999/xhtml">❸ We created two scopes, </span><strong class="source-inline"><span class="koboSpan" id="kobo.442.1" xmlns="http://www.w3.org/1999/xhtml">scope1</span></strong><span class="koboSpan" id="kobo.443.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.444.1" xmlns="http://www.w3.org/1999/xhtml">scope2</span></strong><span class="koboSpan" id="kobo.445.1" xmlns="http://www.w3.org/1999/xhtml">, using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.446.1" xmlns="http://www.w3.org/1999/xhtml">rootContainer</span></strong><span class="koboSpan" id="kobo.447.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.447.2" xmlns="http://www.w3.org/1999/xhtml">We can review the lifetime management of the created objects in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.448.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.449.1" xmlns="http://www.w3.org/1999/xhtml">.4</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.450.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer072">
<span class="koboSpan" id="kobo.451.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 6.4: Lifetime management in MS.DI" src="image/Figure_6.04_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.452.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6.4: Lifetime management in MS.DI</span></p>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.453.1" xmlns="http://www.w3.org/1999/xhtml">userService</span></strong><span class="koboSpan" id="kobo.454.1" xmlns="http://www.w3.org/1999/xhtml"> is </span><a id="_idIndexMarker422"/><span class="koboSpan" id="kobo.455.1" xmlns="http://www.w3.org/1999/xhtml">created as a </span><strong class="source-inline"><span class="koboSpan" id="kobo.456.1" xmlns="http://www.w3.org/1999/xhtml">Singleton</span></strong><span class="koboSpan" id="kobo.457.1" xmlns="http://www.w3.org/1999/xhtml"> object, so there is only one instance, and the instance has the same lifetime as the </span><a id="_idIndexMarker423"/><span class="koboSpan" id="kobo.458.1" xmlns="http://www.w3.org/1999/xhtml">application itself. </span><span class="koboSpan" id="kobo.458.2" xmlns="http://www.w3.org/1999/xhtml">The two scopes that are </span><strong class="source-inline"><span class="koboSpan" id="kobo.459.1" xmlns="http://www.w3.org/1999/xhtml">scope1</span></strong><span class="koboSpan" id="kobo.460.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.461.1" xmlns="http://www.w3.org/1999/xhtml">scope2</span></strong><span class="koboSpan" id="kobo.462.1" xmlns="http://www.w3.org/1999/xhtml"> have their own lifetimes that are decided by our design. </span><span class="koboSpan" id="kobo.462.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.463.1" xmlns="http://www.w3.org/1999/xhtml">Scoped</span></strong><span class="koboSpan" id="kobo.464.1" xmlns="http://www.w3.org/1999/xhtml"> objects, </span><strong class="source-inline"><span class="koboSpan" id="kobo.465.1" xmlns="http://www.w3.org/1999/xhtml">dataStore1</span></strong><span class="koboSpan" id="kobo.466.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.467.1" xmlns="http://www.w3.org/1999/xhtml">dataStore2</span></strong><span class="koboSpan" id="kobo.468.1" xmlns="http://www.w3.org/1999/xhtml">, have the same lifetime as the scope to which they belong. </span><span class="koboSpan" id="kobo.468.2" xmlns="http://www.w3.org/1999/xhtml">The instances of </span><strong class="source-inline"><span class="koboSpan" id="kobo.469.1" xmlns="http://www.w3.org/1999/xhtml">ItemViewModel</span></strong><span class="koboSpan" id="kobo.470.1" xmlns="http://www.w3.org/1999/xhtml"> are </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.471.1" xmlns="http://www.w3.org/1999/xhtml">Transient</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.472.1" xmlns="http://www.w3.org/1999/xhtml"> objects.</span></span></p>
<p><span class="koboSpan" id="kobo.473.1" xmlns="http://www.w3.org/1999/xhtml">For each of these three methods, </span><strong class="source-inline"><span class="koboSpan" id="kobo.474.1" xmlns="http://www.w3.org/1999/xhtml">AddSingleton()</span></strong><span class="koboSpan" id="kobo.475.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.476.1" xmlns="http://www.w3.org/1999/xhtml">AddScoped()</span></strong><span class="koboSpan" id="kobo.477.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><strong class="source-inline"><span class="koboSpan" id="kobo.478.1" xmlns="http://www.w3.org/1999/xhtml">AddTransient()</span></strong><span class="koboSpan" id="kobo.479.1" xmlns="http://www.w3.org/1999/xhtml">, multiple overloaded versions are defined to meet various requirements in the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.480.1" xmlns="http://www.w3.org/1999/xhtml">ServiceCollection</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.481.1" xmlns="http://www.w3.org/1999/xhtml"> configuration.</span></span></p>
<p><span class="koboSpan" id="kobo.482.1" xmlns="http://www.w3.org/1999/xhtml">In our </span><a id="_idIndexMarker424"/><span class="koboSpan" id="kobo.483.1" xmlns="http://www.w3.org/1999/xhtml">application, we have two versions</span><a id="_idIndexMarker425"/><span class="koboSpan" id="kobo.484.1" xmlns="http://www.w3.org/1999/xhtml"> of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.485.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.486.1" xmlns="http://www.w3.org/1999/xhtml">interface implementation:</span></span></p>
<ol>
<li value="1"><strong class="source-inline"><span class="koboSpan" id="kobo.487.1" xmlns="http://www.w3.org/1999/xhtml">DataStore</span></strong><span class="koboSpan" id="kobo.488.1" xmlns="http://www.w3.org/1999/xhtml">—This is the </span><span class="No-Break"><span class="koboSpan" id="kobo.489.1" xmlns="http://www.w3.org/1999/xhtml">actual implementation</span></span></li>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.490.1" xmlns="http://www.w3.org/1999/xhtml">MockDataStore</span></strong><span class="koboSpan" id="kobo.491.1" xmlns="http://www.w3.org/1999/xhtml">—This is the one used for </span><span class="No-Break"><span class="koboSpan" id="kobo.492.1" xmlns="http://www.w3.org/1999/xhtml">testing purposes</span></span></li>
</ol>
<p><span class="koboSpan" id="kobo.493.1" xmlns="http://www.w3.org/1999/xhtml">Using MS.DI, we can use </span><strong class="source-inline"><span class="koboSpan" id="kobo.494.1" xmlns="http://www.w3.org/1999/xhtml">MockDataStore</span></strong><span class="koboSpan" id="kobo.495.1" xmlns="http://www.w3.org/1999/xhtml"> in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.496.1" xmlns="http://www.w3.org/1999/xhtml">Debug</span></strong><span class="koboSpan" id="kobo.497.1" xmlns="http://www.w3.org/1999/xhtml"> build and use </span><strong class="source-inline"><span class="koboSpan" id="kobo.498.1" xmlns="http://www.w3.org/1999/xhtml">DataStore</span></strong><span class="koboSpan" id="kobo.499.1" xmlns="http://www.w3.org/1999/xhtml"> in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.500.1" xmlns="http://www.w3.org/1999/xhtml">Release</span></strong><span class="koboSpan" id="kobo.501.1" xmlns="http://www.w3.org/1999/xhtml"> build. </span><span class="koboSpan" id="kobo.501.2" xmlns="http://www.w3.org/1999/xhtml">This configuration can be implemented as shown in the following </span><span class="No-Break"><span class="koboSpan" id="kobo.502.1" xmlns="http://www.w3.org/1999/xhtml">code snippet:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.503.1" xmlns="http://www.w3.org/1999/xhtml">
bool isDebug = false;
var services = new ServiceCollection();
services.AddSingleton&lt;DataStore, DataStore&gt;();
services.AddSingleton&lt;MockDataStore, MockDataStore&gt;();
services.AddSingleton&lt;IDataStore&lt;Item&gt;&gt;(c =&gt; {
    if (isDebug)
    {
        return c.GetRequiredService&lt;MockDataStore&gt;();
    }
    else
    {
        return c.GetRequiredService&lt;DataStore&gt;();
    }
});</span></pre>
<p><span class="koboSpan" id="kobo.504.1" xmlns="http://www.w3.org/1999/xhtml">In the preceding code snippet, we can configure concrete classes and </span><strong class="source-inline"><span class="koboSpan" id="kobo.505.1" xmlns="http://www.w3.org/1999/xhtml">DataStore</span></strong><span class="koboSpan" id="kobo.506.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.507.1" xmlns="http://www.w3.org/1999/xhtml">MockDataStore</span></strong><span class="koboSpan" id="kobo.508.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><strong class="source-inline"><span class="koboSpan" id="kobo.509.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.510.1" xmlns="http://www.w3.org/1999/xhtml"> interfaces for different build configurations. </span><span class="koboSpan" id="kobo.510.2" xmlns="http://www.w3.org/1999/xhtml">In the configuration of </span><strong class="source-inline"><span class="koboSpan" id="kobo.511.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.512.1" xmlns="http://www.w3.org/1999/xhtml">, we can use a delegate to resolve the object. </span><span class="koboSpan" id="kobo.512.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.513.1" xmlns="http://www.w3.org/1999/xhtml">isDebug</span></strong><span class="koboSpan" id="kobo.514.1" xmlns="http://www.w3.org/1999/xhtml"> variable can be set using the build configuration so that it can be set to </span><strong class="source-inline"><span class="koboSpan" id="kobo.515.1" xmlns="http://www.w3.org/1999/xhtml">true</span></strong><span class="koboSpan" id="kobo.516.1" xmlns="http://www.w3.org/1999/xhtml">/</span><strong class="source-inline"><span class="koboSpan" id="kobo.517.1" xmlns="http://www.w3.org/1999/xhtml">false</span></strong><span class="koboSpan" id="kobo.518.1" xmlns="http://www.w3.org/1999/xhtml"> according to whether it is a debug or </span><span class="No-Break"><span class="koboSpan" id="kobo.519.1" xmlns="http://www.w3.org/1999/xhtml">release build.</span></span></p>
<h3><span class="koboSpan" id="kobo.520.1" xmlns="http://www.w3.org/1999/xhtml">Configuring DI in .NET MAUI</span></h3>
<p><span class="koboSpan" id="kobo.521.1" xmlns="http://www.w3.org/1999/xhtml">MS.DI is</span><a id="_idIndexMarker426"/><span class="koboSpan" id="kobo.522.1" xmlns="http://www.w3.org/1999/xhtml"> implemented as part of the .NET release, so it is available for all kinds of applications in .NET 5 or later releases. </span><span class="koboSpan" id="kobo.522.2" xmlns="http://www.w3.org/1999/xhtml">We can implement DI using </span><strong class="source-inline"><span class="koboSpan" id="kobo.523.1" xmlns="http://www.w3.org/1999/xhtml">ServiceCollection</span></strong><span class="koboSpan" id="kobo.524.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.525.1" xmlns="http://www.w3.org/1999/xhtml">ServiceProvider</span></strong><span class="koboSpan" id="kobo.526.1" xmlns="http://www.w3.org/1999/xhtml">, as we introduced in the previous section. </span><span class="koboSpan" id="kobo.526.2" xmlns="http://www.w3.org/1999/xhtml">However, there is a much simpler way to use MS.DI in .NET MAUI. </span><span class="koboSpan" id="kobo.526.3" xmlns="http://www.w3.org/1999/xhtml">DI is integrated as part of the .NET Generic Host configuration, so we don’t need to </span><a id="_idIndexMarker427"/><span class="koboSpan" id="kobo.527.1" xmlns="http://www.w3.org/1999/xhtml">create an instance of </span><strong class="source-inline"><span class="koboSpan" id="kobo.528.1" xmlns="http://www.w3.org/1999/xhtml">ServiceCollection</span></strong><span class="koboSpan" id="kobo.529.1" xmlns="http://www.w3.org/1999/xhtml"> by ourselves. </span><span class="koboSpan" id="kobo.529.2" xmlns="http://www.w3.org/1999/xhtml">We can use the preconfigured DI service directly without any </span><span class="No-Break"><span class="koboSpan" id="kobo.530.1" xmlns="http://www.w3.org/1999/xhtml">extra work.</span></span></p>
<p><span class="koboSpan" id="kobo.531.1" xmlns="http://www.w3.org/1999/xhtml">To understand the preconfigured DI service in .NET MAUI, we can review the .NET MAUI application startup process again using </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.532.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><em class="italic"><span class="koboSpan" id="kobo.533.1" xmlns="http://www.w3.org/1999/xhtml">.5</span></em><span class="koboSpan" id="kobo.534.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.535.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><em class="italic"><span class="koboSpan" id="kobo.536.1" xmlns="http://www.w3.org/1999/xhtml">.5</span></em><span class="koboSpan" id="kobo.537.1" xmlns="http://www.w3.org/1999/xhtml"> includes both a class diagram and a sequence diagram of the </span><span class="No-Break"><span class="koboSpan" id="kobo.538.1" xmlns="http://www.w3.org/1999/xhtml">involved classes:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer073">
<span class="koboSpan" id="kobo.539.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 6.5: .NET MAUI DI configuration" src="image/Figure_6.05_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.540.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6.5: .NET MAUI DI configuration</span></p>
<p><span class="koboSpan" id="kobo.541.1" xmlns="http://www.w3.org/1999/xhtml">At the</span><a id="_idIndexMarker428"/><span class="koboSpan" id="kobo.542.1" xmlns="http://www.w3.org/1999/xhtml"> top of </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.543.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><em class="italic"><span class="koboSpan" id="kobo.544.1" xmlns="http://www.w3.org/1999/xhtml">.5</span></em><span class="koboSpan" id="kobo.545.1" xmlns="http://www.w3.org/1999/xhtml">, we can see that there are</span><a id="_idIndexMarker429"/><span class="koboSpan" id="kobo.546.1" xmlns="http://www.w3.org/1999/xhtml"> four classes involved in the .NET MAUI </span><span class="No-Break"><span class="koboSpan" id="kobo.547.1" xmlns="http://www.w3.org/1999/xhtml">application startup:</span></span></p>
<ol>
<li value="1"><strong class="bold"><span class="koboSpan" id="kobo.548.1" xmlns="http://www.w3.org/1999/xhtml">Platform entry point</span></strong><span class="koboSpan" id="kobo.549.1" xmlns="http://www.w3.org/1999/xhtml">—The </span><a id="_idIndexMarker430"/><span class="koboSpan" id="kobo.550.1" xmlns="http://www.w3.org/1999/xhtml">entry point of the .NET MAUI application is in platform-specific code. </span><span class="koboSpan" id="kobo.550.2" xmlns="http://www.w3.org/1999/xhtml">For the .NET MAUI project, it is in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.551.1" xmlns="http://www.w3.org/1999/xhtml">Platforms</span></strong><span class="koboSpan" id="kobo.552.1" xmlns="http://www.w3.org/1999/xhtml"> folder. </span><span class="koboSpan" id="kobo.552.2" xmlns="http://www.w3.org/1999/xhtml">There are different classes defined for different platforms, as we can see in </span><em class="italic"><span class="koboSpan" id="kobo.553.1" xmlns="http://www.w3.org/1999/xhtml">Table 6.1</span></em><span class="koboSpan" id="kobo.554.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.554.2" xmlns="http://www.w3.org/1999/xhtml">In </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.555.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><em class="italic"><span class="koboSpan" id="kobo.556.1" xmlns="http://www.w3.org/1999/xhtml">.5</span></em><span class="koboSpan" id="kobo.557.1" xmlns="http://www.w3.org/1999/xhtml">, we use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.558.1" xmlns="http://www.w3.org/1999/xhtml">MauiApplication</span></strong><span class="koboSpan" id="kobo.559.1" xmlns="http://www.w3.org/1999/xhtml"> Android version as </span><span class="No-Break"><span class="koboSpan" id="kobo.560.1" xmlns="http://www.w3.org/1999/xhtml">an example:</span></span></li>
</ol>
<table class="No-Table-Style _idGenTablePara-1" id="table001-5">
<colgroup>
<col/>
<col/>
</colgroup>
<tbody>
<tr class="No-Table-Style">
<td class="No-Table-Style">
<p><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.561.1" xmlns="http://www.w3.org/1999/xhtml">Platform</span></strong></span></p>
</td>
<td class="No-Table-Style">
<p><strong class="bold"><span class="koboSpan" id="kobo.562.1" xmlns="http://www.w3.org/1999/xhtml">Entry </span></strong><span class="No-Break"><strong class="bold"><span class="koboSpan" id="kobo.563.1" xmlns="http://www.w3.org/1999/xhtml">point class</span></strong></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style">
<p><span class="No-Break"><span class="koboSpan" id="kobo.564.1" xmlns="http://www.w3.org/1999/xhtml">Android</span></span></p>
</td>
<td class="No-Table-Style">
<p><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.565.1" xmlns="http://www.w3.org/1999/xhtml">MauiApplication</span></strong></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style">
<p><span class="No-Break"><span class="koboSpan" id="kobo.566.1" xmlns="http://www.w3.org/1999/xhtml">iOS/macOS</span></span></p>
</td>
<td class="No-Table-Style">
<p><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.567.1" xmlns="http://www.w3.org/1999/xhtml">MauiUIApplicationDelegate</span></strong></span></p>
</td>
</tr>
<tr class="No-Table-Style">
<td class="No-Table-Style">
<p><span class="No-Break"><span class="koboSpan" id="kobo.568.1" xmlns="http://www.w3.org/1999/xhtml">Windows</span></span></p>
</td>
<td class="No-Table-Style">
<p><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.569.1" xmlns="http://www.w3.org/1999/xhtml">MauiWinUIApplication</span></strong></span></p>
</td>
</tr>
</tbody>
</table>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.570.1" xmlns="http://www.w3.org/1999/xhtml">Table 6.1: Entry points in different platforms</span></p>
<p><span class="koboSpan" id="kobo.571.1" xmlns="http://www.w3.org/1999/xhtml">All entry-point classes implement the </span><strong class="source-inline"><span class="koboSpan" id="kobo.572.1" xmlns="http://www.w3.org/1999/xhtml">IPlatformApplication</span></strong><span class="koboSpan" id="kobo.573.1" xmlns="http://www.w3.org/1999/xhtml"> interface, as we can see in </span><a id="_idIndexMarker431"/><span class="koboSpan" id="kobo.574.1" xmlns="http://www.w3.org/1999/xhtml">the following </span><span class="No-Break"><span class="koboSpan" id="kobo.575.1" xmlns="http://www.w3.org/1999/xhtml">code snippet:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.576.1" xmlns="http://www.w3.org/1999/xhtml">
public interface IPlatformApplication
{
    static IPlatformApplication? </span><span class="koboSpan" id="kobo.576.2" xmlns="http://www.w3.org/1999/xhtml">Current { get; set; }
    IServiceProvider Services { get; }
    IApplication Application { get; }
}</span></pre>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.577.1" xmlns="http://www.w3.org/1999/xhtml">IServiceProvider</span></strong><span class="koboSpan" id="kobo.578.1" xmlns="http://www.w3.org/1999/xhtml"> is defined as part of this interface, so we can use it directly to </span><a id="_idIndexMarker432"/><span class="koboSpan" id="kobo.579.1" xmlns="http://www.w3.org/1999/xhtml">resolve DI objects once the application </span><span class="No-Break"><span class="koboSpan" id="kobo.580.1" xmlns="http://www.w3.org/1999/xhtml">is initialized.</span></span></p>
<ol>
<li value="2"><strong class="source-inline"><span class="koboSpan" id="kobo.581.1" xmlns="http://www.w3.org/1999/xhtml">MauiProgram</span></strong><span class="koboSpan" id="kobo.582.1" xmlns="http://www.w3.org/1999/xhtml"> ❶—As we can see in the code of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.583.1" xmlns="http://www.w3.org/1999/xhtml">MauiProgram</span></strong><span class="koboSpan" id="kobo.584.1" xmlns="http://www.w3.org/1999/xhtml"> implementation </span><a id="_idIndexMarker433"/><span class="koboSpan" id="kobo.585.1" xmlns="http://www.w3.org/1999/xhtml">shown</span><a id="_idIndexMarker434"/><span class="koboSpan" id="kobo.586.1" xmlns="http://www.w3.org/1999/xhtml"> next, each .NET MAUI app needs to define a static </span><strong class="source-inline"><span class="koboSpan" id="kobo.587.1" xmlns="http://www.w3.org/1999/xhtml">MauiProgram</span></strong><span class="koboSpan" id="kobo.588.1" xmlns="http://www.w3.org/1999/xhtml"> class and create a </span><strong class="source-inline"><span class="koboSpan" id="kobo.589.1" xmlns="http://www.w3.org/1999/xhtml">CreateMauiApp()</span></strong><span class="koboSpan" id="kobo.590.1" xmlns="http://www.w3.org/1999/xhtml"> method. </span><span class="koboSpan" id="kobo.590.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.591.1" xmlns="http://www.w3.org/1999/xhtml">CreateMauiApp()</span></strong><span class="koboSpan" id="kobo.592.1" xmlns="http://www.w3.org/1999/xhtml"> method is invoked by the following override function, which is defined in all platform entry points. </span><span class="koboSpan" id="kobo.592.2" xmlns="http://www.w3.org/1999/xhtml">The return value is a </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.593.1" xmlns="http://www.w3.org/1999/xhtml">MauiApp</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.594.1" xmlns="http://www.w3.org/1999/xhtml"> instance:</span></span><pre class="source-code"><span class="koboSpan" id="kobo.595.1" xmlns="http://www.w3.org/1999/xhtml">
protected override MauiApp</span></pre><pre class="source-code"><span class="koboSpan" id="kobo.596.1" xmlns="http://www.w3.org/1999/xhtml">
    CreateMauiApp() =&gt; MauiProgram.CreateMauiApp();</span></pre></li>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.597.1" xmlns="http://www.w3.org/1999/xhtml">MauiApp</span></strong><span class="koboSpan" id="kobo.598.1" xmlns="http://www.w3.org/1999/xhtml"> ❷—Inside </span><strong class="source-inline"><span class="koboSpan" id="kobo.599.1" xmlns="http://www.w3.org/1999/xhtml">CreateMauiApp()</span></strong><span class="koboSpan" id="kobo.600.1" xmlns="http://www.w3.org/1999/xhtml">, it creates a </span><strong class="source-inline"><span class="koboSpan" id="kobo.601.1" xmlns="http://www.w3.org/1999/xhtml">MauiAppBuilder</span></strong><span class="koboSpan" id="kobo.602.1" xmlns="http://www.w3.org/1999/xhtml"> instance by</span><a id="_idIndexMarker435"/> <span class="No-Break"><span class="koboSpan" id="kobo.603.1" xmlns="http://www.w3.org/1999/xhtml">calling </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.604.1" xmlns="http://www.w3.org/1999/xhtml">MauiApp.CreateBuilder()</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.605.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.606.1" xmlns="http://www.w3.org/1999/xhtml">MauiAppBuilder</span></strong><span class="koboSpan" id="kobo.607.1" xmlns="http://www.w3.org/1999/xhtml"> ❸—</span><strong class="source-inline"><span class="koboSpan" id="kobo.608.1" xmlns="http://www.w3.org/1999/xhtml">MauiAppBuilder</span></strong><span class="koboSpan" id="kobo.609.1" xmlns="http://www.w3.org/1999/xhtml"> includes a </span><strong class="source-inline"><span class="koboSpan" id="kobo.610.1" xmlns="http://www.w3.org/1999/xhtml">Services</span></strong><span class="koboSpan" id="kobo.611.1" xmlns="http://www.w3.org/1999/xhtml"> attribute of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.612.1" xmlns="http://www.w3.org/1999/xhtml">IServiceCollection</span></strong><span class="koboSpan" id="kobo.613.1" xmlns="http://www.w3.org/1999/xhtml"> interface type. </span><span class="koboSpan" id="kobo.613.2" xmlns="http://www.w3.org/1999/xhtml">We</span><a id="_idIndexMarker436"/><span class="koboSpan" id="kobo.614.1" xmlns="http://www.w3.org/1999/xhtml"> can use it to configure DI for the .NET </span><span class="No-Break"><span class="koboSpan" id="kobo.615.1" xmlns="http://www.w3.org/1999/xhtml">MAUI app.</span></span></li>
</ol>
<p><span class="koboSpan" id="kobo.616.1" xmlns="http://www.w3.org/1999/xhtml">From the previous </span><a id="_idIndexMarker437"/><span class="koboSpan" id="kobo.617.1" xmlns="http://www.w3.org/1999/xhtml">analysis of the .NET MAUI app startup process, we can see that both </span><strong class="source-inline"><span class="koboSpan" id="kobo.618.1" xmlns="http://www.w3.org/1999/xhtml">IServiceCollection</span></strong><span class="koboSpan" id="kobo.619.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.620.1" xmlns="http://www.w3.org/1999/xhtml">IServiceProvider</span></strong><span class="koboSpan" id="kobo.621.1" xmlns="http://www.w3.org/1999/xhtml"> have been initialized during the startup process, so we can use them directly without </span><span class="No-Break"><span class="koboSpan" id="kobo.622.1" xmlns="http://www.w3.org/1999/xhtml">further configuration.</span></span></p>
<p><span class="koboSpan" id="kobo.623.1" xmlns="http://www.w3.org/1999/xhtml">We can refer </span><a id="_idIndexMarker438"/><span class="koboSpan" id="kobo.624.1" xmlns="http://www.w3.org/1999/xhtml">to the following code snippet when we analyze the startup process. </span><span class="koboSpan" id="kobo.624.2" xmlns="http://www.w3.org/1999/xhtml">We registered two abstractions, </span><strong class="source-inline"><span class="koboSpan" id="kobo.625.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.626.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.627.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.628.1" xmlns="http://www.w3.org/1999/xhtml">, and a </span><strong class="source-inline"><span class="koboSpan" id="kobo.629.1" xmlns="http://www.w3.org/1999/xhtml">LoginUser</span></strong><span class="koboSpan" id="kobo.630.1" xmlns="http://www.w3.org/1999/xhtml"> class. </span><span class="koboSpan" id="kobo.630.2" xmlns="http://www.w3.org/1999/xhtml">They are all </span><span class="No-Break"><span class="koboSpan" id="kobo.631.1" xmlns="http://www.w3.org/1999/xhtml">singleton objects:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.632.1" xmlns="http://www.w3.org/1999/xhtml">
public static class MauiProgram {                         ❶
  public static MauiApp CreateMauiApp() {                 ❷
    var builder = MauiApp.CreateBuilder();                ❸
    builder
      .UseMauiApp&lt;App&gt;()
      .ConfigureFonts(fonts =&gt; {
        fonts.AddFont("fa-regular-400.ttf",
            "FontAwesomeRegular");
        fonts.AddFont("fa-solid-900.ttf",
            "FontAwesomeSolid");
        fonts.AddFont("fa-brands-400.ttf",
            "FontAwesomeBrands");
        fonts.AddFont("OpenSans-Regular.ttf",
            "OpenSansRegular");
        fonts.AddFont("OpenSans-SemiBold.ttf",
            "OpenSansSemiBold");
      });
    builder.Services.AddSingleton&lt;IDataStore&lt;Item&gt;,
        DataStore&gt;();
builder.Services.AddSingleton&lt;IUserService&lt;User&gt;,
  UserService&gt;();
    builder.Services.AddSingleton&lt;LoginUser, LoginUser&gt;();
    return builder.Build();
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.633.1" xmlns="http://www.w3.org/1999/xhtml">Once we</span><a id="_idIndexMarker439"/><span class="koboSpan" id="kobo.634.1" xmlns="http://www.w3.org/1999/xhtml"> have configured the interfaces and class, we can </span><a id="_idIndexMarker440"/><span class="koboSpan" id="kobo.635.1" xmlns="http://www.w3.org/1999/xhtml">use them in our implementation. </span><span class="koboSpan" id="kobo.635.2" xmlns="http://www.w3.org/1999/xhtml">We can use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.636.1" xmlns="http://www.w3.org/1999/xhtml">IServiceProvider</span></strong><span class="koboSpan" id="kobo.637.1" xmlns="http://www.w3.org/1999/xhtml"> interface to resolve objects. </span><span class="koboSpan" id="kobo.637.2" xmlns="http://www.w3.org/1999/xhtml">When we implement DI, there are three ways of injecting dependencies. </span><span class="koboSpan" id="kobo.637.3" xmlns="http://www.w3.org/1999/xhtml">We can use constructor injection, method injection, or property injection. </span><span class="koboSpan" id="kobo.637.4" xmlns="http://www.w3.org/1999/xhtml">Let’s see how we can do it using the most common methods in the next </span><span class="No-Break"><span class="koboSpan" id="kobo.638.1" xmlns="http://www.w3.org/1999/xhtml">two sections.</span></span></p>
<h3><span class="koboSpan" id="kobo.639.1" xmlns="http://www.w3.org/1999/xhtml">Constructor injection</span></h3>
<p><span class="koboSpan" id="kobo.640.1" xmlns="http://www.w3.org/1999/xhtml">In </span><a id="_idIndexMarker441"/><span class="koboSpan" id="kobo.641.1" xmlns="http://www.w3.org/1999/xhtml">constructor injection, the dependencies required for the class are provided as arguments to the constructor. </span><span class="koboSpan" id="kobo.641.2" xmlns="http://www.w3.org/1999/xhtml">We can resolve dependencies using the constructor. </span><span class="koboSpan" id="kobo.641.3" xmlns="http://www.w3.org/1999/xhtml">This requires the registered dependency to have a parameterless constructor. </span><span class="koboSpan" id="kobo.641.4" xmlns="http://www.w3.org/1999/xhtml">In our code, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.642.1" xmlns="http://www.w3.org/1999/xhtml">LoginUser</span></strong><span class="koboSpan" id="kobo.643.1" xmlns="http://www.w3.org/1999/xhtml"> class depends on the </span><strong class="source-inline"><span class="koboSpan" id="kobo.644.1" xmlns="http://www.w3.org/1999/xhtml">IuserService</span></strong><span class="koboSpan" id="kobo.645.1" xmlns="http://www.w3.org/1999/xhtml"> interface. </span><span class="koboSpan" id="kobo.645.2" xmlns="http://www.w3.org/1999/xhtml">The concrete class implementing </span><strong class="source-inline"><span class="koboSpan" id="kobo.646.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.647.1" xmlns="http://www.w3.org/1999/xhtml"> is </span><strong class="source-inline"><span class="koboSpan" id="kobo.648.1" xmlns="http://www.w3.org/1999/xhtml">UserService</span></strong><span class="koboSpan" id="kobo.649.1" xmlns="http://www.w3.org/1999/xhtml">, which defines a parameterless constructor. </span><span class="koboSpan" id="kobo.649.2" xmlns="http://www.w3.org/1999/xhtml">We can define the constructor of </span><strong class="source-inline"><span class="koboSpan" id="kobo.650.1" xmlns="http://www.w3.org/1999/xhtml">LoginUser</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.651.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.652.1" xmlns="http://www.w3.org/1999/xhtml">
private IUserService&lt;User&gt; _userService;
public LoginUser(IUserService&lt;User&gt; userService)
{
_userService = userService ?? </span><span class="koboSpan" id="kobo.652.2" xmlns="http://www.w3.org/1999/xhtml">throw new
  ArgumentNullException(nameof(userService));
    _userService.CurrentUser = this;
}</span></pre>
<p><span class="koboSpan" id="kobo.653.1" xmlns="http://www.w3.org/1999/xhtml">In the constructor of </span><strong class="source-inline"><span class="koboSpan" id="kobo.654.1" xmlns="http://www.w3.org/1999/xhtml">LoginUser</span></strong><span class="koboSpan" id="kobo.655.1" xmlns="http://www.w3.org/1999/xhtml">, we list the dependency as a </span><strong class="source-inline"><span class="koboSpan" id="kobo.656.1" xmlns="http://www.w3.org/1999/xhtml">userService</span></strong><span class="koboSpan" id="kobo.657.1" xmlns="http://www.w3.org/1999/xhtml"> parameter. </span><span class="koboSpan" id="kobo.657.2" xmlns="http://www.w3.org/1999/xhtml">In this case, MS.DI will resolve </span><strong class="source-inline"><span class="koboSpan" id="kobo.658.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.659.1" xmlns="http://www.w3.org/1999/xhtml"> as the configured </span><strong class="source-inline"><span class="koboSpan" id="kobo.660.1" xmlns="http://www.w3.org/1999/xhtml">UserService</span></strong><span class="koboSpan" id="kobo.661.1" xmlns="http://www.w3.org/1999/xhtml"> concrete</span><a id="_idIndexMarker442"/><span class="koboSpan" id="kobo.662.1" xmlns="http://www.w3.org/1999/xhtml"> class </span><span class="No-Break"><span class="koboSpan" id="kobo.663.1" xmlns="http://www.w3.org/1999/xhtml">for us.</span></span></p>
<h3><span class="koboSpan" id="kobo.664.1" xmlns="http://www.w3.org/1999/xhtml">Property injection</span></h3>
<p><span class="koboSpan" id="kobo.665.1" xmlns="http://www.w3.org/1999/xhtml">There </span><a id="_idIndexMarker443"/><span class="koboSpan" id="kobo.666.1" xmlns="http://www.w3.org/1999/xhtml">are many cases in which we won’t be able to use constructor injection. </span><span class="koboSpan" id="kobo.666.2" xmlns="http://www.w3.org/1999/xhtml">In these cases, we can resolve the dependencies </span><span class="No-Break"><span class="koboSpan" id="kobo.667.1" xmlns="http://www.w3.org/1999/xhtml">through </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.668.1" xmlns="http://www.w3.org/1999/xhtml">IServiceProvider</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.669.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.670.1" xmlns="http://www.w3.org/1999/xhtml">In the .NET MAUI application, the hosting environment creates an </span><strong class="source-inline"><span class="koboSpan" id="kobo.671.1" xmlns="http://www.w3.org/1999/xhtml">IServiceProvider</span></strong><span class="koboSpan" id="kobo.672.1" xmlns="http://www.w3.org/1999/xhtml"> interface for us, as we can see in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.673.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><em class="italic"><span class="koboSpan" id="kobo.674.1" xmlns="http://www.w3.org/1999/xhtml">.5</span></em><span class="koboSpan" id="kobo.675.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.675.2" xmlns="http://www.w3.org/1999/xhtml">We can use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.676.1" xmlns="http://www.w3.org/1999/xhtml">IPlatformApplication</span></strong><span class="koboSpan" id="kobo.677.1" xmlns="http://www.w3.org/1999/xhtml"> interface defined in the platform-specific entry points to get the </span><strong class="source-inline"><span class="koboSpan" id="kobo.678.1" xmlns="http://www.w3.org/1999/xhtml">IServiceProvider</span></strong><span class="koboSpan" id="kobo.679.1" xmlns="http://www.w3.org/1999/xhtml"> interface, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.680.1" xmlns="http://www.w3.org/1999/xhtml">Listing 6.1</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.681.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.682.1" xmlns="http://www.w3.org/1999/xhtml">Listing 6.1: ServiceHelper.cs (https://epa.ms/ServiceHelper6-1)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.683.1" xmlns="http://www.w3.org/1999/xhtml">
namespace PassXYZ.Vault.Services;
public static class ServiceHelper
{
    public static TService GetService&lt;TService&gt;()
        =&gt; Current.GetService&lt;TService&gt;();                ❷
    public static IServiceProvider Current =&gt;             ❶
#if WINDOWS10_0_17763_0_OR_GREATER
        MauiWinUIApplication.Current.Services;
#elif ANDROID
        MauiApplication.Current.Services;
#elif IOS || MACCATALYST
        MauiUIApplicationDelegate.Current.Services;
#else
        null;
#endif
}</span></pre>
<p><span class="koboSpan" id="kobo.684.1" xmlns="http://www.w3.org/1999/xhtml">❶ In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.685.1" xmlns="http://www.w3.org/1999/xhtml">ServiceHelper</span></strong><span class="koboSpan" id="kobo.686.1" xmlns="http://www.w3.org/1999/xhtml"> class, we define a </span><strong class="source-inline"><span class="koboSpan" id="kobo.687.1" xmlns="http://www.w3.org/1999/xhtml">Current</span></strong><span class="koboSpan" id="kobo.688.1" xmlns="http://www.w3.org/1999/xhtml"> static variable to keep the reference of </span><strong class="source-inline"><span class="koboSpan" id="kobo.689.1" xmlns="http://www.w3.org/1999/xhtml">IServiceProvider</span></strong><span class="koboSpan" id="kobo.690.1" xmlns="http://www.w3.org/1999/xhtml">, which is from the </span><strong class="source-inline"><span class="koboSpan" id="kobo.691.1" xmlns="http://www.w3.org/1999/xhtml">IPlatformApplication</span></strong><span class="koboSpan" id="kobo.692.1" xmlns="http://www.w3.org/1999/xhtml"> interface in </span><a id="_idIndexMarker444"/><span class="koboSpan" id="kobo.693.1" xmlns="http://www.w3.org/1999/xhtml">platform </span><span class="No-Break"><span class="koboSpan" id="kobo.694.1" xmlns="http://www.w3.org/1999/xhtml">entry points.</span></span></p>
<p><span class="koboSpan" id="kobo.695.1" xmlns="http://www.w3.org/1999/xhtml">❷ A </span><strong class="source-inline"><span class="koboSpan" id="kobo.696.1" xmlns="http://www.w3.org/1999/xhtml">GetService()</span></strong><span class="koboSpan" id="kobo.697.1" xmlns="http://www.w3.org/1999/xhtml"> static method is defined that calls the </span><strong class="source-inline"><span class="koboSpan" id="kobo.698.1" xmlns="http://www.w3.org/1999/xhtml">GetService()</span></strong><span class="koboSpan" id="kobo.699.1" xmlns="http://www.w3.org/1999/xhtml"> method </span><span class="No-Break"><span class="koboSpan" id="kobo.700.1" xmlns="http://www.w3.org/1999/xhtml">of </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.701.1" xmlns="http://www.w3.org/1999/xhtml">IServiceProvider</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.702.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p class="callout-heading"><span class="koboSpan" id="kobo.703.1" xmlns="http://www.w3.org/1999/xhtml">ServiceHelper</span></p>
<p class="callout"><span class="koboSpan" id="kobo.704.1" xmlns="http://www.w3.org/1999/xhtml">For the </span><strong class="source-inline"><span class="koboSpan" id="kobo.705.1" xmlns="http://www.w3.org/1999/xhtml">ServiceHelper</span></strong><span class="koboSpan" id="kobo.706.1" xmlns="http://www.w3.org/1999/xhtml"> implementation, I referred to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.707.1" xmlns="http://www.w3.org/1999/xhtml">MauiApp-DI</span></strong><span class="koboSpan" id="kobo.708.1" xmlns="http://www.w3.org/1999/xhtml"> GitHub project. </span><span class="koboSpan" id="kobo.708.2" xmlns="http://www.w3.org/1999/xhtml">Thanks for James Montemagno’s sample code </span><span class="No-Break"><span class="koboSpan" id="kobo.709.1" xmlns="http://www.w3.org/1999/xhtml">in GitHub!</span></span></p>
<p class="callout"><a href="https://github.com/jamesmontemagno/MauiApp-DI"><span class="No-Break"><span class="koboSpan" id="kobo.710.1" xmlns="http://www.w3.org/1999/xhtml">https://github.com/jamesmontemagno/MauiApp-DI</span></span></a></p>
<p><span class="koboSpan" id="kobo.711.1" xmlns="http://www.w3.org/1999/xhtml">We can update our source code to replace </span><strong class="source-inline"><span class="koboSpan" id="kobo.712.1" xmlns="http://www.w3.org/1999/xhtml">Dependency Service</span></strong><span class="koboSpan" id="kobo.713.1" xmlns="http://www.w3.org/1999/xhtml"> with DI with the help of </span><strong class="source-inline"><span class="koboSpan" id="kobo.714.1" xmlns="http://www.w3.org/1999/xhtml">ServiceHelper</span></strong><span class="koboSpan" id="kobo.715.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.715.2" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.716.1" xmlns="http://www.w3.org/1999/xhtml">BaseViewModel.cs</span></strong><span class="koboSpan" id="kobo.717.1" xmlns="http://www.w3.org/1999/xhtml">, we replaced </span><strong class="source-inline"><span class="koboSpan" id="kobo.718.1" xmlns="http://www.w3.org/1999/xhtml">DependencyService</span></strong><span class="koboSpan" id="kobo.719.1" xmlns="http://www.w3.org/1999/xhtml"> with DI, as </span><span class="No-Break"><span class="koboSpan" id="kobo.720.1" xmlns="http://www.w3.org/1999/xhtml">shown next.</span></span></p>
<p><span class="koboSpan" id="kobo.721.1" xmlns="http://www.w3.org/1999/xhtml">So, we replaced the </span><span class="No-Break"><span class="koboSpan" id="kobo.722.1" xmlns="http://www.w3.org/1999/xhtml">following code:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.723.1" xmlns="http://www.w3.org/1999/xhtml">
public static IDataStore&lt;Item&gt; DataStore =&gt;
      DependencyService.Get&lt;IDataStore&lt;Item&gt;&gt;();</span></pre>
<p><span class="koboSpan" id="kobo.724.1" xmlns="http://www.w3.org/1999/xhtml">This is what we replaced </span><span class="No-Break"><span class="koboSpan" id="kobo.725.1" xmlns="http://www.w3.org/1999/xhtml">it with:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.726.1" xmlns="http://www.w3.org/1999/xhtml">
public static IDataStore&lt;Item&gt; DataStore =&gt;
           ServiceHelper.GetService&lt;IDataStore&lt;Item&gt;&gt;();</span></pre>
<p><span class="koboSpan" id="kobo.727.1" xmlns="http://www.w3.org/1999/xhtml">You may feel that the preceding code of property injection doesn’t look elegant compared to constructor injection. </span><span class="koboSpan" id="kobo.727.2" xmlns="http://www.w3.org/1999/xhtml">I haven’t figured out a better way to do this in .NET MAUI. </span><span class="koboSpan" id="kobo.727.3" xmlns="http://www.w3.org/1999/xhtml">However, in the next part of this book, when we introduce the Blazor Hybrid app, we can resolve property injection using the C# attribute. </span><span class="koboSpan" id="kobo.727.4" xmlns="http://www.w3.org/1999/xhtml">To resolve the </span><strong class="source-inline"><span class="koboSpan" id="kobo.728.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.729.1" xmlns="http://www.w3.org/1999/xhtml"> interface in Blazor, we can do it in a much simpler way, as </span><span class="No-Break"><span class="koboSpan" id="kobo.730.1" xmlns="http://www.w3.org/1999/xhtml">shown here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.731.1" xmlns="http://www.w3.org/1999/xhtml">
[Inject]
public IDataStore&lt;Item&gt; DataStore { get; set; } = default!;</span></pre>
<p><span class="koboSpan" id="kobo.732.1" xmlns="http://www.w3.org/1999/xhtml">We can</span><a id="_idIndexMarker445"/><span class="koboSpan" id="kobo.733.1" xmlns="http://www.w3.org/1999/xhtml"> use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.734.1" xmlns="http://www.w3.org/1999/xhtml">[Inject]</span></strong><span class="koboSpan" id="kobo.735.1" xmlns="http://www.w3.org/1999/xhtml"> C# attribute to resolve the dependency implicitly without calling the </span><strong class="source-inline"><span class="koboSpan" id="kobo.736.1" xmlns="http://www.w3.org/1999/xhtml">GetService()</span></strong><span class="koboSpan" id="kobo.737.1" xmlns="http://www.w3.org/1999/xhtml"> method of </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.738.1" xmlns="http://www.w3.org/1999/xhtml">ServiceHelper</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.739.1" xmlns="http://www.w3.org/1999/xhtml"> explicitly.</span></span></p>
<p><span class="koboSpan" id="kobo.740.1" xmlns="http://www.w3.org/1999/xhtml">When we move from </span><strong class="source-inline"><span class="koboSpan" id="kobo.741.1" xmlns="http://www.w3.org/1999/xhtml">Dependency Service</span></strong><span class="koboSpan" id="kobo.742.1" xmlns="http://www.w3.org/1999/xhtml"> to DI, we will create another concrete class for the </span><strong class="source-inline"><span class="koboSpan" id="kobo.743.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.744.1" xmlns="http://www.w3.org/1999/xhtml"> interface. </span><span class="koboSpan" id="kobo.744.2" xmlns="http://www.w3.org/1999/xhtml">This class will handle the CRUD operations of the </span><span class="No-Break"><span class="koboSpan" id="kobo.745.1" xmlns="http://www.w3.org/1999/xhtml">password database.</span></span></p>
<h1 id="_idParaDest-124"><a id="_idTextAnchor138"/><span class="koboSpan" id="kobo.746.1" xmlns="http://www.w3.org/1999/xhtml">Connecting to the database</span></h1>
<p><span class="koboSpan" id="kobo.747.1" xmlns="http://www.w3.org/1999/xhtml">The </span><a id="_idIndexMarker446"/><span class="koboSpan" id="kobo.748.1" xmlns="http://www.w3.org/1999/xhtml">password database is a local database in KeePass 2.x format. </span><span class="koboSpan" id="kobo.748.2" xmlns="http://www.w3.org/1999/xhtml">Inside </span><a id="_idIndexMarker447"/><span class="koboSpan" id="kobo.749.1" xmlns="http://www.w3.org/1999/xhtml">the database, password data is stored as groups and entries. </span><span class="koboSpan" id="kobo.749.2" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.750.1" xmlns="http://www.w3.org/1999/xhtml">KeePassLib</span></strong><span class="koboSpan" id="kobo.751.1" xmlns="http://www.w3.org/1999/xhtml"> namespace, a </span><strong class="source-inline"><span class="koboSpan" id="kobo.752.1" xmlns="http://www.w3.org/1999/xhtml">PwDatabase</span></strong><span class="koboSpan" id="kobo.753.1" xmlns="http://www.w3.org/1999/xhtml"> class is defined to manage database operations. </span><span class="koboSpan" id="kobo.753.2" xmlns="http://www.w3.org/1999/xhtml">We can refer to the class diagram in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.754.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><em class="italic"><span class="koboSpan" id="kobo.755.1" xmlns="http://www.w3.org/1999/xhtml">.6</span></em><span class="koboSpan" id="kobo.756.1" xmlns="http://www.w3.org/1999/xhtml"> to understand the relationship between </span><strong class="source-inline"><span class="koboSpan" id="kobo.757.1" xmlns="http://www.w3.org/1999/xhtml">PwDatabase</span></strong><span class="koboSpan" id="kobo.758.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.759.1" xmlns="http://www.w3.org/1999/xhtml">PwGroup</span></strong><span class="koboSpan" id="kobo.760.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="No-Break"><span class="koboSpan" id="kobo.761.1" xmlns="http://www.w3.org/1999/xhtml">and </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.762.1" xmlns="http://www.w3.org/1999/xhtml">PwEntry</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.763.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer074">
<span class="koboSpan" id="kobo.764.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 6.6: Class diagram of KeePass database" src="image/Figure_6.06_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.765.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6.6: Class diagram of KeePass database</span></p>
<p><span class="koboSpan" id="kobo.766.1" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.767.1" xmlns="http://www.w3.org/1999/xhtml">PwDatabase</span></strong><span class="koboSpan" id="kobo.768.1" xmlns="http://www.w3.org/1999/xhtml">, a </span><strong class="source-inline"><span class="koboSpan" id="kobo.769.1" xmlns="http://www.w3.org/1999/xhtml">RootGroup</span></strong><span class="koboSpan" id="kobo.770.1" xmlns="http://www.w3.org/1999/xhtml"> property of type </span><strong class="source-inline"><span class="koboSpan" id="kobo.771.1" xmlns="http://www.w3.org/1999/xhtml">PwGroup</span></strong><span class="koboSpan" id="kobo.772.1" xmlns="http://www.w3.org/1999/xhtml"> is defined. </span><span class="koboSpan" id="kobo.772.2" xmlns="http://www.w3.org/1999/xhtml">It contains all groups and</span><a id="_idIndexMarker448"/><span class="koboSpan" id="kobo.773.1" xmlns="http://www.w3.org/1999/xhtml"> entries stored in the database. </span><span class="koboSpan" id="kobo.773.2" xmlns="http://www.w3.org/1999/xhtml">We can navigate the data structure of the KeePass database from </span><strong class="source-inline"><span class="koboSpan" id="kobo.774.1" xmlns="http://www.w3.org/1999/xhtml">RootGroup</span></strong><span class="koboSpan" id="kobo.775.1" xmlns="http://www.w3.org/1999/xhtml"> to a particular entry. </span><span class="koboSpan" id="kobo.775.2" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.776.1" xmlns="http://www.w3.org/1999/xhtml">PwEntry</span></strong><span class="koboSpan" id="kobo.777.1" xmlns="http://www.w3.org/1999/xhtml">, a set of standard fields is defined, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.778.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.779.1" xmlns="http://www.w3.org/1999/xhtml">.7</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.780.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer075">
<span class="koboSpan" id="kobo.781.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 6.7: Group, entry, and field" src="image/Figure_6.07_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.782.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6.7: Group, entry, and field</span></p>
<p><span class="koboSpan" id="kobo.783.1" xmlns="http://www.w3.org/1999/xhtml">If we have a list</span><a id="_idIndexMarker449"/><span class="koboSpan" id="kobo.784.1" xmlns="http://www.w3.org/1999/xhtml"> of entries that include only standard fields, this list looks like a table. </span><span class="koboSpan" id="kobo.784.2" xmlns="http://www.w3.org/1999/xhtml">In </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.785.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><em class="italic"><span class="koboSpan" id="kobo.786.1" xmlns="http://www.w3.org/1999/xhtml">.7</span></em><span class="koboSpan" id="kobo.787.1" xmlns="http://www.w3.org/1999/xhtml">, the current group includes five entries (</span><strong class="bold"><span class="koboSpan" id="kobo.788.1" xmlns="http://www.w3.org/1999/xhtml">GitHub</span></strong><span class="koboSpan" id="kobo.789.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="bold"><span class="koboSpan" id="kobo.790.1" xmlns="http://www.w3.org/1999/xhtml">Google</span></strong><span class="koboSpan" id="kobo.791.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="bold"><span class="koboSpan" id="kobo.792.1" xmlns="http://www.w3.org/1999/xhtml">Facebook</span></strong><span class="koboSpan" id="kobo.793.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="bold"><span class="koboSpan" id="kobo.794.1" xmlns="http://www.w3.org/1999/xhtml">Instagram</span></strong><span class="koboSpan" id="kobo.795.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><strong class="bold"><span class="koboSpan" id="kobo.796.1" xmlns="http://www.w3.org/1999/xhtml">Chase Bank</span></strong><span class="koboSpan" id="kobo.797.1" xmlns="http://www.w3.org/1999/xhtml">) and a sub-group (</span><strong class="bold"><span class="koboSpan" id="kobo.798.1" xmlns="http://www.w3.org/1999/xhtml">Cloud</span></strong><span class="koboSpan" id="kobo.799.1" xmlns="http://www.w3.org/1999/xhtml">). </span><span class="koboSpan" id="kobo.799.2" xmlns="http://www.w3.org/1999/xhtml">On the left, there is a screenshot of </span><strong class="source-inline"><span class="koboSpan" id="kobo.800.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.801.1" xmlns="http://www.w3.org/1999/xhtml">, which shows the items in the current group. </span><span class="koboSpan" id="kobo.801.2" xmlns="http://www.w3.org/1999/xhtml">If the </span><strong class="bold"><span class="koboSpan" id="kobo.802.1" xmlns="http://www.w3.org/1999/xhtml">Google</span></strong><span class="koboSpan" id="kobo.803.1" xmlns="http://www.w3.org/1999/xhtml"> item was selected, it would be displayed as an entry in the screenshot on the right-hand side. </span><span class="koboSpan" id="kobo.803.2" xmlns="http://www.w3.org/1999/xhtml">Users may add additional fields to the entry, so the KeePass database is not a relational database—it is more like a key-value database. </span><span class="koboSpan" id="kobo.803.3" xmlns="http://www.w3.org/1999/xhtml">Each key-value pair is a field, such as a </span><span class="No-Break"><span class="koboSpan" id="kobo.804.1" xmlns="http://www.w3.org/1999/xhtml">URL field.</span></span></p>
<p><span class="koboSpan" id="kobo.805.1" xmlns="http://www.w3.org/1999/xhtml">To use </span><strong class="source-inline"><span class="koboSpan" id="kobo.806.1" xmlns="http://www.w3.org/1999/xhtml">PwDatabase</span></strong><span class="koboSpan" id="kobo.807.1" xmlns="http://www.w3.org/1999/xhtml"> in our app, a derived class, </span><strong class="source-inline"><span class="koboSpan" id="kobo.808.1" xmlns="http://www.w3.org/1999/xhtml">PxDatabase</span></strong><span class="koboSpan" id="kobo.809.1" xmlns="http://www.w3.org/1999/xhtml">, is defined. </span><strong class="source-inline"><span class="koboSpan" id="kobo.810.1" xmlns="http://www.w3.org/1999/xhtml">PxDatabase</span></strong><span class="koboSpan" id="kobo.811.1" xmlns="http://www.w3.org/1999/xhtml"> added additional properties and methods such as </span><strong class="source-inline"><span class="koboSpan" id="kobo.812.1" xmlns="http://www.w3.org/1999/xhtml">CurrentGroup</span></strong><span class="koboSpan" id="kobo.813.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.814.1" xmlns="http://www.w3.org/1999/xhtml">DeleteGroup()</span></strong><span class="koboSpan" id="kobo.815.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.816.1" xmlns="http://www.w3.org/1999/xhtml">DeleteEntry()</span></strong><span class="koboSpan" id="kobo.817.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><span class="No-Break"><span class="koboSpan" id="kobo.818.1" xmlns="http://www.w3.org/1999/xhtml">so on.</span></span></p>
<p><span class="koboSpan" id="kobo.819.1" xmlns="http://www.w3.org/1999/xhtml">To access a database, we can open the database file and perform CRUD operations on it. </span><span class="koboSpan" id="kobo.819.2" xmlns="http://www.w3.org/1999/xhtml">Since we are building a cross-platform app, it is not convenient to handle the database file directly for the end users. </span><span class="koboSpan" id="kobo.819.3" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.820.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.821.1" xmlns="http://www.w3.org/1999/xhtml">, the user concept is used instead of a data file. </span><span class="koboSpan" id="kobo.821.2" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.822.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZLib</span></strong><span class="koboSpan" id="kobo.823.1" xmlns="http://www.w3.org/1999/xhtml">, a </span><strong class="source-inline"><span class="koboSpan" id="kobo.824.1" xmlns="http://www.w3.org/1999/xhtml">User</span></strong><span class="koboSpan" id="kobo.825.1" xmlns="http://www.w3.org/1999/xhtml"> class is defined to encapsulate the underlying </span><span class="No-Break"><span class="koboSpan" id="kobo.826.1" xmlns="http://www.w3.org/1999/xhtml">file operations.</span></span></p>
<p><span class="koboSpan" id="kobo.827.1" xmlns="http://www.w3.org/1999/xhtml">To access the database, we defined database initialization and CRUDL operations in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.828.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.829.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.830.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong><span class="koboSpan" id="kobo.831.1" xmlns="http://www.w3.org/1999/xhtml"> interfaces. </span><span class="koboSpan" id="kobo.831.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.832.1" xmlns="http://www.w3.org/1999/xhtml">DataStore</span></strong><span class="koboSpan" id="kobo.833.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.834.1" xmlns="http://www.w3.org/1999/xhtml">UserService</span></strong><span class="koboSpan" id="kobo.835.1" xmlns="http://www.w3.org/1999/xhtml"> concrete classes are used to implement these </span><span class="No-Break"><span class="koboSpan" id="kobo.836.1" xmlns="http://www.w3.org/1999/xhtml">two interfaces.</span></span></p>
<h2 id="_idParaDest-125"><a id="_idTextAnchor139"/><span class="koboSpan" id="kobo.837.1" xmlns="http://www.w3.org/1999/xhtml">Initializing the database</span></h2>
<p><span class="koboSpan" id="kobo.838.1" xmlns="http://www.w3.org/1999/xhtml">The </span><a id="_idIndexMarker450"/><span class="koboSpan" id="kobo.839.1" xmlns="http://www.w3.org/1999/xhtml">initialization of the database is part of the login process, so the following login method is defined in the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.840.1" xmlns="http://www.w3.org/1999/xhtml">IUserService</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.841.1" xmlns="http://www.w3.org/1999/xhtml"> interface:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.842.1" xmlns="http://www.w3.org/1999/xhtml">
Task&lt;bool&gt; LoginAsync(T user);</span></pre>
<p><span class="koboSpan" id="kobo.843.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.844.1" xmlns="http://www.w3.org/1999/xhtml">UserService</span></strong><span class="koboSpan" id="kobo.845.1" xmlns="http://www.w3.org/1999/xhtml"> class, </span><strong class="source-inline"><span class="koboSpan" id="kobo.846.1" xmlns="http://www.w3.org/1999/xhtml">LoginAsync()</span></strong><span class="koboSpan" id="kobo.847.1" xmlns="http://www.w3.org/1999/xhtml"> is defined as an async method, as we can </span><span class="No-Break"><span class="koboSpan" id="kobo.848.1" xmlns="http://www.w3.org/1999/xhtml">see here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.849.1" xmlns="http://www.w3.org/1999/xhtml">
public async Task&lt;bool&gt; LoginAsync(User user) {
  if (user == null) {
Debug.Assert(false); throw new ArgumentNullException("user");
  }
  return await Task.Run(() =&gt; {                           ❶
    if (string.IsNullOrEmpty(user.Password)) { return false; }
    db.Open(user);                                        ❷
    if (db.IsOpen) {
      db.CurrentGroup = db.RootGroup;
    }
    return db.IsOpen;
  });
}</span></pre>
<p><span class="koboSpan" id="kobo.850.1" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.851.1" xmlns="http://www.w3.org/1999/xhtml">LoginAsync()</span></strong><span class="koboSpan" id="kobo.852.1" xmlns="http://www.w3.org/1999/xhtml">, ❶ a separate task is used to handle the open operation of the database. </span><span class="koboSpan" id="kobo.852.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.853.1" xmlns="http://www.w3.org/1999/xhtml">Open()</span></strong><span class="koboSpan" id="kobo.854.1" xmlns="http://www.w3.org/1999/xhtml"> ❷ method of </span><strong class="source-inline"><span class="koboSpan" id="kobo.855.1" xmlns="http://www.w3.org/1999/xhtml">PxDatabase</span></strong><span class="koboSpan" id="kobo.856.1" xmlns="http://www.w3.org/1999/xhtml"> is called, and an instance of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.857.1" xmlns="http://www.w3.org/1999/xhtml">User</span></strong><span class="koboSpan" id="kobo.858.1" xmlns="http://www.w3.org/1999/xhtml"> class is passed to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.859.1" xmlns="http://www.w3.org/1999/xhtml">Open()</span></strong><span class="koboSpan" id="kobo.860.1" xmlns="http://www.w3.org/1999/xhtml"> method as </span><span class="No-Break"><span class="koboSpan" id="kobo.861.1" xmlns="http://www.w3.org/1999/xhtml">an argument.</span></span></p>
<h2 id="_idParaDest-126"><a id="_idTextAnchor140"/><span class="koboSpan" id="kobo.862.1" xmlns="http://www.w3.org/1999/xhtml">Performing CRUD operations</span></h2>
<p><span class="koboSpan" id="kobo.863.1" xmlns="http://www.w3.org/1999/xhtml">The </span><a id="_idIndexMarker451"/><span class="koboSpan" id="kobo.864.1" xmlns="http://www.w3.org/1999/xhtml">data operation of the KeePass database </span><a id="_idIndexMarker452"/><span class="koboSpan" id="kobo.865.1" xmlns="http://www.w3.org/1999/xhtml">is similar to the CRUD operations in a relational database. </span><span class="koboSpan" id="kobo.865.2" xmlns="http://www.w3.org/1999/xhtml">Once we log in and connect to a database, we can access our password data. </span><span class="koboSpan" id="kobo.865.3" xmlns="http://www.w3.org/1999/xhtml">The first step is to retrieve a list of items. </span><span class="koboSpan" id="kobo.865.4" xmlns="http://www.w3.org/1999/xhtml">After login, the first list is retrieved from the root group. </span><span class="koboSpan" id="kobo.865.5" xmlns="http://www.w3.org/1999/xhtml">There is a read-only property, </span><strong class="source-inline"><span class="koboSpan" id="kobo.866.1" xmlns="http://www.w3.org/1999/xhtml">RootGroup</span></strong><span class="koboSpan" id="kobo.867.1" xmlns="http://www.w3.org/1999/xhtml"> ①, which is defined in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.868.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.869.1" xmlns="http://www.w3.org/1999/xhtml"> interface, as we can see in the following code snippet. </span><span class="koboSpan" id="kobo.869.2" xmlns="http://www.w3.org/1999/xhtml">Later, when the user navigates to a different group, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.870.1" xmlns="http://www.w3.org/1999/xhtml">CurrentGroup</span></strong><span class="koboSpan" id="kobo.871.1" xmlns="http://www.w3.org/1999/xhtml"> ② property is used to keep the current location in </span><span class="No-Break"><span class="koboSpan" id="kobo.872.1" xmlns="http://www.w3.org/1999/xhtml">the navigation:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.873.1" xmlns="http://www.w3.org/1999/xhtml">Listing 6.2: IDataStore.cs (https://epa.ms/IDataStore6-2)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.874.1" xmlns="http://www.w3.org/1999/xhtml">
public interface IDataStore&lt;T&gt; {
    #region DS_misc
    T CurrentGroup { get; set; }                         ②
    string CurrentPath { get; }
    T RootGroup { get; }                                 ①
    bool IsOpen { get; }
    string GetStoreName();
    DateTime GetStoreModifiedTime();
    Task&lt;bool&gt; MergeAsync(string path);
    ObservableCollection&lt;PxIcon&gt; GetCustomIcons(...);
    Task&lt;bool&gt; DeleteCustomIconAsync(PxIcon icon);
    ImageSource GetBuiltInImage(PxIcon icon);
    #endregion
    DS_Item ...
</span><span class="koboSpan" id="kobo.874.2" xmlns="http://www.w3.org/1999/xhtml">}</span></pre>
<h3><span class="koboSpan" id="kobo.875.1" xmlns="http://www.w3.org/1999/xhtml">Adding an item</span></h3>
<p><span class="koboSpan" id="kobo.876.1" xmlns="http://www.w3.org/1999/xhtml">The </span><a id="_idIndexMarker453"/><span class="koboSpan" id="kobo.877.1" xmlns="http://www.w3.org/1999/xhtml">first operation in CRUD is a </span><strong class="bold"><span class="koboSpan" id="kobo.878.1" xmlns="http://www.w3.org/1999/xhtml">create</span></strong><span class="koboSpan" id="kobo.879.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="bold"><span class="koboSpan" id="kobo.880.1" xmlns="http://www.w3.org/1999/xhtml">add</span></strong><span class="koboSpan" id="kobo.881.1" xmlns="http://www.w3.org/1999/xhtml"> operation. </span><span class="koboSpan" id="kobo.881.2" xmlns="http://www.w3.org/1999/xhtml">We can add an item that can be an entry or a group to the current group. </span><span class="koboSpan" id="kobo.881.3" xmlns="http://www.w3.org/1999/xhtml">The user interface for an add operation is a toolbar item in </span><strong class="source-inline"><span class="koboSpan" id="kobo.882.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.883.1" xmlns="http://www.w3.org/1999/xhtml">, as </span><span class="No-Break"><span class="koboSpan" id="kobo.884.1" xmlns="http://www.w3.org/1999/xhtml">shown here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.885.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;ContentPage.ToolbarItems&gt;
  &lt;ToolbarItem Text="{x:Static resources:Resources.
</span><span class="koboSpan" id="kobo.885.2" xmlns="http://www.w3.org/1999/xhtml">      action_id_add}" Command="{Binding AddItemCommand}"&gt;
    &lt;ToolbarItem.IconImageSource&gt;
      &lt;FontImageSource FontFamily="FontAwesomeSolid"
        Glyph="{x:Static styles:FontAwesomeSolid.Plus}"
        Color="{DynamicResource SecondaryColor}"
        Size="16" /&gt;
    &lt;/ToolbarItem.IconImageSource&gt;
  &lt;/ToolbarItem&gt;
&lt;/ContentPage.ToolbarItems&gt;</span></pre>
<p><span class="koboSpan" id="kobo.886.1" xmlns="http://www.w3.org/1999/xhtml">We can see a toolbar item icon is shown in the top-right corner of </span><strong class="source-inline"><span class="koboSpan" id="kobo.887.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.888.1" xmlns="http://www.w3.org/1999/xhtml"> in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.889.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.890.1" xmlns="http://www.w3.org/1999/xhtml">.8</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.891.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer076">
<span class="koboSpan" id="kobo.892.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 6.8: Adding an item" src="image/Figure_6.08_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.893.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6.8: Adding an item</span></p>
<p><span class="koboSpan" id="kobo.894.1" xmlns="http://www.w3.org/1999/xhtml">When </span><a id="_idIndexMarker454"/><span class="koboSpan" id="kobo.895.1" xmlns="http://www.w3.org/1999/xhtml">the </span><strong class="bold"><span class="koboSpan" id="kobo.896.1" xmlns="http://www.w3.org/1999/xhtml">Add</span></strong><span class="koboSpan" id="kobo.897.1" xmlns="http://www.w3.org/1999/xhtml"> button is clicked, it invokes the </span><strong class="source-inline"><span class="koboSpan" id="kobo.898.1" xmlns="http://www.w3.org/1999/xhtml">AddItemCommand</span></strong><span class="koboSpan" id="kobo.899.1" xmlns="http://www.w3.org/1999/xhtml"> command defined in </span><strong class="source-inline"><span class="koboSpan" id="kobo.900.1" xmlns="http://www.w3.org/1999/xhtml">ItemsViewModel</span></strong><span class="koboSpan" id="kobo.901.1" xmlns="http://www.w3.org/1999/xhtml"> through </span><span class="No-Break"><span class="koboSpan" id="kobo.902.1" xmlns="http://www.w3.org/1999/xhtml">data binding.</span></span></p>
<p><span class="koboSpan" id="kobo.903.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.904.1" xmlns="http://www.w3.org/1999/xhtml">AddItemCommand</span></strong><span class="koboSpan" id="kobo.905.1" xmlns="http://www.w3.org/1999/xhtml"> command</span><a id="_idIndexMarker455"/><span class="koboSpan" id="kobo.906.1" xmlns="http://www.w3.org/1999/xhtml"> invokes the following </span><strong class="source-inline"><span class="koboSpan" id="kobo.907.1" xmlns="http://www.w3.org/1999/xhtml">OnAddItem()</span></strong><span class="koboSpan" id="kobo.908.1" xmlns="http://www.w3.org/1999/xhtml"> method in the </span><span class="No-Break"><span class="koboSpan" id="kobo.909.1" xmlns="http://www.w3.org/1999/xhtml">view model:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.910.1" xmlns="http://www.w3.org/1999/xhtml">Listing 6.3: ItemsViewModel.cs (https://epa.ms/ItemsViewModel6-3)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.911.1" xmlns="http://www.w3.org/1999/xhtml">
private async void OnAddItem(object obj) {
  string[] templates = {
Properties.Resources.item_subtype_group,
Properties.Resources.item_subtype_entry,
Properties.Resources.item_subtype_notes,
Properties.Resources.item_subtype_pxentry
  };
  var template = await Shell.Current.DisplayActionSheet(
Properties.Resources.pt_id_choosetemplate,
Properties.Resources.action_id_cancel, null,
     templates);                                      ❶
  ItemSubType type = ItemSubType.None;
  if (template == Properties.Resources.item_subtype_entry) {
type = ItemSubType.Entry;
  } else if (template == Properties.Resources.item
       _subtype_pxentry){
type = ItemSubType.PxEntry;
  } else if (template == Properties.Resources.
</span><span class="koboSpan" id="kobo.911.2" xmlns="http://www.w3.org/1999/xhtml">      item_subtype_group) {
type = ItemSubType.Group;
  } else if (template == Properties.Resources.item
      _subtype_notes) {
type = ItemSubType.Notes;
  } else if (template == Properties.Resources.action
      _id_cancel) {
type = ItemSubType.None;
  } else {
type = ItemSubType.None;
  }
  if (type != ItemSubType.None) {
var itemType = new Dictionary&lt;string, object&gt;         ❷
{
      { "Type", type }
};
await Shell.Current.GoToAsync(nameof(NewItemPage),
    itemType);                                        ❸
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.912.1" xmlns="http://www.w3.org/1999/xhtml">❶ In this </span><strong class="source-inline"><span class="koboSpan" id="kobo.913.1" xmlns="http://www.w3.org/1999/xhtml">OnAddItem()</span></strong><span class="koboSpan" id="kobo.914.1" xmlns="http://www.w3.org/1999/xhtml"> function, </span><strong class="source-inline"><span class="koboSpan" id="kobo.915.1" xmlns="http://www.w3.org/1999/xhtml">ActionSheet</span></strong><span class="koboSpan" id="kobo.916.1" xmlns="http://www.w3.org/1999/xhtml"> is displayed to let the user choose an item type. </span><span class="koboSpan" id="kobo.916.2" xmlns="http://www.w3.org/1999/xhtml">The item type can be a group or </span><span class="No-Break"><span class="koboSpan" id="kobo.917.1" xmlns="http://www.w3.org/1999/xhtml">an entry.</span></span></p>
<p><span class="koboSpan" id="kobo.918.1" xmlns="http://www.w3.org/1999/xhtml">❷ Once </span><a id="_idIndexMarker456"/><span class="koboSpan" id="kobo.919.1" xmlns="http://www.w3.org/1999/xhtml">we get the item type, we can build a dictionary with the item type and the name of the query parameter. </span><span class="koboSpan" id="kobo.919.2" xmlns="http://www.w3.org/1999/xhtml">We store this object of the dictionary in an </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.920.1" xmlns="http://www.w3.org/1999/xhtml">itemType</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.921.1" xmlns="http://www.w3.org/1999/xhtml"> variable.</span></span></p>
<p><span class="koboSpan" id="kobo.922.1" xmlns="http://www.w3.org/1999/xhtml">❸ This </span><strong class="source-inline"><span class="koboSpan" id="kobo.923.1" xmlns="http://www.w3.org/1999/xhtml">itemType</span></strong><span class="koboSpan" id="kobo.924.1" xmlns="http://www.w3.org/1999/xhtml"> variable can be passed to </span><strong class="source-inline"><span class="koboSpan" id="kobo.925.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></strong><span class="koboSpan" id="kobo.926.1" xmlns="http://www.w3.org/1999/xhtml"> as a query parameter. </span><span class="koboSpan" id="kobo.926.2" xmlns="http://www.w3.org/1999/xhtml">In </span><a href="B16588_05.xhtml#_idTextAnchor107"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.927.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 5</span></em></span></a><span class="koboSpan" id="kobo.928.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.929.1" xmlns="http://www.w3.org/1999/xhtml">Introducing Shell and Navigation</span></em><span class="koboSpan" id="kobo.930.1" xmlns="http://www.w3.org/1999/xhtml">, we learned how to pass a string value as a query parameter to a page in Shell navigation. </span><span class="koboSpan" id="kobo.930.2" xmlns="http://www.w3.org/1999/xhtml">Here, we can pass an object as a query parameter to a page after we wrap it in </span><span class="No-Break"><span class="koboSpan" id="kobo.931.1" xmlns="http://www.w3.org/1999/xhtml">a dictionary.</span></span></p>
<p><span class="koboSpan" id="kobo.932.1" xmlns="http://www.w3.org/1999/xhtml">To add a new item, the user interface is defined in </span><strong class="source-inline"><span class="koboSpan" id="kobo.933.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></strong><span class="koboSpan" id="kobo.934.1" xmlns="http://www.w3.org/1999/xhtml">, and the logic is processed</span><a id="_idIndexMarker457"/><span class="koboSpan" id="kobo.935.1" xmlns="http://www.w3.org/1999/xhtml"> in </span><strong class="source-inline"><span class="koboSpan" id="kobo.936.1" xmlns="http://www.w3.org/1999/xhtml">NewItemViewModel</span></strong><span class="koboSpan" id="kobo.937.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.937.2" xmlns="http://www.w3.org/1999/xhtml">Let’s review the implementation of </span><strong class="source-inline"><span class="koboSpan" id="kobo.938.1" xmlns="http://www.w3.org/1999/xhtml">NewItemViewModel</span></strong><span class="koboSpan" id="kobo.939.1" xmlns="http://www.w3.org/1999/xhtml"> in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.940.1" xmlns="http://www.w3.org/1999/xhtml">Listing 6.4</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.941.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.942.1" xmlns="http://www.w3.org/1999/xhtml">Listing 6.4: NewItemViewModel.cs  (https://epa.ms/NewItemViewModel6-4)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.943.1" xmlns="http://www.w3.org/1999/xhtml">
using KPCLib;
using PassXYZLib;
namespace PassXYZ.Vault.ViewModels;
[QueryProperty(nameof(Type), nameof(Type))]               ①
public class NewItemViewModel : BaseViewModel {
private string text;
private string description;
private ItemSubType _type = ItemSubType.Group;
public NewItemViewModel() {
        SaveCommand = new Command(OnSave, ValidateSave);
        CancelCommand = new Command(OnCancel);
        this.PropertyChanged +=
            (_, __) =&gt; SaveCommand.ChangeCanExecute();
        Title = "New Item";
}
private void SetTitle(ItemSubType type)...
</span><span class="koboSpan" id="kobo.943.2" xmlns="http://www.w3.org/1999/xhtml">private bool ValidateSave()...
</span><span class="koboSpan" id="kobo.943.3" xmlns="http://www.w3.org/1999/xhtml">public ItemSubType Type {                                 ②
        get =&gt; _type;
        set {
            _ = SetProperty(ref _type, value);
            SetTitle(_type);
        }
    }
public string Text...
</span><span class="koboSpan" id="kobo.943.4" xmlns="http://www.w3.org/1999/xhtml">public string Description...
</span><span class="koboSpan" id="kobo.943.5" xmlns="http://www.w3.org/1999/xhtml">public Command SaveCommand { get; }
public Command CancelCommand { get; }
private async void OnCancel() {
        await Shell.Current.GoToAsyc(".."); }
private async void OnSave() {
        Item? </span><span class="koboSpan" id="kobo.943.6" xmlns="http://www.w3.org/1999/xhtml">newItem = DataStore.CreateNewItem(_type);   ③
        if (newItem != null) {
            newItem.Name = Text;
            newItem.Notes = Description;
            await DataStore.AddItemAsync(newItem);        ④
        }
    await Shell.Current.GoToAsyc("..");
}
}</span></pre>
<p><span class="koboSpan" id="kobo.944.1" xmlns="http://www.w3.org/1999/xhtml">The design of </span><strong class="source-inline"><span class="koboSpan" id="kobo.945.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></strong><span class="koboSpan" id="kobo.946.1" xmlns="http://www.w3.org/1999/xhtml"> is very simple. </span><span class="koboSpan" id="kobo.946.2" xmlns="http://www.w3.org/1999/xhtml">It includes two controls, </span><strong class="source-inline"><span class="koboSpan" id="kobo.947.1" xmlns="http://www.w3.org/1999/xhtml">Entry</span></strong><span class="koboSpan" id="kobo.948.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.949.1" xmlns="http://www.w3.org/1999/xhtml">Editor</span></strong><span class="koboSpan" id="kobo.950.1" xmlns="http://www.w3.org/1999/xhtml"> (used to edit the name and notes of an item). </span><strong class="source-inline"><span class="koboSpan" id="kobo.951.1" xmlns="http://www.w3.org/1999/xhtml">Entry</span></strong><span class="koboSpan" id="kobo.952.1" xmlns="http://www.w3.org/1999/xhtml"> is used to enter or edit a single line of text, and </span><strong class="source-inline"><span class="koboSpan" id="kobo.953.1" xmlns="http://www.w3.org/1999/xhtml">Editor</span></strong><span class="koboSpan" id="kobo.954.1" xmlns="http://www.w3.org/1999/xhtml"> is used to edit multiple lines of text. </span><span class="koboSpan" id="kobo.954.2" xmlns="http://www.w3.org/1999/xhtml">In the view model </span><strong class="source-inline"><span class="koboSpan" id="kobo.955.1" xmlns="http://www.w3.org/1999/xhtml">NewItemViewModel</span></strong><span class="koboSpan" id="kobo.956.1" xmlns="http://www.w3.org/1999/xhtml"> view model, we can see how to add a new item, </span><span class="No-Break"><span class="koboSpan" id="kobo.957.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<p><span class="koboSpan" id="kobo.958.1" xmlns="http://www.w3.org/1999/xhtml">① The query </span><a id="_idIndexMarker458"/><span class="koboSpan" id="kobo.959.1" xmlns="http://www.w3.org/1999/xhtml">parameter is defined with </span><strong class="source-inline"><span class="koboSpan" id="kobo.960.1" xmlns="http://www.w3.org/1999/xhtml">QueryPropertyAttribute</span></strong><span class="koboSpan" id="kobo.961.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.961.2" xmlns="http://www.w3.org/1999/xhtml">② The </span><strong class="source-inline"><span class="koboSpan" id="kobo.962.1" xmlns="http://www.w3.org/1999/xhtml">Type</span></strong><span class="koboSpan" id="kobo.963.1" xmlns="http://www.w3.org/1999/xhtml"> property declared as </span><strong class="source-inline"><span class="koboSpan" id="kobo.964.1" xmlns="http://www.w3.org/1999/xhtml">ItemSubType</span></strong><span class="koboSpan" id="kobo.965.1" xmlns="http://www.w3.org/1999/xhtml"> is used to receive the query parameter. </span><span class="koboSpan" id="kobo.965.2" xmlns="http://www.w3.org/1999/xhtml">The received item type is stored in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.966.1" xmlns="http://www.w3.org/1999/xhtml">_type</span></strong><span class="koboSpan" id="kobo.967.1" xmlns="http://www.w3.org/1999/xhtml"> backing variable. </span><span class="koboSpan" id="kobo.967.2" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.968.1" xmlns="http://www.w3.org/1999/xhtml">NewItemPage</span></strong><span class="koboSpan" id="kobo.969.1" xmlns="http://www.w3.org/1999/xhtml">, two toolbar items are defined, and the actions are bound to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.970.1" xmlns="http://www.w3.org/1999/xhtml">OnSave</span></strong><span class="koboSpan" id="kobo.971.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.972.1" xmlns="http://www.w3.org/1999/xhtml">OnCancel</span></strong><span class="koboSpan" id="kobo.973.1" xmlns="http://www.w3.org/1999/xhtml"> methods in the </span><span class="No-Break"><span class="koboSpan" id="kobo.974.1" xmlns="http://www.w3.org/1999/xhtml">view model.</span></span></p>
<p><span class="koboSpan" id="kobo.975.1" xmlns="http://www.w3.org/1999/xhtml">Once the user enters a name and notes in the user interface and clicks the </span><strong class="bold"><span class="koboSpan" id="kobo.976.1" xmlns="http://www.w3.org/1999/xhtml">Save</span></strong><span class="koboSpan" id="kobo.977.1" xmlns="http://www.w3.org/1999/xhtml"> button, ③ a new item instance is created using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.978.1" xmlns="http://www.w3.org/1999/xhtml">CreateNewItem()</span></strong><span class="koboSpan" id="kobo.979.1" xmlns="http://www.w3.org/1999/xhtml"> factory method, which is defined in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.980.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.981.1" xmlns="http://www.w3.org/1999/xhtml"> interface. </span><span class="koboSpan" id="kobo.981.2" xmlns="http://www.w3.org/1999/xhtml">④ After filling in the new item instance from the user input, we can add this new item to the database by invoking the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.982.1" xmlns="http://www.w3.org/1999/xhtml">AddItemAsync()</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.983.1" xmlns="http://www.w3.org/1999/xhtml"> method.</span></span></p>
<p><span class="koboSpan" id="kobo.984.1" xmlns="http://www.w3.org/1999/xhtml">Now we’ve implemented the add operation, let’s implement the rest of the data operations in the </span><span class="No-Break"><span class="koboSpan" id="kobo.985.1" xmlns="http://www.w3.org/1999/xhtml">next section.</span></span></p>
<h3><span class="koboSpan" id="kobo.986.1" xmlns="http://www.w3.org/1999/xhtml">Editing or deleting an item</span></h3>
<p><span class="koboSpan" id="kobo.987.1" xmlns="http://www.w3.org/1999/xhtml">In CRUD operations, we </span><a id="_idIndexMarker459"/><span class="koboSpan" id="kobo.988.1" xmlns="http://www.w3.org/1999/xhtml">don’t need an existing item to perform a create operation, but we need to have an instance of the existing item to perform update and </span><span class="No-Break"><span class="koboSpan" id="kobo.989.1" xmlns="http://www.w3.org/1999/xhtml">delete operations.</span></span></p>
<p><span class="koboSpan" id="kobo.990.1" xmlns="http://www.w3.org/1999/xhtml">For a read operation, if the item is a group, we implement it by sending an </span><strong class="source-inline"><span class="koboSpan" id="kobo.991.1" xmlns="http://www.w3.org/1999/xhtml">ItemId</span></strong><span class="koboSpan" id="kobo.992.1" xmlns="http://www.w3.org/1999/xhtml"> query parameter to </span><strong class="source-inline"><span class="koboSpan" id="kobo.993.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.994.1" xmlns="http://www.w3.org/1999/xhtml"> and finding the group in the setter of </span><strong class="source-inline"><span class="koboSpan" id="kobo.995.1" xmlns="http://www.w3.org/1999/xhtml">ItemId</span></strong><span class="koboSpan" id="kobo.996.1" xmlns="http://www.w3.org/1999/xhtml"> in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.997.1" xmlns="http://www.w3.org/1999/xhtml">ItemsViewModel</span></strong><span class="koboSpan" id="kobo.998.1" xmlns="http://www.w3.org/1999/xhtml"> view model. </span><span class="koboSpan" id="kobo.998.2" xmlns="http://www.w3.org/1999/xhtml">If the item is an entry, we send an </span><strong class="source-inline"><span class="koboSpan" id="kobo.999.1" xmlns="http://www.w3.org/1999/xhtml">ItemId</span></strong><span class="koboSpan" id="kobo.1000.1" xmlns="http://www.w3.org/1999/xhtml"> query parameter to </span><strong class="source-inline"><span class="koboSpan" id="kobo.1001.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailPage</span></strong><span class="koboSpan" id="kobo.1002.1" xmlns="http://www.w3.org/1999/xhtml"> and find the entry in the setter of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1003.1" xmlns="http://www.w3.org/1999/xhtml">ItemId</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.1004.1" xmlns="http://www.w3.org/1999/xhtml">in </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1005.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetailViewModel</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1006.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.1007.1" xmlns="http://www.w3.org/1999/xhtml">For update/edit and delete operations, we</span><a id="_idIndexMarker460"/><span class="koboSpan" id="kobo.1008.1" xmlns="http://www.w3.org/1999/xhtml"> can use context actions to do it. </span><span class="koboSpan" id="kobo.1008.2" xmlns="http://www.w3.org/1999/xhtml">With context actions, we can act on an item in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1009.1" xmlns="http://www.w3.org/1999/xhtml">ListView</span></strong><span class="koboSpan" id="kobo.1010.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1010.2" xmlns="http://www.w3.org/1999/xhtml">The context actions look quite different on </span><em class="italic"><span class="koboSpan" id="kobo.1011.1" xmlns="http://www.w3.org/1999/xhtml">iOS</span></em><span class="koboSpan" id="kobo.1012.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.1013.1" xmlns="http://www.w3.org/1999/xhtml">Android</span></em><span class="koboSpan" id="kobo.1014.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><em class="italic"><span class="koboSpan" id="kobo.1015.1" xmlns="http://www.w3.org/1999/xhtml">Windows</span></em><span class="koboSpan" id="kobo.1016.1" xmlns="http://www.w3.org/1999/xhtml">, as we can see in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1017.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1018.1" xmlns="http://www.w3.org/1999/xhtml">.9</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.1019.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer077">
<span class="koboSpan" id="kobo.1020.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 6.9: Context actions" src="image/Figure_6.09_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.1021.1" xmlns="http://www.w3.org/1999/xhtml">Figure 6.9: Context actions</span></p>
<p><span class="koboSpan" id="kobo.1022.1" xmlns="http://www.w3.org/1999/xhtml">On</span><a id="_idIndexMarker461"/><span class="koboSpan" id="kobo.1023.1" xmlns="http://www.w3.org/1999/xhtml"> the iOS platform, you can take action on an</span><a id="_idIndexMarker462"/><span class="koboSpan" id="kobo.1024.1" xmlns="http://www.w3.org/1999/xhtml"> item by sliding it to the left. </span><span class="koboSpan" id="kobo.1024.2" xmlns="http://www.w3.org/1999/xhtml">On an Android system, you can long-press an item and the context actions menu is shown in the top-right corner of the screen. </span><span class="koboSpan" id="kobo.1024.3" xmlns="http://www.w3.org/1999/xhtml">On Windows, you may be familiar with the right mouse click to see the context </span><span class="No-Break"><span class="koboSpan" id="kobo.1025.1" xmlns="http://www.w3.org/1999/xhtml">actions menu.</span></span></p>
<p><span class="koboSpan" id="kobo.1026.1" xmlns="http://www.w3.org/1999/xhtml">In our app, we implement a context actions menu in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1027.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.1028.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1028.2" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.1029.1" xmlns="http://www.w3.org/1999/xhtml">ItemsPage</span></strong><span class="koboSpan" id="kobo.1030.1" xmlns="http://www.w3.org/1999/xhtml">, we define context actions in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1031.1" xmlns="http://www.w3.org/1999/xhtml">ViewCell</span></strong><span class="koboSpan" id="kobo.1032.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="No-Break"><span class="koboSpan" id="kobo.1033.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1034.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;ListView.ItemTemplate&gt;
  &lt;DataTemplate&gt;
    &lt;ViewCell&gt;
      &lt;ViewCell.ContextActions&gt;
        &lt;MenuItem Clicked="OnMenuEdit"                    ❶
          CommandParameter="{Binding .}"
          Text="{x:Static resources:Resources.
</span><span class="koboSpan" id="kobo.1034.2" xmlns="http://www.w3.org/1999/xhtml">              action_id_edit}" /&gt;
        &lt;MenuItem Clicked="OnMenuDeleteAsync"             ❷
          CommandParameter="{Binding .}"
          Text="{x:Static resources:Resources.
</span><span class="koboSpan" id="kobo.1034.3" xmlns="http://www.w3.org/1999/xhtml">              action_id_delete}"
          IsDestructive="True" /&gt;
      &lt;/ViewCell.ContextActions&gt;
      &lt;Grid Padding="10" x:DataType="model:Item" ...&gt;
    &lt;/ViewCell&gt;
  &lt;/DataTemplate&gt;
&lt;/ListView.ItemTemplate&gt;</span></pre>
<p><span class="koboSpan" id="kobo.1035.1" xmlns="http://www.w3.org/1999/xhtml">We </span><a id="_idIndexMarker463"/><span class="koboSpan" id="kobo.1036.1" xmlns="http://www.w3.org/1999/xhtml">define two menu items for edit and delete </span><a id="_idIndexMarker464"/><span class="koboSpan" id="kobo.1037.1" xmlns="http://www.w3.org/1999/xhtml">context actions. </span><span class="koboSpan" id="kobo.1037.2" xmlns="http://www.w3.org/1999/xhtml">Two event handlers, ❶ </span><strong class="source-inline"><span class="koboSpan" id="kobo.1038.1" xmlns="http://www.w3.org/1999/xhtml">OnMenuEdit</span></strong><span class="koboSpan" id="kobo.1039.1" xmlns="http://www.w3.org/1999/xhtml"> and ❷ </span><strong class="source-inline"><span class="koboSpan" id="kobo.1040.1" xmlns="http://www.w3.org/1999/xhtml">OnMenuDeleteAsync</span></strong><span class="koboSpan" id="kobo.1041.1" xmlns="http://www.w3.org/1999/xhtml">, are assigned to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1042.1" xmlns="http://www.w3.org/1999/xhtml">Clicked</span></strong><span class="koboSpan" id="kobo.1043.1" xmlns="http://www.w3.org/1999/xhtml"> event. </span><span class="koboSpan" id="kobo.1043.2" xmlns="http://www.w3.org/1999/xhtml">We can review the source code of the event </span><span class="No-Break"><span class="koboSpan" id="kobo.1044.1" xmlns="http://www.w3.org/1999/xhtml">handlers here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1045.1" xmlns="http://www.w3.org/1999/xhtml">
private void OnMenuEdit(object sender, EventArgs e) {
  var mi = (MenuItem)sender;
  if (mi.CommandParameter is Item item) {
    _viewModel.Update(item);                              ❶
  }
}
private async void OnMenuDeleteAsync(object sender,
     EventArgs e) {
  var mi = (MenuItem)sender;
  if (mi.CommandParameter is Item item) {
    await _viewModel.DeletedAsync(item);                  ❷
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.1046.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.1047.1" xmlns="http://www.w3.org/1999/xhtml">OnMenuEdit</span></strong><span class="koboSpan" id="kobo.1048.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.1049.1" xmlns="http://www.w3.org/1999/xhtml">OnMenuDeleteAsync</span></strong><span class="koboSpan" id="kobo.1050.1" xmlns="http://www.w3.org/1999/xhtml"> event handlers call the ❶ </span><strong class="source-inline"><span class="koboSpan" id="kobo.1051.1" xmlns="http://www.w3.org/1999/xhtml">Update()</span></strong><span class="koboSpan" id="kobo.1052.1" xmlns="http://www.w3.org/1999/xhtml"> and ❷ </span><strong class="source-inline"><span class="koboSpan" id="kobo.1053.1" xmlns="http://www.w3.org/1999/xhtml">DeleteAsync()</span></strong><span class="koboSpan" id="kobo.1054.1" xmlns="http://www.w3.org/1999/xhtml"> methods in the view model. </span><span class="koboSpan" id="kobo.1054.2" xmlns="http://www.w3.org/1999/xhtml">Let’s review the source code of these</span><a id="_idIndexMarker465"/><span class="koboSpan" id="kobo.1055.1" xmlns="http://www.w3.org/1999/xhtml"> functions in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1056.1" xmlns="http://www.w3.org/1999/xhtml">ItemsViewModel</span></strong><span class="koboSpan" id="kobo.1057.1" xmlns="http://www.w3.org/1999/xhtml"> view</span><a id="_idIndexMarker466"/><span class="koboSpan" id="kobo.1058.1" xmlns="http://www.w3.org/1999/xhtml"> model, </span><span class="No-Break"><span class="koboSpan" id="kobo.1059.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1060.1" xmlns="http://www.w3.org/1999/xhtml">
public async void Update(Item item) {
    if (item == null) { return; }
    await Shell.Current.Navigation.PushAsync(new
        FieldEditPage(async (string k, string v, bool
            isProtected) =&gt; {                             ❶
        item.Name = k;
        item.Notes = v;
        await DataStore.UpdateItemAsync(item);            ❷
    }, item.Name, item.Notes, true));
}
public async Task DeletedAsync(Item item) {
    if (item == null) { return; }
    if (Items.Remove(item)) {
        _ = await DataStore.DeleteItemAsync(item.Id);     ❸
    }
    else { return; }
}</span></pre>
<p><span class="koboSpan" id="kobo.1061.1" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.1062.1" xmlns="http://www.w3.org/1999/xhtml">ItemsViewModel</span></strong><span class="koboSpan" id="kobo.1063.1" xmlns="http://www.w3.org/1999/xhtml">, to edit or update an item, ❶ we use a </span><strong class="source-inline"><span class="koboSpan" id="kobo.1064.1" xmlns="http://www.w3.org/1999/xhtml">FieldEditPage</span></strong><span class="koboSpan" id="kobo.1065.1" xmlns="http://www.w3.org/1999/xhtml"> content page to perform the editing. </span><span class="koboSpan" id="kobo.1065.2" xmlns="http://www.w3.org/1999/xhtml">When we invoke the constructor of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1066.1" xmlns="http://www.w3.org/1999/xhtml">FieldEditPage</span></strong><span class="koboSpan" id="kobo.1067.1" xmlns="http://www.w3.org/1999/xhtml">, an anonymous function is passed as a parameter. </span><span class="koboSpan" id="kobo.1067.2" xmlns="http://www.w3.org/1999/xhtml">When the user completes the editing in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1068.1" xmlns="http://www.w3.org/1999/xhtml">FieldEditPage</span></strong><span class="koboSpan" id="kobo.1069.1" xmlns="http://www.w3.org/1999/xhtml">, this function will be invoked. </span><span class="koboSpan" id="kobo.1069.2" xmlns="http://www.w3.org/1999/xhtml">In this function, ❷ we call the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1070.1" xmlns="http://www.w3.org/1999/xhtml">UpdateItemAsync()</span></strong><span class="koboSpan" id="kobo.1071.1" xmlns="http://www.w3.org/1999/xhtml"> method of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1072.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1073.1" xmlns="http://www.w3.org/1999/xhtml"> interface to update </span><span class="No-Break"><span class="koboSpan" id="kobo.1074.1" xmlns="http://www.w3.org/1999/xhtml">the item.</span></span></p>
<p><span class="koboSpan" id="kobo.1075.1" xmlns="http://www.w3.org/1999/xhtml">The </span><a id="_idIndexMarker467"/><span class="koboSpan" id="kobo.1076.1" xmlns="http://www.w3.org/1999/xhtml">delete operation is quite simple. </span><span class="koboSpan" id="kobo.1076.2" xmlns="http://www.w3.org/1999/xhtml">We can</span><a id="_idIndexMarker468"/><span class="koboSpan" id="kobo.1077.1" xmlns="http://www.w3.org/1999/xhtml"> just call the ❸ </span><strong class="source-inline"><span class="koboSpan" id="kobo.1078.1" xmlns="http://www.w3.org/1999/xhtml">DeleteItemAsync()</span></strong><span class="koboSpan" id="kobo.1079.1" xmlns="http://www.w3.org/1999/xhtml"> method of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1080.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1081.1" xmlns="http://www.w3.org/1999/xhtml"> interface to remove </span><span class="No-Break"><span class="koboSpan" id="kobo.1082.1" xmlns="http://www.w3.org/1999/xhtml">the item.</span></span></p>
<p><span class="koboSpan" id="kobo.1083.1" xmlns="http://www.w3.org/1999/xhtml">After we implement CRUD operations, our app has most of the desired features of a password manager app. </span><span class="koboSpan" id="kobo.1083.2" xmlns="http://www.w3.org/1999/xhtml">We can create a new database by signing up a new user. </span><span class="koboSpan" id="kobo.1083.3" xmlns="http://www.w3.org/1999/xhtml">After we have a new database, we can log in to access our data. </span><span class="koboSpan" id="kobo.1083.4" xmlns="http://www.w3.org/1999/xhtml">After we create entries and groups, we can also edit or </span><span class="No-Break"><span class="koboSpan" id="kobo.1084.1" xmlns="http://www.w3.org/1999/xhtml">delete them.</span></span></p>
<p><span class="koboSpan" id="kobo.1085.1" xmlns="http://www.w3.org/1999/xhtml">For a password manager app, there are more desired features, such as fingerprint scanning, one-time password, and so on. </span><span class="koboSpan" id="kobo.1085.2" xmlns="http://www.w3.org/1999/xhtml">Most of these desired features are already included in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1086.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.1087.1" xmlns="http://www.w3.org/1999/xhtml"> 1.x.x releases. </span><span class="koboSpan" id="kobo.1087.2" xmlns="http://www.w3.org/1999/xhtml">I will continue migrating features from 1.x.x to the .NET MAUI (2.x.x) releases when the dependencies are available for .</span><span class="No-Break"><span class="koboSpan" id="kobo.1088.1" xmlns="http://www.w3.org/1999/xhtml">NET MAUI.</span></span></p>
<p class="callout-heading"><span class="koboSpan" id="kobo.1089.1" xmlns="http://www.w3.org/1999/xhtml">Device features</span></p>
<p class="callout"><span class="koboSpan" id="kobo.1090.1" xmlns="http://www.w3.org/1999/xhtml">We can access device features using the class in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1091.1" xmlns="http://www.w3.org/1999/xhtml">Microsoft.Maui.Devices</span></strong><span class="koboSpan" id="kobo.1092.1" xmlns="http://www.w3.org/1999/xhtml"> namespace. </span><span class="koboSpan" id="kobo.1092.2" xmlns="http://www.w3.org/1999/xhtml">The device features implementation originated from </span><strong class="source-inline"><span class="koboSpan" id="kobo.1093.1" xmlns="http://www.w3.org/1999/xhtml">Xamarin.Essentials</span></strong><span class="koboSpan" id="kobo.1094.1" xmlns="http://www.w3.org/1999/xhtml"> and then changed to </span><strong class="source-inline"><span class="koboSpan" id="kobo.1095.1" xmlns="http://www.w3.org/1999/xhtml">Maui.Essentials</span></strong><span class="koboSpan" id="kobo.1096.1" xmlns="http://www.w3.org/1999/xhtml"> in .NET MAUI preview versions. </span><span class="koboSpan" id="kobo.1096.2" xmlns="http://www.w3.org/1999/xhtml">It finally became </span><strong class="source-inline"><span class="koboSpan" id="kobo.1097.1" xmlns="http://www.w3.org/1999/xhtml">Microsoft.Maui.Devices</span></strong><span class="koboSpan" id="kobo.1098.1" xmlns="http://www.w3.org/1999/xhtml"> in GA releases. </span><span class="koboSpan" id="kobo.1098.2" xmlns="http://www.w3.org/1999/xhtml">Not all device features can be found in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1099.1" xmlns="http://www.w3.org/1999/xhtml">Microsoft.Maui.Devices</span></strong><span class="koboSpan" id="kobo.1100.1" xmlns="http://www.w3.org/1999/xhtml">, such as fingerprint scanning. </span><span class="koboSpan" id="kobo.1100.2" xmlns="http://www.w3.org/1999/xhtml">To support fingerprint scanning in .NET MAUI, I need to wait for a library such as </span><strong class="source-inline"><span class="koboSpan" id="kobo.1101.1" xmlns="http://www.w3.org/1999/xhtml">Plugin.Fingerprint</span></strong><span class="koboSpan" id="kobo.1102.1" xmlns="http://www.w3.org/1999/xhtml">, available in .NET MAUI, to enable it </span><span class="No-Break"><span class="koboSpan" id="kobo.1103.1" xmlns="http://www.w3.org/1999/xhtml">in </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1104.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1105.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<h1 id="_idParaDest-127"><a id="_idTextAnchor141"/><span class="koboSpan" id="kobo.1106.1" xmlns="http://www.w3.org/1999/xhtml">Summary</span></h1>
<p><span class="koboSpan" id="kobo.1107.1" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we started with the introduction of design principles. </span><span class="koboSpan" id="kobo.1107.2" xmlns="http://www.w3.org/1999/xhtml">After that, we introduced SOLID design principles and I shared lessons learned in the design of our app. </span><span class="koboSpan" id="kobo.1107.3" xmlns="http://www.w3.org/1999/xhtml">One of the most important SOLID principles is </span><strong class="bold"><span class="koboSpan" id="kobo.1108.1" xmlns="http://www.w3.org/1999/xhtml">Dependency Inversion Principle</span></strong><span class="koboSpan" id="kobo.1109.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="bold"><span class="koboSpan" id="kobo.1110.1" xmlns="http://www.w3.org/1999/xhtml">DIP</span></strong><span class="koboSpan" id="kobo.1111.1" xmlns="http://www.w3.org/1999/xhtml">). </span><strong class="bold"><span class="koboSpan" id="kobo.1112.1" xmlns="http://www.w3.org/1999/xhtml">Dependency Injection</span></strong><span class="koboSpan" id="kobo.1113.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="bold"><span class="koboSpan" id="kobo.1114.1" xmlns="http://www.w3.org/1999/xhtml">DI</span></strong><span class="koboSpan" id="kobo.1115.1" xmlns="http://www.w3.org/1999/xhtml">) is the technique to apply DIP in the actual implementation. </span><span class="koboSpan" id="kobo.1115.2" xmlns="http://www.w3.org/1999/xhtml">In our app, we use the .NET MAUI built-in DI service to decouple dependencies so that we can separate the implementation of the service from </span><span class="No-Break"><span class="koboSpan" id="kobo.1116.1" xmlns="http://www.w3.org/1999/xhtml">the interface.</span></span></p>
<p><span class="koboSpan" id="kobo.1117.1" xmlns="http://www.w3.org/1999/xhtml">With all the knowledge that we gathered about .NET MAUI, we completed our app implementation by replacing </span><strong class="source-inline"><span class="koboSpan" id="kobo.1118.1" xmlns="http://www.w3.org/1999/xhtml">MockDataStore</span></strong><span class="koboSpan" id="kobo.1119.1" xmlns="http://www.w3.org/1999/xhtml"> with the actual implementation. </span><span class="koboSpan" id="kobo.1119.2" xmlns="http://www.w3.org/1999/xhtml">We implemented CRUD operations on top of this new </span><strong class="source-inline"><span class="koboSpan" id="kobo.1120.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1121.1" xmlns="http://www.w3.org/1999/xhtml"> service. </span><span class="koboSpan" id="kobo.1121.2" xmlns="http://www.w3.org/1999/xhtml">We have a fully functional password manager </span><span class="No-Break"><span class="koboSpan" id="kobo.1122.1" xmlns="http://www.w3.org/1999/xhtml">app now.</span></span></p>
<p><span class="koboSpan" id="kobo.1123.1" xmlns="http://www.w3.org/1999/xhtml">With the current version of the password manager app, we conclude </span><em class="italic"><span class="koboSpan" id="kobo.1124.1" xmlns="http://www.w3.org/1999/xhtml">Part 1</span></em><span class="koboSpan" id="kobo.1125.1" xmlns="http://www.w3.org/1999/xhtml"> of </span><span class="No-Break"><span class="koboSpan" id="kobo.1126.1" xmlns="http://www.w3.org/1999/xhtml">this book.</span></span></p>
<p><span class="koboSpan" id="kobo.1127.1" xmlns="http://www.w3.org/1999/xhtml">In </span><em class="italic"><span class="koboSpan" id="kobo.1128.1" xmlns="http://www.w3.org/1999/xhtml">Part 2</span></em><span class="koboSpan" id="kobo.1129.1" xmlns="http://www.w3.org/1999/xhtml"> of the book, we will explore the Blazor Hybrid app in .NET MAUI. </span><span class="koboSpan" id="kobo.1129.2" xmlns="http://www.w3.org/1999/xhtml">This is a new capability that does not exist in Xamarin.Forms. </span><span class="koboSpan" id="kobo.1129.3" xmlns="http://www.w3.org/1999/xhtml">With Blazor support, we can bring some modern frontend development techniques to .NET </span><span class="No-Break"><span class="koboSpan" id="kobo.1130.1" xmlns="http://www.w3.org/1999/xhtml">MAUI development.</span></span></p>
<h1 id="_idParaDest-128"><a id="_idTextAnchor142"/><span class="koboSpan" id="kobo.1131.1" xmlns="http://www.w3.org/1999/xhtml">Further reading</span></h1>
<ul>
<li><strong class="bold"><span class="koboSpan" id="kobo.1132.1" xmlns="http://www.w3.org/1999/xhtml">Autofac</span></strong><span class="koboSpan" id="kobo.1133.1" xmlns="http://www.w3.org/1999/xhtml"> is an </span><strong class="bold"><span class="koboSpan" id="kobo.1134.1" xmlns="http://www.w3.org/1999/xhtml">inversion of control</span></strong><span class="koboSpan" id="kobo.1135.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="bold"><span class="koboSpan" id="kobo.1136.1" xmlns="http://www.w3.org/1999/xhtml">IoC</span></strong><span class="koboSpan" id="kobo.1137.1" xmlns="http://www.w3.org/1999/xhtml">) container for .NET Core, ASP.NET Core, .NET 4.5.1+, </span><span class="No-Break"><span class="koboSpan" id="kobo.1138.1" xmlns="http://www.w3.org/1999/xhtml">and more:</span></span></li>
</ul>
<p><a href="https://autofac.org/"><span class="No-Break"><span class="koboSpan" id="kobo.1139.1" xmlns="http://www.w3.org/1999/xhtml">https://autofac.org/</span></span></a></p>
<ul>
<li><strong class="bold"><span class="koboSpan" id="kobo.1140.1" xmlns="http://www.w3.org/1999/xhtml">Simple Injector</span></strong><span class="koboSpan" id="kobo.1141.1" xmlns="http://www.w3.org/1999/xhtml"> is a DI container that can support .NET 4.5 and .</span><span class="No-Break"><span class="koboSpan" id="kobo.1142.1" xmlns="http://www.w3.org/1999/xhtml">NET Standard:</span></span></li>
</ul>
<p><a href="https://simpleinjector.org/"><span class="No-Break"><span class="koboSpan" id="kobo.1143.1" xmlns="http://www.w3.org/1999/xhtml">https://simpleinjector.org/</span></span></a></p>
</div>
</body>
</html>
