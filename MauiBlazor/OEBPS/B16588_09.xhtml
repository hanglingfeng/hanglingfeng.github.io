<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>B16588_09</title>
<link href="css/style-JRserifv6.css" rel="stylesheet" type="text/css"/>
<!-- kobo-style -->
<style id="koboSpanStyle" type="text/css" xmlns="http://www.w3.org/1999/xhtml">.koboSpan { -webkit-text-combine: inherit; }</style>
</head>
<body id="B16588_09" xml:lang="en-GB">
<div id="_idContainer106">
<h1 class="chapter-number" id="_idParaDest-170"><a id="_idTextAnchor186"/><span class="koboSpan" id="kobo.1.1" xmlns="http://www.w3.org/1999/xhtml">9</span></h1>
<h1 id="_idParaDest-171"><a id="_idTextAnchor187"/><span class="koboSpan" id="kobo.2.1" xmlns="http://www.w3.org/1999/xhtml">Implementing Blazor Components</span></h1>
<p><span class="koboSpan" id="kobo.3.1" xmlns="http://www.w3.org/1999/xhtml">In the last chapter, we learned about Blazor routing and layout. </span><span class="koboSpan" id="kobo.3.2" xmlns="http://www.w3.org/1999/xhtml">We then built a navigation framework by creating the routing and layout of our app. </span><span class="koboSpan" id="kobo.3.3" xmlns="http://www.w3.org/1999/xhtml">After we created the navigation framework, we created the top-level pages. </span><span class="koboSpan" id="kobo.3.4" xmlns="http://www.w3.org/1999/xhtml">With the implementation of Razor pages, we can explore the password database in a similar way that we can explore in the XAML version. </span><span class="koboSpan" id="kobo.3.5" xmlns="http://www.w3.org/1999/xhtml">Razor pages are Razor components, but they are not reusable. </span><span class="koboSpan" id="kobo.3.6" xmlns="http://www.w3.org/1999/xhtml">Razor components are building blocks of the Blazor UI. </span><span class="koboSpan" id="kobo.3.7" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we will introduce Razor components. </span><span class="koboSpan" id="kobo.3.8" xmlns="http://www.w3.org/1999/xhtml">To understand Razor components, we will introduce data binding and the Razor component life cycle. </span><span class="koboSpan" id="kobo.3.9" xmlns="http://www.w3.org/1999/xhtml">After learning about these concepts, we will refine our code and convert duplicated code into reusable Razor components. </span><span class="koboSpan" id="kobo.3.10" xmlns="http://www.w3.org/1999/xhtml">Finally, we will use the Razor components that we build to implement CRUD operations in </span><span class="No-Break"><span class="koboSpan" id="kobo.4.1" xmlns="http://www.w3.org/1999/xhtml">our app.</span></span></p>
<p><span class="koboSpan" id="kobo.5.1" xmlns="http://www.w3.org/1999/xhtml">We will cover the following topics in </span><span class="No-Break"><span class="koboSpan" id="kobo.6.1" xmlns="http://www.w3.org/1999/xhtml">this chapter:</span></span></p>
<ul>
<li><span class="koboSpan" id="kobo.7.1" xmlns="http://www.w3.org/1999/xhtml">Introducing </span><span class="No-Break"><span class="koboSpan" id="kobo.8.1" xmlns="http://www.w3.org/1999/xhtml">Razor components</span></span></li>
<li><span class="No-Break"><span class="koboSpan" id="kobo.9.1" xmlns="http://www.w3.org/1999/xhtml">Data binding</span></span></li>
<li><span class="koboSpan" id="kobo.10.1" xmlns="http://www.w3.org/1999/xhtml">Understanding the life cycle of </span><span class="No-Break"><span class="koboSpan" id="kobo.11.1" xmlns="http://www.w3.org/1999/xhtml">Razor components</span></span></li>
<li><span class="koboSpan" id="kobo.12.1" xmlns="http://www.w3.org/1999/xhtml">Implementing </span><span class="No-Break"><span class="koboSpan" id="kobo.13.1" xmlns="http://www.w3.org/1999/xhtml">CRUD operations</span></span></li>
</ul>
<h1 id="_idParaDest-172"><a id="_idTextAnchor188"/><span class="koboSpan" id="kobo.14.1" xmlns="http://www.w3.org/1999/xhtml">Technical requirements</span></h1>
<p><span class="koboSpan" id="kobo.15.1" xmlns="http://www.w3.org/1999/xhtml">To test and debug the source code in this chapter, you need to have Visual Studio 2022 installed on your PC or Mac. </span><span class="koboSpan" id="kobo.15.2" xmlns="http://www.w3.org/1999/xhtml">Please refer to the </span><em class="italic"><span class="koboSpan" id="kobo.16.1" xmlns="http://www.w3.org/1999/xhtml">Development environment setup</span></em><span class="koboSpan" id="kobo.17.1" xmlns="http://www.w3.org/1999/xhtml"> section in </span><a href="B16588_01.xhtml#_idTextAnchor015"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.18.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 1</span></em></span></a><span class="koboSpan" id="kobo.19.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.20.1" xmlns="http://www.w3.org/1999/xhtml">Getting Started with .NET MAUI</span></em><span class="koboSpan" id="kobo.21.1" xmlns="http://www.w3.org/1999/xhtml">, for </span><span class="No-Break"><span class="koboSpan" id="kobo.22.1" xmlns="http://www.w3.org/1999/xhtml">the details.</span></span></p>
<p><span class="koboSpan" id="kobo.23.1" xmlns="http://www.w3.org/1999/xhtml">The source code of this chapter is available in the following </span><span class="No-Break"><span class="koboSpan" id="kobo.24.1" xmlns="http://www.w3.org/1999/xhtml">GitHub repository:</span></span></p>
<p><a href="https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development/tree/main/Chapter09"><span class="No-Break"><span class="koboSpan" id="kobo.25.1" xmlns="http://www.w3.org/1999/xhtml">https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development/tree/main/Chapter09</span></span></a></p>
<p><span class="koboSpan" id="kobo.26.1" xmlns="http://www.w3.org/1999/xhtml">The source code can be downloaded using the following </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.27.1" xmlns="http://www.w3.org/1999/xhtml">git</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.28.1" xmlns="http://www.w3.org/1999/xhtml"> command:</span></span></p>
<pre class="console"><span class="koboSpan" id="kobo.29.1" xmlns="http://www.w3.org/1999/xhtml">
git clone -b chapter09 https://github.com/PacktPublishing/.NET-MAUI-Cross-Platform-Application-Development PassXYZ.Vault2</span></pre>
<h1 id="_idParaDest-173"><a id="_idTextAnchor189"/><span class="koboSpan" id="kobo.30.1" xmlns="http://www.w3.org/1999/xhtml">Understanding Razor components</span></h1>
<p><span class="koboSpan" id="kobo.31.1" xmlns="http://www.w3.org/1999/xhtml">Even though we have created and used Razor components in the last two chapters, we haven’t taken </span><a id="_idIndexMarker627"/><span class="koboSpan" id="kobo.32.1" xmlns="http://www.w3.org/1999/xhtml">a closer look at Razor components yet. </span><span class="koboSpan" id="kobo.32.2" xmlns="http://www.w3.org/1999/xhtml">In this section, we will continue improving the app from the last chapter and dig deeper into Razor components to learn some key concepts about </span><span class="No-Break"><span class="koboSpan" id="kobo.33.1" xmlns="http://www.w3.org/1999/xhtml">these components.</span></span></p>
<p><span class="koboSpan" id="kobo.34.1" xmlns="http://www.w3.org/1999/xhtml">Blazor apps are built using Razor components. </span><span class="koboSpan" id="kobo.34.2" xmlns="http://www.w3.org/1999/xhtml">The first Razor component in our app is </span><strong class="source-inline"><span class="koboSpan" id="kobo.35.1" xmlns="http://www.w3.org/1999/xhtml">Main</span></strong><span class="koboSpan" id="kobo.36.1" xmlns="http://www.w3.org/1999/xhtml"> and it is defined in </span><strong class="source-inline"><span class="koboSpan" id="kobo.37.1" xmlns="http://www.w3.org/1999/xhtml">Main.razor</span></strong><span class="koboSpan" id="kobo.38.1" xmlns="http://www.w3.org/1999/xhtml">, as </span><span class="No-Break"><span class="koboSpan" id="kobo.39.1" xmlns="http://www.w3.org/1999/xhtml">shown here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.40.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;Router AppAssembly="@typeof(Main).Assembly"&gt;
  &lt;Found Context="routeData"&gt;
    &lt;RouteView RouteData="@routeData"
      DefaultLayout="@typeof(MainLayout)" /&gt;
&lt;FocusOnNavigate RouteData="@routeData"
  Selector="h1" /&gt;
  &lt;/Found&gt;
  &lt;NotFound&gt;
    &lt;LayoutView Layout="@typeof(MainLayout)"&gt;
      &lt;p role="alert"&gt;
        Sorry, there's nothing at this address.
</span><span class="koboSpan" id="kobo.40.2" xmlns="http://www.w3.org/1999/xhtml">      &lt;/p&gt;
    &lt;/LayoutView&gt;
  &lt;/NotFound&gt;
&lt;/Router&gt;</span></pre>
<p><span class="koboSpan" id="kobo.41.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.42.1" xmlns="http://www.w3.org/1999/xhtml">Router</span></strong><span class="koboSpan" id="kobo.43.1" xmlns="http://www.w3.org/1999/xhtml"> component is installed in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.44.1" xmlns="http://www.w3.org/1999/xhtml">Main</span></strong><span class="koboSpan" id="kobo.45.1" xmlns="http://www.w3.org/1999/xhtml"> component, and it handles the routing of pages and selects the default layout component. </span><span class="koboSpan" id="kobo.45.2" xmlns="http://www.w3.org/1999/xhtml">All other Razor pages are loaded by </span><strong class="source-inline"><span class="koboSpan" id="kobo.46.1" xmlns="http://www.w3.org/1999/xhtml">Router</span></strong><span class="koboSpan" id="kobo.47.1" xmlns="http://www.w3.org/1999/xhtml"> components. </span><span class="koboSpan" id="kobo.47.2" xmlns="http://www.w3.org/1999/xhtml">The Razor pages loaded by </span><strong class="source-inline"><span class="koboSpan" id="kobo.48.1" xmlns="http://www.w3.org/1999/xhtml">Router</span></strong><span class="koboSpan" id="kobo.49.1" xmlns="http://www.w3.org/1999/xhtml"> have route templates defined and are used to present the UI to the users. </span><span class="koboSpan" id="kobo.49.2" xmlns="http://www.w3.org/1999/xhtml">In our project, Razor pages are located in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.50.1" xmlns="http://www.w3.org/1999/xhtml">Pages</span></strong><span class="koboSpan" id="kobo.51.1" xmlns="http://www.w3.org/1999/xhtml"> folder. </span><span class="koboSpan" id="kobo.51.2" xmlns="http://www.w3.org/1999/xhtml">There are also reusable Razor components, and they are the building blocks of Razor pages. </span><span class="koboSpan" id="kobo.51.3" xmlns="http://www.w3.org/1999/xhtml">These Razor components are in the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.52.1" xmlns="http://www.w3.org/1999/xhtml">Shared</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.53.1" xmlns="http://www.w3.org/1999/xhtml"> folder.</span></span></p>
<p><span class="koboSpan" id="kobo.54.1" xmlns="http://www.w3.org/1999/xhtml">Basically, each file with the </span><strong class="source-inline"><span class="koboSpan" id="kobo.55.1" xmlns="http://www.w3.org/1999/xhtml">.razor</span></strong><span class="koboSpan" id="kobo.56.1" xmlns="http://www.w3.org/1999/xhtml"> file extension is a Razor component and it is compiled into a C# class when it is executed. </span><span class="koboSpan" id="kobo.56.2" xmlns="http://www.w3.org/1999/xhtml">The class name is the filename. </span><span class="koboSpan" id="kobo.56.3" xmlns="http://www.w3.org/1999/xhtml">The folder name is used </span><a id="_idIndexMarker628"/><span class="koboSpan" id="kobo.57.1" xmlns="http://www.w3.org/1999/xhtml">as part of the namespace. </span><span class="koboSpan" id="kobo.57.2" xmlns="http://www.w3.org/1999/xhtml">For example, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.58.1" xmlns="http://www.w3.org/1999/xhtml">Login</span></strong><span class="koboSpan" id="kobo.59.1" xmlns="http://www.w3.org/1999/xhtml"> Razor component is in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.60.1" xmlns="http://www.w3.org/1999/xhtml">Pages</span></strong><span class="koboSpan" id="kobo.61.1" xmlns="http://www.w3.org/1999/xhtml"> folder so the folder name, </span><strong class="source-inline"><span class="koboSpan" id="kobo.62.1" xmlns="http://www.w3.org/1999/xhtml">Pages</span></strong><span class="koboSpan" id="kobo.63.1" xmlns="http://www.w3.org/1999/xhtml">, is used as part of the namespace. </span><span class="koboSpan" id="kobo.63.2" xmlns="http://www.w3.org/1999/xhtml">So, the full name of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.64.1" xmlns="http://www.w3.org/1999/xhtml">Login</span></strong><span class="koboSpan" id="kobo.65.1" xmlns="http://www.w3.org/1999/xhtml"> class </span><span class="No-Break"><span class="koboSpan" id="kobo.66.1" xmlns="http://www.w3.org/1999/xhtml">is </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.67.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.Pages.Login</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.68.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.69.1" xmlns="http://www.w3.org/1999/xhtml">We use Pascal case for the class name in C#, so the folder name and Razor filename should use Pascal case </span><span class="No-Break"><span class="koboSpan" id="kobo.70.1" xmlns="http://www.w3.org/1999/xhtml">as well.</span></span></p>
<p class="callout-heading"><span class="koboSpan" id="kobo.71.1" xmlns="http://www.w3.org/1999/xhtml">What are Pascal case, camel case, and snake case?</span></p>
<p class="callout"><span class="koboSpan" id="kobo.72.1" xmlns="http://www.w3.org/1999/xhtml">Pascal case, camel case, and snake case are commonly used naming conventions in programming languages. </span><span class="koboSpan" id="kobo.72.2" xmlns="http://www.w3.org/1999/xhtml">Here are </span><span class="No-Break"><span class="koboSpan" id="kobo.73.1" xmlns="http://www.w3.org/1999/xhtml">some examples:</span></span></p>
<ul>
<li class="callout"><strong class="bold"><span class="koboSpan" id="kobo.74.1" xmlns="http://www.w3.org/1999/xhtml">Camel case</span></strong><span class="koboSpan" id="kobo.75.1" xmlns="http://www.w3.org/1999/xhtml"> uses uppercase </span><a id="_idIndexMarker629"/><span class="koboSpan" id="kobo.76.1" xmlns="http://www.w3.org/1999/xhtml">and lowercase in the variable name. </span><span class="koboSpan" id="kobo.76.2" xmlns="http://www.w3.org/1999/xhtml">The first letter is lowercase, such </span><span class="No-Break"><span class="koboSpan" id="kobo.77.1" xmlns="http://www.w3.org/1999/xhtml">as </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.78.1" xmlns="http://www.w3.org/1999/xhtml">loginUser</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.79.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
<li class="callout"><strong class="bold"><span class="koboSpan" id="kobo.80.1" xmlns="http://www.w3.org/1999/xhtml">Pascal case</span></strong><span class="koboSpan" id="kobo.81.1" xmlns="http://www.w3.org/1999/xhtml"> also uses </span><a id="_idIndexMarker630"/><span class="koboSpan" id="kobo.82.1" xmlns="http://www.w3.org/1999/xhtml">uppercase and lowercase in the variable name, but the first letter is uppercase, such </span><span class="No-Break"><span class="koboSpan" id="kobo.83.1" xmlns="http://www.w3.org/1999/xhtml">as </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.84.1" xmlns="http://www.w3.org/1999/xhtml">LoginUser</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.85.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
<li class="callout"><strong class="bold"><span class="koboSpan" id="kobo.86.1" xmlns="http://www.w3.org/1999/xhtml">Snake case</span></strong><span class="koboSpan" id="kobo.87.1" xmlns="http://www.w3.org/1999/xhtml"> uses lowercase </span><a id="_idIndexMarker631"/><span class="koboSpan" id="kobo.88.1" xmlns="http://www.w3.org/1999/xhtml">only and separates each word with an underscore, such </span><span class="No-Break"><span class="koboSpan" id="kobo.89.1" xmlns="http://www.w3.org/1999/xhtml">as </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.90.1" xmlns="http://www.w3.org/1999/xhtml">login_user</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.91.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.92.1" xmlns="http://www.w3.org/1999/xhtml">Razor components </span><a id="_idIndexMarker632"/><span class="koboSpan" id="kobo.93.1" xmlns="http://www.w3.org/1999/xhtml">can be authored in a single file or they can be split into a Razor file (</span><strong class="source-inline"><span class="koboSpan" id="kobo.94.1" xmlns="http://www.w3.org/1999/xhtml">.razor</span></strong><span class="koboSpan" id="kobo.95.1" xmlns="http://www.w3.org/1999/xhtml">) and a code-behind C# file (</span><strong class="source-inline"><span class="koboSpan" id="kobo.96.1" xmlns="http://www.w3.org/1999/xhtml">.cs</span></strong><span class="koboSpan" id="kobo.97.1" xmlns="http://www.w3.org/1999/xhtml">). </span><span class="koboSpan" id="kobo.97.2" xmlns="http://www.w3.org/1999/xhtml">In the code-behind C# file, a partial class is defined to contain all the programming logic. </span><span class="koboSpan" id="kobo.97.3" xmlns="http://www.w3.org/1999/xhtml">We did this when we created the </span><strong class="source-inline"><span class="koboSpan" id="kobo.98.1" xmlns="http://www.w3.org/1999/xhtml">Login</span></strong><span class="koboSpan" id="kobo.99.1" xmlns="http://www.w3.org/1999/xhtml"> component in </span><a href="B16588_07.xhtml#_idTextAnchor144"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.100.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 7</span></em></span></a><span class="koboSpan" id="kobo.101.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.102.1" xmlns="http://www.w3.org/1999/xhtml">Introducing Blazor Hybrid </span></em><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.103.1" xmlns="http://www.w3.org/1999/xhtml">App Development</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.104.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer097">
<span class="koboSpan" id="kobo.105.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 9.1: Razor component naming convention" src="image/Figure_9.01_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.106.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9.1: Razor component naming convention</span></p>
<p><span class="koboSpan" id="kobo.107.1" xmlns="http://www.w3.org/1999/xhtml">When we </span><a id="_idIndexMarker633"/><span class="koboSpan" id="kobo.108.1" xmlns="http://www.w3.org/1999/xhtml">created the </span><strong class="source-inline"><span class="koboSpan" id="kobo.109.1" xmlns="http://www.w3.org/1999/xhtml">Login</span></strong><span class="koboSpan" id="kobo.110.1" xmlns="http://www.w3.org/1999/xhtml"> component, we used Bootstrap CSS style for the styling. </span><span class="koboSpan" id="kobo.110.2" xmlns="http://www.w3.org/1999/xhtml">Razor components can support CSS isolation, which can simplify CSS and avoid collisions with other components or libraries. </span><span class="koboSpan" id="kobo.110.3" xmlns="http://www.w3.org/1999/xhtml">Additionally, it can include its own CSS style in a </span><strong class="source-inline"><span class="koboSpan" id="kobo.111.1" xmlns="http://www.w3.org/1999/xhtml">.</span></strong><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.112.1" xmlns="http://www.w3.org/1999/xhtml">razor.css</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.113.1" xmlns="http://www.w3.org/1999/xhtml"> file.</span></span></p>
<h2 id="_idParaDest-174"><a id="_idTextAnchor190"/><span class="koboSpan" id="kobo.114.1" xmlns="http://www.w3.org/1999/xhtml">Inheritance</span></h2>
<p><span class="koboSpan" id="kobo.115.1" xmlns="http://www.w3.org/1999/xhtml">Since a Razor </span><a id="_idIndexMarker634"/><span class="koboSpan" id="kobo.116.1" xmlns="http://www.w3.org/1999/xhtml">component is a C# class, it includes all features of a C# class. </span><span class="koboSpan" id="kobo.116.2" xmlns="http://www.w3.org/1999/xhtml">A Razor component can be a child class of another Razor component. </span><span class="koboSpan" id="kobo.116.3" xmlns="http://www.w3.org/1999/xhtml">In </span><a href="B16588_08.xhtml#_idTextAnchor170"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.117.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 8</span></em></span></a><span class="koboSpan" id="kobo.118.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.119.1" xmlns="http://www.w3.org/1999/xhtml">Understanding Blazor Layout and Routing</span></em><span class="koboSpan" id="kobo.120.1" xmlns="http://www.w3.org/1999/xhtml">, when we created layout components, we could see that all layout components are derived classes of </span><strong class="source-inline"><span class="koboSpan" id="kobo.121.1" xmlns="http://www.w3.org/1999/xhtml">LayoutComponentBase</span></strong><span class="koboSpan" id="kobo.122.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.122.2" xmlns="http://www.w3.org/1999/xhtml">As we can see in </span><strong class="source-inline"><span class="koboSpan" id="kobo.123.1" xmlns="http://www.w3.org/1999/xhtml">MainLayout.razor</span></strong><span class="koboSpan" id="kobo.124.1" xmlns="http://www.w3.org/1999/xhtml"> in the following code, we use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.125.1" xmlns="http://www.w3.org/1999/xhtml">@inherits</span></strong><span class="koboSpan" id="kobo.126.1" xmlns="http://www.w3.org/1999/xhtml"> directive to specify the </span><strong class="source-inline"><span class="koboSpan" id="kobo.127.1" xmlns="http://www.w3.org/1999/xhtml">LayoutComponentBase</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.128.1" xmlns="http://www.w3.org/1999/xhtml">base class:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.129.1" xmlns="http://www.w3.org/1999/xhtml">
@inherits LayoutComponentBase
&lt;div class="page"&gt;
  &lt;div class="sidebar"&gt;&lt;NavMenu/&gt;&lt;/div&gt;
  &lt;main&gt;@Body&lt;/main&gt;
&lt;/div&gt;</span></pre>
<p><span class="koboSpan" id="kobo.130.1" xmlns="http://www.w3.org/1999/xhtml">All Razor components derive from the </span><strong class="source-inline"><span class="koboSpan" id="kobo.131.1" xmlns="http://www.w3.org/1999/xhtml">ComponentBase</span></strong><span class="koboSpan" id="kobo.132.1" xmlns="http://www.w3.org/1999/xhtml"> class, so it is possible to create a Razor component derived from the </span><strong class="source-inline"><span class="koboSpan" id="kobo.133.1" xmlns="http://www.w3.org/1999/xhtml">ComponentBase</span></strong><span class="koboSpan" id="kobo.134.1" xmlns="http://www.w3.org/1999/xhtml"> class using the C# file without the </span><a id="_idIndexMarker635"/><span class="koboSpan" id="kobo.135.1" xmlns="http://www.w3.org/1999/xhtml">Razor markup file. </span><span class="koboSpan" id="kobo.135.2" xmlns="http://www.w3.org/1999/xhtml">For example, we can create a Razor component called </span><strong class="source-inline"><span class="koboSpan" id="kobo.136.1" xmlns="http://www.w3.org/1999/xhtml">AppName</span></strong><span class="koboSpan" id="kobo.137.1" xmlns="http://www.w3.org/1999/xhtml"> in a C# class, as </span><span class="No-Break"><span class="koboSpan" id="kobo.138.1" xmlns="http://www.w3.org/1999/xhtml">shown here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.139.1" xmlns="http://www.w3.org/1999/xhtml">
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
namespace PassXYZ.Vault.Pages;
public class AppName : ComponentBase
{
  protected override void BuildRenderTree
    (RenderTreeBuilder builder)
  {
    base.BuildRenderTree(builder);
    builder.OpenElement(0, "div");
    builder.AddContent(1, "PassXYZ.Vault");
    builder.CloseElement();
  }
}</span></pre>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.140.1" xmlns="http://www.w3.org/1999/xhtml">AppName</span></strong><span class="koboSpan" id="kobo.141.1" xmlns="http://www.w3.org/1999/xhtml"> is a Razor </span><a id="_idIndexMarker636"/><span class="koboSpan" id="kobo.142.1" xmlns="http://www.w3.org/1999/xhtml">component created without a Razor markup file (</span><strong class="source-inline"><span class="koboSpan" id="kobo.143.1" xmlns="http://www.w3.org/1999/xhtml">.razor</span></strong><span class="koboSpan" id="kobo.144.1" xmlns="http://www.w3.org/1999/xhtml">), but it is the </span><a id="_idIndexMarker637"/><span class="koboSpan" id="kobo.145.1" xmlns="http://www.w3.org/1999/xhtml">same as other Razor components, as </span><span class="No-Break"><span class="koboSpan" id="kobo.146.1" xmlns="http://www.w3.org/1999/xhtml">shown here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.147.1" xmlns="http://www.w3.org/1999/xhtml">
...
</span><span class="koboSpan" id="kobo.147.2" xmlns="http://www.w3.org/1999/xhtml">&lt;AppName/&gt;
...</span></pre>
<p><span class="koboSpan" id="kobo.148.1" xmlns="http://www.w3.org/1999/xhtml">We introduced Razor components in this section. </span><span class="koboSpan" id="kobo.148.2" xmlns="http://www.w3.org/1999/xhtml">We will learn how to package Razor components in a library in the </span><span class="No-Break"><span class="koboSpan" id="kobo.149.1" xmlns="http://www.w3.org/1999/xhtml">next section.</span></span></p>
<h1 id="_idParaDest-175"><a id="_idTextAnchor191"/><span class="koboSpan" id="kobo.150.1" xmlns="http://www.w3.org/1999/xhtml">Creating a Razor class library</span></h1>
<p><span class="koboSpan" id="kobo.151.1" xmlns="http://www.w3.org/1999/xhtml">In our </span><a id="_idIndexMarker638"/><span class="koboSpan" id="kobo.152.1" xmlns="http://www.w3.org/1999/xhtml">project, we create reusable components in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.153.1" xmlns="http://www.w3.org/1999/xhtml">Shared</span></strong><span class="koboSpan" id="kobo.154.1" xmlns="http://www.w3.org/1999/xhtml"> folder. </span><span class="koboSpan" id="kobo.154.2" xmlns="http://www.w3.org/1999/xhtml">These components can be reused by other components, such as layout components </span><span class="No-Break"><span class="koboSpan" id="kobo.155.1" xmlns="http://www.w3.org/1999/xhtml">or </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.156.1" xmlns="http://www.w3.org/1999/xhtml">NavMenu</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.157.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.158.1" xmlns="http://www.w3.org/1999/xhtml">We can also encapsulate Razor components in a separate library in the form of the </span><strong class="bold"><span class="koboSpan" id="kobo.159.1" xmlns="http://www.w3.org/1999/xhtml">Razor class library</span></strong><span class="koboSpan" id="kobo.160.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.160.2" xmlns="http://www.w3.org/1999/xhtml">The components </span><a id="_idIndexMarker639"/><span class="koboSpan" id="kobo.161.1" xmlns="http://www.w3.org/1999/xhtml">in the Razor class library are not project-specific, so they can be used in any Blazor project. </span><span class="koboSpan" id="kobo.161.2" xmlns="http://www.w3.org/1999/xhtml">We can use them in Blazor Hybrid, Blazor WebAssembly, or Blazor </span><span class="No-Break"><span class="koboSpan" id="kobo.162.1" xmlns="http://www.w3.org/1999/xhtml">Server apps.</span></span></p>
<p><span class="koboSpan" id="kobo.163.1" xmlns="http://www.w3.org/1999/xhtml">In this </span><a id="_idIndexMarker640"/><span class="koboSpan" id="kobo.164.1" xmlns="http://www.w3.org/1999/xhtml">book, we build Razor components using Bootstrap. </span><span class="koboSpan" id="kobo.164.2" xmlns="http://www.w3.org/1999/xhtml">There </span><a id="_idIndexMarker641"/><span class="koboSpan" id="kobo.165.1" xmlns="http://www.w3.org/1999/xhtml">are many open source Razor class libraries </span><a id="_idIndexMarker642"/><span class="koboSpan" id="kobo.166.1" xmlns="http://www.w3.org/1999/xhtml">built on top of Bootstrap in GitHub. </span><span class="koboSpan" id="kobo.166.2" xmlns="http://www.w3.org/1999/xhtml">Some of them are good enough for commercial product development. </span><span class="koboSpan" id="kobo.166.3" xmlns="http://www.w3.org/1999/xhtml">Here are </span><span class="No-Break"><span class="koboSpan" id="kobo.167.1" xmlns="http://www.w3.org/1999/xhtml">some examples:</span></span></p>
<ul>
<li><strong class="bold"><span class="koboSpan" id="kobo.168.1" xmlns="http://www.w3.org/1999/xhtml">BootstrapBlazor</span></strong><span class="koboSpan" id="kobo.169.1" xmlns="http://www.w3.org/1999/xhtml"> – </span><a href="https://github.com/dotnetcore/BootstrapBlazor"><span class="No-Break"><span class="koboSpan" id="kobo.170.1" xmlns="http://www.w3.org/1999/xhtml">https://github.com/dotnetcore/BootstrapBlazor</span></span></a></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.171.1" xmlns="http://www.w3.org/1999/xhtml">Blazorise</span></strong><span class="koboSpan" id="kobo.172.1" xmlns="http://www.w3.org/1999/xhtml"> – </span><a href="https://github.com/Megabit/Blazorise"><span class="No-Break"><span class="koboSpan" id="kobo.173.1" xmlns="http://www.w3.org/1999/xhtml">https://github.com/Megabit/Blazorise</span></span></a></li>
<li><strong class="bold"><span class="koboSpan" id="kobo.174.1" xmlns="http://www.w3.org/1999/xhtml">Havit.Blazor</span></strong><span class="koboSpan" id="kobo.175.1" xmlns="http://www.w3.org/1999/xhtml"> – </span><a href="https://github.com/havit/Havit.Blazor/"><span class="No-Break"><span class="koboSpan" id="kobo.176.1" xmlns="http://www.w3.org/1999/xhtml">https://github.com/havit/Havit.Blazor/</span></span></a></li>
</ul>
<p><span class="koboSpan" id="kobo.177.1" xmlns="http://www.w3.org/1999/xhtml">These open source projects are built as Razor class libraries so that they can be reused similarly to other .NET libraries. </span><span class="koboSpan" id="kobo.177.2" xmlns="http://www.w3.org/1999/xhtml">Razor class libraries can be published as </span><strong class="bold"><span class="koboSpan" id="kobo.178.1" xmlns="http://www.w3.org/1999/xhtml">NuGet</span></strong><span class="koboSpan" id="kobo.179.1" xmlns="http://www.w3.org/1999/xhtml"> packages </span><a id="_idIndexMarker643"/><span class="koboSpan" id="kobo.180.1" xmlns="http://www.w3.org/1999/xhtml">so we can import them into our </span><span class="No-Break"><span class="koboSpan" id="kobo.181.1" xmlns="http://www.w3.org/1999/xhtml">Blazor projects.</span></span></p>
<p><span class="koboSpan" id="kobo.182.1" xmlns="http://www.w3.org/1999/xhtml">In this section, we will </span><a id="_idIndexMarker644"/><span class="koboSpan" id="kobo.183.1" xmlns="http://www.w3.org/1999/xhtml">create a Razor class library similar to the previously mentioned open source projects. </span><span class="koboSpan" id="kobo.183.2" xmlns="http://www.w3.org/1999/xhtml">We will put Razor components that can be reused in our Razor class library. </span><span class="koboSpan" id="kobo.183.3" xmlns="http://www.w3.org/1999/xhtml">This library can be published as a </span><span class="No-Break"><span class="koboSpan" id="kobo.184.1" xmlns="http://www.w3.org/1999/xhtml">NuGet package.</span></span></p>
<p><span class="koboSpan" id="kobo.185.1" xmlns="http://www.w3.org/1999/xhtml">We can create a Razor class library using Visual Studio or the dotnet </span><span class="No-Break"><span class="koboSpan" id="kobo.186.1" xmlns="http://www.w3.org/1999/xhtml">command line.</span></span></p>
<p><span class="koboSpan" id="kobo.187.1" xmlns="http://www.w3.org/1999/xhtml">To create a Razor class library using Visual Studio, we can add a new project to our solution, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.188.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9</span></em></span><em class="italic"><span class="koboSpan" id="kobo.189.1" xmlns="http://www.w3.org/1999/xhtml">.2</span></em><span class="koboSpan" id="kobo.190.1" xmlns="http://www.w3.org/1999/xhtml">, by following </span><span class="No-Break"><span class="koboSpan" id="kobo.191.1" xmlns="http://www.w3.org/1999/xhtml">these steps:</span></span></p>
<ol>
<li><span class="koboSpan" id="kobo.192.1" xmlns="http://www.w3.org/1999/xhtml">Search for and select </span><strong class="bold"><span class="koboSpan" id="kobo.193.1" xmlns="http://www.w3.org/1999/xhtml">Razor Class Library</span></strong><span class="koboSpan" id="kobo.194.1" xmlns="http://www.w3.org/1999/xhtml"> from the </span><span class="No-Break"><span class="koboSpan" id="kobo.195.1" xmlns="http://www.w3.org/1999/xhtml">project templates.</span></span></li>
<li><span class="koboSpan" id="kobo.196.1" xmlns="http://www.w3.org/1999/xhtml">Click </span><strong class="bold"><span class="koboSpan" id="kobo.197.1" xmlns="http://www.w3.org/1999/xhtml">Next</span></strong><span class="koboSpan" id="kobo.198.1" xmlns="http://www.w3.org/1999/xhtml"> and name the </span><span class="No-Break"><span class="koboSpan" id="kobo.199.1" xmlns="http://www.w3.org/1999/xhtml">project </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.200.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.BlazorUI</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.201.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></li>
<li><span class="koboSpan" id="kobo.202.1" xmlns="http://www.w3.org/1999/xhtml">On the next screen, click </span><strong class="bold"><span class="koboSpan" id="kobo.203.1" xmlns="http://www.w3.org/1999/xhtml">Create</span></strong><span class="koboSpan" id="kobo.204.1" xmlns="http://www.w3.org/1999/xhtml"> to </span><span class="No-Break"><span class="koboSpan" id="kobo.205.1" xmlns="http://www.w3.org/1999/xhtml">create it.</span></span></li>
</ol>
<div>
<div class="IMG---Figure" id="_idContainer098">
<span class="koboSpan" id="kobo.206.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 9.2: Creating a Razor class library" src="image/Figure_9.02_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.207.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9.2: Creating a Razor class library</span></p>
<p><span class="koboSpan" id="kobo.208.1" xmlns="http://www.w3.org/1999/xhtml">To create </span><a id="_idIndexMarker645"/><span class="koboSpan" id="kobo.209.1" xmlns="http://www.w3.org/1999/xhtml">the project using a dotnet command line, we can change the directory to the solution folder and execute the following command in </span><span class="No-Break"><span class="koboSpan" id="kobo.210.1" xmlns="http://www.w3.org/1999/xhtml">Command Prompt:</span></span></p>
<pre class="console"><span class="koboSpan" id="kobo.211.1" xmlns="http://www.w3.org/1999/xhtml">
dotnet new razorclasslib -n PassXYZ.BlazorUI</span></pre>
<p><span class="koboSpan" id="kobo.212.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.213.1" xmlns="http://www.w3.org/1999/xhtml">dotnet new</span></strong><span class="koboSpan" id="kobo.214.1" xmlns="http://www.w3.org/1999/xhtml"> command will create a new project using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.215.1" xmlns="http://www.w3.org/1999/xhtml">razorclasslib</span></strong><span class="koboSpan" id="kobo.216.1" xmlns="http://www.w3.org/1999/xhtml"> template and name the project </span><strong class="source-inline"><span class="koboSpan" id="kobo.217.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.BlazorUI</span></strong><span class="koboSpan" id="kobo.218.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.218.2" xmlns="http://www.w3.org/1999/xhtml">To add the project to the solution, we can use the </span><span class="No-Break"><span class="koboSpan" id="kobo.219.1" xmlns="http://www.w3.org/1999/xhtml">following command:</span></span></p>
<pre class="console"><span class="koboSpan" id="kobo.220.1" xmlns="http://www.w3.org/1999/xhtml">
dotnet sln add PassXYZ.BlazorUI\PassXYZ.BlazorUI.csproj</span></pre>
<p><span class="koboSpan" id="kobo.221.1" xmlns="http://www.w3.org/1999/xhtml">We need to remove the unused </span><strong class="source-inline"><span class="koboSpan" id="kobo.222.1" xmlns="http://www.w3.org/1999/xhtml">Component1.*</span></strong><span class="koboSpan" id="kobo.223.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.224.1" xmlns="http://www.w3.org/1999/xhtml">ExampleJsInterop.cs</span></strong><span class="koboSpan" id="kobo.225.1" xmlns="http://www.w3.org/1999/xhtml"> files from the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.226.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.BlazorUI</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.227.1" xmlns="http://www.w3.org/1999/xhtml"> project.</span></span></p>
<p><span class="koboSpan" id="kobo.228.1" xmlns="http://www.w3.org/1999/xhtml">To use Razor components in our project, we need to add the project reference into the </span><strong class="source-inline"><span class="koboSpan" id="kobo.229.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></strong><span class="koboSpan" id="kobo.230.1" xmlns="http://www.w3.org/1999/xhtml"> project. </span><span class="koboSpan" id="kobo.230.2" xmlns="http://www.w3.org/1999/xhtml">We can add it in Visual Studio by right-clicking the project node and selecting </span><strong class="bold"><span class="koboSpan" id="kobo.231.1" xmlns="http://www.w3.org/1999/xhtml">Add</span></strong><span class="koboSpan" id="kobo.232.1" xmlns="http://www.w3.org/1999/xhtml"> -&gt; </span><strong class="bold"><span class="koboSpan" id="kobo.233.1" xmlns="http://www.w3.org/1999/xhtml">Project Reference</span></strong><span class="koboSpan" id="kobo.234.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.234.2" xmlns="http://www.w3.org/1999/xhtml">We can also edit the </span><strong class="source-inline"><span class="koboSpan" id="kobo.235.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault.csproj</span></strong><span class="koboSpan" id="kobo.236.1" xmlns="http://www.w3.org/1999/xhtml"> project file to add the </span><span class="No-Break"><span class="koboSpan" id="kobo.237.1" xmlns="http://www.w3.org/1999/xhtml">following line:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.238.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;ItemGroup&gt;
  &lt;ProjectReference
    Include="..\PassXYZ.BlazorUI\PassXYZ.BlazorUI.csproj"
      /&gt;
&lt;/ItemGroup&gt;</span></pre>
<p><span class="koboSpan" id="kobo.239.1" xmlns="http://www.w3.org/1999/xhtml">To use </span><a id="_idIndexMarker646"/><span class="koboSpan" id="kobo.240.1" xmlns="http://www.w3.org/1999/xhtml">this library, we need to update the </span><strong class="source-inline"><span class="koboSpan" id="kobo.241.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault\_Imports.razor</span></strong><span class="koboSpan" id="kobo.242.1" xmlns="http://www.w3.org/1999/xhtml"> file to add the </span><span class="No-Break"><span class="koboSpan" id="kobo.243.1" xmlns="http://www.w3.org/1999/xhtml">following line:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.244.1" xmlns="http://www.w3.org/1999/xhtml">
@using PassXYZ.BlazorUI</span></pre>
<h2 id="_idParaDest-176"><a id="_idTextAnchor192"/><span class="koboSpan" id="kobo.245.1" xmlns="http://www.w3.org/1999/xhtml">Using static assets in the Razor class library</span></h2>
<p><span class="koboSpan" id="kobo.246.1" xmlns="http://www.w3.org/1999/xhtml">We use Bootstrap in our Razor components, so we need to include Bootstrap CSS and JavaScript </span><a id="_idIndexMarker647"/><span class="koboSpan" id="kobo.247.1" xmlns="http://www.w3.org/1999/xhtml">files in the Razor class library. </span><span class="koboSpan" id="kobo.247.2" xmlns="http://www.w3.org/1999/xhtml">From the Blazor app point of view, we can put these static assets in either the project’s </span><strong class="source-inline"><span class="koboSpan" id="kobo.248.1" xmlns="http://www.w3.org/1999/xhtml">wwwroot</span></strong><span class="koboSpan" id="kobo.249.1" xmlns="http://www.w3.org/1999/xhtml"> folder or </span><a id="_idIndexMarker648"/><span class="koboSpan" id="kobo.250.1" xmlns="http://www.w3.org/1999/xhtml">the component library’s </span><strong class="source-inline"><span class="koboSpan" id="kobo.251.1" xmlns="http://www.w3.org/1999/xhtml">wwwroot</span></strong><span class="koboSpan" id="kobo.252.1" xmlns="http://www.w3.org/1999/xhtml"> folder. </span><span class="koboSpan" id="kobo.252.2" xmlns="http://www.w3.org/1999/xhtml">Using the Bootstrap CSS file as an example, if we put it in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.253.1" xmlns="http://www.w3.org/1999/xhtml">wwwroot</span></strong><span class="koboSpan" id="kobo.254.1" xmlns="http://www.w3.org/1999/xhtml"> project, we can refer to it in </span><strong class="source-inline"><span class="koboSpan" id="kobo.255.1" xmlns="http://www.w3.org/1999/xhtml">index.html</span></strong><span class="koboSpan" id="kobo.256.1" xmlns="http://www.w3.org/1999/xhtml"> with the </span><span class="No-Break"><span class="koboSpan" id="kobo.257.1" xmlns="http://www.w3.org/1999/xhtml">following path:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.258.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;script src="css/bootstrap/bootstrap.bundle.min.js"/&gt;</span></pre>
<p><span class="koboSpan" id="kobo.259.1" xmlns="http://www.w3.org/1999/xhtml">If we choose to put it in the component library’s </span><strong class="source-inline"><span class="koboSpan" id="kobo.260.1" xmlns="http://www.w3.org/1999/xhtml">wwwroot</span></strong><span class="koboSpan" id="kobo.261.1" xmlns="http://www.w3.org/1999/xhtml"> folder, we can refer to it with the </span><span class="No-Break"><span class="koboSpan" id="kobo.262.1" xmlns="http://www.w3.org/1999/xhtml">following path:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.263.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;script src="_content/PassXYZ.BlazorUI/css/bootstrap/
  bootstrap.bundle.min.js"/&gt;</span></pre>
<p><span class="koboSpan" id="kobo.264.1" xmlns="http://www.w3.org/1999/xhtml">The difference is that we need to refer to the URL in the component library starting </span><span class="No-Break"><span class="koboSpan" id="kobo.265.1" xmlns="http://www.w3.org/1999/xhtml">with </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.266.1" xmlns="http://www.w3.org/1999/xhtml">_content/{LibraryProjectName}</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.267.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.268.1" xmlns="http://www.w3.org/1999/xhtml">After we have created a Razor class library project, we can add more components </span><span class="No-Break"><span class="koboSpan" id="kobo.269.1" xmlns="http://www.w3.org/1999/xhtml">to it.</span></span></p>
<h1 id="_idParaDest-177"><a id="_idTextAnchor193"/><span class="koboSpan" id="kobo.270.1" xmlns="http://www.w3.org/1999/xhtml">Creating reusable Razor components</span></h1>
<p><span class="koboSpan" id="kobo.271.1" xmlns="http://www.w3.org/1999/xhtml">In this section, we can create reusable components by optimizing our code. </span><span class="koboSpan" id="kobo.271.2" xmlns="http://www.w3.org/1999/xhtml">Throughout the process, we </span><a id="_idIndexMarker649"/><span class="koboSpan" id="kobo.272.1" xmlns="http://www.w3.org/1999/xhtml">can get a better understanding of the features of Razor components and how to make </span><span class="No-Break"><span class="koboSpan" id="kobo.273.1" xmlns="http://www.w3.org/1999/xhtml">them reusable.</span></span></p>
<p><span class="koboSpan" id="kobo.274.1" xmlns="http://www.w3.org/1999/xhtml">We created the Blazor Hybrid version of our app, </span><em class="italic"><span class="koboSpan" id="kobo.275.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.Vault</span></em><span class="koboSpan" id="kobo.276.1" xmlns="http://www.w3.org/1999/xhtml"> in </span><a href="B16588_07.xhtml#_idTextAnchor144"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.277.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 7</span></em></span></a><span class="koboSpan" id="kobo.278.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.279.1" xmlns="http://www.w3.org/1999/xhtml">Introducing Blazor Hybrid App Development,</span></em><span class="koboSpan" id="kobo.280.1" xmlns="http://www.w3.org/1999/xhtml"> and we added layout and routing functionalities to it in </span><a href="B16588_08.xhtml#_idTextAnchor170"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.281.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 8</span></em></span></a><span class="koboSpan" id="kobo.282.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.283.1" xmlns="http://www.w3.org/1999/xhtml">Understanding the Blazor Layout and Routing</span></em><span class="koboSpan" id="kobo.284.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.284.2" xmlns="http://www.w3.org/1999/xhtml">Our app can browse and update the password database now. </span><span class="koboSpan" id="kobo.284.3" xmlns="http://www.w3.org/1999/xhtml">So far, we haven’t implemented most of the CRUD operations. </span><span class="koboSpan" id="kobo.284.4" xmlns="http://www.w3.org/1999/xhtml">We will add these functionalities after we refine our Razor components in </span><span class="No-Break"><span class="koboSpan" id="kobo.285.1" xmlns="http://www.w3.org/1999/xhtml">this chapter.</span></span></p>
<p><span class="koboSpan" id="kobo.286.1" xmlns="http://www.w3.org/1999/xhtml">To navigate the password database, we created two Razor components – </span><strong class="source-inline"><span class="koboSpan" id="kobo.287.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.288.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.289.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.290.1" xmlns="http://www.w3.org/1999/xhtml"> – in </span><a href="B16588_07.xhtml#_idTextAnchor144"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.291.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 7</span></em></span></a><span class="koboSpan" id="kobo.292.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.293.1" xmlns="http://www.w3.org/1999/xhtml">Introducing .NET MAUI Blazor</span></em><span class="koboSpan" id="kobo.294.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.294.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.295.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.296.1" xmlns="http://www.w3.org/1999/xhtml"> class is used to display a list of password entries and groups in the current group, and the </span><strong class="source-inline"><span class="koboSpan" id="kobo.297.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.298.1" xmlns="http://www.w3.org/1999/xhtml"> class is used to display the content of a </span><span class="No-Break"><span class="koboSpan" id="kobo.299.1" xmlns="http://www.w3.org/1999/xhtml">password entry.</span></span></p>
<p><span class="koboSpan" id="kobo.300.1" xmlns="http://www.w3.org/1999/xhtml">If we look at the layout of </span><strong class="source-inline"><span class="koboSpan" id="kobo.301.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.302.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.303.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.304.1" xmlns="http://www.w3.org/1999/xhtml"> as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.305.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9</span></em></span><em class="italic"><span class="koboSpan" id="kobo.306.1" xmlns="http://www.w3.org/1999/xhtml">.3</span></em><span class="koboSpan" id="kobo.307.1" xmlns="http://www.w3.org/1999/xhtml">, the look and feel of both pages are </span><span class="No-Break"><span class="koboSpan" id="kobo.308.1" xmlns="http://www.w3.org/1999/xhtml">quite similar:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer099">
<span class="koboSpan" id="kobo.309.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 9.3: UI layout of Items and ItemDetail" src="image/Figure_9.3_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.310.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9.3: UI layout of Items and ItemDetail</span></p>
<p><span class="koboSpan" id="kobo.311.1" xmlns="http://www.w3.org/1999/xhtml">The layout </span><a id="_idIndexMarker650"/><span class="koboSpan" id="kobo.312.1" xmlns="http://www.w3.org/1999/xhtml">of both pages includes a sidebar, a header, and a list view. </span><span class="koboSpan" id="kobo.312.2" xmlns="http://www.w3.org/1999/xhtml">The sidebar is defined in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.313.1" xmlns="http://www.w3.org/1999/xhtml">layout</span></strong><span class="koboSpan" id="kobo.314.1" xmlns="http://www.w3.org/1999/xhtml"> component. </span><span class="koboSpan" id="kobo.314.2" xmlns="http://www.w3.org/1999/xhtml">The header and list view are implemented in both </span><strong class="source-inline"><span class="koboSpan" id="kobo.315.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.316.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.317.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.318.1" xmlns="http://www.w3.org/1999/xhtml"> with partially duplicated code there. </span><span class="koboSpan" id="kobo.318.2" xmlns="http://www.w3.org/1999/xhtml">We will optimize our code and abstract the duplicated code into reusable components in this chapter and the </span><span class="No-Break"><span class="koboSpan" id="kobo.319.1" xmlns="http://www.w3.org/1999/xhtml">next chapter.</span></span></p>
<p><span class="koboSpan" id="kobo.320.1" xmlns="http://www.w3.org/1999/xhtml">There are two buttons, </span><strong class="bold"><span class="koboSpan" id="kobo.321.1" xmlns="http://www.w3.org/1999/xhtml">Add</span></strong><span class="koboSpan" id="kobo.322.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="bold"><span class="koboSpan" id="kobo.323.1" xmlns="http://www.w3.org/1999/xhtml">Back</span></strong><span class="koboSpan" id="kobo.324.1" xmlns="http://www.w3.org/1999/xhtml">, in the header. </span><span class="koboSpan" id="kobo.324.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="bold"><span class="koboSpan" id="kobo.325.1" xmlns="http://www.w3.org/1999/xhtml">Back</span></strong><span class="koboSpan" id="kobo.326.1" xmlns="http://www.w3.org/1999/xhtml"> button can be used to navigate back to the parent group, and the </span><strong class="bold"><span class="koboSpan" id="kobo.327.1" xmlns="http://www.w3.org/1999/xhtml">Add</span></strong><span class="koboSpan" id="kobo.328.1" xmlns="http://www.w3.org/1999/xhtml"> button can be used to add a new item </span><span class="No-Break"><span class="koboSpan" id="kobo.329.1" xmlns="http://www.w3.org/1999/xhtml">or field.</span></span></p>
<p><span class="koboSpan" id="kobo.330.1" xmlns="http://www.w3.org/1999/xhtml">In the list view item, we can use the context menu to perform item-level operations, such as edit or delete. </span><span class="koboSpan" id="kobo.330.2" xmlns="http://www.w3.org/1999/xhtml">The context menu includes menu items to perform specific actions related to the selected item or field. </span><span class="koboSpan" id="kobo.330.3" xmlns="http://www.w3.org/1999/xhtml">For the edit or delete CRUD operations, after the menu item is selected, a modal dialog related to the action </span><span class="No-Break"><span class="koboSpan" id="kobo.331.1" xmlns="http://www.w3.org/1999/xhtml">is displayed.</span></span></p>
<p><span class="koboSpan" id="kobo.332.1" xmlns="http://www.w3.org/1999/xhtml">In the current implementation, both </span><strong class="source-inline"><span class="koboSpan" id="kobo.333.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.334.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.335.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.336.1" xmlns="http://www.w3.org/1999/xhtml"> include all UI elements in one Razor markup. </span><span class="koboSpan" id="kobo.336.2" xmlns="http://www.w3.org/1999/xhtml">We will start to refine the code into smaller reusable components to make our </span><span class="No-Break"><span class="koboSpan" id="kobo.337.1" xmlns="http://www.w3.org/1999/xhtml">implementation clean.</span></span></p>
<p><span class="koboSpan" id="kobo.338.1" xmlns="http://www.w3.org/1999/xhtml">We will convert modal dialogs into Razor components in this chapter and convert the header and </span><a id="_idIndexMarker651"/><span class="koboSpan" id="kobo.339.1" xmlns="http://www.w3.org/1999/xhtml">list view into Razor components in the next chapter. </span><span class="koboSpan" id="kobo.339.2" xmlns="http://www.w3.org/1999/xhtml">Let us start with modal dialogs. </span><span class="koboSpan" id="kobo.339.3" xmlns="http://www.w3.org/1999/xhtml">To support add, edit, and delete operations, we need two kinds of </span><span class="No-Break"><span class="koboSpan" id="kobo.340.1" xmlns="http://www.w3.org/1999/xhtml">dialog boxes:</span></span></p>
<ul>
<li><span class="koboSpan" id="kobo.341.1" xmlns="http://www.w3.org/1999/xhtml">Editor dialog – adding or editing items </span><span class="No-Break"><span class="koboSpan" id="kobo.342.1" xmlns="http://www.w3.org/1999/xhtml">or fields</span></span></li>
<li><span class="koboSpan" id="kobo.343.1" xmlns="http://www.w3.org/1999/xhtml">Confirmation dialog – to confirm before deleting an item or </span><span class="No-Break"><span class="koboSpan" id="kobo.344.1" xmlns="http://www.w3.org/1999/xhtml">a field</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.345.1" xmlns="http://www.w3.org/1999/xhtml">In </span><a href="B16588_08.xhtml#_idTextAnchor170"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.346.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 8</span></em></span></a><span class="koboSpan" id="kobo.347.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.348.1" xmlns="http://www.w3.org/1999/xhtml">Understanding the Blazor Layout and Routing</span></em><span class="koboSpan" id="kobo.349.1" xmlns="http://www.w3.org/1999/xhtml">, we used the HTML and CSS code from Bootstrap examples to implement modal dialogs. </span><span class="koboSpan" id="kobo.349.2" xmlns="http://www.w3.org/1999/xhtml">We haven’t investigated them in detail yet, since our markup files look long and complex. </span><span class="koboSpan" id="kobo.349.3" xmlns="http://www.w3.org/1999/xhtml">We will analyze the code and turn it into Razor components in </span><span class="No-Break"><span class="koboSpan" id="kobo.350.1" xmlns="http://www.w3.org/1999/xhtml">this chapter.</span></span></p>
<h2 id="_idParaDest-178"><a id="_idTextAnchor194"/><span class="koboSpan" id="kobo.351.1" xmlns="http://www.w3.org/1999/xhtml">Creating a base modal dialog component</span></h2>
<p><span class="koboSpan" id="kobo.352.1" xmlns="http://www.w3.org/1999/xhtml">To refine Editor and Confirmation dialogs, we can build a base modal dialog first. </span><span class="koboSpan" id="kobo.352.2" xmlns="http://www.w3.org/1999/xhtml">Using this </span><a id="_idIndexMarker652"/><span class="koboSpan" id="kobo.353.1" xmlns="http://www.w3.org/1999/xhtml">base modal dialog, we can create either Editor or </span><span class="No-Break"><span class="koboSpan" id="kobo.354.1" xmlns="http://www.w3.org/1999/xhtml">Confirmation dialogs.</span></span></p>
<p><span class="koboSpan" id="kobo.355.1" xmlns="http://www.w3.org/1999/xhtml">To create </span><a id="_idIndexMarker653"/><span class="koboSpan" id="kobo.356.1" xmlns="http://www.w3.org/1999/xhtml">a new Razor component in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.357.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.BlazorUI</span></strong><span class="koboSpan" id="kobo.358.1" xmlns="http://www.w3.org/1999/xhtml"> project, we can right-mouse-click on the project node and select </span><strong class="bold"><span class="koboSpan" id="kobo.359.1" xmlns="http://www.w3.org/1999/xhtml">Add</span></strong><span class="koboSpan" id="kobo.360.1" xmlns="http://www.w3.org/1999/xhtml"> -&gt; </span><strong class="bold"><span class="koboSpan" id="kobo.361.1" xmlns="http://www.w3.org/1999/xhtml">New Item…</span></strong><span class="koboSpan" id="kobo.362.1" xmlns="http://www.w3.org/1999/xhtml"> -&gt; </span><strong class="bold"><span class="koboSpan" id="kobo.363.1" xmlns="http://www.w3.org/1999/xhtml">Razor Component</span></strong><span class="koboSpan" id="kobo.364.1" xmlns="http://www.w3.org/1999/xhtml"> in the project template. </span><span class="koboSpan" id="kobo.364.2" xmlns="http://www.w3.org/1999/xhtml">We name the Razor component as </span><strong class="source-inline"><span class="koboSpan" id="kobo.365.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.366.1" xmlns="http://www.w3.org/1999/xhtml"> and create a C# code-behind file for it. </span><span class="koboSpan" id="kobo.366.2" xmlns="http://www.w3.org/1999/xhtml">After that, we type the code in </span><em class="italic"><span class="koboSpan" id="kobo.367.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.1</span></em><span class="koboSpan" id="kobo.368.1" xmlns="http://www.w3.org/1999/xhtml"> to </span><strong class="source-inline"><span class="koboSpan" id="kobo.369.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog.razor</span></strong><span class="koboSpan" id="kobo.370.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><em class="italic"><span class="koboSpan" id="kobo.371.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.2</span></em> <span class="No-Break"><span class="koboSpan" id="kobo.372.1" xmlns="http://www.w3.org/1999/xhtml">to </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.373.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog.razor.cs</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.374.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.375.1" xmlns="http://www.w3.org/1999/xhtml">The UI code is extracted from the </span><strong class="source-inline"><span class="koboSpan" id="kobo.376.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.377.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="source-inline"><span class="koboSpan" id="kobo.378.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.379.1" xmlns="http://www.w3.org/1999/xhtml"> code in </span><a href="B16588_08.xhtml#_idTextAnchor170"><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.380.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 8</span></em></span></a><span class="koboSpan" id="kobo.381.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.382.1" xmlns="http://www.w3.org/1999/xhtml">Understanding the Blazor Layout and Routing</span></em><span class="koboSpan" id="kobo.383.1" xmlns="http://www.w3.org/1999/xhtml">, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.384.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.1</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.385.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.386.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.1: ModalDialog.razor (https://epa.ms/ModalDialog9-1)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.387.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;div class="modal fade" id=@Id tabindex="-1"
    aria-labelledby="ModelLabel" aria-hidden="true"&gt;
  &lt;div class="modal-dialog"&gt;&lt;div class="modal-content"&gt;
    &lt;div class="modal-header"&gt;                            ❶
      &lt;h5 class="modal-title" id="ModelLabel"&gt;@Title&lt;/h5&gt; ❷
      &lt;button type="button" class="btn-close"             ❸
        data-bs-dismiss="modal" aria-label="Close"/&gt;
    &lt;/div&gt;
    &lt;div class="modal-body"&gt;                              ❹
      &lt;form class="row gx-2 gy-3"&gt;
        @ChildContent                                     ❺
        &lt;div class="col-12"&gt;
          &lt;button type="button" class="btn btn-secondary"
            data-bs-dismiss="modal" @onclick=
              "OnClickClose"&gt;
            @CloseButtonText                              ❻
          &lt;/button&gt;
            &lt;button type="submit" class="btn btn-primary"
              data-bs-dismiss="modal" @onclick=
                "OnClickSave"&gt;
            @SaveButtonText                               ❼
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/form&gt;
    &lt;/div&gt;
  &lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;</span></pre>
<p><span class="koboSpan" id="kobo.388.1" xmlns="http://www.w3.org/1999/xhtml">From the markup code in </span><em class="italic"><span class="koboSpan" id="kobo.389.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.1</span></em><span class="koboSpan" id="kobo.390.1" xmlns="http://www.w3.org/1999/xhtml">, we can see that this is a typical HTML code snippet in Bootstrap style. </span><span class="koboSpan" id="kobo.390.2" xmlns="http://www.w3.org/1999/xhtml">We embedded C# variables in HTML to create the </span><span class="No-Break"><span class="koboSpan" id="kobo.391.1" xmlns="http://www.w3.org/1999/xhtml">component UI.</span></span></p>
<p><span class="koboSpan" id="kobo.392.1" xmlns="http://www.w3.org/1999/xhtml">This </span><a id="_idIndexMarker654"/><span class="koboSpan" id="kobo.393.1" xmlns="http://www.w3.org/1999/xhtml">base dialog UI </span><a id="_idIndexMarker655"/><span class="koboSpan" id="kobo.394.1" xmlns="http://www.w3.org/1999/xhtml">includes a header ❶ and body ❹. </span><span class="koboSpan" id="kobo.394.2" xmlns="http://www.w3.org/1999/xhtml">There is a title ❷ and a close button ❸ in the header. </span><span class="koboSpan" id="kobo.394.3" xmlns="http://www.w3.org/1999/xhtml">Inside the body, we can see a child content area ❺ and two buttons (</span><strong class="bold"><span class="koboSpan" id="kobo.395.1" xmlns="http://www.w3.org/1999/xhtml">Close</span></strong><span class="koboSpan" id="kobo.396.1" xmlns="http://www.w3.org/1999/xhtml"> ❻/</span><strong class="bold"><span class="koboSpan" id="kobo.397.1" xmlns="http://www.w3.org/1999/xhtml">Save</span></strong><span class="koboSpan" id="kobo.398.1" xmlns="http://www.w3.org/1999/xhtml"> ❼). </span><span class="koboSpan" id="kobo.398.2" xmlns="http://www.w3.org/1999/xhtml">We can refer to </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.399.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9</span></em></span><em class="italic"><span class="koboSpan" id="kobo.400.1" xmlns="http://www.w3.org/1999/xhtml">.4</span></em><span class="koboSpan" id="kobo.401.1" xmlns="http://www.w3.org/1999/xhtml"> to see the layout of this base </span><span class="No-Break"><span class="koboSpan" id="kobo.402.1" xmlns="http://www.w3.org/1999/xhtml">modal dialog:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer100">
<span class="koboSpan" id="kobo.403.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 9.4: Base dialog" src="image/Figure_9.4_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.404.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9.4: Base dialog</span></p>
<p><span class="koboSpan" id="kobo.405.1" xmlns="http://www.w3.org/1999/xhtml">Even though the HTML and CSS code is very similar to the Bootstrap example, we replaced all the hardcode content with C# variables. </span><span class="koboSpan" id="kobo.405.2" xmlns="http://www.w3.org/1999/xhtml">If we use this modal dialog component to build a new component, the following is </span><span class="No-Break"><span class="koboSpan" id="kobo.406.1" xmlns="http://www.w3.org/1999/xhtml">an example:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.407.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;ModalDialog Id=@id Title="Please confirm" OnSaveAsync=
  @OnDelete
    SaveButtonText="Save" CloseButtonText="Close"&gt;
    Do you want to delete UserName?
</span><span class="koboSpan" id="kobo.407.2" xmlns="http://www.w3.org/1999/xhtml">&lt;/ModalDialog&gt;
&lt;button class="dropdown-item" data-bs-toggle="modal"
    data-bs-target="#@Id"&gt;Please confirm&lt;/button&gt;</span></pre>
<p><span class="koboSpan" id="kobo.408.1" xmlns="http://www.w3.org/1999/xhtml">In the preceding markup code, we define the modal dialog using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.409.1" xmlns="http://www.w3.org/1999/xhtml">&lt;ModalDialog&gt;</span></strong><span class="koboSpan" id="kobo.410.1" xmlns="http://www.w3.org/1999/xhtml"> component tag. </span><span class="koboSpan" id="kobo.410.2" xmlns="http://www.w3.org/1999/xhtml">Each modal dialog has a unique ID to identify it. </span><span class="koboSpan" id="kobo.410.3" xmlns="http://www.w3.org/1999/xhtml">We can show the dialog box </span><a id="_idIndexMarker656"/><span class="koboSpan" id="kobo.411.1" xmlns="http://www.w3.org/1999/xhtml">after clicking </span><a id="_idIndexMarker657"/><span class="koboSpan" id="kobo.412.1" xmlns="http://www.w3.org/1999/xhtml">a button. </span><span class="koboSpan" id="kobo.412.2" xmlns="http://www.w3.org/1999/xhtml">In the button, we provide the modal dialog ID to </span><span class="No-Break"><span class="koboSpan" id="kobo.413.1" xmlns="http://www.w3.org/1999/xhtml">identify it.</span></span></p>
<p><span class="koboSpan" id="kobo.414.1" xmlns="http://www.w3.org/1999/xhtml">Inside the </span><strong class="source-inline"><span class="koboSpan" id="kobo.415.1" xmlns="http://www.w3.org/1999/xhtml">&lt;ModalDialog&gt;</span></strong><span class="koboSpan" id="kobo.416.1" xmlns="http://www.w3.org/1999/xhtml"> component tag, we assigned the value of multiple attributes defined in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.417.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.418.1" xmlns="http://www.w3.org/1999/xhtml"> component, such as the ID, title, text of buttons, event handler, and </span><span class="No-Break"><span class="koboSpan" id="kobo.419.1" xmlns="http://www.w3.org/1999/xhtml">so on.</span></span></p>
<h2 id="_idParaDest-179"><a id="_idTextAnchor195"/><span class="koboSpan" id="kobo.420.1" xmlns="http://www.w3.org/1999/xhtml">Data binding</span></h2>
<p><span class="koboSpan" id="kobo.421.1" xmlns="http://www.w3.org/1999/xhtml">Instead of assigning a string or data directly to the attribute of an HTML element, we can assign </span><a id="_idIndexMarker658"/><span class="koboSpan" id="kobo.422.1" xmlns="http://www.w3.org/1999/xhtml">a variable to it. </span><span class="koboSpan" id="kobo.422.2" xmlns="http://www.w3.org/1999/xhtml">This is the data binding feature of the Razor component. </span><span class="koboSpan" id="kobo.422.3" xmlns="http://www.w3.org/1999/xhtml">We will learn how to use data binding in </span><span class="No-Break"><span class="koboSpan" id="kobo.423.1" xmlns="http://www.w3.org/1999/xhtml">this section.</span></span></p>
<p><span class="koboSpan" id="kobo.424.1" xmlns="http://www.w3.org/1999/xhtml">In data binding, when </span><a id="_idIndexMarker659"/><span class="koboSpan" id="kobo.425.1" xmlns="http://www.w3.org/1999/xhtml">we assign a variable to the attribute of the DOM element, the data flows from Razor components to DOM elements. </span><span class="koboSpan" id="kobo.425.2" xmlns="http://www.w3.org/1999/xhtml">When we respond to the DOM event, the data flows from DOM elements to Razor components. </span><span class="koboSpan" id="kobo.425.3" xmlns="http://www.w3.org/1999/xhtml">Since we can use a Razor component just like a DOM element, the data flow between child and parent Razor components is similar to the data exchange between Razor components and </span><span class="No-Break"><span class="koboSpan" id="kobo.426.1" xmlns="http://www.w3.org/1999/xhtml">DOM elements.</span></span></p>
<p><span class="koboSpan" id="kobo.427.1" xmlns="http://www.w3.org/1999/xhtml">For example, we can bind the </span><strong class="source-inline"><span class="koboSpan" id="kobo.428.1" xmlns="http://www.w3.org/1999/xhtml">id</span></strong><span class="koboSpan" id="kobo.429.1" xmlns="http://www.w3.org/1999/xhtml"> variable to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.430.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.431.1" xmlns="http://www.w3.org/1999/xhtml"> attribute of </span><strong class="source-inline"><span class="koboSpan" id="kobo.432.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.433.1" xmlns="http://www.w3.org/1999/xhtml"> and we can handle the button click event using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.434.1" xmlns="http://www.w3.org/1999/xhtml">OnDelete</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.435.1" xmlns="http://www.w3.org/1999/xhtml">event handler:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.436.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;ModalDialog Id=@id Title="Please confirm" OnSaveAsync=
  @OnDelete
    SaveButtonText="Save" CloseButtonText="Close"&gt;</span></pre>
<p><span class="koboSpan" id="kobo.437.1" xmlns="http://www.w3.org/1999/xhtml">In the preceding example, the data flows from the </span><strong class="source-inline"><span class="koboSpan" id="kobo.438.1" xmlns="http://www.w3.org/1999/xhtml">id</span></strong><span class="koboSpan" id="kobo.439.1" xmlns="http://www.w3.org/1999/xhtml"> variable to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.440.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.441.1" xmlns="http://www.w3.org/1999/xhtml"> attribute of </span><strong class="source-inline"><span class="koboSpan" id="kobo.442.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.443.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.443.2" xmlns="http://www.w3.org/1999/xhtml">When the </span><strong class="source-inline"><span class="koboSpan" id="kobo.444.1" xmlns="http://www.w3.org/1999/xhtml">OnDelete</span></strong><span class="koboSpan" id="kobo.445.1" xmlns="http://www.w3.org/1999/xhtml"> event handler is invoked, the data flows from </span><strong class="source-inline"><span class="koboSpan" id="kobo.446.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.447.1" xmlns="http://www.w3.org/1999/xhtml"> back to the current context. </span><span class="koboSpan" id="kobo.447.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.448.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.449.1" xmlns="http://www.w3.org/1999/xhtml"> attributes, </span><strong class="source-inline"><span class="koboSpan" id="kobo.450.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.451.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.452.1" xmlns="http://www.w3.org/1999/xhtml">OnSaveAsync</span></strong><span class="koboSpan" id="kobo.453.1" xmlns="http://www.w3.org/1999/xhtml">, are defined in the C# code-behind file. </span><span class="koboSpan" id="kobo.453.2" xmlns="http://www.w3.org/1999/xhtml">Let’s review the C# code-behind file of </span><strong class="source-inline"><span class="koboSpan" id="kobo.454.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.455.1" xmlns="http://www.w3.org/1999/xhtml"> in the </span><span class="No-Break"><span class="koboSpan" id="kobo.456.1" xmlns="http://www.w3.org/1999/xhtml">next section.</span></span></p>
<h2 id="_idParaDest-180"><a id="_idTextAnchor196"/><span class="koboSpan" id="kobo.457.1" xmlns="http://www.w3.org/1999/xhtml">Component parameters</span></h2>
<p><span class="koboSpan" id="kobo.458.1" xmlns="http://www.w3.org/1999/xhtml">We can define the attributes of Razor components using component parameters. </span><span class="koboSpan" id="kobo.458.2" xmlns="http://www.w3.org/1999/xhtml">To define </span><a id="_idIndexMarker660"/><span class="koboSpan" id="kobo.459.1" xmlns="http://www.w3.org/1999/xhtml">component parameters, we </span><a id="_idIndexMarker661"/><span class="koboSpan" id="kobo.460.1" xmlns="http://www.w3.org/1999/xhtml">must create public properties with the </span><strong class="source-inline"><span class="koboSpan" id="kobo.461.1" xmlns="http://www.w3.org/1999/xhtml">[</span></strong><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.462.1" xmlns="http://www.w3.org/1999/xhtml">Parameter]</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.463.1" xmlns="http://www.w3.org/1999/xhtml"> attribute.</span></span></p>
<p><span class="koboSpan" id="kobo.464.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.465.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.466.1" xmlns="http://www.w3.org/1999/xhtml"> class, as shown in </span><em class="italic"><span class="koboSpan" id="kobo.467.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.2</span></em><span class="koboSpan" id="kobo.468.1" xmlns="http://www.w3.org/1999/xhtml">, we declare seven component parameters, </span><strong class="source-inline"><span class="koboSpan" id="kobo.469.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.470.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.471.1" xmlns="http://www.w3.org/1999/xhtml">Title</span></strong><span class="koboSpan" id="kobo.472.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.473.1" xmlns="http://www.w3.org/1999/xhtml">ChildContent</span></strong><span class="koboSpan" id="kobo.474.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.475.1" xmlns="http://www.w3.org/1999/xhtml">OnClose</span></strong><span class="koboSpan" id="kobo.476.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.477.1" xmlns="http://www.w3.org/1999/xhtml">OnSaveAsync</span></strong><span class="koboSpan" id="kobo.478.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.479.1" xmlns="http://www.w3.org/1999/xhtml">CloseButtonText</span></strong><span class="koboSpan" id="kobo.480.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><strong class="source-inline"><span class="koboSpan" id="kobo.481.1" xmlns="http://www.w3.org/1999/xhtml">SaveButtonText</span></strong><span class="koboSpan" id="kobo.482.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.482.2" xmlns="http://www.w3.org/1999/xhtml">We can use these component parameters in </span><span class="No-Break"><span class="koboSpan" id="kobo.483.1" xmlns="http://www.w3.org/1999/xhtml">data binding:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.484.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.2: ModalDialog.razor.cs (https://epa.ms/ModalDialog9-2)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.485.1" xmlns="http://www.w3.org/1999/xhtml">
using Microsoft.AspNetCore.Components;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
namespace PassXYZ.BlazorUI;
public partial class ModalDialog : IDisposable
{
  [Parameter]
  public string? </span><span class="koboSpan" id="kobo.485.2" xmlns="http://www.w3.org/1999/xhtml">Id { get; set; }                         ❶
  [Parameter]
  public string? </span><span class="koboSpan" id="kobo.485.3" xmlns="http://www.w3.org/1999/xhtml">Title { get; set; }                      ❷
  [Parameter]
  public RenderFragment ChildContent { get; set; }        ❸
  [Parameter]
  public Func&lt;Task&gt;? </span><span class="koboSpan" id="kobo.485.4" xmlns="http://www.w3.org/1999/xhtml">OnClose { get; set; }                ❹
  [Parameter]
  public Func&lt;Task&lt;bool&gt;&gt;? </span><span class="koboSpan" id="kobo.485.5" xmlns="http://www.w3.org/1999/xhtml">OnSaveAsync { get; set; }      ❺
  [Parameter]
  [NotNull]
  public string? </span><span class="koboSpan" id="kobo.485.6" xmlns="http://www.w3.org/1999/xhtml">CloseButtonText { get; set; }            ❻
  [Parameter]
  [NotNull]
  public string? </span><span class="koboSpan" id="kobo.485.7" xmlns="http://www.w3.org/1999/xhtml">SaveButtonText { get; set; }             ❼
  private async Task OnClickClose() {
    if (OnClose != null) { await OnClose(); }
  }
  private async Task OnClickSave() {
    if (OnSaveAsync != null) { await OnSaveAsync(); }
  }
  void IDisposable.Dispose() {
      GC.SuppressFinalize(this);
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.486.1" xmlns="http://www.w3.org/1999/xhtml">The component </span><a id="_idIndexMarker662"/><span class="koboSpan" id="kobo.487.1" xmlns="http://www.w3.org/1999/xhtml">parameters of </span><strong class="source-inline"><span class="koboSpan" id="kobo.488.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.489.1" xmlns="http://www.w3.org/1999/xhtml"> are defined </span><span class="No-Break"><span class="koboSpan" id="kobo.490.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<ul>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.491.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.492.1" xmlns="http://www.w3.org/1999/xhtml"> ❶  – This is used to identify a </span><span class="No-Break"><span class="koboSpan" id="kobo.493.1" xmlns="http://www.w3.org/1999/xhtml">modal dialog</span></span></li>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.494.1" xmlns="http://www.w3.org/1999/xhtml">Title</span></strong><span class="koboSpan" id="kobo.495.1" xmlns="http://www.w3.org/1999/xhtml"> ❷ – This is the title of the </span><span class="No-Break"><span class="koboSpan" id="kobo.496.1" xmlns="http://www.w3.org/1999/xhtml">modal dialog</span></span></li>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.497.1" xmlns="http://www.w3.org/1999/xhtml">ChildContent</span></strong><span class="koboSpan" id="kobo.498.1" xmlns="http://www.w3.org/1999/xhtml"> ❸ – This is where the content of the child component should </span><span class="No-Break"><span class="koboSpan" id="kobo.499.1" xmlns="http://www.w3.org/1999/xhtml">be inserted</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.500.1" xmlns="http://www.w3.org/1999/xhtml">Two event handlers – </span><strong class="source-inline"><span class="koboSpan" id="kobo.501.1" xmlns="http://www.w3.org/1999/xhtml">OnClose</span></strong><span class="koboSpan" id="kobo.502.1" xmlns="http://www.w3.org/1999/xhtml"> ❹ and </span><strong class="source-inline"><span class="koboSpan" id="kobo.503.1" xmlns="http://www.w3.org/1999/xhtml">OnSaveAsync</span></strong><span class="koboSpan" id="kobo.504.1" xmlns="http://www.w3.org/1999/xhtml"> ❺ – are defined to handle button click actions. </span><span class="koboSpan" id="kobo.504.2" xmlns="http://www.w3.org/1999/xhtml">We can customize the text of both buttons using </span><strong class="source-inline"><span class="koboSpan" id="kobo.505.1" xmlns="http://www.w3.org/1999/xhtml">CloseButtonText</span></strong><span class="koboSpan" id="kobo.506.1" xmlns="http://www.w3.org/1999/xhtml"> ❻ and </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.507.1" xmlns="http://www.w3.org/1999/xhtml">SaveButtonText</span></strong></span><span class="No-Break"> </span><span class="No-Break"><span class="koboSpan" id="kobo.508.1" xmlns="http://www.w3.org/1999/xhtml">❼</span></span><span class="No-Break"><span class="koboSpan" id="kobo.509.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.510.1" xmlns="http://www.w3.org/1999/xhtml">We can treat </span><a id="_idIndexMarker663"/><span class="koboSpan" id="kobo.511.1" xmlns="http://www.w3.org/1999/xhtml">component parameters just like HTML attributes. </span><span class="koboSpan" id="kobo.511.2" xmlns="http://www.w3.org/1999/xhtml">We can assign a C# field, property, or return value of a method to the component parameter </span><span class="No-Break"><span class="koboSpan" id="kobo.512.1" xmlns="http://www.w3.org/1999/xhtml">of </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.513.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.514.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.515.1" xmlns="http://www.w3.org/1999/xhtml">After we create the </span><strong class="source-inline"><span class="koboSpan" id="kobo.516.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.517.1" xmlns="http://www.w3.org/1999/xhtml"> base component, we can create Editor and Confirmation dialog components </span><span class="No-Break"><span class="koboSpan" id="kobo.518.1" xmlns="http://www.w3.org/1999/xhtml">using it.</span></span></p>
<p><span class="koboSpan" id="kobo.519.1" xmlns="http://www.w3.org/1999/xhtml">Let’s create a new modal dialog, </span><strong class="source-inline"><span class="koboSpan" id="kobo.520.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.521.1" xmlns="http://www.w3.org/1999/xhtml">, to ask for the confirmation of deleting an item. </span><span class="koboSpan" id="kobo.521.2" xmlns="http://www.w3.org/1999/xhtml">To create a new </span><strong class="source-inline"><span class="koboSpan" id="kobo.522.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.523.1" xmlns="http://www.w3.org/1999/xhtml"> componwent in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.524.1" xmlns="http://www.w3.org/1999/xhtml">PassXYZ.BlazorUI</span></strong><span class="koboSpan" id="kobo.525.1" xmlns="http://www.w3.org/1999/xhtml"> project, we can right-mouse-click on the project node and select </span><strong class="bold"><span class="koboSpan" id="kobo.526.1" xmlns="http://www.w3.org/1999/xhtml">Add</span></strong><span class="koboSpan" id="kobo.527.1" xmlns="http://www.w3.org/1999/xhtml"> -&gt; </span><strong class="bold"><span class="koboSpan" id="kobo.528.1" xmlns="http://www.w3.org/1999/xhtml">New Item…</span></strong><span class="koboSpan" id="kobo.529.1" xmlns="http://www.w3.org/1999/xhtml"> -&gt; </span><strong class="bold"><span class="koboSpan" id="kobo.530.1" xmlns="http://www.w3.org/1999/xhtml">Razor Component</span></strong><span class="koboSpan" id="kobo.531.1" xmlns="http://www.w3.org/1999/xhtml"> in the project template. </span><span class="koboSpan" id="kobo.531.2" xmlns="http://www.w3.org/1999/xhtml">We can name the Razor component </span><strong class="source-inline"><span class="koboSpan" id="kobo.532.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.533.1" xmlns="http://www.w3.org/1999/xhtml"> and type the following code as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.534.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.3</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.535.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.536.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.3: ConfirmDialog.razor (https://epa.ms/ConfirmDialog9-3)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.537.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;ModalDialog Id=@Id Title=@($w"Deleting {Title}") OnSaveAsync=@OnSavew
    SaveButtonText="Confirm" CloseButtonText="Cancel"&gt;
    Please confirm to delete @Title?
</span><span class="koboSpan" id="kobo.537.2" xmlns="http://www.w3.org/1999/xhtml">&lt;/ModalDialog&gt;
@code {w
  [Parameter]
  public string Id { get; set; } = "confirmDialog"w;      ①
  [Parameter]
  public string? </span><span class="koboSpan" id="kobo.537.3" xmlns="http://www.w3.org/1999/xhtml">Title { get; set; }                     ②
  [Parameter]
  public Action? </span><span class="koboSpan" id="kobo.537.4" xmlns="http://www.w3.org/1999/xhtml">OnConfirmClick { get; set; }
  async Task&lt;bool&gt; OnSave() {
    OnConfirmClick?.Invoke();
    return true;
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.538.1" xmlns="http://www.w3.org/1999/xhtml">We define </span><a id="_idIndexMarker664"/><span class="koboSpan" id="kobo.539.1" xmlns="http://www.w3.org/1999/xhtml">the </span><strong class="source-inline"><span class="koboSpan" id="kobo.540.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.541.1" xmlns="http://www.w3.org/1999/xhtml"> ① and </span><strong class="source-inline"><span class="koboSpan" id="kobo.542.1" xmlns="http://www.w3.org/1999/xhtml">Title</span></strong><span class="koboSpan" id="kobo.543.1" xmlns="http://www.w3.org/1999/xhtml"> ② component parameters in </span><strong class="source-inline"><span class="koboSpan" id="kobo.544.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.545.1" xmlns="http://www.w3.org/1999/xhtml"> and pass their values to the base class through data binding. </span><span class="koboSpan" id="kobo.545.2" xmlns="http://www.w3.org/1999/xhtml">We also subscribe to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.546.1" xmlns="http://www.w3.org/1999/xhtml">OnSaveAsync</span></strong><span class="koboSpan" id="kobo.547.1" xmlns="http://www.w3.org/1999/xhtml"> event using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.548.1" xmlns="http://www.w3.org/1999/xhtml">OnSave</span></strong><span class="koboSpan" id="kobo.549.1" xmlns="http://www.w3.org/1999/xhtml"> event handler. </span><span class="koboSpan" id="kobo.549.2" xmlns="http://www.w3.org/1999/xhtml">We also define our own event handler, </span><strong class="source-inline"><span class="koboSpan" id="kobo.550.1" xmlns="http://www.w3.org/1999/xhtml">OnConfirmClick</span></strong><span class="koboSpan" id="kobo.551.1" xmlns="http://www.w3.org/1999/xhtml">, as a component parameter to which other components </span><span class="No-Break"><span class="koboSpan" id="kobo.552.1" xmlns="http://www.w3.org/1999/xhtml">can subscribe.</span></span></p>
<p><span class="koboSpan" id="kobo.553.1" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.554.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.555.1" xmlns="http://www.w3.org/1999/xhtml">, we actually bind parameters through nested components. </span><span class="koboSpan" id="kobo.555.2" xmlns="http://www.w3.org/1999/xhtml">In this case, the data should flow in the directions </span><span class="No-Break"><span class="koboSpan" id="kobo.556.1" xmlns="http://www.w3.org/1999/xhtml">suggested here:</span></span></p>
<ul>
<li><span class="koboSpan" id="kobo.557.1" xmlns="http://www.w3.org/1999/xhtml">Change notifications flow up </span><span class="No-Break"><span class="koboSpan" id="kobo.558.1" xmlns="http://www.w3.org/1999/xhtml">the hierarchy</span></span></li>
<li><span class="koboSpan" id="kobo.559.1" xmlns="http://www.w3.org/1999/xhtml">New parameter values flow down </span><span class="No-Break"><span class="koboSpan" id="kobo.560.1" xmlns="http://www.w3.org/1999/xhtml">the hierarchy</span></span></li>
</ul>
<p><span class="koboSpan" id="kobo.561.1" xmlns="http://www.w3.org/1999/xhtml">The values of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.562.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.563.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.564.1" xmlns="http://www.w3.org/1999/xhtml">Title</span></strong><span class="koboSpan" id="kobo.565.1" xmlns="http://www.w3.org/1999/xhtml"> attributes are assigned by the components that use </span><strong class="source-inline"><span class="koboSpan" id="kobo.566.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.567.1" xmlns="http://www.w3.org/1999/xhtml">, and their values flow down to </span><strong class="source-inline"><span class="koboSpan" id="kobo.568.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.569.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.569.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.570.1" xmlns="http://www.w3.org/1999/xhtml">Save</span></strong><span class="koboSpan" id="kobo.571.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="source-inline"><span class="koboSpan" id="kobo.572.1" xmlns="http://www.w3.org/1999/xhtml">Close</span></strong><span class="koboSpan" id="kobo.573.1" xmlns="http://www.w3.org/1999/xhtml"> button events are triggered in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.574.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.575.1" xmlns="http://www.w3.org/1999/xhtml"> component, and they flow up the chain to </span><strong class="source-inline"><span class="koboSpan" id="kobo.576.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.577.1" xmlns="http://www.w3.org/1999/xhtml"> and upper-level components. </span><span class="koboSpan" id="kobo.577.2" xmlns="http://www.w3.org/1999/xhtml">If we use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.578.1" xmlns="http://www.w3.org/1999/xhtml">Save</span></strong><span class="koboSpan" id="kobo.579.1" xmlns="http://www.w3.org/1999/xhtml"> button as an example, the event flows up in the direction </span><span class="No-Break"><span class="koboSpan" id="kobo.580.1" xmlns="http://www.w3.org/1999/xhtml">shown here:</span></span></p>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.581.1" xmlns="http://www.w3.org/1999/xhtml">onclick (DOM) -&gt;se OnSaveAsync (ModalDialog) -&gt; </span></strong><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.582.1" xmlns="http://www.w3.org/1999/xhtml">OnConfirmClick (ConfirmDialog)</span></strong></span></p>
<p><span class="koboSpan" id="kobo.583.1" xmlns="http://www.w3.org/1999/xhtml">It starts from the </span><strong class="source-inline"><span class="koboSpan" id="kobo.584.1" xmlns="http://www.w3.org/1999/xhtml">onclick</span></strong><span class="koboSpan" id="kobo.585.1" xmlns="http://www.w3.org/1999/xhtml"> event in DOM. </span><strong class="source-inline"><span class="koboSpan" id="kobo.586.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.587.1" xmlns="http://www.w3.org/1999/xhtml"> defines its own event, </span><strong class="source-inline"><span class="koboSpan" id="kobo.588.1" xmlns="http://www.w3.org/1999/xhtml">OnSaveAsync</span></strong><span class="koboSpan" id="kobo.589.1" xmlns="http://www.w3.org/1999/xhtml">, which is triggered by the </span><strong class="source-inline"><span class="koboSpan" id="kobo.590.1" xmlns="http://www.w3.org/1999/xhtml">onclick</span></strong><span class="koboSpan" id="kobo.591.1" xmlns="http://www.w3.org/1999/xhtml"> event handler. </span><strong class="source-inline"><span class="koboSpan" id="kobo.592.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.593.1" xmlns="http://www.w3.org/1999/xhtml"> defines its own event, </span><strong class="source-inline"><span class="koboSpan" id="kobo.594.1" xmlns="http://www.w3.org/1999/xhtml">OnConfirmClick</span></strong><span class="koboSpan" id="kobo.595.1" xmlns="http://www.w3.org/1999/xhtml">, which is triggered by the </span><strong class="source-inline"><span class="koboSpan" id="kobo.596.1" xmlns="http://www.w3.org/1999/xhtml">OnSaveAsync</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.597.1" xmlns="http://www.w3.org/1999/xhtml">event handler.</span></span></p>
<h2 id="_idParaDest-181"><a id="_idTextAnchor197"/><span class="koboSpan" id="kobo.598.1" xmlns="http://www.w3.org/1999/xhtml">Nested components</span></h2>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.599.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.600.1" xmlns="http://www.w3.org/1999/xhtml"> is one </span><a id="_idIndexMarker665"/><span class="koboSpan" id="kobo.601.1" xmlns="http://www.w3.org/1999/xhtml">of the examples of nested components. </span><span class="koboSpan" id="kobo.601.2" xmlns="http://www.w3.org/1999/xhtml">As we </span><a id="_idIndexMarker666"/><span class="koboSpan" id="kobo.602.1" xmlns="http://www.w3.org/1999/xhtml">can see, we can embed components inside components by declaring them using HTML syntax. </span><span class="koboSpan" id="kobo.602.2" xmlns="http://www.w3.org/1999/xhtml">The embedded components look like HTML tags, where the name of the tag is the component type. </span><span class="koboSpan" id="kobo.602.3" xmlns="http://www.w3.org/1999/xhtml">For example, we can use </span><strong class="source-inline"><span class="koboSpan" id="kobo.603.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.604.1" xmlns="http://www.w3.org/1999/xhtml"> inside </span><strong class="source-inline"><span class="koboSpan" id="kobo.605.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.606.1" xmlns="http://www.w3.org/1999/xhtml">, as </span><span class="No-Break"><span class="koboSpan" id="kobo.607.1" xmlns="http://www.w3.org/1999/xhtml">shown here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.608.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;ModalDialog ...&gt;Please confirm to delete @Title?&lt;/ModalDialog&gt;</span></pre>
<p><span class="koboSpan" id="kobo.609.1" xmlns="http://www.w3.org/1999/xhtml">Nested components are the way to build the component hierarchy in Blazor. </span><span class="koboSpan" id="kobo.609.2" xmlns="http://www.w3.org/1999/xhtml">Inheritance and composition are the two ways that we can extend and reuse a class in an object-oriented programming language. </span><span class="koboSpan" id="kobo.609.3" xmlns="http://www.w3.org/1999/xhtml">In Blazor, composition is used in nested components to extend </span><a id="_idIndexMarker667"/><span class="koboSpan" id="kobo.610.1" xmlns="http://www.w3.org/1999/xhtml">the functionalities. </span><span class="koboSpan" id="kobo.610.2" xmlns="http://www.w3.org/1999/xhtml">Inheritance </span><a id="_idIndexMarker668"/><span class="koboSpan" id="kobo.611.1" xmlns="http://www.w3.org/1999/xhtml">is an </span><em class="italic"><span class="koboSpan" id="kobo.612.1" xmlns="http://www.w3.org/1999/xhtml">is-a</span></em><span class="koboSpan" id="kobo.613.1" xmlns="http://www.w3.org/1999/xhtml"> relationship, while composition is a </span><em class="italic"><span class="koboSpan" id="kobo.614.1" xmlns="http://www.w3.org/1999/xhtml">has-a</span></em><span class="koboSpan" id="kobo.615.1" xmlns="http://www.w3.org/1999/xhtml"> relationship. </span><span class="koboSpan" id="kobo.615.2" xmlns="http://www.w3.org/1999/xhtml">In nested components, the parent component has a child component </span><span class="No-Break"><span class="koboSpan" id="kobo.616.1" xmlns="http://www.w3.org/1999/xhtml">in it.</span></span></p>
<p><span class="koboSpan" id="kobo.617.1" xmlns="http://www.w3.org/1999/xhtml">In Microsoft Blazor and ASP.NET Core documents, the terms </span><em class="italic"><span class="koboSpan" id="kobo.618.1" xmlns="http://www.w3.org/1999/xhtml">ancestor</span></em><span class="koboSpan" id="kobo.619.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><em class="italic"><span class="koboSpan" id="kobo.620.1" xmlns="http://www.w3.org/1999/xhtml">descendant</span></em><span class="koboSpan" id="kobo.621.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><em class="italic"><span class="koboSpan" id="kobo.622.1" xmlns="http://www.w3.org/1999/xhtml">parent</span></em><span class="koboSpan" id="kobo.623.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><em class="italic"><span class="koboSpan" id="kobo.624.1" xmlns="http://www.w3.org/1999/xhtml">child</span></em><span class="koboSpan" id="kobo.625.1" xmlns="http://www.w3.org/1999/xhtml"> are used to explain the relationship of nested components. </span><span class="koboSpan" id="kobo.625.2" xmlns="http://www.w3.org/1999/xhtml">Here, parent and child is not an inheritance relationship, but a composition relationship. </span><span class="koboSpan" id="kobo.625.3" xmlns="http://www.w3.org/1999/xhtml">A better term could be an outer component or an inner component. </span><span class="koboSpan" id="kobo.625.4" xmlns="http://www.w3.org/1999/xhtml">Nevertheless, to be consistent with the Microsoft documentation, I won’t choose a different term in the discussion. </span><span class="koboSpan" id="kobo.625.5" xmlns="http://www.w3.org/1999/xhtml">Please just be aware that when we discuss nested components and data binding, the ancestor and descendant relationship is a </span><em class="italic"><span class="koboSpan" id="kobo.626.1" xmlns="http://www.w3.org/1999/xhtml">has-a</span></em><span class="koboSpan" id="kobo.627.1" xmlns="http://www.w3.org/1999/xhtml"> relationship </span><span class="No-Break"><span class="koboSpan" id="kobo.628.1" xmlns="http://www.w3.org/1999/xhtml">or composition.</span></span></p>
<p><span class="koboSpan" id="kobo.629.1" xmlns="http://www.w3.org/1999/xhtml">In our previous example, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.630.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.631.1" xmlns="http://www.w3.org/1999/xhtml"> component is the outer component, while </span><strong class="source-inline"><span class="koboSpan" id="kobo.632.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.633.1" xmlns="http://www.w3.org/1999/xhtml"> is the inner component. </span><span class="koboSpan" id="kobo.633.2" xmlns="http://www.w3.org/1999/xhtml">The relationship is that </span><strong class="source-inline"><span class="koboSpan" id="kobo.634.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.635.1" xmlns="http://www.w3.org/1999/xhtml">, has </span><strong class="source-inline"><span class="koboSpan" id="kobo.636.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.637.1" xmlns="http://www.w3.org/1999/xhtml">in it.</span></span></p>
<h3><span class="koboSpan" id="kobo.638.1" xmlns="http://www.w3.org/1999/xhtml">Child content rendering</span></h3>
<p><span class="koboSpan" id="kobo.639.1" xmlns="http://www.w3.org/1999/xhtml">When we </span><a id="_idIndexMarker669"/><span class="koboSpan" id="kobo.640.1" xmlns="http://www.w3.org/1999/xhtml">build nested components, there </span><a id="_idIndexMarker670"/><span class="koboSpan" id="kobo.641.1" xmlns="http://www.w3.org/1999/xhtml">are many cases in which one component can set the content of another component. </span><span class="koboSpan" id="kobo.641.2" xmlns="http://www.w3.org/1999/xhtml">The outer component provides the content between the inner component’s opening and closing tags. </span><span class="koboSpan" id="kobo.641.3" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.642.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.643.1" xmlns="http://www.w3.org/1999/xhtml">, it sets the content of </span><strong class="source-inline"><span class="koboSpan" id="kobo.644.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.645.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.646.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;ModalDialog Id=@Id Title=@($"Deleting {Title}")
  OnSaveAsync=@OnSave
    SaveButtonText="Confirm" CloseButtonText="Cancel"&gt;
    Please confirm to delete @Title?
</span><span class="koboSpan" id="kobo.646.2" xmlns="http://www.w3.org/1999/xhtml">&lt;/ModalDialog&gt;</span></pre>
<p><span class="koboSpan" id="kobo.647.1" xmlns="http://www.w3.org/1999/xhtml">This is done by using a special component parameter called </span><strong class="source-inline"><span class="koboSpan" id="kobo.648.1" xmlns="http://www.w3.org/1999/xhtml">ChildContent</span></strong><span class="koboSpan" id="kobo.649.1" xmlns="http://www.w3.org/1999/xhtml">, which is of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.650.1" xmlns="http://www.w3.org/1999/xhtml">RenderFragment</span></strong><span class="koboSpan" id="kobo.651.1" xmlns="http://www.w3.org/1999/xhtml"> type. </span><span class="koboSpan" id="kobo.651.2" xmlns="http://www.w3.org/1999/xhtml">In the preceding code, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.652.1" xmlns="http://www.w3.org/1999/xhtml">Please confirm to delete @Title?</span></strong><span class="koboSpan" id="kobo.653.1" xmlns="http://www.w3.org/1999/xhtml"> string is set to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.654.1" xmlns="http://www.w3.org/1999/xhtml">ChildContent</span></strong><span class="koboSpan" id="kobo.655.1" xmlns="http://www.w3.org/1999/xhtml"> parameter </span><span class="No-Break"><span class="koboSpan" id="kobo.656.1" xmlns="http://www.w3.org/1999/xhtml">of </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.657.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.658.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.659.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.660.1" xmlns="http://www.w3.org/1999/xhtml"> is still a relatively simple example of nested components. </span><span class="koboSpan" id="kobo.660.2" xmlns="http://www.w3.org/1999/xhtml">Let’s look at another example, </span><strong class="source-inline"><span class="koboSpan" id="kobo.661.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.662.1" xmlns="http://www.w3.org/1999/xhtml">, to explore more Razor component features. </span><span class="koboSpan" id="kobo.662.2" xmlns="http://www.w3.org/1999/xhtml">As we mentioned earlier, we need two dialog boxes to handle add, edit, and delete actions. </span><strong class="source-inline"><span class="koboSpan" id="kobo.663.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.664.1" xmlns="http://www.w3.org/1999/xhtml"> is used to confirm with users before deleting an item or a field. </span><span class="koboSpan" id="kobo.664.2" xmlns="http://www.w3.org/1999/xhtml">To add or edit an item or a field, we need a dialog box that can provide </span><span class="No-Break"><span class="koboSpan" id="kobo.665.1" xmlns="http://www.w3.org/1999/xhtml">editing features.</span></span></p>
<p><span class="koboSpan" id="kobo.666.1" xmlns="http://www.w3.org/1999/xhtml">We can </span><a id="_idIndexMarker671"/><span class="koboSpan" id="kobo.667.1" xmlns="http://www.w3.org/1999/xhtml">do the same to create the new </span><a id="_idIndexMarker672"/><span class="koboSpan" id="kobo.668.1" xmlns="http://www.w3.org/1999/xhtml">component, </span><strong class="source-inline"><span class="koboSpan" id="kobo.669.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.670.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.670.2" xmlns="http://www.w3.org/1999/xhtml">After selecting </span><strong class="bold"><span class="koboSpan" id="kobo.671.1" xmlns="http://www.w3.org/1999/xhtml">Add</span></strong><span class="koboSpan" id="kobo.672.1" xmlns="http://www.w3.org/1999/xhtml"> -&gt; </span><strong class="bold"><span class="koboSpan" id="kobo.673.1" xmlns="http://www.w3.org/1999/xhtml">New Item…</span></strong><span class="koboSpan" id="kobo.674.1" xmlns="http://www.w3.org/1999/xhtml"> -&gt; </span><strong class="bold"><span class="koboSpan" id="kobo.675.1" xmlns="http://www.w3.org/1999/xhtml">Razor Component</span></strong><span class="koboSpan" id="kobo.676.1" xmlns="http://www.w3.org/1999/xhtml"> in the project template, we can name the Razor component </span><strong class="source-inline"><span class="koboSpan" id="kobo.677.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.678.1" xmlns="http://www.w3.org/1999/xhtml"> and create a C# code-behind file for it. </span><span class="koboSpan" id="kobo.678.2" xmlns="http://www.w3.org/1999/xhtml">After that, we type the code in </span><em class="italic"><span class="koboSpan" id="kobo.679.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.4</span></em><span class="koboSpan" id="kobo.680.1" xmlns="http://www.w3.org/1999/xhtml"> to </span><strong class="source-inline"><span class="koboSpan" id="kobo.681.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog.razor</span></strong><span class="koboSpan" id="kobo.682.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><em class="italic"><span class="koboSpan" id="kobo.683.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.5</span></em> <span class="No-Break"><span class="koboSpan" id="kobo.684.1" xmlns="http://www.w3.org/1999/xhtml">to </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.685.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog.razor.cs</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.686.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.687.1" xmlns="http://www.w3.org/1999/xhtml">Let’s review the Razor markup code of </span><strong class="source-inline"><span class="koboSpan" id="kobo.688.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.689.1" xmlns="http://www.w3.org/1999/xhtml"> as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.690.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.4</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.691.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.692.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.4: EditorDialog.razor  (https://epa.ms/EditorDialog9-4)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.693.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;ModalDialog Id=@Id Title=@Key OnSaveAsync=@OnSaveClicked
  SaveButtonText ="Save" CloseButtonText="Close"&gt;
  @if (IsKeyEditingEnable) {                              ❶
    &lt;input type="text" class="form-control" id="keyField"
       @bind="Key" placeholder=@KeyPlaceHolder required&gt;  ❷
  }
  @ChildContent
  &lt;div&gt;
    &lt;textarea class="form-control" id="valueField"
      style="height: 100px"
      placeholder=@ValuePlaceHolder
      @bind="Value" required /&gt;                           ❸
  &lt;/div&gt;
&lt;/ModalDialog&gt;</span></pre>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.694.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.695.1" xmlns="http://www.w3.org/1999/xhtml"> is built using </span><strong class="source-inline"><span class="koboSpan" id="kobo.696.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.697.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.697.2" xmlns="http://www.w3.org/1999/xhtml">It can be used to edit a key-value pair. </span><span class="koboSpan" id="kobo.697.3" xmlns="http://www.w3.org/1999/xhtml">When we create a new key-value pair, we want to edit both the key and the value. </span><span class="koboSpan" id="kobo.697.4" xmlns="http://www.w3.org/1999/xhtml">When we edit an existing key-value pair, we may want to make a change to the value field only. </span><span class="koboSpan" id="kobo.697.5" xmlns="http://www.w3.org/1999/xhtml">These </span><a id="_idIndexMarker673"/><span class="koboSpan" id="kobo.698.1" xmlns="http://www.w3.org/1999/xhtml">are the two use cases that </span><a id="_idIndexMarker674"/><span class="koboSpan" id="kobo.699.1" xmlns="http://www.w3.org/1999/xhtml">we want to support in </span><strong class="source-inline"><span class="koboSpan" id="kobo.700.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.701.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.701.2" xmlns="http://www.w3.org/1999/xhtml">The condition is detected using a component parameter called </span><strong class="source-inline"><span class="koboSpan" id="kobo.702.1" xmlns="http://www.w3.org/1999/xhtml">IsKeyEditingEnable</span></strong><span class="koboSpan" id="kobo.703.1" xmlns="http://www.w3.org/1999/xhtml"> ❶. </span><span class="koboSpan" id="kobo.703.2" xmlns="http://www.w3.org/1999/xhtml">The key portion of the UI is rendered as an </span><strong class="source-inline"><span class="koboSpan" id="kobo.704.1" xmlns="http://www.w3.org/1999/xhtml">&lt;input&gt;</span></strong><span class="koboSpan" id="kobo.705.1" xmlns="http://www.w3.org/1999/xhtml"> ❷ element when we want to create a new key-value pair. </span><span class="koboSpan" id="kobo.705.2" xmlns="http://www.w3.org/1999/xhtml">When we edit an existing key-value pair, the key is displayed as the title in the header area, and we edit the value in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.706.1" xmlns="http://www.w3.org/1999/xhtml">&lt;textarea&gt;</span></strong><span class="koboSpan" id="kobo.707.1" xmlns="http://www.w3.org/1999/xhtml"> ❸ element. </span><span class="koboSpan" id="kobo.707.2" xmlns="http://www.w3.org/1999/xhtml">This is the main functionality of our </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.708.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.709.1" xmlns="http://www.w3.org/1999/xhtml"> component.</span></span></p>
<p><span class="koboSpan" id="kobo.710.1" xmlns="http://www.w3.org/1999/xhtml">We can see the UI in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.711.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9</span></em></span><em class="italic"><span class="koboSpan" id="kobo.712.1" xmlns="http://www.w3.org/1999/xhtml">.5</span></em><span class="koboSpan" id="kobo.713.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.713.2" xmlns="http://www.w3.org/1999/xhtml">On the left-hand side, it shows the dialog when we want to add a new field. </span><span class="koboSpan" id="kobo.713.3" xmlns="http://www.w3.org/1999/xhtml">We need to provide the field name and content. </span><span class="koboSpan" id="kobo.713.4" xmlns="http://www.w3.org/1999/xhtml">On the right-hand side, it shows the dialog when we want to edit an existing URL field. </span><span class="koboSpan" id="kobo.713.5" xmlns="http://www.w3.org/1999/xhtml">The field name is displayed in the title, and we can change the content </span><span class="No-Break"><span class="koboSpan" id="kobo.714.1" xmlns="http://www.w3.org/1999/xhtml">in </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.715.1" xmlns="http://www.w3.org/1999/xhtml">&lt;textarea&gt;</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.716.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer101">
<span class="koboSpan" id="kobo.717.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 9.5: Editing a field" src="image/Figure_9.5_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.718.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9.5: Editing a field</span></p>
<p><span class="koboSpan" id="kobo.719.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.720.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.721.1" xmlns="http://www.w3.org/1999/xhtml"> component, when </span><a id="_idIndexMarker675"/><span class="koboSpan" id="kobo.722.1" xmlns="http://www.w3.org/1999/xhtml">we edit the </span><a id="_idIndexMarker676"/><span class="koboSpan" id="kobo.723.1" xmlns="http://www.w3.org/1999/xhtml">key and value using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.724.1" xmlns="http://www.w3.org/1999/xhtml">&lt;input&gt;</span></strong><span class="koboSpan" id="kobo.725.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.726.1" xmlns="http://www.w3.org/1999/xhtml">&lt;textarea&gt;</span></strong><span class="koboSpan" id="kobo.727.1" xmlns="http://www.w3.org/1999/xhtml"> HTML elements, the initial value is displayed. </span><span class="koboSpan" id="kobo.727.2" xmlns="http://www.w3.org/1999/xhtml">The initial value sets from the Razor component to the DOM. </span><span class="koboSpan" id="kobo.727.3" xmlns="http://www.w3.org/1999/xhtml">After we make the changes, the data flows from the DOM to the Razor component. </span><span class="koboSpan" id="kobo.727.4" xmlns="http://www.w3.org/1999/xhtml">This is two-way </span><span class="No-Break"><span class="koboSpan" id="kobo.728.1" xmlns="http://www.w3.org/1999/xhtml">data binding.</span></span></p>
<h2 id="_idParaDest-182"><a id="_idTextAnchor198"/><span class="koboSpan" id="kobo.729.1" xmlns="http://www.w3.org/1999/xhtml">Two-way data binding</span></h2>
<p><span class="koboSpan" id="kobo.730.1" xmlns="http://www.w3.org/1999/xhtml">Two-way </span><a id="_idIndexMarker677"/><span class="koboSpan" id="kobo.731.1" xmlns="http://www.w3.org/1999/xhtml">data binding can be created with the </span><strong class="source-inline"><span class="koboSpan" id="kobo.732.1" xmlns="http://www.w3.org/1999/xhtml">@bind</span></strong><span class="koboSpan" id="kobo.733.1" xmlns="http://www.w3.org/1999/xhtml"> Razor </span><a id="_idIndexMarker678"/><span class="koboSpan" id="kobo.734.1" xmlns="http://www.w3.org/1999/xhtml">directive attribute. </span><span class="koboSpan" id="kobo.734.2" xmlns="http://www.w3.org/1999/xhtml">With this syntax, an HTML element attribute can bind to a field, property, expression value, or result of a method. </span><span class="koboSpan" id="kobo.734.3" xmlns="http://www.w3.org/1999/xhtml">In </span><em class="italic"><span class="koboSpan" id="kobo.735.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.4</span></em><span class="koboSpan" id="kobo.736.1" xmlns="http://www.w3.org/1999/xhtml">, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.737.1" xmlns="http://www.w3.org/1999/xhtml">&lt;input&gt;</span></strong><span class="koboSpan" id="kobo.738.1" xmlns="http://www.w3.org/1999/xhtml"> element value binds to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.739.1" xmlns="http://www.w3.org/1999/xhtml">Key</span></strong><span class="koboSpan" id="kobo.740.1" xmlns="http://www.w3.org/1999/xhtml"> property in the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.741.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.742.1" xmlns="http://www.w3.org/1999/xhtml"> component:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.743.1" xmlns="http://www.w3.org/1999/xhtml">
    &lt;input type="text" class="form-control" id="keyField"
       @bind="Key" placeholder=@KeyPlaceHolder required&gt;</span></pre>
<p><span class="koboSpan" id="kobo.744.1" xmlns="http://www.w3.org/1999/xhtml">With two-way data binding, the DOM element </span><strong class="source-inline"><span class="koboSpan" id="kobo.745.1" xmlns="http://www.w3.org/1999/xhtml">&lt;input&gt;</span></strong><span class="koboSpan" id="kobo.746.1" xmlns="http://www.w3.org/1999/xhtml"> value is updated whenever the </span><strong class="source-inline"><span class="koboSpan" id="kobo.747.1" xmlns="http://www.w3.org/1999/xhtml">Key</span></strong><span class="koboSpan" id="kobo.748.1" xmlns="http://www.w3.org/1999/xhtml"> property is changed. </span><span class="koboSpan" id="kobo.748.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.749.1" xmlns="http://www.w3.org/1999/xhtml">Key</span></strong><span class="koboSpan" id="kobo.750.1" xmlns="http://www.w3.org/1999/xhtml"> property is updated as well when the user updates the </span><strong class="source-inline"><span class="koboSpan" id="kobo.751.1" xmlns="http://www.w3.org/1999/xhtml">&lt;input&gt;</span></strong><span class="koboSpan" id="kobo.752.1" xmlns="http://www.w3.org/1999/xhtml"> value in </span><span class="No-Break"><span class="koboSpan" id="kobo.753.1" xmlns="http://www.w3.org/1999/xhtml">the DOM.</span></span></p>
<p><span class="koboSpan" id="kobo.754.1" xmlns="http://www.w3.org/1999/xhtml">In the preceding example, instead of using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.755.1" xmlns="http://www.w3.org/1999/xhtml">@bind</span></strong><span class="koboSpan" id="kobo.756.1" xmlns="http://www.w3.org/1999/xhtml"> directive attribute, we can replace the </span><strong class="source-inline"><span class="koboSpan" id="kobo.757.1" xmlns="http://www.w3.org/1999/xhtml">@bind</span></strong><span class="koboSpan" id="kobo.758.1" xmlns="http://www.w3.org/1999/xhtml"> directive attribute with two one-way data bindings, as you can see in the </span><span class="No-Break"><span class="koboSpan" id="kobo.759.1" xmlns="http://www.w3.org/1999/xhtml">following code:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.760.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;input type="text" class="form-control" id="keyField"
  value="@Key"
  @onchange="@((ChangeEventArgs e) =&gt; Key = e?.Value?
</span><span class="koboSpan" id="kobo.760.2" xmlns="http://www.w3.org/1999/xhtml">    .ToString())"
  placeholder=@KeyPlaceHolder required&gt;</span></pre>
<p><span class="koboSpan" id="kobo.761.1" xmlns="http://www.w3.org/1999/xhtml">When our </span><strong class="source-inline"><span class="koboSpan" id="kobo.762.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.763.1" xmlns="http://www.w3.org/1999/xhtml"> component is rendered, the value of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.764.1" xmlns="http://www.w3.org/1999/xhtml">&lt;input&gt;</span></strong><span class="koboSpan" id="kobo.765.1" xmlns="http://www.w3.org/1999/xhtml"> element comes from the </span><strong class="source-inline"><span class="koboSpan" id="kobo.766.1" xmlns="http://www.w3.org/1999/xhtml">Key</span></strong><span class="koboSpan" id="kobo.767.1" xmlns="http://www.w3.org/1999/xhtml"> property. </span><span class="koboSpan" id="kobo.767.2" xmlns="http://www.w3.org/1999/xhtml">When the user enters a value in the textbox and changes the element focus, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.768.1" xmlns="http://www.w3.org/1999/xhtml">onchange</span></strong><span class="koboSpan" id="kobo.769.1" xmlns="http://www.w3.org/1999/xhtml"> event is fired and the </span><strong class="source-inline"><span class="koboSpan" id="kobo.770.1" xmlns="http://www.w3.org/1999/xhtml">Key</span></strong><span class="koboSpan" id="kobo.771.1" xmlns="http://www.w3.org/1999/xhtml"> property is set to the </span><span class="No-Break"><span class="koboSpan" id="kobo.772.1" xmlns="http://www.w3.org/1999/xhtml">changed value.</span></span></p>
<p><span class="koboSpan" id="kobo.773.1" xmlns="http://www.w3.org/1999/xhtml">For the </span><strong class="source-inline"><span class="koboSpan" id="kobo.774.1" xmlns="http://www.w3.org/1999/xhtml">&lt;input&gt;</span></strong><span class="koboSpan" id="kobo.775.1" xmlns="http://www.w3.org/1999/xhtml"> element, the default event of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.776.1" xmlns="http://www.w3.org/1999/xhtml">@bind</span></strong><span class="koboSpan" id="kobo.777.1" xmlns="http://www.w3.org/1999/xhtml"> directive attribute is the </span><strong class="source-inline"><span class="koboSpan" id="kobo.778.1" xmlns="http://www.w3.org/1999/xhtml">onchange</span></strong><span class="koboSpan" id="kobo.779.1" xmlns="http://www.w3.org/1999/xhtml"> event. </span><span class="koboSpan" id="kobo.779.2" xmlns="http://www.w3.org/1999/xhtml">We can change the event with an </span><strong class="source-inline"><span class="koboSpan" id="kobo.780.1" xmlns="http://www.w3.org/1999/xhtml">@bind:event="{event}"</span></strong><span class="koboSpan" id="kobo.781.1" xmlns="http://www.w3.org/1999/xhtml"> attribute. </span><span class="koboSpan" id="kobo.781.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.782.1" xmlns="http://www.w3.org/1999/xhtml">{event}</span></strong><span class="koboSpan" id="kobo.783.1" xmlns="http://www.w3.org/1999/xhtml"> placeholder should be a DOM event. </span><span class="koboSpan" id="kobo.783.2" xmlns="http://www.w3.org/1999/xhtml">For example, we can change the </span><strong class="source-inline"><span class="koboSpan" id="kobo.784.1" xmlns="http://www.w3.org/1999/xhtml">onchange</span></strong><span class="koboSpan" id="kobo.785.1" xmlns="http://www.w3.org/1999/xhtml"> event to an </span><strong class="source-inline"><span class="koboSpan" id="kobo.786.1" xmlns="http://www.w3.org/1999/xhtml">oninput</span></strong><span class="koboSpan" id="kobo.787.1" xmlns="http://www.w3.org/1999/xhtml"> event with the following </span><span class="No-Break"><span class="koboSpan" id="kobo.788.1" xmlns="http://www.w3.org/1999/xhtml">code snippet:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.789.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;input type="text" class="form-control" id="keyField"
  @bind="Key" @bind:event="oninput" placeholder=@KeyPlaceHolder required&gt;</span></pre>
<h3><span class="koboSpan" id="kobo.790.1" xmlns="http://www.w3.org/1999/xhtml">Binding with component parameters</span></h3>
<p><span class="koboSpan" id="kobo.791.1" xmlns="http://www.w3.org/1999/xhtml">In the previous section, we discussed two-way data binding between a Razor component </span><a id="_idIndexMarker679"/><span class="koboSpan" id="kobo.792.1" xmlns="http://www.w3.org/1999/xhtml">and a DOM element. </span><span class="koboSpan" id="kobo.792.2" xmlns="http://www.w3.org/1999/xhtml">Since the Razor component can be used in a similar way as the DOM element, we can create a two-way data binding between two Razor components as well. </span><span class="koboSpan" id="kobo.792.3" xmlns="http://www.w3.org/1999/xhtml">This is usually the case when we need to communicate between parent and child (inner or </span><span class="No-Break"><span class="koboSpan" id="kobo.793.1" xmlns="http://www.w3.org/1999/xhtml">outer) components.</span></span></p>
<p><span class="koboSpan" id="kobo.794.1" xmlns="http://www.w3.org/1999/xhtml">We can bind a component parameter of an inner component to the property of an outer component with the </span><strong class="source-inline"><span class="koboSpan" id="kobo.795.1" xmlns="http://www.w3.org/1999/xhtml">@bind-{PROPERTY}</span></strong><span class="koboSpan" id="kobo.796.1" xmlns="http://www.w3.org/1999/xhtml"> syntax. </span><span class="koboSpan" id="kobo.796.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.797.1" xmlns="http://www.w3.org/1999/xhtml">{PROPERTY}</span></strong><span class="koboSpan" id="kobo.798.1" xmlns="http://www.w3.org/1999/xhtml"> placeholder is the property to bind. </span><span class="koboSpan" id="kobo.798.2" xmlns="http://www.w3.org/1999/xhtml">We explained that the </span><strong class="source-inline"><span class="koboSpan" id="kobo.799.1" xmlns="http://www.w3.org/1999/xhtml">@bind</span></strong><span class="koboSpan" id="kobo.800.1" xmlns="http://www.w3.org/1999/xhtml"> directive attribute can be replaced by two one-way data binding setups, which include assigning a variable to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.801.1" xmlns="http://www.w3.org/1999/xhtml">&lt;input&gt;</span></strong><span class="koboSpan" id="kobo.802.1" xmlns="http://www.w3.org/1999/xhtml"> value attribute and assigning an event handler to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.803.1" xmlns="http://www.w3.org/1999/xhtml">onchange</span></strong><span class="koboSpan" id="kobo.804.1" xmlns="http://www.w3.org/1999/xhtml"> event. </span><span class="koboSpan" id="kobo.804.2" xmlns="http://www.w3.org/1999/xhtml">The event handler can be added automatically for </span><strong class="source-inline"><span class="koboSpan" id="kobo.805.1" xmlns="http://www.w3.org/1999/xhtml">@bind</span></strong><span class="koboSpan" id="kobo.806.1" xmlns="http://www.w3.org/1999/xhtml"> by the compiler, but not for </span><strong class="source-inline"><span class="koboSpan" id="kobo.807.1" xmlns="http://www.w3.org/1999/xhtml">@bind-{PROPERTY}</span></strong><span class="koboSpan" id="kobo.808.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.808.2" xmlns="http://www.w3.org/1999/xhtml">We need to define our own event of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.809.1" xmlns="http://www.w3.org/1999/xhtml">EventCallback&lt;TValue&gt;</span></strong><span class="koboSpan" id="kobo.810.1" xmlns="http://www.w3.org/1999/xhtml"> type to bind with component parameters. </span><span class="koboSpan" id="kobo.810.2" xmlns="http://www.w3.org/1999/xhtml">The event name must be </span><strong class="source-inline"><span class="koboSpan" id="kobo.811.1" xmlns="http://www.w3.org/1999/xhtml">{PARAMETER NAME}Changed</span></strong><span class="koboSpan" id="kobo.812.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.812.2" xmlns="http://www.w3.org/1999/xhtml">Let’s use our </span><strong class="source-inline"><span class="koboSpan" id="kobo.813.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.814.1" xmlns="http://www.w3.org/1999/xhtml"> component to explain how to use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.815.1" xmlns="http://www.w3.org/1999/xhtml">@bind-{PROPERTY}</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.816.1" xmlns="http://www.w3.org/1999/xhtml">directive attribute.</span></span></p>
<p><span class="koboSpan" id="kobo.817.1" xmlns="http://www.w3.org/1999/xhtml">In our code, we edit a field using </span><strong class="source-inline"><span class="koboSpan" id="kobo.818.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.819.1" xmlns="http://www.w3.org/1999/xhtml"> in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.820.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.821.1" xmlns="http://www.w3.org/1999/xhtml"> component or edit an item using the same in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.822.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.823.1" xmlns="http://www.w3.org/1999/xhtml"> component. </span><span class="koboSpan" id="kobo.823.2" xmlns="http://www.w3.org/1999/xhtml">Let’s use field editing as </span><span class="No-Break"><span class="koboSpan" id="kobo.824.1" xmlns="http://www.w3.org/1999/xhtml">an example:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.825.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;EditorDialog Id=@_dialogEditId
  @bind-Key="listGroupField.Key"                         ❶
  @bind-Value="listGroupField.Value"                     ❷
  IsKeyEditingEnable=@_isNewField OnSave="UpdateFieldAsync"
  KeyPlaceHolder="Field name" ValuePlaceHolder="Field
    content"&gt;
  @if (_isNewField) {
    &lt;div class="form-check"&gt;
      &lt;input class="form-check-input" type="checkbox"
        @bind="listGroupField.IsProtected"
          id="flexCheckDefault"&gt;
      &lt;label class="form-check-label"
        for="flexCheckDefault"&gt;
        Password
      &lt;/label&gt;
    &lt;/div&gt;
  }
&lt;/EditorDialog&gt;</span></pre>
<p><span class="koboSpan" id="kobo.826.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><a id="_idIndexMarker680"/><span class="koboSpan" id="kobo.827.1" xmlns="http://www.w3.org/1999/xhtml">preceding code of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.828.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.829.1" xmlns="http://www.w3.org/1999/xhtml"> component, we can create data binding of </span><strong class="source-inline"><span class="koboSpan" id="kobo.830.1" xmlns="http://www.w3.org/1999/xhtml">Key</span></strong><span class="koboSpan" id="kobo.831.1" xmlns="http://www.w3.org/1999/xhtml"> ❶ and </span><strong class="source-inline"><span class="koboSpan" id="kobo.832.1" xmlns="http://www.w3.org/1999/xhtml">Value</span></strong><span class="koboSpan" id="kobo.833.1" xmlns="http://www.w3.org/1999/xhtml"> ❷ to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.834.1" xmlns="http://www.w3.org/1999/xhtml">listGroupField</span></strong><span class="koboSpan" id="kobo.835.1" xmlns="http://www.w3.org/1999/xhtml"> of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.836.1" xmlns="http://www.w3.org/1999/xhtml">Field</span></strong><span class="koboSpan" id="kobo.837.1" xmlns="http://www.w3.org/1999/xhtml"> type. </span><span class="koboSpan" id="kobo.837.2" xmlns="http://www.w3.org/1999/xhtml">We need to implement the </span><strong class="source-inline"><span class="koboSpan" id="kobo.838.1" xmlns="http://www.w3.org/1999/xhtml">{PARAMETER NAME}Changed</span></strong><span class="koboSpan" id="kobo.839.1" xmlns="http://www.w3.org/1999/xhtml"> events in C# code-behind of </span><strong class="source-inline"><span class="koboSpan" id="kobo.840.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.841.1" xmlns="http://www.w3.org/1999/xhtml">, as shown here in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.842.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.5</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.843.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<p class="SC---Heading" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.844.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.5: EditorDialog.razor.cs (https://epa.ms/EditorDialog9-5)</span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.845.1" xmlns="http://www.w3.org/1999/xhtml">
namespace PassXYZ.BlazorUI;
public partial class EditorDialog {
  [Parameter]
  public string? </span><span class="koboSpan" id="kobo.845.2" xmlns="http://www.w3.org/1999/xhtml">Id { get; set; }
  bool _isKeyEditingEnable = false;
  [Parameter]
  public bool IsKeyEditingEnable ...
</span><span class="koboSpan" id="kobo.845.3" xmlns="http://www.w3.org/1999/xhtml">  [Parameter]
  public EventCallback&lt;bool&gt;? </span><span class="koboSpan" id="kobo.845.4" xmlns="http://www.w3.org/1999/xhtml">IsKeyEditingEnableChanged {
    get; set; }
  string _key = string.Empty;
  [Parameter]
  public string Key {                                     ❶
    get =&gt; _key;
    set {
      if(_key != value) {
        _key = value;
        KeyChanged?.InvokeAsync(_key);                    ❸
      }
    }
  }
  [Parameter]
  public EventCallback&lt;string&gt;? </span><span class="koboSpan" id="kobo.845.5" xmlns="http://www.w3.org/1999/xhtml">KeyChanged { get; set; }  ❷
  [Parameter]
  public string? </span><span class="koboSpan" id="kobo.845.6" xmlns="http://www.w3.org/1999/xhtml">KeyPlaceHolder { get; set; }
  string _value = string.Empty;
  [Parameter]
  public string Value ...
</span><span class="koboSpan" id="kobo.845.7" xmlns="http://www.w3.org/1999/xhtml">  [Parameter]
  public EventCallback&lt;string&gt;? </span><span class="koboSpan" id="kobo.845.8" xmlns="http://www.w3.org/1999/xhtml">ValueChanged { get; set; }
  [Parameter]
  public string? </span><span class="koboSpan" id="kobo.845.9" xmlns="http://www.w3.org/1999/xhtml">ValuePlaceHolder { get; set; }
  [Parameter]
  public RenderFragment ChildContent { get; set; } =
    default!;
  [Parameter]
  public Action&lt;string, string&gt;? </span><span class="koboSpan" id="kobo.845.10" xmlns="http://www.w3.org/1999/xhtml">OnSave { get; set; }
  async Task&lt;bool&gt; OnSaveClicked() {
      OnSave?.Invoke(Key, Value);
      return true;
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.846.1" xmlns="http://www.w3.org/1999/xhtml">In </span><em class="italic"><span class="koboSpan" id="kobo.847.1" xmlns="http://www.w3.org/1999/xhtml">Listing 9.5</span></em><span class="koboSpan" id="kobo.848.1" xmlns="http://www.w3.org/1999/xhtml">, we use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.849.1" xmlns="http://www.w3.org/1999/xhtml">Key</span></strong><span class="koboSpan" id="kobo.850.1" xmlns="http://www.w3.org/1999/xhtml"> property as an example to explain the process of component </span><a id="_idIndexMarker681"/><span class="koboSpan" id="kobo.851.1" xmlns="http://www.w3.org/1999/xhtml">parameter binding. </span><span class="koboSpan" id="kobo.851.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.852.1" xmlns="http://www.w3.org/1999/xhtml">Key</span></strong><span class="koboSpan" id="kobo.853.1" xmlns="http://www.w3.org/1999/xhtml"> property is defined as a component parameter with the </span><strong class="source-inline"><span class="koboSpan" id="kobo.854.1" xmlns="http://www.w3.org/1999/xhtml">[Parameter]</span></strong><span class="koboSpan" id="kobo.855.1" xmlns="http://www.w3.org/1999/xhtml"> attribute. </span><span class="koboSpan" id="kobo.855.2" xmlns="http://www.w3.org/1999/xhtml">An associated event is defined as </span><strong class="source-inline"><span class="koboSpan" id="kobo.856.1" xmlns="http://www.w3.org/1999/xhtml">KeyChanged</span></strong><span class="koboSpan" id="kobo.857.1" xmlns="http://www.w3.org/1999/xhtml"> of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.858.1" xmlns="http://www.w3.org/1999/xhtml">EventCallback&lt;TValue&gt;</span></strong><span class="koboSpan" id="kobo.859.1" xmlns="http://www.w3.org/1999/xhtml"> type. </span><span class="koboSpan" id="kobo.859.2" xmlns="http://www.w3.org/1999/xhtml">When the user changes the text input and changes the element focus, the setter of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.860.1" xmlns="http://www.w3.org/1999/xhtml">Key</span></strong><span class="koboSpan" id="kobo.861.1" xmlns="http://www.w3.org/1999/xhtml"> property is invoked. </span><span class="koboSpan" id="kobo.861.2" xmlns="http://www.w3.org/1999/xhtml">Inside the setter of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.862.1" xmlns="http://www.w3.org/1999/xhtml">Key</span></strong><span class="koboSpan" id="kobo.863.1" xmlns="http://www.w3.org/1999/xhtml"> property, it fires the </span><strong class="source-inline"><span class="koboSpan" id="kobo.864.1" xmlns="http://www.w3.org/1999/xhtml">KeyChanged</span></strong><span class="koboSpan" id="kobo.865.1" xmlns="http://www.w3.org/1999/xhtml"> event, which will inform the outer </span><strong class="source-inline"><span class="koboSpan" id="kobo.866.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.867.1" xmlns="http://www.w3.org/1999/xhtml"> component. </span><span class="koboSpan" id="kobo.867.2" xmlns="http://www.w3.org/1999/xhtml">As a result, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.868.1" xmlns="http://www.w3.org/1999/xhtml">listGroupField.Key</span></strong><span class="koboSpan" id="kobo.869.1" xmlns="http://www.w3.org/1999/xhtml"> linked variable </span><span class="No-Break"><span class="koboSpan" id="kobo.870.1" xmlns="http://www.w3.org/1999/xhtml">is updated.</span></span></p>
<h2 id="_idParaDest-183"><a id="_idTextAnchor199"/><span class="koboSpan" id="kobo.871.1" xmlns="http://www.w3.org/1999/xhtml">Communicating with cascading values and parameters</span></h2>
<p><span class="koboSpan" id="kobo.872.1" xmlns="http://www.w3.org/1999/xhtml">We can use data binding to pass data between parent and child components. </span><span class="koboSpan" id="kobo.872.2" xmlns="http://www.w3.org/1999/xhtml">Data binding </span><a id="_idIndexMarker682"/><span class="koboSpan" id="kobo.873.1" xmlns="http://www.w3.org/1999/xhtml">is good to pass data to the intermediate child component. </span><span class="koboSpan" id="kobo.873.2" xmlns="http://www.w3.org/1999/xhtml">Sometimes, we may want to pass data to components several levels deep. </span><span class="koboSpan" id="kobo.873.3" xmlns="http://www.w3.org/1999/xhtml">If we use data </span><a id="_idIndexMarker683"/><span class="koboSpan" id="kobo.874.1" xmlns="http://www.w3.org/1999/xhtml">binding in this situation, then we have to create multiple levels of chained data binding. </span><span class="koboSpan" id="kobo.874.2" xmlns="http://www.w3.org/1999/xhtml">The complexity increases with the chained levels. </span><span class="koboSpan" id="kobo.874.3" xmlns="http://www.w3.org/1999/xhtml">For example, if we want to pass data from </span><strong class="source-inline"><span class="koboSpan" id="kobo.875.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.876.1" xmlns="http://www.w3.org/1999/xhtml"> to </span><strong class="source-inline"><span class="koboSpan" id="kobo.877.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.878.1" xmlns="http://www.w3.org/1999/xhtml">, we have to create a data binding to </span><strong class="source-inline"><span class="koboSpan" id="kobo.879.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.880.1" xmlns="http://www.w3.org/1999/xhtml"> first. </span><span class="koboSpan" id="kobo.880.2" xmlns="http://www.w3.org/1999/xhtml">Then, another level of data binding needs to be created between </span><strong class="source-inline"><span class="koboSpan" id="kobo.881.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.882.1" xmlns="http://www.w3.org/1999/xhtml">and </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.883.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.884.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.885.1" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.886.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.887.1" xmlns="http://www.w3.org/1999/xhtml">, we need to pass the </span><strong class="source-inline"><span class="koboSpan" id="kobo.888.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.889.1" xmlns="http://www.w3.org/1999/xhtml"> dialog to </span><strong class="source-inline"><span class="koboSpan" id="kobo.890.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.891.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.891.2" xmlns="http://www.w3.org/1999/xhtml">We need to use an </span><strong class="source-inline"><span class="koboSpan" id="kobo.892.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.893.1" xmlns="http://www.w3.org/1999/xhtml"> dialog to identify the dialog instance that we want to display. </span><span class="koboSpan" id="kobo.893.2" xmlns="http://www.w3.org/1999/xhtml">As we can see next, we define </span><strong class="source-inline"><span class="koboSpan" id="kobo.894.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.895.1" xmlns="http://www.w3.org/1999/xhtml"> in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.896.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.897.1" xmlns="http://www.w3.org/1999/xhtml"> component. </span><strong class="source-inline"><span class="koboSpan" id="kobo.898.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.899.1" xmlns="http://www.w3.org/1999/xhtml"> is defined in </span><strong class="source-inline"><span class="koboSpan" id="kobo.900.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.901.1" xmlns="http://www.w3.org/1999/xhtml"> and passes to </span><strong class="source-inline"><span class="koboSpan" id="kobo.902.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.903.1" xmlns="http://www.w3.org/1999/xhtml"> using the </span><span class="No-Break"><span class="koboSpan" id="kobo.904.1" xmlns="http://www.w3.org/1999/xhtml">component parameter:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.905.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;ConfirmDialog Id="@_dialogDeleteId" Title=
  @listGroupItem.Name
  OnConfirmClick="DeleteItemAsync" /&gt;</span></pre>
<p><span class="koboSpan" id="kobo.906.1" xmlns="http://www.w3.org/1999/xhtml">Then, </span><strong class="source-inline"><span class="koboSpan" id="kobo.907.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.908.1" xmlns="http://www.w3.org/1999/xhtml"> has to pass it </span><span class="No-Break"><span class="koboSpan" id="kobo.909.1" xmlns="http://www.w3.org/1999/xhtml">to </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.910.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.911.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.912.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;ModalDialog Id=@Id Title=@($"Deleting {Title}")
  OnSaveAsync=@OnSave
  SaveButtonText="Confirm" CloseButtonText="Cancel"&gt;
  Please confirm to delete @Title?
</span><span class="koboSpan" id="kobo.912.2" xmlns="http://www.w3.org/1999/xhtml">&lt;/ModalDialog&gt;</span></pre>
<p><span class="koboSpan" id="kobo.913.1" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.914.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.915.1" xmlns="http://www.w3.org/1999/xhtml">, </span><strong class="source-inline"><span class="koboSpan" id="kobo.916.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.917.1" xmlns="http://www.w3.org/1999/xhtml"> is used as an attribute of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.918.1" xmlns="http://www.w3.org/1999/xhtml">&lt;</span></strong><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.919.1" xmlns="http://www.w3.org/1999/xhtml">div&gt;</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.920.1" xmlns="http://www.w3.org/1999/xhtml"> element:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.921.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;div class="modal fade" id=@Id tabindex="-1"
  aria-labelledby="ModelLabel" aria-hidden="true"&gt; ...</span></pre>
<p><span class="koboSpan" id="kobo.922.1" xmlns="http://www.w3.org/1999/xhtml">To </span><a id="_idIndexMarker684"/><span class="koboSpan" id="kobo.923.1" xmlns="http://www.w3.org/1999/xhtml">avoid multiple levels of data binding, we can use cascading values and parameters </span><a id="_idIndexMarker685"/><span class="koboSpan" id="kobo.924.1" xmlns="http://www.w3.org/1999/xhtml">as a method to flow data down a </span><span class="No-Break"><span class="koboSpan" id="kobo.925.1" xmlns="http://www.w3.org/1999/xhtml">component hierarchy.</span></span></p>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.926.1" xmlns="http://www.w3.org/1999/xhtml">CascadingValue</span></strong><span class="koboSpan" id="kobo.927.1" xmlns="http://www.w3.org/1999/xhtml"> is a component of the Blazor framework. </span><span class="koboSpan" id="kobo.927.2" xmlns="http://www.w3.org/1999/xhtml">The outer component provides a cascading value using </span><strong class="source-inline"><span class="koboSpan" id="kobo.928.1" xmlns="http://www.w3.org/1999/xhtml">CascadingValue</span></strong><span class="koboSpan" id="kobo.929.1" xmlns="http://www.w3.org/1999/xhtml">, and the inner component can receive it using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.930.1" xmlns="http://www.w3.org/1999/xhtml">[CascadingParameter]</span></strong><span class="koboSpan" id="kobo.931.1" xmlns="http://www.w3.org/1999/xhtml"> attribute. </span><span class="koboSpan" id="kobo.931.2" xmlns="http://www.w3.org/1999/xhtml">To demonstrate the usage, we can change the code of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.932.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.933.1" xmlns="http://www.w3.org/1999/xhtml"> component </span><span class="No-Break"><span class="koboSpan" id="kobo.934.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.935.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;CascadingValue Value="@_dialogDeleteId" Name="Id"&gt;
  &lt;ConfirmDialog Title=@listGroupItem.Name
    OnConfirmClick="DeleteItemAsync" /&gt;
&lt;/CascadingValue&gt;</span></pre>
<p><span class="koboSpan" id="kobo.936.1" xmlns="http://www.w3.org/1999/xhtml">We use cascading value with the </span><strong class="source-inline"><span class="koboSpan" id="kobo.937.1" xmlns="http://www.w3.org/1999/xhtml">&lt;CascadingValue&gt;</span></strong><span class="koboSpan" id="kobo.938.1" xmlns="http://www.w3.org/1999/xhtml"> tag. </span><span class="koboSpan" id="kobo.938.2" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.939.1" xmlns="http://www.w3.org/1999/xhtml">&lt;CascadingValue&gt;</span></strong><span class="koboSpan" id="kobo.940.1" xmlns="http://www.w3.org/1999/xhtml"> tag, we pass the</span><strong class="source-inline"><span class="koboSpan" id="kobo.941.1" xmlns="http://www.w3.org/1999/xhtml">_dialogDeleteId</span></strong><span class="koboSpan" id="kobo.942.1" xmlns="http://www.w3.org/1999/xhtml"> variable to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.943.1" xmlns="http://www.w3.org/1999/xhtml">Value</span></strong><span class="koboSpan" id="kobo.944.1" xmlns="http://www.w3.org/1999/xhtml"> attribute and the </span><strong class="source-inline"><span class="koboSpan" id="kobo.945.1" xmlns="http://www.w3.org/1999/xhtml">"Id"</span></strong><span class="koboSpan" id="kobo.946.1" xmlns="http://www.w3.org/1999/xhtml"> string to the </span><strong class="source-inline"><span class="koboSpan" id="kobo.947.1" xmlns="http://www.w3.org/1999/xhtml">Name</span></strong><span class="koboSpan" id="kobo.948.1" xmlns="http://www.w3.org/1999/xhtml"> attribute. </span><span class="koboSpan" id="kobo.948.2" xmlns="http://www.w3.org/1999/xhtml">Since this </span><strong class="source-inline"><span class="koboSpan" id="kobo.949.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.950.1" xmlns="http://www.w3.org/1999/xhtml"> is not used by </span><strong class="source-inline"><span class="koboSpan" id="kobo.951.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.952.1" xmlns="http://www.w3.org/1999/xhtml"> directly, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.953.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.954.1" xmlns="http://www.w3.org/1999/xhtml"> component parameter can be removed </span><span class="No-Break"><span class="koboSpan" id="kobo.955.1" xmlns="http://www.w3.org/1999/xhtml">from </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.956.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.957.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<p><span class="koboSpan" id="kobo.958.1" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.959.1" xmlns="http://www.w3.org/1999/xhtml">ModalDialog</span></strong><span class="koboSpan" id="kobo.960.1" xmlns="http://www.w3.org/1999/xhtml">, we change the </span><strong class="source-inline"><span class="koboSpan" id="kobo.961.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.962.1" xmlns="http://www.w3.org/1999/xhtml"> property from a component parameter to a parameter using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.963.1" xmlns="http://www.w3.org/1999/xhtml">[</span></strong><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.964.1" xmlns="http://www.w3.org/1999/xhtml">CascadingParameter]</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.965.1" xmlns="http://www.w3.org/1999/xhtml"> attribute:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.966.1" xmlns="http://www.w3.org/1999/xhtml">
    [CascadingParameter(Name = "Id")]
public string Id { get; set; } = default!;</span></pre>
<p><span class="koboSpan" id="kobo.967.1" xmlns="http://www.w3.org/1999/xhtml">If we </span><a id="_idIndexMarker686"/><span class="koboSpan" id="kobo.968.1" xmlns="http://www.w3.org/1999/xhtml">have only one cascading value, we don’t have to specify the cascading </span><a id="_idIndexMarker687"/><span class="koboSpan" id="kobo.969.1" xmlns="http://www.w3.org/1999/xhtml">value name. </span><span class="koboSpan" id="kobo.969.2" xmlns="http://www.w3.org/1999/xhtml">The compiler can help us to find it by data type. </span><span class="koboSpan" id="kobo.969.3" xmlns="http://www.w3.org/1999/xhtml">However, to avoid ambiguities, we can name the cascading value using the </span><strong class="source-inline"><span class="koboSpan" id="kobo.970.1" xmlns="http://www.w3.org/1999/xhtml">Name</span></strong><span class="koboSpan" id="kobo.971.1" xmlns="http://www.w3.org/1999/xhtml"> attribute. </span><span class="koboSpan" id="kobo.971.2" xmlns="http://www.w3.org/1999/xhtml">Let’s look at the final changes in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.972.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.973.1" xmlns="http://www.w3.org/1999/xhtml"> component using the cascading value for both </span><strong class="source-inline"><span class="koboSpan" id="kobo.974.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.975.1" xmlns="http://www.w3.org/1999/xhtml">and </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.976.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.977.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.978.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;CascadingValue Value="@_dialogEditId" Name="Id"&gt;
  &lt;EditorDialog @bind-Key="listGroupItem.Name"
      @bind-Value="listGroupItem.Notes"
      IsKeyEditingEnable=true
      OnSave="UpdateItemAsync" KeyPlaceHolder="Item name"
      ValuePlaceHolder="Please provide a description"&gt;
    @if (_isNewItem) {
      &lt;select @bind="newItem.SubType" class="form-select"
        aria-label="Group"&gt;
        &lt;option selected value=@ItemSubType.Group&gt;
          @ItemSubType.Group&lt;/option&gt;
        &lt;option value=@ItemSubType.Entry&gt;
          @ItemSubType.Entry&lt;/option&gt;
        &lt;option value=@ItemSubType.PxEntry&gt;
          @ItemSubType.PxEntry&lt;/option&gt;
        &lt;option value=@ItemSubType.Notes&gt;
          @ItemSubType.Notes&lt;/option&gt;
      &lt;/select&gt;
    }
  &lt;/EditorDialog&gt;
&lt;/CascadingValue&gt;
&lt;CascadingValue Value="@_dialogDeleteId" Name="Id"&gt;
  &lt;ConfirmDialog Title=@listGroupItem.Name
    OnConfirmClick="DeleteItemAsync" /&gt;
&lt;/CascadingValue&gt;</span></pre>
<p><span class="koboSpan" id="kobo.979.1" xmlns="http://www.w3.org/1999/xhtml">As we </span><a id="_idIndexMarker688"/><span class="koboSpan" id="kobo.980.1" xmlns="http://www.w3.org/1999/xhtml">can see, after we use a cascading value, </span><strong class="source-inline"><span class="koboSpan" id="kobo.981.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.982.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.983.1" xmlns="http://www.w3.org/1999/xhtml">EditorDialog</span></strong><span class="koboSpan" id="kobo.984.1" xmlns="http://www.w3.org/1999/xhtml"> don’t need to handle the </span><strong class="source-inline"><span class="koboSpan" id="kobo.985.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.986.1" xmlns="http://www.w3.org/1999/xhtml"> field directly. </span><span class="koboSpan" id="kobo.986.2" xmlns="http://www.w3.org/1999/xhtml">The code is more concise than the </span><span class="No-Break"><span class="koboSpan" id="kobo.987.1" xmlns="http://www.w3.org/1999/xhtml">previous version.</span></span></p>
<p><span class="koboSpan" id="kobo.988.1" xmlns="http://www.w3.org/1999/xhtml">In this </span><a id="_idIndexMarker689"/><span class="koboSpan" id="kobo.989.1" xmlns="http://www.w3.org/1999/xhtml">section, we discussed how to create reusable components. </span><span class="koboSpan" id="kobo.989.2" xmlns="http://www.w3.org/1999/xhtml">Some Razor components may have dependencies on data or network services. </span><span class="koboSpan" id="kobo.989.3" xmlns="http://www.w3.org/1999/xhtml">We need to take extra actions during the creation or the destruction of the components. </span><span class="koboSpan" id="kobo.989.4" xmlns="http://www.w3.org/1999/xhtml">We can do these as part of the life cycle management of </span><span class="No-Break"><span class="koboSpan" id="kobo.990.1" xmlns="http://www.w3.org/1999/xhtml">Razor components.</span></span></p>
<p><span class="koboSpan" id="kobo.991.1" xmlns="http://www.w3.org/1999/xhtml">Let us review the life cycle of Razor components in the </span><span class="No-Break"><span class="koboSpan" id="kobo.992.1" xmlns="http://www.w3.org/1999/xhtml">next section.</span></span></p>
<h1 id="_idParaDest-184"><a id="_idTextAnchor200"/><span class="koboSpan" id="kobo.993.1" xmlns="http://www.w3.org/1999/xhtml">Understanding the component lifecycle</span></h1>
<p><span class="koboSpan" id="kobo.994.1" xmlns="http://www.w3.org/1999/xhtml">A Razor </span><a id="_idIndexMarker690"/><span class="koboSpan" id="kobo.995.1" xmlns="http://www.w3.org/1999/xhtml">component has a lifecycle just like any other object. </span><span class="koboSpan" id="kobo.995.2" xmlns="http://www.w3.org/1999/xhtml">There is a set of synchronous and asynchronous lifecycle methods that can be overridden to help developers perform additional operations during component initialization </span><span class="No-Break"><span class="koboSpan" id="kobo.996.1" xmlns="http://www.w3.org/1999/xhtml">and rendering.</span></span></p>
<p><span class="koboSpan" id="kobo.997.1" xmlns="http://www.w3.org/1999/xhtml">We can review the Razor component lifecycle in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.998.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.999.1" xmlns="http://www.w3.org/1999/xhtml">.6</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.1000.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer102">
<span class="koboSpan" id="kobo.1001.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 9.6: Razor component lifecycle" src="image/Figure_9.6_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.1002.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9.6: Razor component lifecycle</span></p>
<p><span class="koboSpan" id="kobo.1003.1" xmlns="http://www.w3.org/1999/xhtml">In </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1004.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9</span></em></span><em class="italic"><span class="koboSpan" id="kobo.1005.1" xmlns="http://www.w3.org/1999/xhtml">.6</span></em><span class="koboSpan" id="kobo.1006.1" xmlns="http://www.w3.org/1999/xhtml">, we can </span><a id="_idIndexMarker691"/><span class="koboSpan" id="kobo.1007.1" xmlns="http://www.w3.org/1999/xhtml">see that we can add hooks during the </span><a id="_idIndexMarker692"/><span class="koboSpan" id="kobo.1008.1" xmlns="http://www.w3.org/1999/xhtml">initialization and rendering phases. </span><span class="koboSpan" id="kobo.1008.2" xmlns="http://www.w3.org/1999/xhtml">The following methods can be overridden to catch </span><span class="No-Break"><span class="koboSpan" id="kobo.1009.1" xmlns="http://www.w3.org/1999/xhtml">initialization events:</span></span></p>
<ul>
<li><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1010.1" xmlns="http://www.w3.org/1999/xhtml">SetParametersAsync</span></strong></span></li>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.1011.1" xmlns="http://www.w3.org/1999/xhtml">OnInitialized</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.1012.1" xmlns="http://www.w3.org/1999/xhtml">and </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1013.1" xmlns="http://www.w3.org/1999/xhtml">OnInitializedAsync</span></strong></span></li>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.1014.1" xmlns="http://www.w3.org/1999/xhtml">OnParametersSet</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.1015.1" xmlns="http://www.w3.org/1999/xhtml">and </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1016.1" xmlns="http://www.w3.org/1999/xhtml">OnParametersSetAsync</span></strong></span></li>
</ul>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.1017.1" xmlns="http://www.w3.org/1999/xhtml">SetParametersAsync</span></strong><span class="koboSpan" id="kobo.1018.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.1019.1" xmlns="http://www.w3.org/1999/xhtml">OnInitialized</span></strong><span class="koboSpan" id="kobo.1020.1" xmlns="http://www.w3.org/1999/xhtml">(</span><strong class="source-inline"><span class="koboSpan" id="kobo.1021.1" xmlns="http://www.w3.org/1999/xhtml">Async</span></strong><span class="koboSpan" id="kobo.1022.1" xmlns="http://www.w3.org/1999/xhtml">) are invoked only in the first render. </span><strong class="source-inline"><span class="koboSpan" id="kobo.1023.1" xmlns="http://www.w3.org/1999/xhtml">OnParametersSet</span></strong><span class="koboSpan" id="kobo.1024.1" xmlns="http://www.w3.org/1999/xhtml">(</span><strong class="source-inline"><span class="koboSpan" id="kobo.1025.1" xmlns="http://www.w3.org/1999/xhtml">Async</span></strong><span class="koboSpan" id="kobo.1026.1" xmlns="http://www.w3.org/1999/xhtml">) is called every time a parameter </span><span class="No-Break"><span class="koboSpan" id="kobo.1027.1" xmlns="http://www.w3.org/1999/xhtml">is changed.</span></span></p>
<p><span class="koboSpan" id="kobo.1028.1" xmlns="http://www.w3.org/1999/xhtml">The following methods can be overridden to </span><span class="No-Break"><span class="koboSpan" id="kobo.1029.1" xmlns="http://www.w3.org/1999/xhtml">customize rendering:</span></span></p>
<ul>
<li><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1030.1" xmlns="http://www.w3.org/1999/xhtml">ShouldRender</span></strong></span></li>
<li><strong class="source-inline"><span class="koboSpan" id="kobo.1031.1" xmlns="http://www.w3.org/1999/xhtml">OnAfterRender</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.1032.1" xmlns="http://www.w3.org/1999/xhtml">and </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1033.1" xmlns="http://www.w3.org/1999/xhtml">OnAfterRenderAsync</span></strong></span></li>
</ul>
<p><span class="koboSpan" id="kobo.1034.1" xmlns="http://www.w3.org/1999/xhtml">We will review these lifecycle methods in detail and show how we use them in </span><span class="No-Break"><span class="koboSpan" id="kobo.1035.1" xmlns="http://www.w3.org/1999/xhtml">our code.</span></span></p>
<h2 id="_idParaDest-185"><a id="_idTextAnchor201"/><span class="koboSpan" id="kobo.1036.1" xmlns="http://www.w3.org/1999/xhtml">SetParametersAsync</span></h2>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.1037.1" xmlns="http://www.w3.org/1999/xhtml">SetParametersAsync</span></strong><span class="koboSpan" id="kobo.1038.1" xmlns="http://www.w3.org/1999/xhtml"> is the </span><a id="_idIndexMarker693"/><span class="koboSpan" id="kobo.1039.1" xmlns="http://www.w3.org/1999/xhtml">first hook </span><a id="_idIndexMarker694"/><span class="koboSpan" id="kobo.1040.1" xmlns="http://www.w3.org/1999/xhtml">after the object is created and it has the </span><span class="No-Break"><span class="koboSpan" id="kobo.1041.1" xmlns="http://www.w3.org/1999/xhtml">following signature:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1042.1" xmlns="http://www.w3.org/1999/xhtml">
public override Task SetParametersAsync(ParameterView parameters)</span></pre>
<p><span class="koboSpan" id="kobo.1043.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.1044.1" xmlns="http://www.w3.org/1999/xhtml">ParameterView</span></strong><span class="koboSpan" id="kobo.1045.1" xmlns="http://www.w3.org/1999/xhtml"> parameter contains component parameters or cascading parameter values. </span><strong class="source-inline"><span class="koboSpan" id="kobo.1046.1" xmlns="http://www.w3.org/1999/xhtml">SetParametersAsync</span></strong><span class="koboSpan" id="kobo.1047.1" xmlns="http://www.w3.org/1999/xhtml"> sets the value of each property with the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1048.1" xmlns="http://www.w3.org/1999/xhtml">[Parameter]</span></strong><span class="koboSpan" id="kobo.1049.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><strong class="source-inline"><span class="koboSpan" id="kobo.1050.1" xmlns="http://www.w3.org/1999/xhtml">[CascadingParameter]</span></strong><span class="koboSpan" id="kobo.1051.1" xmlns="http://www.w3.org/1999/xhtml"> attribute. </span><span class="koboSpan" id="kobo.1051.2" xmlns="http://www.w3.org/1999/xhtml">This function can be overridden to add logic that needs to be executed before the parameters are set. </span><span class="koboSpan" id="kobo.1051.3" xmlns="http://www.w3.org/1999/xhtml">The next hook after </span><strong class="source-inline"><span class="koboSpan" id="kobo.1052.1" xmlns="http://www.w3.org/1999/xhtml">SetParametersAsync</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.1053.1" xmlns="http://www.w3.org/1999/xhtml">is </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1054.1" xmlns="http://www.w3.org/1999/xhtml">OnInitialized{Async}</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1055.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<h2 id="_idParaDest-186"><a id="_idTextAnchor202"/><span class="koboSpan" id="kobo.1056.1" xmlns="http://www.w3.org/1999/xhtml">OnInitialized and OnInitializedAsync</span></h2>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.1057.1" xmlns="http://www.w3.org/1999/xhtml">OnInitialized</span></strong><span class="koboSpan" id="kobo.1058.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.1059.1" xmlns="http://www.w3.org/1999/xhtml">OnInitializedAsync</span></strong><span class="koboSpan" id="kobo.1060.1" xmlns="http://www.w3.org/1999/xhtml"> are invoked when the component is initialized. </span><span class="koboSpan" id="kobo.1060.2" xmlns="http://www.w3.org/1999/xhtml">They </span><a id="_idIndexMarker695"/><span class="koboSpan" id="kobo.1061.1" xmlns="http://www.w3.org/1999/xhtml">have the following </span><span class="No-Break"><span class="koboSpan" id="kobo.1062.1" xmlns="http://www.w3.org/1999/xhtml">signatures, respectively:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1063.1" xmlns="http://www.w3.org/1999/xhtml">
protected override void OnInitialized()
protected override async Task OnInitializedAsync()</span></pre>
<p><span class="koboSpan" id="kobo.1064.1" xmlns="http://www.w3.org/1999/xhtml">By overriding </span><a id="_idIndexMarker696"/><span class="koboSpan" id="kobo.1065.1" xmlns="http://www.w3.org/1999/xhtml">these two functions, we can add logic to initialize </span><a id="_idIndexMarker697"/><span class="koboSpan" id="kobo.1066.1" xmlns="http://www.w3.org/1999/xhtml">our component </span><a id="_idIndexMarker698"/><span class="koboSpan" id="kobo.1067.1" xmlns="http://www.w3.org/1999/xhtml">here. </span><span class="koboSpan" id="kobo.1067.2" xmlns="http://www.w3.org/1999/xhtml">Please be aware that they are only called once, right after the creation of the component. </span><span class="koboSpan" id="kobo.1067.3" xmlns="http://www.w3.org/1999/xhtml">For time-consuming initialization tasks, the asynchronous method can be used, such as downloading data using RESTful API calls. </span><span class="koboSpan" id="kobo.1067.4" xmlns="http://www.w3.org/1999/xhtml">As we can see in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1068.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9</span></em></span><em class="italic"><span class="koboSpan" id="kobo.1069.1" xmlns="http://www.w3.org/1999/xhtml">.6</span></em><span class="koboSpan" id="kobo.1070.1" xmlns="http://www.w3.org/1999/xhtml">, after an asynchronous method is completed, the DOM needs to be </span><span class="No-Break"><span class="koboSpan" id="kobo.1071.1" xmlns="http://www.w3.org/1999/xhtml">rendered again.</span></span></p>
<h2 id="_idParaDest-187"><a id="_idTextAnchor203"/><span class="koboSpan" id="kobo.1072.1" xmlns="http://www.w3.org/1999/xhtml">OnParametersSet and OnParametersSetAsync</span></h2>
<p><span class="koboSpan" id="kobo.1073.1" xmlns="http://www.w3.org/1999/xhtml">When </span><a id="_idIndexMarker699"/><span class="koboSpan" id="kobo.1074.1" xmlns="http://www.w3.org/1999/xhtml">component parameters </span><a id="_idIndexMarker700"/><span class="koboSpan" id="kobo.1075.1" xmlns="http://www.w3.org/1999/xhtml">are set or changed, </span><strong class="source-inline"><span class="koboSpan" id="kobo.1076.1" xmlns="http://www.w3.org/1999/xhtml">OnParametersSet</span></strong><span class="koboSpan" id="kobo.1077.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.1078.1" xmlns="http://www.w3.org/1999/xhtml">OnParametersSetAsync</span></strong><span class="koboSpan" id="kobo.1079.1" xmlns="http://www.w3.org/1999/xhtml"> are invoked. </span><span class="koboSpan" id="kobo.1079.2" xmlns="http://www.w3.org/1999/xhtml">We can see that there are two versions to handle both synchronous and asynchronous cases. </span><span class="koboSpan" id="kobo.1079.3" xmlns="http://www.w3.org/1999/xhtml">The asynchronous </span><a id="_idIndexMarker701"/><span class="koboSpan" id="kobo.1080.1" xmlns="http://www.w3.org/1999/xhtml">version of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1081.1" xmlns="http://www.w3.org/1999/xhtml">OnParametersSetAsync</span></strong><span class="koboSpan" id="kobo.1082.1" xmlns="http://www.w3.org/1999/xhtml"> can be used to handle time-consuming tasks. </span><span class="koboSpan" id="kobo.1082.2" xmlns="http://www.w3.org/1999/xhtml">Once the asynchronous task is completed, the DOM needs to be rendered again to reflect </span><span class="No-Break"><span class="koboSpan" id="kobo.1083.1" xmlns="http://www.w3.org/1999/xhtml">any changes.</span></span></p>
<p><span class="koboSpan" id="kobo.1084.1" xmlns="http://www.w3.org/1999/xhtml">The methods have the following </span><span class="No-Break"><span class="koboSpan" id="kobo.1085.1" xmlns="http://www.w3.org/1999/xhtml">signatures, respectively:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1086.1" xmlns="http://www.w3.org/1999/xhtml">
protected override void OnParametersSet()
protected override async Task OnParametersSetAsync()</span></pre>
<p><span class="koboSpan" id="kobo.1087.1" xmlns="http://www.w3.org/1999/xhtml">These two </span><a id="_idIndexMarker702"/><span class="koboSpan" id="kobo.1088.1" xmlns="http://www.w3.org/1999/xhtml">methods will be invoked whenever component parameters or cascading parameters are changed. </span><span class="koboSpan" id="kobo.1088.2" xmlns="http://www.w3.org/1999/xhtml">They can be called multiple times, while </span><strong class="source-inline"><span class="koboSpan" id="kobo.1089.1" xmlns="http://www.w3.org/1999/xhtml">OnInitialized{Async}</span></strong><span class="koboSpan" id="kobo.1090.1" xmlns="http://www.w3.org/1999/xhtml"> is only </span><span class="No-Break"><span class="koboSpan" id="kobo.1091.1" xmlns="http://www.w3.org/1999/xhtml">called once.</span></span></p>
<p><span class="koboSpan" id="kobo.1092.1" xmlns="http://www.w3.org/1999/xhtml">As we can see in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1093.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9</span></em></span><em class="italic"><span class="koboSpan" id="kobo.1094.1" xmlns="http://www.w3.org/1999/xhtml">.6</span></em><span class="koboSpan" id="kobo.1095.1" xmlns="http://www.w3.org/1999/xhtml">, the DOM can be rendered multiple times during the initialization phase due to which asynchronous calls may be invoked. </span><span class="koboSpan" id="kobo.1095.2" xmlns="http://www.w3.org/1999/xhtml">The methods involved in the rendering process are </span><strong class="source-inline"><span class="koboSpan" id="kobo.1096.1" xmlns="http://www.w3.org/1999/xhtml">ShouldRender</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.1097.1" xmlns="http://www.w3.org/1999/xhtml">and </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1098.1" xmlns="http://www.w3.org/1999/xhtml">OnAfterRender{Async}</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1099.1" xmlns="http://www.w3.org/1999/xhtml">.</span></span></p>
<h2 id="_idParaDest-188"><a id="_idTextAnchor204"/><span class="koboSpan" id="kobo.1100.1" xmlns="http://www.w3.org/1999/xhtml">ShouldRender</span></h2>
<p><span class="koboSpan" id="kobo.1101.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.1102.1" xmlns="http://www.w3.org/1999/xhtml">ShouldRender</span></strong><span class="koboSpan" id="kobo.1103.1" xmlns="http://www.w3.org/1999/xhtml"> method </span><a id="_idIndexMarker703"/><span class="koboSpan" id="kobo.1104.1" xmlns="http://www.w3.org/1999/xhtml">returns a Boolean value, indicating </span><a id="_idIndexMarker704"/><span class="koboSpan" id="kobo.1105.1" xmlns="http://www.w3.org/1999/xhtml">whether the component should be rendered. </span><span class="koboSpan" id="kobo.1105.2" xmlns="http://www.w3.org/1999/xhtml">As we can see in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1106.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9</span></em></span><em class="italic"><span class="koboSpan" id="kobo.1107.1" xmlns="http://www.w3.org/1999/xhtml">.6</span></em><span class="koboSpan" id="kobo.1108.1" xmlns="http://www.w3.org/1999/xhtml">, the first render ignores this method, so a component should be rendered at least once. </span><span class="koboSpan" id="kobo.1108.2" xmlns="http://www.w3.org/1999/xhtml">This method has the </span><span class="No-Break"><span class="koboSpan" id="kobo.1109.1" xmlns="http://www.w3.org/1999/xhtml">following signature:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1110.1" xmlns="http://www.w3.org/1999/xhtml">
protected override bool ShouldRender()</span></pre>
<h2 id="_idParaDest-189"><a id="_idTextAnchor205"/><span class="koboSpan" id="kobo.1111.1" xmlns="http://www.w3.org/1999/xhtml">OnAfterRender and OnAfterRenderAsync</span></h2>
<p><strong class="source-inline"><span class="koboSpan" id="kobo.1112.1" xmlns="http://www.w3.org/1999/xhtml">OnAfterRender</span></strong><span class="koboSpan" id="kobo.1113.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.1114.1" xmlns="http://www.w3.org/1999/xhtml">OnAfterRenderAsync</span></strong><span class="koboSpan" id="kobo.1115.1" xmlns="http://www.w3.org/1999/xhtml"> are </span><a id="_idIndexMarker705"/><span class="koboSpan" id="kobo.1116.1" xmlns="http://www.w3.org/1999/xhtml">called </span><a id="_idIndexMarker706"/><span class="koboSpan" id="kobo.1117.1" xmlns="http://www.w3.org/1999/xhtml">after a component </span><a id="_idIndexMarker707"/><span class="koboSpan" id="kobo.1118.1" xmlns="http://www.w3.org/1999/xhtml">has finished rendering. </span><span class="koboSpan" id="kobo.1118.2" xmlns="http://www.w3.org/1999/xhtml">They have the following </span><a id="_idIndexMarker708"/><span class="No-Break"><span class="koboSpan" id="kobo.1119.1" xmlns="http://www.w3.org/1999/xhtml">signatures, respectively:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1120.1" xmlns="http://www.w3.org/1999/xhtml">
protected override void OnAfterRender(bool firstRender)
protected override async Task OnAfterRenderAsync(bool
  firstRender)</span></pre>
<p><span class="koboSpan" id="kobo.1121.1" xmlns="http://www.w3.org/1999/xhtml">They can be used to perform additional initialization tasks with the rendered content, such as invoking JavaScript code in the component. </span><span class="koboSpan" id="kobo.1121.2" xmlns="http://www.w3.org/1999/xhtml">This method has a Boolean </span><strong class="source-inline"><span class="koboSpan" id="kobo.1122.1" xmlns="http://www.w3.org/1999/xhtml">firstRender</span></strong><span class="koboSpan" id="kobo.1123.1" xmlns="http://www.w3.org/1999/xhtml"> parameter, which allows us to attach JavaScript event handlers only once. </span><span class="koboSpan" id="kobo.1123.2" xmlns="http://www.w3.org/1999/xhtml">There </span><a id="_idIndexMarker709"/><span class="koboSpan" id="kobo.1124.1" xmlns="http://www.w3.org/1999/xhtml">is an asynchronous </span><a id="_idIndexMarker710"/><span class="koboSpan" id="kobo.1125.1" xmlns="http://www.w3.org/1999/xhtml">version of this method, but the framework </span><a id="_idIndexMarker711"/><span class="koboSpan" id="kobo.1126.1" xmlns="http://www.w3.org/1999/xhtml">won’t schedule a further </span><a id="_idIndexMarker712"/><span class="koboSpan" id="kobo.1127.1" xmlns="http://www.w3.org/1999/xhtml">render cycle after the asynchronous task </span><span class="No-Break"><span class="koboSpan" id="kobo.1128.1" xmlns="http://www.w3.org/1999/xhtml">is completed.</span></span></p>
<p><span class="koboSpan" id="kobo.1129.1" xmlns="http://www.w3.org/1999/xhtml">To have a look at the effect of lifecycle methods, we can run a test to add all lifecycle methods in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1130.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.1131.1" xmlns="http://www.w3.org/1999/xhtml"> component, as you can </span><span class="No-Break"><span class="koboSpan" id="kobo.1132.1" xmlns="http://www.w3.org/1999/xhtml">see here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1133.1" xmlns="http://www.w3.org/1999/xhtml">
public ConfirmDialog()
{
  Debug.WriteLine($"ConfirmDialog-{Id}: is created");
}
public override Task SetParametersAsync
  (ParameterView parameters)
{
  Debug.WriteLine($"ConfirmDialog-{Id}:
    SetParametersAsync called");
  return base.SetParametersAsync(parameters);
}
protected override void OnInitialized()
  =&gt; Debug.WriteLine($"ConfirmDialog-{Id}: OnInitialized
    called - {Title}");
protected override async Task OnInitializedAsync() =&gt;
  await Task.Run(() =&gt; {
  Debug.WriteLine($"ConfirmDialog-{Id}: OnInitializedAsync
    called - {Title}");
});
protected override void OnParametersSet()
  =&gt; Debug.WriteLine($"ConfirmDialog-{Id}: OnParametersSet
    called - {Title}");
protected override async Task OnParametersSetAsync() =&gt;
  await Task.Run(() =&gt; {
Debug.WriteLine($"ConfirmDialog-{Id}:
  OnParametersSetAsync called - {Title}");
});
protected override void OnAfterRender(bool firstRender)
  =&gt; Debug.WriteLine($"ConfirmDialog-{Id}: OnAfterRender
    called with firstRender = {firstRender}");
protected override async Task OnAfterRenderAsync(bool
  firstRender) =&gt; await Task.Run(() =&gt; {
    Debug.WriteLine($"ConfirmDialog-{Id}:
      OnAfterRenderAsync called - {Title}");
});
protected override bool ShouldRender() {
  Debug.WriteLine($"ConfirmDialog-{Id}: ShouldRender called
    - {Title}");
  return true;
}</span></pre>
<p><span class="koboSpan" id="kobo.1134.1" xmlns="http://www.w3.org/1999/xhtml">We override all lifecycle methods in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1135.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.1136.1" xmlns="http://www.w3.org/1999/xhtml"> and add debug output to show the progress. </span><span class="koboSpan" id="kobo.1136.2" xmlns="http://www.w3.org/1999/xhtml">After we launch our app, we can see the </span><span class="No-Break"><span class="koboSpan" id="kobo.1137.1" xmlns="http://www.w3.org/1999/xhtml">following output:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1138.1" xmlns="http://www.w3.org/1999/xhtml">
ConfirmDialog-: is created
ConfirmDialog-: SetParametersAsync called
ConfirmDialog-deleteModel: OnInitialized called -
ConfirmDialog-deleteModel: OnInitializedAsync called -
ConfirmDialog-deleteModel: OnParametersSet called -
ConfirmDialog-deleteModel: OnParametersSetAsync called -
ConfirmDialog-deleteModel: ShouldRender called -
ConfirmDialog-deleteModel: ShouldRender called -
ConfirmDialog-deleteModel: OnAfterRender called with
  firstRender = True
ConfirmDialog-deleteModel: OnAfterRenderAsync called -
ConfirmDialog-deleteModel: OnAfterRender called with
  firstRender = False
ConfirmDialog-deleteModel: OnAfterRenderAsync called -
ConfirmDialog-deleteModel: OnAfterRender called with
  firstRender = False
ConfirmDialog-deleteModel: OnAfterRenderAsync called -</span></pre>
<p><span class="koboSpan" id="kobo.1139.1" xmlns="http://www.w3.org/1999/xhtml">The </span><a id="_idIndexMarker713"/><span class="koboSpan" id="kobo.1140.1" xmlns="http://www.w3.org/1999/xhtml">preceding output is the one </span><a id="_idIndexMarker714"/><span class="koboSpan" id="kobo.1141.1" xmlns="http://www.w3.org/1999/xhtml">when we just launch our app and the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1142.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.1143.1" xmlns="http://www.w3.org/1999/xhtml"> page is shown. </span><span class="koboSpan" id="kobo.1143.2" xmlns="http://www.w3.org/1999/xhtml">We </span><a id="_idIndexMarker715"/><span class="koboSpan" id="kobo.1144.1" xmlns="http://www.w3.org/1999/xhtml">can see that the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1145.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.1146.1" xmlns="http://www.w3.org/1999/xhtml"> cascading parameter </span><a id="_idIndexMarker716"/><span class="koboSpan" id="kobo.1147.1" xmlns="http://www.w3.org/1999/xhtml">is not set before the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1148.1" xmlns="http://www.w3.org/1999/xhtml">SetParametersAsync</span></strong><span class="koboSpan" id="kobo.1149.1" xmlns="http://www.w3.org/1999/xhtml"> method is called. </span><span class="koboSpan" id="kobo.1149.2" xmlns="http://www.w3.org/1999/xhtml">Since we override the asynchronous methods, there are multiple render cycles scheduled in parallel. </span><strong class="source-inline"><span class="koboSpan" id="kobo.1150.1" xmlns="http://www.w3.org/1999/xhtml">ShouldRender</span></strong><span class="koboSpan" id="kobo.1151.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.1152.1" xmlns="http://www.w3.org/1999/xhtml">OnAfterRender{Async}</span></strong><span class="koboSpan" id="kobo.1153.1" xmlns="http://www.w3.org/1999/xhtml"> are invoked multiple times due to rendering occurring </span><span class="No-Break"><span class="koboSpan" id="kobo.1154.1" xmlns="http://www.w3.org/1999/xhtml">in parallel.</span></span></p>
<p><span class="koboSpan" id="kobo.1155.1" xmlns="http://www.w3.org/1999/xhtml">Let’s look at another case when we click on the context menu on the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1156.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.1157.1" xmlns="http://www.w3.org/1999/xhtml"> page. </span><span class="koboSpan" id="kobo.1157.2" xmlns="http://www.w3.org/1999/xhtml">When </span><a id="_idIndexMarker717"/><span class="koboSpan" id="kobo.1158.1" xmlns="http://www.w3.org/1999/xhtml">we click on the context menu </span><a id="_idIndexMarker718"/><span class="koboSpan" id="kobo.1159.1" xmlns="http://www.w3.org/1999/xhtml">of an item, such as Google, </span><strong class="source-inline"><span class="koboSpan" id="kobo.1160.1" xmlns="http://www.w3.org/1999/xhtml">ConfirmDialog</span></strong><span class="koboSpan" id="kobo.1161.1" xmlns="http://www.w3.org/1999/xhtml"> is initialized again. </span><span class="koboSpan" id="kobo.1161.2" xmlns="http://www.w3.org/1999/xhtml">The output is </span><span class="No-Break"><span class="koboSpan" id="kobo.1162.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1163.1" xmlns="http://www.w3.org/1999/xhtml">
ConfirmDialog-deleteModel: SetParametersAsync called
ConfirmDialog-deleteModel: OnParametersSet called - Google
ConfirmDialog-deleteModel: ShouldRender called - Google
ConfirmDialog-deleteModel: OnParametersSetAsync called –
  Google
ConfirmDialog-deleteModel: ShouldRender called - Google
ConfirmDialog-deleteModel: OnAfterRender called with
  firstRender = False
ConfirmDialog-deleteModel: OnAfterRenderAsync called –
  Google
ConfirmDialog-deleteModel: OnAfterRender called with
  firstRender = False
ConfirmDialog-deleteModel: OnAfterRenderAsync called –
  Google</span></pre>
<p><span class="koboSpan" id="kobo.1164.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.1165.1" xmlns="http://www.w3.org/1999/xhtml">SetParametersAsync</span></strong><span class="koboSpan" id="kobo.1166.1" xmlns="http://www.w3.org/1999/xhtml"> method </span><a id="_idIndexMarker719"/><span class="koboSpan" id="kobo.1167.1" xmlns="http://www.w3.org/1999/xhtml">is called again since the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1168.1" xmlns="http://www.w3.org/1999/xhtml">Title</span></strong><span class="koboSpan" id="kobo.1169.1" xmlns="http://www.w3.org/1999/xhtml"> component parameter is changed. </span><span class="koboSpan" id="kobo.1169.2" xmlns="http://www.w3.org/1999/xhtml">We can see that the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1170.1" xmlns="http://www.w3.org/1999/xhtml">Title</span></strong><span class="koboSpan" id="kobo.1171.1" xmlns="http://www.w3.org/1999/xhtml"> component parameter is set to </span><strong class="source-inline"><span class="koboSpan" id="kobo.1172.1" xmlns="http://www.w3.org/1999/xhtml">Google</span></strong><span class="koboSpan" id="kobo.1173.1" xmlns="http://www.w3.org/1999/xhtml"> in the </span><span class="No-Break"><span class="koboSpan" id="kobo.1174.1" xmlns="http://www.w3.org/1999/xhtml">subsequent calls.</span></span></p>
<p><span class="koboSpan" id="kobo.1175.1" xmlns="http://www.w3.org/1999/xhtml">In our code, we use </span><strong class="source-inline"><span class="koboSpan" id="kobo.1176.1" xmlns="http://www.w3.org/1999/xhtml">OnParametersSet</span></strong><span class="koboSpan" id="kobo.1177.1" xmlns="http://www.w3.org/1999/xhtml"> to load the list of items in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1178.1" xmlns="http://www.w3.org/1999/xhtml">Items.razor.cs</span></strong><span class="koboSpan" id="kobo.1179.1" xmlns="http://www.w3.org/1999/xhtml"> and load a list of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1180.1" xmlns="http://www.w3.org/1999/xhtml">Field</span></strong><span class="koboSpan" id="kobo.1181.1" xmlns="http://www.w3.org/1999/xhtml"> in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1182.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail.razor.cs</span></strong><span class="koboSpan" id="kobo.1183.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1183.2" xmlns="http://www.w3.org/1999/xhtml">Let’s review </span><strong class="source-inline"><span class="koboSpan" id="kobo.1184.1" xmlns="http://www.w3.org/1999/xhtml">OnParametersSet</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.1185.1" xmlns="http://www.w3.org/1999/xhtml">in </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1186.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail.razor.cs</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1187.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1188.1" xmlns="http://www.w3.org/1999/xhtml">
protected override void OnParametersSet() {
  base.OnParametersSet();
  if (SelectedItemId == null) {                           ❶
throw new InvalidOperationException(
  "ItemDetail: SelectedItemId is null");
  }
  selectedItem = DataStore.GetItem(SelectedItemId, true); ❷
  if (selectedItem == null) {
throw new InvalidOperationException(
  "ItemDetail: entry cannot be found with SelectedItemId");
  }
  else {
    if (selectedItem.IsGroup) {
      throw new InvalidOperationException(
        "ItemDetail: SelectedItemId should not be a group
          here.");
    }
    fields.Clear();
    List&lt;Field&gt; tmpFields = selectedItem.GetFields();     ❸
    foreach (Field field in tmpFields) {
      fields.Add(field);
    }
    notes = selectedItem.GetNotesInHtml();
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.1189.1" xmlns="http://www.w3.org/1999/xhtml">❶ In </span><strong class="source-inline"><span class="koboSpan" id="kobo.1190.1" xmlns="http://www.w3.org/1999/xhtml">OnParametersSet</span></strong><span class="koboSpan" id="kobo.1191.1" xmlns="http://www.w3.org/1999/xhtml">, we check whether the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1192.1" xmlns="http://www.w3.org/1999/xhtml">SelectedItemId</span></strong><span class="koboSpan" id="kobo.1193.1" xmlns="http://www.w3.org/1999/xhtml"> component parameter is </span><strong class="source-inline"><span class="koboSpan" id="kobo.1194.1" xmlns="http://www.w3.org/1999/xhtml">null</span></strong><span class="koboSpan" id="kobo.1195.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1195.2" xmlns="http://www.w3.org/1999/xhtml">This is the ID of the selected item. </span><span class="koboSpan" id="kobo.1195.3" xmlns="http://www.w3.org/1999/xhtml">❷ If it is not </span><strong class="source-inline"><span class="koboSpan" id="kobo.1196.1" xmlns="http://www.w3.org/1999/xhtml">null</span></strong><span class="koboSpan" id="kobo.1197.1" xmlns="http://www.w3.org/1999/xhtml">, we can find the item by </span><a id="_idIndexMarker720"/><span class="koboSpan" id="kobo.1198.1" xmlns="http://www.w3.org/1999/xhtml">calling the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1199.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1200.1" xmlns="http://www.w3.org/1999/xhtml"> method called </span><strong class="source-inline"><span class="koboSpan" id="kobo.1201.1" xmlns="http://www.w3.org/1999/xhtml">GetItem()</span></strong><span class="koboSpan" id="kobo.1202.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1202.2" xmlns="http://www.w3.org/1999/xhtml">❸ Once we get the instance of the selected item, we can </span><a id="_idIndexMarker721"/><span class="koboSpan" id="kobo.1203.1" xmlns="http://www.w3.org/1999/xhtml">get a list of fields by calling the </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1204.1" xmlns="http://www.w3.org/1999/xhtml">GetFields()</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1205.1" xmlns="http://www.w3.org/1999/xhtml"> method.</span></span></p>
<p><span class="koboSpan" id="kobo.1206.1" xmlns="http://www.w3.org/1999/xhtml">In </span><strong class="source-inline"><span class="koboSpan" id="kobo.1207.1" xmlns="http://www.w3.org/1999/xhtml">Items.razor.cs</span></strong><span class="koboSpan" id="kobo.1208.1" xmlns="http://www.w3.org/1999/xhtml">, the implementation of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1209.1" xmlns="http://www.w3.org/1999/xhtml">OnParametersSet</span></strong><span class="koboSpan" id="kobo.1210.1" xmlns="http://www.w3.org/1999/xhtml"> is very similar to this. </span><span class="koboSpan" id="kobo.1210.2" xmlns="http://www.w3.org/1999/xhtml">You can refer to the following GitHub link to find out </span><span class="No-Break"><span class="koboSpan" id="kobo.1211.1" xmlns="http://www.w3.org/1999/xhtml">the details:</span></span></p>
<p><a href="https://epa.ms/Items9-6"><span class="No-Break"><span class="koboSpan" id="kobo.1212.1" xmlns="http://www.w3.org/1999/xhtml">https://epa.ms/Items9-6</span></span></a></p>
<p><span class="koboSpan" id="kobo.1213.1" xmlns="http://www.w3.org/1999/xhtml">So far, we have an almost full-function password manager app, and the UI of this app is built with Blazor. </span><span class="koboSpan" id="kobo.1213.2" xmlns="http://www.w3.org/1999/xhtml">We created reusable modal dialog components to support the context menu so we can perform CRUD operations. </span><span class="koboSpan" id="kobo.1213.3" xmlns="http://www.w3.org/1999/xhtml">The last piece of the puzzle is the implementation of </span><span class="No-Break"><span class="koboSpan" id="kobo.1214.1" xmlns="http://www.w3.org/1999/xhtml">CRUD operations.</span></span></p>
<h1 id="_idParaDest-190"><a id="_idTextAnchor206"/><span class="koboSpan" id="kobo.1215.1" xmlns="http://www.w3.org/1999/xhtml">Implementing CRUD operations</span></h1>
<p><span class="koboSpan" id="kobo.1216.1" xmlns="http://www.w3.org/1999/xhtml">Once we </span><a id="_idIndexMarker722"/><span class="koboSpan" id="kobo.1217.1" xmlns="http://www.w3.org/1999/xhtml">have prepared modal dialogs, which will be used in CRUD operations from previous sections, we can implement CRUD operations in </span><span class="No-Break"><span class="koboSpan" id="kobo.1218.1" xmlns="http://www.w3.org/1999/xhtml">this section.</span></span></p>
<h2 id="_idParaDest-191"><a id="_idTextAnchor207"/><span class="koboSpan" id="kobo.1219.1" xmlns="http://www.w3.org/1999/xhtml">CRUD operations of items</span></h2>
<p><span class="koboSpan" id="kobo.1220.1" xmlns="http://www.w3.org/1999/xhtml">To add or update an item, we can use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1221.1" xmlns="http://www.w3.org/1999/xhtml">UpdateItemAsync()</span></strong><span class="koboSpan" id="kobo.1222.1" xmlns="http://www.w3.org/1999/xhtml"> method in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1223.1" xmlns="http://www.w3.org/1999/xhtml">Items.razor.cs</span></strong><span class="koboSpan" id="kobo.1224.1" xmlns="http://www.w3.org/1999/xhtml"> to handle both cases. </span><span class="koboSpan" id="kobo.1224.2" xmlns="http://www.w3.org/1999/xhtml">To detect whether we want to create a new item or update an existing item, we define a private </span><strong class="source-inline"><span class="koboSpan" id="kobo.1225.1" xmlns="http://www.w3.org/1999/xhtml">_isNewItem</span></strong><span class="koboSpan" id="kobo.1226.1" xmlns="http://www.w3.org/1999/xhtml"> field </span><span class="No-Break"><span class="koboSpan" id="kobo.1227.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1228.1" xmlns="http://www.w3.org/1999/xhtml">
    bool _isNewItem = false;</span></pre>
<p><span class="koboSpan" id="kobo.1229.1" xmlns="http://www.w3.org/1999/xhtml">Next, we’ll see how to add or edit </span><span class="No-Break"><span class="koboSpan" id="kobo.1230.1" xmlns="http://www.w3.org/1999/xhtml">an item.</span></span></p>
<h3><span class="koboSpan" id="kobo.1231.1" xmlns="http://www.w3.org/1999/xhtml">Adding a new item</span></h3>
<p><span class="koboSpan" id="kobo.1232.1" xmlns="http://www.w3.org/1999/xhtml">To add a </span><a id="_idIndexMarker723"/><span class="koboSpan" id="kobo.1233.1" xmlns="http://www.w3.org/1999/xhtml">new item, we can click the </span><strong class="bold"><span class="koboSpan" id="kobo.1234.1" xmlns="http://www.w3.org/1999/xhtml">+</span></strong><span class="koboSpan" id="kobo.1235.1" xmlns="http://www.w3.org/1999/xhtml"> button in the header of the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1236.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.1237.1" xmlns="http://www.w3.org/1999/xhtml"> page, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1238.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1239.1" xmlns="http://www.w3.org/1999/xhtml">.7</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.1240.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer103">
<span class="koboSpan" id="kobo.1241.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 9.7: Adding a new item" src="image/Figure_9.7_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.1242.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9.7: Adding a new item</span></p>
<p><span class="koboSpan" id="kobo.1243.1" xmlns="http://www.w3.org/1999/xhtml">The Razor </span><a id="_idIndexMarker724"/><span class="koboSpan" id="kobo.1244.1" xmlns="http://www.w3.org/1999/xhtml">markup of this page header can be </span><span class="No-Break"><span class="koboSpan" id="kobo.1245.1" xmlns="http://www.w3.org/1999/xhtml">reviewed here:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1246.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;div class="container"&gt;&lt;div class="row"&gt;
  &lt;div class="col-12"&gt;&lt;h1&gt;
    @if (selectedItem?.GetParentLink() != null) {
      &lt;a class="btn btn-outline-dark"
        href="@selectedItem?.GetParentLink()"&gt;
        &lt;span class="oi oi-chevron-left"
          aria-hidden="true"&gt;&lt;/span&gt;&lt;/a&gt;                  ❶
    }
    @(" " + Title)                                        ❷
&lt;button type="button"
  class="btn btn-outline-dark float-end"
      data-bs-toggle="modal"
      data-bs-target="#@_dialogEditId"
      @onclick="@(() =&gt; _isNewItem=true)"&gt;
      &lt;span class="oi oi-plus" aria-hidden="true"&gt;
    &lt;/span&gt;&lt;/button&gt;                                      ❸
  &lt;/h1&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</span></pre>
<p><span class="koboSpan" id="kobo.1247.1" xmlns="http://www.w3.org/1999/xhtml">The page </span><a id="_idIndexMarker725"/><span class="koboSpan" id="kobo.1248.1" xmlns="http://www.w3.org/1999/xhtml">header displays the </span><strong class="bold"><span class="koboSpan" id="kobo.1249.1" xmlns="http://www.w3.org/1999/xhtml">Back</span></strong><span class="koboSpan" id="kobo.1250.1" xmlns="http://www.w3.org/1999/xhtml"> button ❶, Title ❷, and the </span><strong class="bold"><span class="koboSpan" id="kobo.1251.1" xmlns="http://www.w3.org/1999/xhtml">Add</span></strong><span class="koboSpan" id="kobo.1252.1" xmlns="http://www.w3.org/1999/xhtml"> button ❸. </span><span class="koboSpan" id="kobo.1252.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="bold"><span class="koboSpan" id="kobo.1253.1" xmlns="http://www.w3.org/1999/xhtml">Back</span></strong><span class="koboSpan" id="kobo.1254.1" xmlns="http://www.w3.org/1999/xhtml"> button is displayed if the parent </span><span class="No-Break"><span class="koboSpan" id="kobo.1255.1" xmlns="http://www.w3.org/1999/xhtml">link exists.</span></span></p>
<p><span class="koboSpan" id="kobo.1256.1" xmlns="http://www.w3.org/1999/xhtml">When the </span><strong class="bold"><span class="koboSpan" id="kobo.1257.1" xmlns="http://www.w3.org/1999/xhtml">Add</span></strong><span class="koboSpan" id="kobo.1258.1" xmlns="http://www.w3.org/1999/xhtml"> button is clicked, it will display a modal dialog with </span><strong class="source-inline"><span class="koboSpan" id="kobo.1259.1" xmlns="http://www.w3.org/1999/xhtml">Id</span></strong><span class="koboSpan" id="kobo.1260.1" xmlns="http://www.w3.org/1999/xhtml"> defined in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1261.1" xmlns="http://www.w3.org/1999/xhtml">_dialogEditId</span></strong><span class="koboSpan" id="kobo.1262.1" xmlns="http://www.w3.org/1999/xhtml"> variable. </span><span class="koboSpan" id="kobo.1262.2" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.1263.1" xmlns="http://www.w3.org/1999/xhtml">onclick</span></strong><span class="koboSpan" id="kobo.1264.1" xmlns="http://www.w3.org/1999/xhtml"> event handler just sets </span><strong class="source-inline"><span class="koboSpan" id="kobo.1265.1" xmlns="http://www.w3.org/1999/xhtml">_isNewItem</span></strong><span class="koboSpan" id="kobo.1266.1" xmlns="http://www.w3.org/1999/xhtml"> to </span><strong class="source-inline"><span class="koboSpan" id="kobo.1267.1" xmlns="http://www.w3.org/1999/xhtml">true</span></strong><span class="koboSpan" id="kobo.1268.1" xmlns="http://www.w3.org/1999/xhtml"> so the modal dialog event handler knows this is an action to add a </span><span class="No-Break"><span class="koboSpan" id="kobo.1269.1" xmlns="http://www.w3.org/1999/xhtml">new item.</span></span></p>
<h3><span class="koboSpan" id="kobo.1270.1" xmlns="http://www.w3.org/1999/xhtml">Editing or deleting an item</span></h3>
<p><span class="koboSpan" id="kobo.1271.1" xmlns="http://www.w3.org/1999/xhtml">To edit </span><a id="_idIndexMarker726"/><span class="koboSpan" id="kobo.1272.1" xmlns="http://www.w3.org/1999/xhtml">or delete an item, we can click on the context </span><a id="_idIndexMarker727"/><span class="koboSpan" id="kobo.1273.1" xmlns="http://www.w3.org/1999/xhtml">menu on the item, as shown in </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1274.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9</span></em></span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1275.1" xmlns="http://www.w3.org/1999/xhtml">.8</span></em></span><span class="No-Break"><span class="koboSpan" id="kobo.1276.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer104">
<span class="koboSpan" id="kobo.1277.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 9.8: Editing or deleting an item" src="image/Figure_9.8_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.1278.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9.8: Editing or deleting an item</span></p>
<p><span class="koboSpan" id="kobo.1279.1" xmlns="http://www.w3.org/1999/xhtml">After we click on the context menu button, a list of menu items will be displayed. </span><span class="koboSpan" id="kobo.1279.2" xmlns="http://www.w3.org/1999/xhtml">Let’s review the markup for the context menu in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1280.1" xmlns="http://www.w3.org/1999/xhtml">Items.razor</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.1281.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1282.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;div class="list-group"&gt;
  @foreach (var item in items) {
&lt;div class="dropdown list-group-item list-group-item-action
  d-flex gap-1 py-2" aria-current="true"&gt;
      &lt;img src="@item.GetIcon()" alt="twbs" width="32"
        height="32"
          class="rounded-circle flex-shrink-0 float-start"&gt;
      &lt;a href="@item.GetActionLink()" class="..."&gt; ...
</span><span class="koboSpan" id="kobo.1282.2" xmlns="http://www.w3.org/1999/xhtml">      &lt;button class="opacity-50 btn btn-light
          dropdown-toggle" type="button"
            id="itemsContextMenu"
          data-bs-toggle="dropdown" aria-expanded="false"
          @onclick="@(() =&gt; listGroupItem=item)"&gt;         ❶
        &lt;span class="oi oi-menu" aria-hidden="true"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;ul class="dropdown-menu" aria-labelledby=
        "itemsContextMenu"&gt;
        &lt;li&gt;&lt;button class="dropdown-item"
          data-bs-toggle="modal"
              data-bs-target="#@_dialogEditId"
              @onclick="@(() =&gt; _isNewItem=false)"&gt;       ❷
              Edit&lt;/button&gt;&lt;/li&gt;
        &lt;li&gt;&lt;button class="dropdown-item"
          data-bs-toggle="modal"
              data-bs-target="#@_dialogDeleteId"&gt;         ❸
              Delete&lt;/button&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  }
&lt;/div&gt;</span></pre>
<p><span class="koboSpan" id="kobo.1283.1" xmlns="http://www.w3.org/1999/xhtml">There is a context menu button ❶ defined in the preceding markup code. </span><span class="koboSpan" id="kobo.1283.2" xmlns="http://www.w3.org/1999/xhtml">When this button is clicked, two menu items, </span><strong class="source-inline"><span class="koboSpan" id="kobo.1284.1" xmlns="http://www.w3.org/1999/xhtml">Edit</span></strong><span class="koboSpan" id="kobo.1285.1" xmlns="http://www.w3.org/1999/xhtml"> ❷ and </span><strong class="source-inline"><span class="koboSpan" id="kobo.1286.1" xmlns="http://www.w3.org/1999/xhtml">Delete</span></strong><span class="koboSpan" id="kobo.1287.1" xmlns="http://www.w3.org/1999/xhtml"> ❸, will be displayed. </span><span class="koboSpan" id="kobo.1287.2" xmlns="http://www.w3.org/1999/xhtml">Since the markup </span><a id="_idIndexMarker728"/><span class="koboSpan" id="kobo.1288.1" xmlns="http://www.w3.org/1999/xhtml">code of the context menu runs in a </span><strong class="source-inline"><span class="koboSpan" id="kobo.1289.1" xmlns="http://www.w3.org/1999/xhtml">foreach</span></strong><span class="koboSpan" id="kobo.1290.1" xmlns="http://www.w3.org/1999/xhtml"> loop, we need to get a reference of the selected item to edit or delete it. </span><span class="koboSpan" id="kobo.1290.2" xmlns="http://www.w3.org/1999/xhtml">In the logic </span><a id="_idIndexMarker729"/><span class="koboSpan" id="kobo.1291.1" xmlns="http://www.w3.org/1999/xhtml">of C# code-behind, the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1292.1" xmlns="http://www.w3.org/1999/xhtml">listGroupItem</span></strong><span class="koboSpan" id="kobo.1293.1" xmlns="http://www.w3.org/1999/xhtml"> variable is used to refer to the selected item. </span><span class="koboSpan" id="kobo.1293.2" xmlns="http://www.w3.org/1999/xhtml">We can catch the reference in the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1294.1" xmlns="http://www.w3.org/1999/xhtml">onclick</span></strong><span class="koboSpan" id="kobo.1295.1" xmlns="http://www.w3.org/1999/xhtml"> event handler of the context </span><span class="No-Break"><span class="koboSpan" id="kobo.1296.1" xmlns="http://www.w3.org/1999/xhtml">menu button.</span></span></p>
<p><span class="koboSpan" id="kobo.1297.1" xmlns="http://www.w3.org/1999/xhtml">When the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1298.1" xmlns="http://www.w3.org/1999/xhtml">Edit</span></strong><span class="koboSpan" id="kobo.1299.1" xmlns="http://www.w3.org/1999/xhtml"> menu item is selected, we need to set the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1300.1" xmlns="http://www.w3.org/1999/xhtml">_isNewItem</span></strong><span class="koboSpan" id="kobo.1301.1" xmlns="http://www.w3.org/1999/xhtml"> variable to </span><strong class="source-inline"><span class="koboSpan" id="kobo.1302.1" xmlns="http://www.w3.org/1999/xhtml">false</span></strong><span class="koboSpan" id="kobo.1303.1" xmlns="http://www.w3.org/1999/xhtml"> so the event handler of the modal dialog can know we are editing an </span><span class="No-Break"><span class="koboSpan" id="kobo.1304.1" xmlns="http://www.w3.org/1999/xhtml">existing item.</span></span></p>
<p><span class="koboSpan" id="kobo.1305.1" xmlns="http://www.w3.org/1999/xhtml">With all the previous setup, let’s review the event handler in modal dialogs. </span><span class="koboSpan" id="kobo.1305.2" xmlns="http://www.w3.org/1999/xhtml">Let’s review the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1306.1" xmlns="http://www.w3.org/1999/xhtml">UpdateItemAsync()</span></strong><span class="koboSpan" id="kobo.1307.1" xmlns="http://www.w3.org/1999/xhtml"> event handler in </span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1308.1" xmlns="http://www.w3.org/1999/xhtml">Items.razor.cs</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1309.1" xmlns="http://www.w3.org/1999/xhtml"> first:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1310.1" xmlns="http://www.w3.org/1999/xhtml">
private async void UpdateItemAsync(string key, string value) {
  if (listGroupItem == null) { return; }
  if (string.IsNullOrEmpty(key) || string.IsNullOrEmpty
    (value))
    { return; }
  listGroupItem.Name = key;
  listGroupItem.Notes = value;
  if (_isNewItem) {                                      ①
      // Add new item
    if (listGroupItem is NewItem aNewItem) {
      Item? </span><span class="koboSpan" id="kobo.1310.2" xmlns="http://www.w3.org/1999/xhtml">newItem = DataStore.CreateNewItem
        (aNewItem.SubType);
      if (newItem != null) {
        newItem.Name = aNewItem.Name;
        newItem.Notes = aNewItem.Notes;
        items.Add(newItem);
        await DataStore.AddItemAsync(newItem);
      }
    }
  }
  else {
    // Update the current item
    await DataStore.UpdateItemAsync(listGroupItem);
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.1311.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.1312.1" xmlns="http://www.w3.org/1999/xhtml">UpdateItemAsync()</span></strong><span class="koboSpan" id="kobo.1313.1" xmlns="http://www.w3.org/1999/xhtml"> event handler can handle both adding and editing an item. </span><span class="koboSpan" id="kobo.1313.2" xmlns="http://www.w3.org/1999/xhtml">As we </span><a id="_idIndexMarker730"/><span class="koboSpan" id="kobo.1314.1" xmlns="http://www.w3.org/1999/xhtml">can see, it checks the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1315.1" xmlns="http://www.w3.org/1999/xhtml">_isNewItem</span></strong><span class="koboSpan" id="kobo.1316.1" xmlns="http://www.w3.org/1999/xhtml"> variable ① to detect whether we want to add or edit an item. </span><span class="koboSpan" id="kobo.1316.2" xmlns="http://www.w3.org/1999/xhtml">After that, it calls </span><strong class="source-inline"><span class="koboSpan" id="kobo.1317.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1318.1" xmlns="http://www.w3.org/1999/xhtml"> methods </span><a id="_idIndexMarker731"/><span class="koboSpan" id="kobo.1319.1" xmlns="http://www.w3.org/1999/xhtml">to process add or </span><span class="No-Break"><span class="koboSpan" id="kobo.1320.1" xmlns="http://www.w3.org/1999/xhtml">update actions.</span></span></p>
<p><span class="koboSpan" id="kobo.1321.1" xmlns="http://www.w3.org/1999/xhtml">Next, let’s review the event handler of deleting </span><span class="No-Break"><span class="koboSpan" id="kobo.1322.1" xmlns="http://www.w3.org/1999/xhtml">an item:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1323.1" xmlns="http://www.w3.org/1999/xhtml">
private async void DeleteItemAsync() {
  if (listGroupItem == null) return;
  if (items.Remove(listGroupItem)) {
      _ = await DataStore.DeleteItemAsync
         (listGroupItem.Id);
  }
}</span></pre>
<p><span class="koboSpan" id="kobo.1324.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1325.1" xmlns="http://www.w3.org/1999/xhtml">DeleteItemAsync()</span></strong><span class="koboSpan" id="kobo.1326.1" xmlns="http://www.w3.org/1999/xhtml">event handler, it just removes the item from the list and calls </span><strong class="source-inline"><span class="koboSpan" id="kobo.1327.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1328.1" xmlns="http://www.w3.org/1999/xhtml"> methods to process the </span><span class="No-Break"><span class="koboSpan" id="kobo.1329.1" xmlns="http://www.w3.org/1999/xhtml">delete action.</span></span></p>
<h2 id="_idParaDest-192"><a id="_idTextAnchor208"/><span class="koboSpan" id="kobo.1330.1" xmlns="http://www.w3.org/1999/xhtml">CRUD operations of fields</span></h2>
<p><span class="koboSpan" id="kobo.1331.1" xmlns="http://www.w3.org/1999/xhtml">The CRUD </span><a id="_idIndexMarker732"/><span class="koboSpan" id="kobo.1332.1" xmlns="http://www.w3.org/1999/xhtml">operations of fields are similar to what we have done for items. </span><span class="koboSpan" id="kobo.1332.2" xmlns="http://www.w3.org/1999/xhtml">To add or update a field, we can use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1333.1" xmlns="http://www.w3.org/1999/xhtml">UpdateFieldAsync()</span></strong><span class="koboSpan" id="kobo.1334.1" xmlns="http://www.w3.org/1999/xhtml"> method in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1335.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail.razor.cs</span></strong><span class="koboSpan" id="kobo.1336.1" xmlns="http://www.w3.org/1999/xhtml"> to handle both cases. </span><span class="koboSpan" id="kobo.1336.2" xmlns="http://www.w3.org/1999/xhtml">To detect whether we want to create a new field or update an existing field, we define a private </span><strong class="source-inline"><span class="koboSpan" id="kobo.1337.1" xmlns="http://www.w3.org/1999/xhtml">_isNewField</span></strong><span class="koboSpan" id="kobo.1338.1" xmlns="http://www.w3.org/1999/xhtml"> field </span><span class="No-Break"><span class="koboSpan" id="kobo.1339.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1340.1" xmlns="http://www.w3.org/1999/xhtml">
    bool _isNewField = false;</span></pre>
<p><span class="koboSpan" id="kobo.1341.1" xmlns="http://www.w3.org/1999/xhtml">The UI of CRUD operations is also similar to what we have explained in the previous section. </span><span class="koboSpan" id="kobo.1341.2" xmlns="http://www.w3.org/1999/xhtml">Please refer to </span><span class="No-Break"><em class="italic"><span class="koboSpan" id="kobo.1342.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9</span></em></span><em class="italic"><span class="koboSpan" id="kobo.1343.1" xmlns="http://www.w3.org/1999/xhtml">.9</span></em><span class="koboSpan" id="kobo.1344.1" xmlns="http://www.w3.org/1999/xhtml"> to see the </span><strong class="bold"><span class="koboSpan" id="kobo.1345.1" xmlns="http://www.w3.org/1999/xhtml">Add</span></strong><span class="koboSpan" id="kobo.1346.1" xmlns="http://www.w3.org/1999/xhtml"> button and context </span><span class="No-Break"><span class="koboSpan" id="kobo.1347.1" xmlns="http://www.w3.org/1999/xhtml">menu items:</span></span></p>
<div>
<div class="IMG---Figure" id="_idContainer105">
<span class="koboSpan" id="kobo.1348.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="Figure 9.9: Add, edit﻿, or delete a field" src="image/Figure_9.9_B16588.jpg"/></span>
</div>
</div>
<p class="IMG---Caption" lang="en-US" xml:lang="en-US"><span class="koboSpan" id="kobo.1349.1" xmlns="http://www.w3.org/1999/xhtml">Figure 9.9: Add, edit, or delete a field</span></p>
<p><span class="koboSpan" id="kobo.1350.1" xmlns="http://www.w3.org/1999/xhtml">We can review the Razor markup code of the page header in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1351.1" xmlns="http://www.w3.org/1999/xhtml">IwwtemDetail.razor</span></strong> <span class="No-Break"><span class="koboSpan" id="kobo.1352.1" xmlns="http://www.w3.org/1999/xhtml">as follows:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1353.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;div class="container"&gt;
  &lt;div class="row"&gt;&lt;div class="col-12"&gt;
    &lt;h1&gt;
      @if (selectedItem?.GetParentLink() != null) {
        &lt;a class="btn btn-outline-dark"
          href="@selectedItem?.GetParentLink()"&gt;
        &lt;span class="oi oi-chevron-left"
          aria-hidden="true"&gt;&lt;/span&gt;&lt;/a&gt;
      }
      @(" " + selectedItem!.Name)
      &lt;button type="button" class="btn btn-outline-dark
        float-end"
        data-bs-toggle="modal" data-bs-
          target="#@_dialogEditId"
        @onclick="@(() =&gt; _isNewField=true)"&gt;
          &lt;span class="oi oi-plus"
            aria-hidden="true"&gt;&lt;/span&gt;&lt;/button&gt;
    &lt;/h1&gt;
  &lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;</span></pre>
<p><span class="koboSpan" id="kobo.1354.1" xmlns="http://www.w3.org/1999/xhtml">As we can see, the </span><a id="_idIndexMarker733"/><span class="koboSpan" id="kobo.1355.1" xmlns="http://www.w3.org/1999/xhtml">preceding source code is also similar to the one in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1356.1" xmlns="http://www.w3.org/1999/xhtml">Items.razor</span></strong><span class="koboSpan" id="kobo.1357.1" xmlns="http://www.w3.org/1999/xhtml"> except the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1358.1" xmlns="http://www.w3.org/1999/xhtml">_isNewItem</span></strong><span class="koboSpan" id="kobo.1359.1" xmlns="http://www.w3.org/1999/xhtml"> variable is replaced by </span><strong class="source-inline"><span class="koboSpan" id="kobo.1360.1" xmlns="http://www.w3.org/1999/xhtml">_isNewField</span></strong><span class="koboSpan" id="kobo.1361.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1361.2" xmlns="http://www.w3.org/1999/xhtml">We can refine this page header to a reusable </span><span class="No-Break"><span class="koboSpan" id="kobo.1362.1" xmlns="http://www.w3.org/1999/xhtml">component later.</span></span></p>
<p><span class="koboSpan" id="kobo.1363.1" xmlns="http://www.w3.org/1999/xhtml">Just like </span><a id="_idIndexMarker734"/><span class="koboSpan" id="kobo.1364.1" xmlns="http://www.w3.org/1999/xhtml">in the previous section, let’s review the source code of the list group and </span><span class="No-Break"><span class="koboSpan" id="kobo.1365.1" xmlns="http://www.w3.org/1999/xhtml">context menu:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1366.1" xmlns="http://www.w3.org/1999/xhtml">
&lt;div class="list-group"&gt;
  @foreach (var field in fields) {
    @if(field.ShowContextAction == null) {
      &lt;div class="dropdown list-group-item ...
</span><span class="koboSpan" id="kobo.1366.2" xmlns="http://www.w3.org/1999/xhtml">        aria-current="true"&gt;
        &lt;span class="oi oi-pencil" aria-hidden="true"&gt;
         &lt;/span&gt;
        &lt;div class="d-flex gap-2 w-100
          justify-content-between"&gt; ...
</span><span class="koboSpan" id="kobo.1366.3" xmlns="http://www.w3.org/1999/xhtml">        &lt;button class="opacity-50 btn btn-light
          dropdown-toggle" type="button"
          id="itemDetailContextMenu"
          data-bs-toggle="dropdown" aria-expanded="false"
          @onclick="@(() =&gt; listGroupField=field)"&gt;       ❶
            &lt;span class="oi oi-menu" aria-hidden="true"&gt;
            &lt;/span&gt;
        &lt;/button&gt;
        &lt;ul class="dropdown-menu"
          aria-labelledby="itemDetailContextMenu"&gt;
          &lt;li&gt;&lt;button class="dropdown-item"
            data-bs-toggle="modal"
            data-bs-target="#@_dialogEditId"
            @onclick="@(() =&gt; _isNewField=false)"&gt;        ❷
                Edit
          &lt;/button&gt;&lt;/li&gt;
          &lt;li&gt;&lt;button class="dropdown-item"
            data-bs-toggle="modal"
            data-bs-target="#@_dialogDeleteId"&gt;           ❸
                Delete
          &lt;/button&gt;&lt;/li&gt;
          @if (field.IsProtected) {
            &lt;li&gt;&lt;button class="dropdown-item"
              @onclick="OnToggleShowPassword"&gt;            ❹
                @if (field.IsHide) { &lt;span&gt;Show&lt;/span&gt; }
                else { &lt;span&gt;Hide&lt;/span&gt; }
            &lt;/button&gt;&lt;/li&gt;
          }
        &lt;/ul&gt;
      &lt;/div&gt;
    }
  }
&lt;/div&gt;</span></pre>
<p><span class="koboSpan" id="kobo.1367.1" xmlns="http://www.w3.org/1999/xhtml">The preceding source code of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1368.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail.razor</span></strong><span class="koboSpan" id="kobo.1369.1" xmlns="http://www.w3.org/1999/xhtml"> includes a context menu button ❶ and three buttons for the </span><strong class="bold"><span class="koboSpan" id="kobo.1370.1" xmlns="http://www.w3.org/1999/xhtml">Add</span></strong><span class="koboSpan" id="kobo.1371.1" xmlns="http://www.w3.org/1999/xhtml"> ❷, </span><strong class="bold"><span class="koboSpan" id="kobo.1372.1" xmlns="http://www.w3.org/1999/xhtml">Edit</span></strong><span class="koboSpan" id="kobo.1373.1" xmlns="http://www.w3.org/1999/xhtml"> ❸, and </span><strong class="bold"><span class="koboSpan" id="kobo.1374.1" xmlns="http://www.w3.org/1999/xhtml">Show</span></strong><span class="koboSpan" id="kobo.1375.1" xmlns="http://www.w3.org/1999/xhtml"> ❹ menu items. </span><span class="koboSpan" id="kobo.1375.2" xmlns="http://www.w3.org/1999/xhtml">You can see that the </span><a id="_idIndexMarker735"/><span class="koboSpan" id="kobo.1376.1" xmlns="http://www.w3.org/1999/xhtml">source code is also similar to the one in </span><strong class="source-inline"><span class="koboSpan" id="kobo.1377.1" xmlns="http://www.w3.org/1999/xhtml">Items.razor</span></strong><span class="koboSpan" id="kobo.1378.1" xmlns="http://www.w3.org/1999/xhtml">, which includes a list group and a context menu. </span><span class="koboSpan" id="kobo.1378.2" xmlns="http://www.w3.org/1999/xhtml">We will refine this to a reusable component in the next chapter. </span><span class="koboSpan" id="kobo.1378.3" xmlns="http://www.w3.org/1999/xhtml">The difference in the context menu is we add a menu item to show or hide the field if the field is a protected field, such as a password. </span><span class="koboSpan" id="kobo.1378.4" xmlns="http://www.w3.org/1999/xhtml">We use the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1379.1" xmlns="http://www.w3.org/1999/xhtml">onclick</span></strong><span class="koboSpan" id="kobo.1380.1" xmlns="http://www.w3.org/1999/xhtml"> event handler, </span><strong class="source-inline"><span class="koboSpan" id="kobo.1381.1" xmlns="http://www.w3.org/1999/xhtml">OnToggleShowPassword()</span></strong><span class="koboSpan" id="kobo.1382.1" xmlns="http://www.w3.org/1999/xhtml">, to set the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1383.1" xmlns="http://www.w3.org/1999/xhtml">IsHide</span></strong><span class="koboSpan" id="kobo.1384.1" xmlns="http://www.w3.org/1999/xhtml"> field property to toggle the visibility of the </span><span class="No-Break"><span class="koboSpan" id="kobo.1385.1" xmlns="http://www.w3.org/1999/xhtml">password field.</span></span></p>
<p><span class="koboSpan" id="kobo.1386.1" xmlns="http://www.w3.org/1999/xhtml">Finally, let’s review </span><a id="_idIndexMarker736"/><span class="koboSpan" id="kobo.1387.1" xmlns="http://www.w3.org/1999/xhtml">the event handlers of modal dialogs </span><span class="No-Break"><span class="koboSpan" id="kobo.1388.1" xmlns="http://www.w3.org/1999/xhtml">in </span></span><span class="No-Break"><strong class="source-inline"><span class="koboSpan" id="kobo.1389.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail.razor.cs</span></strong></span><span class="No-Break"><span class="koboSpan" id="kobo.1390.1" xmlns="http://www.w3.org/1999/xhtml">:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1391.1" xmlns="http://www.w3.org/1999/xhtml">
private async void UpdateFieldAsync(string key, string
  value) {
  if (selectedItem == null || listGroupField == null) {
      throw new NullReferenceException("Selected item is
        null");
  }
  if (string.IsNullOrEmpty(key) ||
      string.IsNullOrEmpty(value)) { return; }
  listGroupField.Key = key;
  listGroupField.Value = value;
  if (_isNewField) {
    // Add a new field
Field newField =
    selectedItem.AddField(listGroupField.Key,
        ((listGroupField.IsProtected) ?
</span><span class="koboSpan" id="kobo.1391.2" xmlns="http://www.w3.org/1999/xhtml">          listGroupField.EditValue :
          listGroupField.Value),
          listGroupField.IsProtected);
          fields.Add(newField);
  }
  else {
    // Update the current field
    var newData = (listGroupField.IsProtected) ?
</span><span class="koboSpan" id="kobo.1391.3" xmlns="http://www.w3.org/1999/xhtml">          listGroupField.EditValue : listGroupField.Value;
selectedItem.UpdateField(listGroupField.Key,
   newData, listGroupField.IsProtected);
  }
  await DataStore.UpdateItemAsync(selectedItem);
}</span></pre>
<p><span class="koboSpan" id="kobo.1392.1" xmlns="http://www.w3.org/1999/xhtml">The </span><strong class="source-inline"><span class="koboSpan" id="kobo.1393.1" xmlns="http://www.w3.org/1999/xhtml">UpdateFieldAsync()</span></strong><span class="koboSpan" id="kobo.1394.1" xmlns="http://www.w3.org/1999/xhtml"> event handler handles both adding and editing a field. </span><span class="koboSpan" id="kobo.1394.2" xmlns="http://www.w3.org/1999/xhtml">It is called </span><a id="_idIndexMarker737"/><span class="koboSpan" id="kobo.1395.1" xmlns="http://www.w3.org/1999/xhtml">with two parameters – </span><strong class="source-inline"><span class="koboSpan" id="kobo.1396.1" xmlns="http://www.w3.org/1999/xhtml">key</span></strong><span class="koboSpan" id="kobo.1397.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.1398.1" xmlns="http://www.w3.org/1999/xhtml">value</span></strong><span class="koboSpan" id="kobo.1399.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1399.2" xmlns="http://www.w3.org/1999/xhtml">The </span><a id="_idIndexMarker738"/><span class="koboSpan" id="kobo.1400.1" xmlns="http://www.w3.org/1999/xhtml">corresponding arguments are passed from the modal dialog and we use them to set the field of </span><strong class="source-inline"><span class="koboSpan" id="kobo.1401.1" xmlns="http://www.w3.org/1999/xhtml">listGroupField</span></strong><span class="koboSpan" id="kobo.1402.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1402.2" xmlns="http://www.w3.org/1999/xhtml">The handler checks the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1403.1" xmlns="http://www.w3.org/1999/xhtml">_isNewField</span></strong><span class="koboSpan" id="kobo.1404.1" xmlns="http://www.w3.org/1999/xhtml"> variable to detect whether we want to add or edit a field. </span><span class="koboSpan" id="kobo.1404.2" xmlns="http://www.w3.org/1999/xhtml">After that, it calls </span><strong class="source-inline"><span class="koboSpan" id="kobo.1405.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1406.1" xmlns="http://www.w3.org/1999/xhtml"> methods to process add or </span><span class="No-Break"><span class="koboSpan" id="kobo.1407.1" xmlns="http://www.w3.org/1999/xhtml">update actions.</span></span></p>
<p><span class="koboSpan" id="kobo.1408.1" xmlns="http://www.w3.org/1999/xhtml">To remove </span><a id="_idIndexMarker739"/><span class="koboSpan" id="kobo.1409.1" xmlns="http://www.w3.org/1999/xhtml">a field, the following </span><strong class="source-inline"><span class="koboSpan" id="kobo.1410.1" xmlns="http://www.w3.org/1999/xhtml">DeleteFieldAsync()</span></strong><span class="koboSpan" id="kobo.1411.1" xmlns="http://www.w3.org/1999/xhtml"> event handler </span><span class="No-Break"><span class="koboSpan" id="kobo.1412.1" xmlns="http://www.w3.org/1999/xhtml">is invoked:</span></span></p>
<pre class="source-code"><span class="koboSpan" id="kobo.1413.1" xmlns="http://www.w3.org/1999/xhtml">
private async void DeleteFieldAsync() {
  if (listGroupField == null || selectedItem == null) {
    throw new NullReferenceException(
      "Selected item or field is null");
  }
  listGroupField.ShowContextAction = listGroupField;
  selectedItem.DeleteField(listGroupField);
  await DataStore.UpdateItemAsync(selectedItem);
}</span></pre>
<p><span class="koboSpan" id="kobo.1414.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1415.1" xmlns="http://www.w3.org/1999/xhtml">DeleteFieldAsync()</span></strong><span class="koboSpan" id="kobo.1416.1" xmlns="http://www.w3.org/1999/xhtml"> event handler, we just delete the field from the selected item and call the </span><strong class="source-inline"><span class="koboSpan" id="kobo.1417.1" xmlns="http://www.w3.org/1999/xhtml">IDataStore</span></strong><span class="koboSpan" id="kobo.1418.1" xmlns="http://www.w3.org/1999/xhtml"> method to update </span><span class="No-Break"><span class="koboSpan" id="kobo.1419.1" xmlns="http://www.w3.org/1999/xhtml">the database.</span></span></p>
<p><span class="koboSpan" id="kobo.1420.1" xmlns="http://www.w3.org/1999/xhtml">With the implementation of CRUD operations, we have concluded this section. </span><span class="koboSpan" id="kobo.1420.2" xmlns="http://www.w3.org/1999/xhtml">Now, we have a new version of the password manager app using Blazor UI. </span><span class="koboSpan" id="kobo.1420.3" xmlns="http://www.w3.org/1999/xhtml">The difference between this </span><a id="_idIndexMarker740"/><span class="koboSpan" id="kobo.1421.1" xmlns="http://www.w3.org/1999/xhtml">version and the one in </span><em class="italic"><span class="koboSpan" id="kobo.1422.1" xmlns="http://www.w3.org/1999/xhtml">Part 1</span></em><span class="koboSpan" id="kobo.1423.1" xmlns="http://www.w3.org/1999/xhtml"> of this book is that we use Blazor to build all UIs. </span><span class="koboSpan" id="kobo.1423.2" xmlns="http://www.w3.org/1999/xhtml">The look and feel of Blazor UI are similar to web apps, while XAML UI is the same as </span><span class="No-Break"><span class="koboSpan" id="kobo.1424.1" xmlns="http://www.w3.org/1999/xhtml">native apps.</span></span></p>
<h1 id="_idParaDest-193"><a id="_idTextAnchor209"/><span class="koboSpan" id="kobo.1425.1" xmlns="http://www.w3.org/1999/xhtml">Summary</span></h1>
<p><span class="koboSpan" id="kobo.1426.1" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we introduced how to create Razor components. </span><span class="koboSpan" id="kobo.1426.2" xmlns="http://www.w3.org/1999/xhtml">We learned about data binding and the component lifecycle. </span><span class="koboSpan" id="kobo.1426.3" xmlns="http://www.w3.org/1999/xhtml">After that, we created a set of modal dialog components to clean up our code. </span><span class="koboSpan" id="kobo.1426.4" xmlns="http://www.w3.org/1999/xhtml">With Razor components, we can remove duplicated code and improve the UI design. </span><span class="koboSpan" id="kobo.1426.5" xmlns="http://www.w3.org/1999/xhtml">We implemented CRUD operations in the event handlers of modal dialogs. </span><span class="koboSpan" id="kobo.1426.6" xmlns="http://www.w3.org/1999/xhtml">We now have a new version of the password </span><span class="No-Break"><span class="koboSpan" id="kobo.1427.1" xmlns="http://www.w3.org/1999/xhtml">manager app.</span></span></p>
<p><span class="koboSpan" id="kobo.1428.1" xmlns="http://www.w3.org/1999/xhtml">During the code analysis, we can see that we still have redundant code in the two main components, </span><strong class="source-inline"><span class="koboSpan" id="kobo.1429.1" xmlns="http://www.w3.org/1999/xhtml">Items</span></strong><span class="koboSpan" id="kobo.1430.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><strong class="source-inline"><span class="koboSpan" id="kobo.1431.1" xmlns="http://www.w3.org/1999/xhtml">ItemDetail</span></strong><span class="koboSpan" id="kobo.1432.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1432.2" xmlns="http://www.w3.org/1999/xhtml">Even though we optimized modal dialogs, we still have duplicated code in the list group and context menu. </span><span class="koboSpan" id="kobo.1432.3" xmlns="http://www.w3.org/1999/xhtml">We will convert them to Razor components in the </span><span class="No-Break"><span class="koboSpan" id="kobo.1433.1" xmlns="http://www.w3.org/1999/xhtml">next chapter.</span></span></p>
</div>
</body>
</html>
