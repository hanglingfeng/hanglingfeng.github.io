<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<title>Chapter_05</title>
<link href="../Styles/syntax-highlighting.css" rel="stylesheet" type="text/css"/>
<link href="../Styles/epub.css" rel="stylesheet" type="text/css"/>
<!-- kobo-style -->
<style id="koboSpanStyle" type="text/css" xmlns="http://www.w3.org/1999/xhtml">.koboSpan { -webkit-text-combine: inherit; }</style>
</head>
<body id="Chapter_05" lang="en-US" xml:lang="en-US">
<div class="Basic-Text-Frame" id="_idContainer176">
<h1 class="chapterNumber"><span class="koboSpan" id="kobo.1.1" xmlns="http://www.w3.org/1999/xhtml">5</span></h1>
<h1 class="chapterTitle" id="_idParaDest-195"><span class="koboSpan" id="kobo.2.1" xmlns="http://www.w3.org/1999/xhtml">Multitasking and Concurrency</span></h1>
<p class="normal"><span class="koboSpan" id="kobo.3.1" xmlns="http://www.w3.org/1999/xhtml">This chapter is about allowing multiple actions to occur at the same time to improve performance, scalability, and user productivity for the applications that you build.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.4.1" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we will cover the following topics:</span></p>
<ul>
<li class="bulletList"><span class="koboSpan" id="kobo.5.1" xmlns="http://www.w3.org/1999/xhtml">Understanding processes, threads, and tasks</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.6.1" xmlns="http://www.w3.org/1999/xhtml">Running tasks asynchronously</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.7.1" xmlns="http://www.w3.org/1999/xhtml">Synchronizing access to shared resources</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.8.1" xmlns="http://www.w3.org/1999/xhtml">Understanding </span><code class="inlineCode"><span class="koboSpan" id="kobo.9.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.10.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><code class="inlineCode"><span class="koboSpan" id="kobo.11.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code></li>
</ul>
<h1 class="heading-1" id="_idParaDest-196"><span class="koboSpan" id="kobo.12.1" xmlns="http://www.w3.org/1999/xhtml">Understanding processes, threads, and tasks</span></h1>
<p class="normal"><span class="koboSpan" id="kobo.13.1" xmlns="http://www.w3.org/1999/xhtml">A </span><strong class="keyWord"><span class="koboSpan" id="kobo.14.1" xmlns="http://www.w3.org/1999/xhtml">process</span></strong><span class="koboSpan" id="kobo.15.1" xmlns="http://www.w3.org/1999/xhtml">, with</span><a id="_idIndexMarker411"/><span class="koboSpan" id="kobo.16.1" xmlns="http://www.w3.org/1999/xhtml"> one example being each of the console applications we have created, has resources like memory and threads allocated to it.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.17.1" xmlns="http://www.w3.org/1999/xhtml">A </span><strong class="keyWord"><span class="koboSpan" id="kobo.18.1" xmlns="http://www.w3.org/1999/xhtml">thread</span></strong><span class="koboSpan" id="kobo.19.1" xmlns="http://www.w3.org/1999/xhtml"> executes </span><a id="_idIndexMarker412"/><span class="koboSpan" id="kobo.20.1" xmlns="http://www.w3.org/1999/xhtml">your code statement by statement. </span><span class="koboSpan" id="kobo.20.2" xmlns="http://www.w3.org/1999/xhtml">By default, each process only has one thread, and this can cause problems when we need to do more than one task at the same time. </span><span class="koboSpan" id="kobo.20.3" xmlns="http://www.w3.org/1999/xhtml">Threads are also responsible for keeping track of things like the currently authenticated user and any internationalization rules that should be followed for the current language and region.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.21.1" xmlns="http://www.w3.org/1999/xhtml">Windows and most other modern operating systems </span><a id="_idIndexMarker413"/><span class="koboSpan" id="kobo.22.1" xmlns="http://www.w3.org/1999/xhtml">use </span><strong class="keyWord"><span class="koboSpan" id="kobo.23.1" xmlns="http://www.w3.org/1999/xhtml">preemptive multitasking</span></strong><span class="koboSpan" id="kobo.24.1" xmlns="http://www.w3.org/1999/xhtml">, which simulates the parallel execution of tasks. </span><span class="koboSpan" id="kobo.24.2" xmlns="http://www.w3.org/1999/xhtml">It divides the processor time among the threads, allocating a </span><strong class="keyWord"><span class="koboSpan" id="kobo.25.1" xmlns="http://www.w3.org/1999/xhtml">time slice</span></strong><span class="koboSpan" id="kobo.26.1" xmlns="http://www.w3.org/1999/xhtml"> to</span><a id="_idIndexMarker414"/><span class="koboSpan" id="kobo.27.1" xmlns="http://www.w3.org/1999/xhtml"> each thread one after another. </span><span class="koboSpan" id="kobo.27.2" xmlns="http://www.w3.org/1999/xhtml">The current thread is suspended when its time slice finishes. </span><span class="koboSpan" id="kobo.27.3" xmlns="http://www.w3.org/1999/xhtml">The processor then allows another thread to run for a time slice.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.28.1" xmlns="http://www.w3.org/1999/xhtml">When Windows switches from one thread to another, it saves the context of the thread and reloads the previously saved context of the next thread in the thread queue. </span><span class="koboSpan" id="kobo.28.2" xmlns="http://www.w3.org/1999/xhtml">This takes both time and resources to complete.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.29.1" xmlns="http://www.w3.org/1999/xhtml">As a developer, if </span><a id="_idIndexMarker415"/><span class="koboSpan" id="kobo.30.1" xmlns="http://www.w3.org/1999/xhtml">you have a small number of complex pieces of work and you want complete control over them, then you could create and manage individual </span><code class="inlineCode"><span class="koboSpan" id="kobo.31.1" xmlns="http://www.w3.org/1999/xhtml">Thread</span></code><span class="koboSpan" id="kobo.32.1" xmlns="http://www.w3.org/1999/xhtml"> instances. </span><span class="koboSpan" id="kobo.32.2" xmlns="http://www.w3.org/1999/xhtml">If you have one main thread and multiple small pieces of work that can be executed in the background, then you can use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.33.1" xmlns="http://www.w3.org/1999/xhtml">ThreadPool</span></code><span class="koboSpan" id="kobo.34.1" xmlns="http://www.w3.org/1999/xhtml"> class to add delegate instances that point to those pieces of work implemented as methods to a queue, and they will be automatically allocated to threads in the thread pool.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.35.1" xmlns="http://www.w3.org/1999/xhtml">In this chapter, we will use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.36.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.37.1" xmlns="http://www.w3.org/1999/xhtml"> type to manage threads at a higher abstraction level.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.38.1" xmlns="http://www.w3.org/1999/xhtml">Threads may have to compete for and wait for access to shared resources, such as variables, files, and database objects. </span><span class="koboSpan" id="kobo.38.2" xmlns="http://www.w3.org/1999/xhtml">There are types for managing this that you will see in action later in this chapter.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.39.1" xmlns="http://www.w3.org/1999/xhtml">Depending on the task, doubling the number of threads (workers) to perform a task does not halve the number of seconds that it will take to complete that task. </span><span class="koboSpan" id="kobo.39.2" xmlns="http://www.w3.org/1999/xhtml">In fact, it can increase the duration of the task due to resource contention, as shown in </span><em class="italic"><span class="koboSpan" id="kobo.40.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5.1</span></em><span class="koboSpan" id="kobo.41.1" xmlns="http://www.w3.org/1999/xhtml">:</span></p>
<figure class="mediaobject"><span class="koboSpan" id="kobo.42.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="" src="../Images/B19587_05_01.png"/></span></figure>
<p class="packt_figref"><span class="koboSpan" id="kobo.43.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5.1: A tweet about tasks in the real world</span></p>
<div class="packt_tip">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.44.1" xmlns="http://www.w3.org/1999/xhtml">Good Practice</span></strong><span class="koboSpan" id="kobo.45.1" xmlns="http://www.w3.org/1999/xhtml">: Never assume that more threads will improve performance! </span><span class="koboSpan" id="kobo.45.2" xmlns="http://www.w3.org/1999/xhtml">Run performance tests on a baseline code implementation without multiple threads, and then again on a code implementation with multiple threads. </span><span class="koboSpan" id="kobo.45.3" xmlns="http://www.w3.org/1999/xhtml">You should also perform performance tests in a staging environment that is as close as possible to the production environment.</span></p>
</div>
<h1 class="heading-1" id="_idParaDest-197"><span class="koboSpan" id="kobo.46.1" xmlns="http://www.w3.org/1999/xhtml">Running tasks asynchronously</span></h1>
<p class="normal"><span class="koboSpan" id="kobo.47.1" xmlns="http://www.w3.org/1999/xhtml">To understand </span><a id="_idIndexMarker416"/><span class="koboSpan" id="kobo.48.1" xmlns="http://www.w3.org/1999/xhtml">how multiple tasks can be run </span><strong class="keyWord"><span class="koboSpan" id="kobo.49.1" xmlns="http://www.w3.org/1999/xhtml">simultaneously</span></strong><span class="koboSpan" id="kobo.50.1" xmlns="http://www.w3.org/1999/xhtml"> (at the same time), we will create a console app that needs to execute three methods.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.51.1" xmlns="http://www.w3.org/1999/xhtml">There will be three methods that need to be executed: the first takes 3 seconds, the second takes 2 seconds, and the third takes 1 second. </span><span class="koboSpan" id="kobo.51.2" xmlns="http://www.w3.org/1999/xhtml">To simulate that work, we can use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.52.1" xmlns="http://www.w3.org/1999/xhtml">Thread</span></code><span class="koboSpan" id="kobo.53.1" xmlns="http://www.w3.org/1999/xhtml"> class to tell the current thread to go to sleep for a specified number of milliseconds.</span></p>
<h2 class="heading-2" id="_idParaDest-198"><span class="koboSpan" id="kobo.54.1" xmlns="http://www.w3.org/1999/xhtml">Running multiple actions synchronously</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.55.1" xmlns="http://www.w3.org/1999/xhtml">Before </span><a id="_idIndexMarker417"/><span class="koboSpan" id="kobo.56.1" xmlns="http://www.w3.org/1999/xhtml">we make the tasks run simultaneously, we will run them </span><strong class="keyWord"><span class="koboSpan" id="kobo.57.1" xmlns="http://www.w3.org/1999/xhtml">synchronously</span></strong><span class="koboSpan" id="kobo.58.1" xmlns="http://www.w3.org/1999/xhtml">, that is, one after the other:</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.59.1" xmlns="http://www.w3.org/1999/xhtml">Use your preferred code editor to add a console app project, as defined in the following list:</span><ul>
<li class="bulletList"><span class="koboSpan" id="kobo.60.1" xmlns="http://www.w3.org/1999/xhtml">Project template: </span><strong class="screenText"><span class="koboSpan" id="kobo.61.1" xmlns="http://www.w3.org/1999/xhtml">Console App</span></strong><span class="koboSpan" id="kobo.62.1" xmlns="http://www.w3.org/1999/xhtml"> / </span><code class="inlineCode"><span class="koboSpan" id="kobo.63.1" xmlns="http://www.w3.org/1999/xhtml">console</span></code></li>
<li class="bulletList"><span class="koboSpan" id="kobo.64.1" xmlns="http://www.w3.org/1999/xhtml">Solution file and folder: </span><code class="inlineCode"><span class="koboSpan" id="kobo.65.1" xmlns="http://www.w3.org/1999/xhtml">Chapter05</span></code></li>
<li class="bulletList"><span class="koboSpan" id="kobo.66.1" xmlns="http://www.w3.org/1999/xhtml">Project file and folder: </span><code class="inlineCode"><span class="koboSpan" id="kobo.67.1" xmlns="http://www.w3.org/1999/xhtml">WorkingWithTasks</span></code></li>
<li class="bulletList"><strong class="screenText"><span class="koboSpan" id="kobo.68.1" xmlns="http://www.w3.org/1999/xhtml">Do not use top-level statements</span></strong><span class="koboSpan" id="kobo.69.1" xmlns="http://www.w3.org/1999/xhtml">: Cleared.</span></li>
<li class="bulletList"><strong class="screenText"><span class="koboSpan" id="kobo.70.1" xmlns="http://www.w3.org/1999/xhtml">Enable native AOT publish</span></strong><span class="koboSpan" id="kobo.71.1" xmlns="http://www.w3.org/1999/xhtml">: Cleared.</span></li>
</ul>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.72.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><code class="inlineCode"><span class="koboSpan" id="kobo.73.1" xmlns="http://www.w3.org/1999/xhtml">WorkingWithTasks</span></code><span class="koboSpan" id="kobo.74.1" xmlns="http://www.w3.org/1999/xhtml"> project, globally and statically import the </span><code class="inlineCode"><span class="koboSpan" id="kobo.75.1" xmlns="http://www.w3.org/1999/xhtml">System.Console</span></code><span class="koboSpan" id="kobo.76.1" xmlns="http://www.w3.org/1999/xhtml"> class and treat warnings as errors.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.77.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><code class="inlineCode"><span class="koboSpan" id="kobo.78.1" xmlns="http://www.w3.org/1999/xhtml">WorkingWithTasks</span></code><span class="koboSpan" id="kobo.79.1" xmlns="http://www.w3.org/1999/xhtml"> project, add a new class file named </span><code class="inlineCode"><span class="koboSpan" id="kobo.80.1" xmlns="http://www.w3.org/1999/xhtml">Program.Helpers.cs</span></code><span class="koboSpan" id="kobo.81.1" xmlns="http://www.w3.org/1999/xhtml">.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.82.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.83.1" xmlns="http://www.w3.org/1999/xhtml">Program.Helpers.cs</span></code><span class="koboSpan" id="kobo.84.1" xmlns="http://www.w3.org/1999/xhtml">, delete any existing statements, and then define a partial </span><code class="inlineCode"><span class="koboSpan" id="kobo.85.1" xmlns="http://www.w3.org/1999/xhtml">Program</span></code><span class="koboSpan" id="kobo.86.1" xmlns="http://www.w3.org/1999/xhtml"> class with methods to output a section title and a task title, and to </span><a id="_idIndexMarker418"/><span class="koboSpan" id="kobo.87.1" xmlns="http://www.w3.org/1999/xhtml">output information about the current thread, each in different colors to make them easier to identify in output, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.88.1" xmlns="http://www.w3.org/1999/xhtml">partial</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.89.1" xmlns="http://www.w3.org/1999/xhtml">class</span></span> <span class="hljs-title"><span class="koboSpan" id="kobo.90.1" xmlns="http://www.w3.org/1999/xhtml">Program</span></span><span class="koboSpan" id="kobo.91.1" xmlns="http://www.w3.org/1999/xhtml">
{
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.92.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.93.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.94.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.95.1" xmlns="http://www.w3.org/1999/xhtml">SectionTitle</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.96.1" xmlns="http://www.w3.org/1999/xhtml">(</span></span><span class="hljs-built_in"><span class="koboSpan" id="kobo.97.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="hljs-params"><span class="koboSpan" id="kobo.98.1" xmlns="http://www.w3.org/1999/xhtml"> title</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.99.1" xmlns="http://www.w3.org/1999/xhtml">)</span></span><span class="koboSpan" id="kobo.100.1" xmlns="http://www.w3.org/1999/xhtml">
  {
    ConsoleColor previousColor = ForegroundColor;
    ForegroundColor = ConsoleColor.DarkYellow;
    WriteLine(</span><span class="hljs-string"><span class="koboSpan" id="kobo.101.1" xmlns="http://www.w3.org/1999/xhtml">$"*** </span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.102.1" xmlns="http://www.w3.org/1999/xhtml">{title}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.103.1" xmlns="http://www.w3.org/1999/xhtml">"</span></span><span class="koboSpan" id="kobo.104.1" xmlns="http://www.w3.org/1999/xhtml">);
    ForegroundColor = previousColor;
  }
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.105.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.106.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.107.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.108.1" xmlns="http://www.w3.org/1999/xhtml">TaskTitle</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.109.1" xmlns="http://www.w3.org/1999/xhtml">(</span></span><span class="hljs-built_in"><span class="koboSpan" id="kobo.110.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="hljs-params"><span class="koboSpan" id="kobo.111.1" xmlns="http://www.w3.org/1999/xhtml"> title</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.112.1" xmlns="http://www.w3.org/1999/xhtml">)</span></span><span class="koboSpan" id="kobo.113.1" xmlns="http://www.w3.org/1999/xhtml">
  {
    ConsoleColor previousColor = ForegroundColor;
    ForegroundColor = ConsoleColor.Green;
    WriteLine(</span><span class="hljs-string"><span class="koboSpan" id="kobo.114.1" xmlns="http://www.w3.org/1999/xhtml">$"</span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.115.1" xmlns="http://www.w3.org/1999/xhtml">{title}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.116.1" xmlns="http://www.w3.org/1999/xhtml">"</span></span><span class="koboSpan" id="kobo.117.1" xmlns="http://www.w3.org/1999/xhtml">);
    ForegroundColor = previousColor;
  }
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.118.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.119.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.120.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.121.1" xmlns="http://www.w3.org/1999/xhtml">OutputThreadInfo</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.122.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.123.1" xmlns="http://www.w3.org/1999/xhtml">
  {
    Thread t = Thread.CurrentThread;
    ConsoleColor previousColor = ForegroundColor;
    ForegroundColor = ConsoleColor.DarkCyan;
    WriteLine(
      </span><span class="hljs-string"><span class="koboSpan" id="kobo.124.1" xmlns="http://www.w3.org/1999/xhtml">"Thread Id: {0}, Priority: {1}, Background: {2}, Name: {3}"</span></span><span class="koboSpan" id="kobo.125.1" xmlns="http://www.w3.org/1999/xhtml">,
      t.ManagedThreadId, t.Priority, t.IsBackground, t.Name ?? </span><span class="hljs-string"><span class="koboSpan" id="kobo.126.1" xmlns="http://www.w3.org/1999/xhtml">"</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.127.1" xmlns="http://www.w3.org/1999/xhtml">null"</span></span><span class="koboSpan" id="kobo.128.1" xmlns="http://www.w3.org/1999/xhtml">);
    ForegroundColor = previousColor;
  }
}
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.129.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><code class="inlineCode"><span class="koboSpan" id="kobo.130.1" xmlns="http://www.w3.org/1999/xhtml">WorkingWithTasks</span></code><span class="koboSpan" id="kobo.131.1" xmlns="http://www.w3.org/1999/xhtml"> project, add a new class file named </span><code class="inlineCode"><span class="koboSpan" id="kobo.132.1" xmlns="http://www.w3.org/1999/xhtml">Program.Methods.cs</span></code><span class="koboSpan" id="kobo.133.1" xmlns="http://www.w3.org/1999/xhtml">.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.134.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.135.1" xmlns="http://www.w3.org/1999/xhtml">Program.Methods.cs</span></code><span class="koboSpan" id="kobo.136.1" xmlns="http://www.w3.org/1999/xhtml">, delete any existing statements, and then add three methods that simulate work, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.137.1" xmlns="http://www.w3.org/1999/xhtml">partial</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.138.1" xmlns="http://www.w3.org/1999/xhtml">class</span></span> <span class="hljs-title"><span class="koboSpan" id="kobo.139.1" xmlns="http://www.w3.org/1999/xhtml">Program</span></span><span class="koboSpan" id="kobo.140.1" xmlns="http://www.w3.org/1999/xhtml">
{
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.141.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.142.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.143.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.144.1" xmlns="http://www.w3.org/1999/xhtml">MethodA</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.145.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.146.1" xmlns="http://www.w3.org/1999/xhtml">
  {
    TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.147.1" xmlns="http://www.w3.org/1999/xhtml">"Starting Method A..."</span></span><span class="koboSpan" id="kobo.148.1" xmlns="http://www.w3.org/1999/xhtml">);
    OutputThreadInfo();
    Thread.Sleep(</span><span class="hljs-number"><span class="koboSpan" id="kobo.149.1" xmlns="http://www.w3.org/1999/xhtml">3000</span></span><span class="koboSpan" id="kobo.150.1" xmlns="http://www.w3.org/1999/xhtml">); </span><span class="hljs-comment"><span class="koboSpan" id="kobo.151.1" xmlns="http://www.w3.org/1999/xhtml">// Simulate three seconds of work.</span></span><span class="koboSpan" id="kobo.152.1" xmlns="http://www.w3.org/1999/xhtml">
    TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.153.1" xmlns="http://www.w3.org/1999/xhtml">"Finished Method A."</span></span><span class="koboSpan" id="kobo.154.1" xmlns="http://www.w3.org/1999/xhtml">);
  }
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.155.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.156.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.157.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.158.1" xmlns="http://www.w3.org/1999/xhtml">MethodB</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.159.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.160.1" xmlns="http://www.w3.org/1999/xhtml">
  {
    TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.161.1" xmlns="http://www.w3.org/1999/xhtml">"Starting Method B..."</span></span><span class="koboSpan" id="kobo.162.1" xmlns="http://www.w3.org/1999/xhtml">);
    OutputThreadInfo();
    Thread.Sleep(</span><span class="hljs-number"><span class="koboSpan" id="kobo.163.1" xmlns="http://www.w3.org/1999/xhtml">2000</span></span><span class="koboSpan" id="kobo.164.1" xmlns="http://www.w3.org/1999/xhtml">); </span><span class="hljs-comment"><span class="koboSpan" id="kobo.165.1" xmlns="http://www.w3.org/1999/xhtml">// Simulate two seconds of work.</span></span><span class="koboSpan" id="kobo.166.1" xmlns="http://www.w3.org/1999/xhtml">
    TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.167.1" xmlns="http://www.w3.org/1999/xhtml">"Finished Method B."</span></span><span class="koboSpan" id="kobo.168.1" xmlns="http://www.w3.org/1999/xhtml">);
  }
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.169.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.170.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.171.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.172.1" xmlns="http://www.w3.org/1999/xhtml">MethodC</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.173.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.174.1" xmlns="http://www.w3.org/1999/xhtml">
  {
    TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.175.1" xmlns="http://www.w3.org/1999/xhtml">"Starting Method C..."</span></span><span class="koboSpan" id="kobo.176.1" xmlns="http://www.w3.org/1999/xhtml">);
    OutputThreadInfo();
    Thread.Sleep(</span><span class="hljs-number"><span class="koboSpan" id="kobo.177.1" xmlns="http://www.w3.org/1999/xhtml">1000</span></span><span class="koboSpan" id="kobo.178.1" xmlns="http://www.w3.org/1999/xhtml">); </span><span class="hljs-comment"><span class="koboSpan" id="kobo.179.1" xmlns="http://www.w3.org/1999/xhtml">// Simulate one second of work.</span></span><span class="koboSpan" id="kobo.180.1" xmlns="http://www.w3.org/1999/xhtml">
    TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.181.1" xmlns="http://www.w3.org/1999/xhtml">"Finished Method C."</span></span><span class="koboSpan" id="kobo.182.1" xmlns="http://www.w3.org/1999/xhtml">);
  }
}
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.183.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.184.1" xmlns="http://www.w3.org/1999/xhtml">Program.cs</span></code><span class="koboSpan" id="kobo.185.1" xmlns="http://www.w3.org/1999/xhtml">, delete</span><a id="_idIndexMarker419"/><span class="koboSpan" id="kobo.186.1" xmlns="http://www.w3.org/1999/xhtml"> the existing statements and then add statements to call the helper method to output information about the thread, define and start a stopwatch, call the three simulated work methods, and then output the milliseconds elapsed, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.187.1" xmlns="http://www.w3.org/1999/xhtml">using</span></span><span class="koboSpan" id="kobo.188.1" xmlns="http://www.w3.org/1999/xhtml"> System.Diagnostics; </span><span class="hljs-comment"><span class="koboSpan" id="kobo.189.1" xmlns="http://www.w3.org/1999/xhtml">// To use Stopwatch.</span></span><span class="koboSpan" id="kobo.190.1" xmlns="http://www.w3.org/1999/xhtml">
OutputThreadInfo();
Stopwatch timer = Stopwatch.StartNew();
SectionTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.191.1" xmlns="http://www.w3.org/1999/xhtml">"Running methods synchronously on one thread."</span></span><span class="koboSpan" id="kobo.192.1" xmlns="http://www.w3.org/1999/xhtml">); 
MethodA();
MethodB();
MethodC();
WriteLine(</span><span class="hljs-string"><span class="koboSpan" id="kobo.193.1" xmlns="http://www.w3.org/1999/xhtml">$"</span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.194.1" xmlns="http://www.w3.org/1999/xhtml">{timer.ElapsedMilliseconds:#,##</span></span><span class="hljs-number"><span class="koboSpan" id="kobo.195.1" xmlns="http://www.w3.org/1999/xhtml">0</span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.196.1" xmlns="http://www.w3.org/1999/xhtml">}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.197.1" xmlns="http://www.w3.org/1999/xhtml">ms elapsed."</span></span><span class="koboSpan" id="kobo.198.1" xmlns="http://www.w3.org/1999/xhtml">);
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.199.1" xmlns="http://www.w3.org/1999/xhtml">Run </span><a id="_idIndexMarker420"/><span class="koboSpan" id="kobo.200.1" xmlns="http://www.w3.org/1999/xhtml">the code, wait for all three methods to finish executing, and then review the result, noting that when there is only one unnamed foreground thread doing the work, the total time required is just over 6 seconds, as shown in the following output:
        </span><pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.201.1" xmlns="http://www.w3.org/1999/xhtml">Thread Id: 1, Priority: Normal, Background: False, Name: null
*** Running methods synchronously on one thread.
</span><span class="koboSpan" id="kobo.201.2" xmlns="http://www.w3.org/1999/xhtml">Starting Method A...
</span><span class="koboSpan" id="kobo.201.3" xmlns="http://www.w3.org/1999/xhtml">Thread Id: 1, Priority: Normal, Background: False, Name: null
Finished Method A.
</span><span class="koboSpan" id="kobo.201.4" xmlns="http://www.w3.org/1999/xhtml">Starting Method B...
</span><span class="koboSpan" id="kobo.201.5" xmlns="http://www.w3.org/1999/xhtml">Thread Id: 1, Priority: Normal, Background: False, Name: null
Finished Method B.
</span><span class="koboSpan" id="kobo.201.6" xmlns="http://www.w3.org/1999/xhtml">Starting Method C...
</span><span class="koboSpan" id="kobo.201.7" xmlns="http://www.w3.org/1999/xhtml">Thread Id: 1, Priority: Normal, Background: False, Name: null
Finished Method C.
</span><span class="koboSpan" id="kobo.201.8" xmlns="http://www.w3.org/1999/xhtml">6,028ms elapsed.
</span></code></pre>
</li>
</ol>
<h2 class="heading-2" id="_idParaDest-199"><span class="koboSpan" id="kobo.202.1" xmlns="http://www.w3.org/1999/xhtml">Running multiple actions asynchronously using tasks</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.203.1" xmlns="http://www.w3.org/1999/xhtml">The </span><code class="inlineCode"><span class="koboSpan" id="kobo.204.1" xmlns="http://www.w3.org/1999/xhtml">Thread</span></code><span class="koboSpan" id="kobo.205.1" xmlns="http://www.w3.org/1999/xhtml"> class</span><a id="_idIndexMarker421"/><span class="koboSpan" id="kobo.206.1" xmlns="http://www.w3.org/1999/xhtml"> has been available since the first version of .NET in 2002 and can be used to create new threads and manage them, but it can be tricky to work with directly.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.207.1" xmlns="http://www.w3.org/1999/xhtml">.NET Framework 4.0 introduced the </span><code class="inlineCode"><span class="koboSpan" id="kobo.208.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.209.1" xmlns="http://www.w3.org/1999/xhtml"> class in 2010, which represents an asynchronous operation. </span><span class="koboSpan" id="kobo.209.2" xmlns="http://www.w3.org/1999/xhtml">A task is a high-level abstraction around the operating system thread that performs the operation, and the </span><code class="inlineCode"><span class="koboSpan" id="kobo.210.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.211.1" xmlns="http://www.w3.org/1999/xhtml"> class enables easier creation and management of any underlying threads. </span><span class="koboSpan" id="kobo.211.2" xmlns="http://www.w3.org/1999/xhtml">Managing multiple threads wrapped in tasks will allow our code to execute at the same time, aka </span><strong class="keyWord"><span class="koboSpan" id="kobo.212.1" xmlns="http://www.w3.org/1999/xhtml">asynchronously</span></strong><span class="koboSpan" id="kobo.213.1" xmlns="http://www.w3.org/1999/xhtml">.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.214.1" xmlns="http://www.w3.org/1999/xhtml">Each </span><code class="inlineCode"><span class="koboSpan" id="kobo.215.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.216.1" xmlns="http://www.w3.org/1999/xhtml"> has a </span><code class="inlineCode"><span class="koboSpan" id="kobo.217.1" xmlns="http://www.w3.org/1999/xhtml">Status</span></code><span class="koboSpan" id="kobo.218.1" xmlns="http://www.w3.org/1999/xhtml"> property and a </span><code class="inlineCode"><span class="koboSpan" id="kobo.219.1" xmlns="http://www.w3.org/1999/xhtml">CreationOptions</span></code><span class="koboSpan" id="kobo.220.1" xmlns="http://www.w3.org/1999/xhtml"> property. </span><span class="koboSpan" id="kobo.220.2" xmlns="http://www.w3.org/1999/xhtml">A </span><code class="inlineCode"><span class="koboSpan" id="kobo.221.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.222.1" xmlns="http://www.w3.org/1999/xhtml"> has a </span><code class="inlineCode"><span class="koboSpan" id="kobo.223.1" xmlns="http://www.w3.org/1999/xhtml">ContinueWith</span></code><span class="koboSpan" id="kobo.224.1" xmlns="http://www.w3.org/1999/xhtml"> method that can be customized with the </span><code class="inlineCode"><span class="koboSpan" id="kobo.225.1" xmlns="http://www.w3.org/1999/xhtml">TaskContinuationOptions</span></code><span class="koboSpan" id="kobo.226.1" xmlns="http://www.w3.org/1999/xhtml"> enum, and it can be managed with the </span><code class="inlineCode"><span class="koboSpan" id="kobo.227.1" xmlns="http://www.w3.org/1999/xhtml">TaskFactory</span></code><span class="koboSpan" id="kobo.228.1" xmlns="http://www.w3.org/1999/xhtml"> class.</span></p>
<h2 class="heading-2" id="_idParaDest-200"><span class="koboSpan" id="kobo.229.1" xmlns="http://www.w3.org/1999/xhtml">Starting tasks</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.230.1" xmlns="http://www.w3.org/1999/xhtml">We will look at</span><a id="_idIndexMarker422"/><span class="koboSpan" id="kobo.231.1" xmlns="http://www.w3.org/1999/xhtml"> three ways to start the methods using </span><code class="inlineCode"><span class="koboSpan" id="kobo.232.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.233.1" xmlns="http://www.w3.org/1999/xhtml"> instances. </span><span class="koboSpan" id="kobo.233.2" xmlns="http://www.w3.org/1999/xhtml">There are links in the GitHub repository to articles that discuss the pros and cons. </span><span class="koboSpan" id="kobo.233.3" xmlns="http://www.w3.org/1999/xhtml">Each has a slightly different syntax, but they all define a </span><code class="inlineCode"><span class="koboSpan" id="kobo.234.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.235.1" xmlns="http://www.w3.org/1999/xhtml"> and start it:</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.236.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.237.1" xmlns="http://www.w3.org/1999/xhtml">Program.cs</span></code><span class="koboSpan" id="kobo.238.1" xmlns="http://www.w3.org/1999/xhtml">, comment out the previous statements that call methods A to C, and then add statements to create and start three tasks, one for each method, as shown highlighted in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="koboSpan" id="kobo.239.1" xmlns="http://www.w3.org/1999/xhtml">Stopwatch timer = Stopwatch.StartNew();
</span><span class="code-highlight"><strong class="hljs-comment-slc"><span class="koboSpan" id="kobo.240.1" xmlns="http://www.w3.org/1999/xhtml">/*</span></strong></span>
<span class="hljs-comment"><span class="koboSpan" id="kobo.241.1" xmlns="http://www.w3.org/1999/xhtml">SectionTitle("Running methods synchronously on one thread.");</span></span>
<span class="hljs-comment"><span class="koboSpan" id="kobo.242.1" xmlns="http://www.w3.org/1999/xhtml">MethodA();</span></span>
<span class="hljs-comment"><span class="koboSpan" id="kobo.243.1" xmlns="http://www.w3.org/1999/xhtml">MethodB();</span></span>
<span class="hljs-comment"><span class="koboSpan" id="kobo.244.1" xmlns="http://www.w3.org/1999/xhtml">MethodC();</span></span>
<span class="code-highlight"><strong class="hljs-comment-slc"><span class="koboSpan" id="kobo.245.1" xmlns="http://www.w3.org/1999/xhtml">*/</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.246.1" xmlns="http://www.w3.org/1999/xhtml">SectionTitle(</span></strong><strong class="hljs-string-slc"><span class="koboSpan" id="kobo.247.1" xmlns="http://www.w3.org/1999/xhtml">"Running methods asynchronously on multiple threads."</span></strong><strong class="hljs-slc"><span class="koboSpan" id="kobo.248.1" xmlns="http://www.w3.org/1999/xhtml">); </span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.249.1" xmlns="http://www.w3.org/1999/xhtml">Task taskA = </span></strong><strong class="hljs-keyword-slc"><span class="koboSpan" id="kobo.250.1" xmlns="http://www.w3.org/1999/xhtml">new</span></strong><strong class="hljs-slc"><span class="koboSpan" id="kobo.251.1" xmlns="http://www.w3.org/1999/xhtml">(MethodA);</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.252.1" xmlns="http://www.w3.org/1999/xhtml">taskA.Start();</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.253.1" xmlns="http://www.w3.org/1999/xhtml">Task taskB = Task.Factory.StartNew(MethodB); </span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.254.1" xmlns="http://www.w3.org/1999/xhtml">Task taskC = Task.Run(MethodC);</span></strong></span><span class="koboSpan" id="kobo.255.1" xmlns="http://www.w3.org/1999/xhtml">
WriteLine(</span><span class="hljs-string"><span class="koboSpan" id="kobo.256.1" xmlns="http://www.w3.org/1999/xhtml">$"</span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.257.1" xmlns="http://www.w3.org/1999/xhtml">{timer.ElapsedMilliseconds:#,##</span></span><span class="hljs-number"><span class="koboSpan" id="kobo.258.1" xmlns="http://www.w3.org/1999/xhtml">0</span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.259.1" xmlns="http://www.w3.org/1999/xhtml">}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.260.1" xmlns="http://www.w3.org/1999/xhtml">ms elapsed."</span></span><span class="koboSpan" id="kobo.261.1" xmlns="http://www.w3.org/1999/xhtml">);
</span></code></pre>
<div class="note">
<p class="normal"><span class="koboSpan" id="kobo.262.1" xmlns="http://www.w3.org/1999/xhtml">Instead of commenting out the previous statements, you could let them run, but then make sure to call the </span><code class="inlineCode"><span class="koboSpan" id="kobo.263.1" xmlns="http://www.w3.org/1999/xhtml">timer.Restart()</span></code><span class="koboSpan" id="kobo.264.1" xmlns="http://www.w3.org/1999/xhtml"> method after outputting a new section title to reset the timings for each section.</span></p>
</div></li>
</ol>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="2"><span class="koboSpan" id="kobo.265.1" xmlns="http://www.w3.org/1999/xhtml">Run the code, view the result, and note that the elapsed milliseconds appear almost immediately. </span><span class="koboSpan" id="kobo.265.2" xmlns="http://www.w3.org/1999/xhtml">This is because each of the three methods is now being executed by three new background worker threads allocated from</span><a id="_idIndexMarker423"/><span class="koboSpan" id="kobo.266.1" xmlns="http://www.w3.org/1999/xhtml"> the </span><strong class="keyWord"><span class="koboSpan" id="kobo.267.1" xmlns="http://www.w3.org/1999/xhtml">thread pool (TP)</span></strong><span class="koboSpan" id="kobo.268.1" xmlns="http://www.w3.org/1999/xhtml">, as shown</span><a id="_idIndexMarker424"/><span class="koboSpan" id="kobo.269.1" xmlns="http://www.w3.org/1999/xhtml"> in the following output:
        </span><pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.270.1" xmlns="http://www.w3.org/1999/xhtml">*** Running methods asynchronously on multiple threads.
</span><span class="koboSpan" id="kobo.270.2" xmlns="http://www.w3.org/1999/xhtml">Starting Method A...
</span><span class="koboSpan" id="kobo.270.3" xmlns="http://www.w3.org/1999/xhtml">Thread Id: 4, Priority: Normal, Background: True, Name: .NET TP Worker
Starting Method C...
</span><span class="koboSpan" id="kobo.270.4" xmlns="http://www.w3.org/1999/xhtml">Thread Id: 7, Priority: Normal, Background: True, Name: .NET TP Worker
Starting Method B...
</span><span class="koboSpan" id="kobo.270.5" xmlns="http://www.w3.org/1999/xhtml">Thread Id: 6, Priority: Normal, Background: True, Name: .NET TP Worker
6ms elapsed.
</span></code></pre>
</li>
</ol>
<div class="note">
<p class="normal"><span class="koboSpan" id="kobo.271.1" xmlns="http://www.w3.org/1999/xhtml">It is even likely that the console app will end before one or even all the tasks have a chance to start and write to the console!</span></p>
</div>
<h2 class="heading-2" id="_idParaDest-201"><span class="koboSpan" id="kobo.272.1" xmlns="http://www.w3.org/1999/xhtml">Waiting for tasks</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.273.1" xmlns="http://www.w3.org/1999/xhtml">Sometimes, you </span><a id="_idIndexMarker425"/><span class="koboSpan" id="kobo.274.1" xmlns="http://www.w3.org/1999/xhtml">need to wait for a task to complete before continuing. </span><span class="koboSpan" id="kobo.274.2" xmlns="http://www.w3.org/1999/xhtml">To do this, you can use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.275.1" xmlns="http://www.w3.org/1999/xhtml">Wait</span></code><span class="koboSpan" id="kobo.276.1" xmlns="http://www.w3.org/1999/xhtml"> method on a </span><code class="inlineCode"><span class="koboSpan" id="kobo.277.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.278.1" xmlns="http://www.w3.org/1999/xhtml"> instance, or the </span><code class="inlineCode"><span class="koboSpan" id="kobo.279.1" xmlns="http://www.w3.org/1999/xhtml">WaitAll</span></code><span class="koboSpan" id="kobo.280.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><code class="inlineCode"><span class="koboSpan" id="kobo.281.1" xmlns="http://www.w3.org/1999/xhtml">WaitAny</span></code><span class="koboSpan" id="kobo.282.1" xmlns="http://www.w3.org/1999/xhtml"> static methods on an array of tasks, as described in </span><em class="italic"><span class="koboSpan" id="kobo.283.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.1</span></em><span class="koboSpan" id="kobo.284.1" xmlns="http://www.w3.org/1999/xhtml">:</span></p>
<table class="table-container" id="table001-3">
<tbody>
<tr>
<td class="table-cell">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.285.1" xmlns="http://www.w3.org/1999/xhtml">Method</span></strong></p>
</td>
<td class="table-cell">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.286.1" xmlns="http://www.w3.org/1999/xhtml">Description</span></strong></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.287.1" xmlns="http://www.w3.org/1999/xhtml">t.Wait()</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><span class="koboSpan" id="kobo.288.1" xmlns="http://www.w3.org/1999/xhtml">This waits for the task instance named </span><code class="inlineCode"><span class="koboSpan" id="kobo.289.1" xmlns="http://www.w3.org/1999/xhtml">t</span></code><span class="koboSpan" id="kobo.290.1" xmlns="http://www.w3.org/1999/xhtml"> to complete execution.</span></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.291.1" xmlns="http://www.w3.org/1999/xhtml">Task.WaitAny(Task[])</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><span class="koboSpan" id="kobo.292.1" xmlns="http://www.w3.org/1999/xhtml">This waits for any of the tasks in the array to complete execution.</span></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.293.1" xmlns="http://www.w3.org/1999/xhtml">Task.WaitAll(Task[])</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><span class="koboSpan" id="kobo.294.1" xmlns="http://www.w3.org/1999/xhtml">This waits for all the tasks in the array to complete execution.</span></p>
</td>
</tr>
</tbody>
</table>
<p class="packt_figref"><span class="koboSpan" id="kobo.295.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.1: Task class Wait methods</span></p>
<h2 class="heading-2" id="_idParaDest-202"><span class="koboSpan" id="kobo.296.1" xmlns="http://www.w3.org/1999/xhtml">Using wait methods with tasks</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.297.1" xmlns="http://www.w3.org/1999/xhtml">Let’s see </span><a id="_idIndexMarker426"/><span class="koboSpan" id="kobo.298.1" xmlns="http://www.w3.org/1999/xhtml">how we can use these wait methods to fix the problem with our console app:</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.299.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.300.1" xmlns="http://www.w3.org/1999/xhtml">Program.cs</span></code><span class="koboSpan" id="kobo.301.1" xmlns="http://www.w3.org/1999/xhtml">, after creating the three tasks and before outputting the elapsed time, add statements to combine references to the three tasks into an array and pass them to the </span><code class="inlineCode"><span class="koboSpan" id="kobo.302.1" xmlns="http://www.w3.org/1999/xhtml">WaitAll</span></code><span class="koboSpan" id="kobo.303.1" xmlns="http://www.w3.org/1999/xhtml"> method, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="koboSpan" id="kobo.304.1" xmlns="http://www.w3.org/1999/xhtml">Task[] tasks = { taskA, taskB, taskC };
Task.WaitAll(tasks);
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.305.1" xmlns="http://www.w3.org/1999/xhtml">Run </span><a id="_idIndexMarker427"/><span class="koboSpan" id="kobo.306.1" xmlns="http://www.w3.org/1999/xhtml">the code and view the result, and note the original thread will pause on the call to </span><code class="inlineCode"><span class="koboSpan" id="kobo.307.1" xmlns="http://www.w3.org/1999/xhtml">WaitAll</span></code><span class="koboSpan" id="kobo.308.1" xmlns="http://www.w3.org/1999/xhtml">, waiting for all three tasks to finish before outputting the elapsed time, which is a little over 3 seconds, as shown in the following output:
        </span><pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.309.1" xmlns="http://www.w3.org/1999/xhtml">Starting Method A...
</span><span class="koboSpan" id="kobo.309.2" xmlns="http://www.w3.org/1999/xhtml">Starting Method B...
</span><span class="koboSpan" id="kobo.309.3" xmlns="http://www.w3.org/1999/xhtml">Thread Id: 4, Priority: Normal, Background: True, Name: .NET TP Worker
Thread Id: 6, Priority: Normal, Background: True, Name: .NET TP Worker
Starting Method C...
</span><span class="koboSpan" id="kobo.309.4" xmlns="http://www.w3.org/1999/xhtml">Thread Id: 7, Priority: Normal, Background: True, Name: .NET TP Worker
Finished Method C.
</span><span class="koboSpan" id="kobo.309.5" xmlns="http://www.w3.org/1999/xhtml">Finished Method B.
</span><span class="koboSpan" id="kobo.309.6" xmlns="http://www.w3.org/1999/xhtml">Finished Method A.
</span><span class="koboSpan" id="kobo.309.7" xmlns="http://www.w3.org/1999/xhtml">3,013ms elapsed.
</span></code></pre>
</li>
</ol>
<p class="normal"><span class="koboSpan" id="kobo.310.1" xmlns="http://www.w3.org/1999/xhtml">The three new threads execute their code simultaneously, and they can potentially start in any order. </span><code class="inlineCode"><span class="koboSpan" id="kobo.311.1" xmlns="http://www.w3.org/1999/xhtml">MethodC</span></code><span class="koboSpan" id="kobo.312.1" xmlns="http://www.w3.org/1999/xhtml"> should finish first because it takes only 1 second, then </span><code class="inlineCode"><span class="koboSpan" id="kobo.313.1" xmlns="http://www.w3.org/1999/xhtml">MethodB</span></code><span class="koboSpan" id="kobo.314.1" xmlns="http://www.w3.org/1999/xhtml">, which takes 2 seconds, and finally, </span><code class="inlineCode"><span class="koboSpan" id="kobo.315.1" xmlns="http://www.w3.org/1999/xhtml">MethodA</span></code><span class="koboSpan" id="kobo.316.1" xmlns="http://www.w3.org/1999/xhtml">, because it takes 3 seconds.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.317.1" xmlns="http://www.w3.org/1999/xhtml">However, the actual CPU used has a big effect on the results. </span><span class="koboSpan" id="kobo.317.2" xmlns="http://www.w3.org/1999/xhtml">It is the CPU that allocates time slices to each process to allow them to execute their threads. </span><span class="koboSpan" id="kobo.317.3" xmlns="http://www.w3.org/1999/xhtml">You have no control over when the methods run.</span></p>
<h2 class="heading-2" id="_idParaDest-203"><span class="koboSpan" id="kobo.318.1" xmlns="http://www.w3.org/1999/xhtml">Continuing with another task</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.319.1" xmlns="http://www.w3.org/1999/xhtml">If all three </span><a id="_idIndexMarker428"/><span class="koboSpan" id="kobo.320.1" xmlns="http://www.w3.org/1999/xhtml">tasks can be performed at the same time, then waiting for</span><a id="_idIndexMarker429"/><span class="koboSpan" id="kobo.321.1" xmlns="http://www.w3.org/1999/xhtml"> all tasks to finish will be all we need to do. </span><span class="koboSpan" id="kobo.321.2" xmlns="http://www.w3.org/1999/xhtml">However, often, a task is dependent on the output from another task. </span><span class="koboSpan" id="kobo.321.3" xmlns="http://www.w3.org/1999/xhtml">To handle this scenario, we need to define </span><strong class="keyWord"><span class="koboSpan" id="kobo.322.1" xmlns="http://www.w3.org/1999/xhtml">continuation tasks</span></strong><span class="koboSpan" id="kobo.323.1" xmlns="http://www.w3.org/1999/xhtml">.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.324.1" xmlns="http://www.w3.org/1999/xhtml">We will create some methods to simulate a call to a web service that returns a monetary amount, which then needs to be used to retrieve how many products cost more than that amount in a database. </span><span class="koboSpan" id="kobo.324.2" xmlns="http://www.w3.org/1999/xhtml">The result returned from the first method needs to be fed into the input </span><a id="_idIndexMarker430"/><span class="koboSpan" id="kobo.325.1" xmlns="http://www.w3.org/1999/xhtml">of the second method. </span><span class="koboSpan" id="kobo.325.2" xmlns="http://www.w3.org/1999/xhtml">This time, instead of waiting for fixed amounts of time, we will use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.326.1" xmlns="http://www.w3.org/1999/xhtml">Random</span></code><span class="koboSpan" id="kobo.327.1" xmlns="http://www.w3.org/1999/xhtml"> class to wait for a random interval between 2 and 4 seconds for each method call to simulate the work:</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.328.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.329.1" xmlns="http://www.w3.org/1999/xhtml">Program.Methods.cs</span></code><span class="koboSpan" id="kobo.330.1" xmlns="http://www.w3.org/1999/xhtml">, add two methods that simulate calling a web service and a database-stored procedure, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.331.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.332.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-built_in"><span class="koboSpan" id="kobo.333.1" xmlns="http://www.w3.org/1999/xhtml">decimal</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.334.1" xmlns="http://www.w3.org/1999/xhtml">CallWebService</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.335.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.336.1" xmlns="http://www.w3.org/1999/xhtml">
{
  TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.337.1" xmlns="http://www.w3.org/1999/xhtml">"Starting call to web service..."</span></span><span class="koboSpan" id="kobo.338.1" xmlns="http://www.w3.org/1999/xhtml">);
  OutputThreadInfo();
  Thread.Sleep(Random.Shared.Next(</span><span class="hljs-number"><span class="koboSpan" id="kobo.339.1" xmlns="http://www.w3.org/1999/xhtml">2000</span></span><span class="koboSpan" id="kobo.340.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="hljs-number"><span class="koboSpan" id="kobo.341.1" xmlns="http://www.w3.org/1999/xhtml">4000</span></span><span class="koboSpan" id="kobo.342.1" xmlns="http://www.w3.org/1999/xhtml">));
  TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.343.1" xmlns="http://www.w3.org/1999/xhtml">"Finished call to web service."</span></span><span class="koboSpan" id="kobo.344.1" xmlns="http://www.w3.org/1999/xhtml">);
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.345.1" xmlns="http://www.w3.org/1999/xhtml">return</span></span> <span class="hljs-number"><span class="koboSpan" id="kobo.346.1" xmlns="http://www.w3.org/1999/xhtml">89.99</span></span><span class="koboSpan" id="kobo.347.1" xmlns="http://www.w3.org/1999/xhtml">M;
}
</span><span class="hljs-keyword"><span class="koboSpan" id="kobo.348.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.349.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-built_in"><span class="koboSpan" id="kobo.350.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.351.1" xmlns="http://www.w3.org/1999/xhtml">CallStoredProcedure</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.352.1" xmlns="http://www.w3.org/1999/xhtml">(</span></span><span class="hljs-built_in"><span class="koboSpan" id="kobo.353.1" xmlns="http://www.w3.org/1999/xhtml">decimal</span></span><span class="hljs-params"><span class="koboSpan" id="kobo.354.1" xmlns="http://www.w3.org/1999/xhtml"> amount</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.355.1" xmlns="http://www.w3.org/1999/xhtml">)</span></span><span class="koboSpan" id="kobo.356.1" xmlns="http://www.w3.org/1999/xhtml">
{
  TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.357.1" xmlns="http://www.w3.org/1999/xhtml">"Starting call to stored procedure..."</span></span><span class="koboSpan" id="kobo.358.1" xmlns="http://www.w3.org/1999/xhtml">);
  OutputThreadInfo();
  Thread.Sleep((Random.Shared.Next(</span><span class="hljs-number"><span class="koboSpan" id="kobo.359.1" xmlns="http://www.w3.org/1999/xhtml">2000</span></span><span class="koboSpan" id="kobo.360.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="hljs-number"><span class="koboSpan" id="kobo.361.1" xmlns="http://www.w3.org/1999/xhtml">4000</span></span><span class="koboSpan" id="kobo.362.1" xmlns="http://www.w3.org/1999/xhtml">));
  TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.363.1" xmlns="http://www.w3.org/1999/xhtml">"Finished call to stored procedure."</span></span><span class="koboSpan" id="kobo.364.1" xmlns="http://www.w3.org/1999/xhtml">);
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.365.1" xmlns="http://www.w3.org/1999/xhtml">return</span></span> <span class="hljs-string"><span class="koboSpan" id="kobo.366.1" xmlns="http://www.w3.org/1999/xhtml">$"12 products cost more than </span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.367.1" xmlns="http://www.w3.org/1999/xhtml">{amount:C}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.368.1" xmlns="http://www.w3.org/1999/xhtml">."</span></span><span class="koboSpan" id="kobo.369.1" xmlns="http://www.w3.org/1999/xhtml">;
}
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.370.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.371.1" xmlns="http://www.w3.org/1999/xhtml">Program.cs</span></code><span class="koboSpan" id="kobo.372.1" xmlns="http://www.w3.org/1999/xhtml">, comment out the statements for the previous three tasks, and then add statements to start a task to call the web service and then pass its return value to a task that starts the database-stored procedure, as shown highlighted in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.373.1" xmlns="http://www.w3.org/1999/xhtml">SectionTitle(</span></strong><strong class="hljs-string-slc"><span class="koboSpan" id="kobo.374.1" xmlns="http://www.w3.org/1999/xhtml">"Passing the result of one task as an input into another."</span></strong><strong class="hljs-slc"><span class="koboSpan" id="kobo.375.1" xmlns="http://www.w3.org/1999/xhtml">); </span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.376.1" xmlns="http://www.w3.org/1999/xhtml">Task&lt;</span></strong><strong class="hljs-built_in-slc"><span class="koboSpan" id="kobo.377.1" xmlns="http://www.w3.org/1999/xhtml">string</span></strong><strong class="hljs-slc"><span class="koboSpan" id="kobo.378.1" xmlns="http://www.w3.org/1999/xhtml">&gt; taskServiceThenSProc = Task.Factory</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.379.1" xmlns="http://www.w3.org/1999/xhtml">  .StartNew(CallWebService) </span></strong><strong class="hljs-comment-slc"><span class="koboSpan" id="kobo.380.1" xmlns="http://www.w3.org/1999/xhtml">// returns Task&lt;decimal&gt;</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.381.1" xmlns="http://www.w3.org/1999/xhtml">  .ContinueWith(previousTask =&gt; </span></strong><strong class="hljs-comment-slc"><span class="koboSpan" id="kobo.382.1" xmlns="http://www.w3.org/1999/xhtml">// returns Task&lt;string&gt;</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.383.1" xmlns="http://www.w3.org/1999/xhtml">    CallStoredProcedure(previousTask.Result));</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.384.1" xmlns="http://www.w3.org/1999/xhtml">WriteLine(</span></strong><strong class="hljs-string-slc"><span class="koboSpan" id="kobo.385.1" xmlns="http://www.w3.org/1999/xhtml">$"Result: </span></strong><strong class="hljs-subst-slc"><span class="koboSpan" id="kobo.386.1" xmlns="http://www.w3.org/1999/xhtml">{taskServiceThenSProc.Result}</span></strong><strong class="hljs-string-slc"><span class="koboSpan" id="kobo.387.1" xmlns="http://www.w3.org/1999/xhtml">"</span></strong><strong class="hljs-slc"><span class="koboSpan" id="kobo.388.1" xmlns="http://www.w3.org/1999/xhtml">);</span></strong></span><span class="koboSpan" id="kobo.389.1" xmlns="http://www.w3.org/1999/xhtml">
WriteLine(</span><span class="hljs-string"><span class="koboSpan" id="kobo.390.1" xmlns="http://www.w3.org/1999/xhtml">$"</span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.391.1" xmlns="http://www.w3.org/1999/xhtml">{timer.ElapsedMilliseconds:#,##</span></span><span class="hljs-number"><span class="koboSpan" id="kobo.392.1" xmlns="http://www.w3.org/1999/xhtml">0</span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.393.1" xmlns="http://www.w3.org/1999/xhtml">}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.394.1" xmlns="http://www.w3.org/1999/xhtml">ms elapsed."</span></span><span class="koboSpan" id="kobo.395.1" xmlns="http://www.w3.org/1999/xhtml">);
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.396.1" xmlns="http://www.w3.org/1999/xhtml">Run the code and view the result, as shown in the following output:
        </span><pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.397.1" xmlns="http://www.w3.org/1999/xhtml">Starting call to web service...
</span><span class="koboSpan" id="kobo.397.2" xmlns="http://www.w3.org/1999/xhtml">Thread Id: 4, Priority: Normal, Background: True, Name: .NET TP Worker
Finished call to web service.
</span><span class="koboSpan" id="kobo.397.3" xmlns="http://www.w3.org/1999/xhtml">Starting call to stored procedure...
</span><span class="koboSpan" id="kobo.397.4" xmlns="http://www.w3.org/1999/xhtml">Thread Id: 6, Priority: Normal, Background: True, Name: .NET TP Worker
Finished call to stored procedure.
</span><span class="koboSpan" id="kobo.397.5" xmlns="http://www.w3.org/1999/xhtml">Result: 12 products cost more than £89.99.
</span><span class="koboSpan" id="kobo.397.6" xmlns="http://www.w3.org/1999/xhtml">5,463ms elapsed.
</span></code></pre>
</li>
</ol>
<div class="note">
<p class="normal"><span class="koboSpan" id="kobo.398.1" xmlns="http://www.w3.org/1999/xhtml">The currency symbol is culture-specific so on my computer it uses a £. </span><span class="koboSpan" id="kobo.398.2" xmlns="http://www.w3.org/1999/xhtml">On your computer it will use your culture. </span><span class="koboSpan" id="kobo.398.3" xmlns="http://www.w3.org/1999/xhtml">You will learn how to control cultures in </span><em class="chapterRef"><span class="koboSpan" id="kobo.399.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 7</span></em><span class="koboSpan" id="kobo.400.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.401.1" xmlns="http://www.w3.org/1999/xhtml">Handling Dates, Times, and Internationalization</span></em><span class="koboSpan" id="kobo.402.1" xmlns="http://www.w3.org/1999/xhtml">.</span></p>
</div>
<p class="normal"><span class="koboSpan" id="kobo.403.1" xmlns="http://www.w3.org/1999/xhtml">You might see </span><a id="_idIndexMarker431"/><span class="koboSpan" id="kobo.404.1" xmlns="http://www.w3.org/1999/xhtml">two different threads running the web service and stored procedure calls as in the output above (for example, threads 4 and 6), or the same thread might be reused since it is no longer busy.</span></p>
<h2 class="heading-2" id="_idParaDest-204"><span class="koboSpan" id="kobo.405.1" xmlns="http://www.w3.org/1999/xhtml">Nested and child tasks</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.406.1" xmlns="http://www.w3.org/1999/xhtml">As well as defining </span><a id="_idIndexMarker432"/><span class="koboSpan" id="kobo.407.1" xmlns="http://www.w3.org/1999/xhtml">dependencies between tasks, you can define nested and child tasks. </span><span class="koboSpan" id="kobo.407.2" xmlns="http://www.w3.org/1999/xhtml">A </span><strong class="keyWord"><span class="koboSpan" id="kobo.408.1" xmlns="http://www.w3.org/1999/xhtml">nested task</span></strong><span class="koboSpan" id="kobo.409.1" xmlns="http://www.w3.org/1999/xhtml"> is a </span><a id="_idIndexMarker433"/><span class="koboSpan" id="kobo.410.1" xmlns="http://www.w3.org/1999/xhtml">task that is created inside another task. </span><span class="koboSpan" id="kobo.410.2" xmlns="http://www.w3.org/1999/xhtml">A </span><strong class="keyWord"><span class="koboSpan" id="kobo.411.1" xmlns="http://www.w3.org/1999/xhtml">child task</span></strong><span class="koboSpan" id="kobo.412.1" xmlns="http://www.w3.org/1999/xhtml"> is a </span><a id="_idIndexMarker434"/><span class="koboSpan" id="kobo.413.1" xmlns="http://www.w3.org/1999/xhtml">nested task that must finish before its </span><a id="_idIndexMarker435"/><span class="koboSpan" id="kobo.414.1" xmlns="http://www.w3.org/1999/xhtml">parent task is allowed to finish.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.415.1" xmlns="http://www.w3.org/1999/xhtml">Let’s explore how these types of tasks work:</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.416.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.417.1" xmlns="http://www.w3.org/1999/xhtml">Program.Methods.cs</span></code><span class="koboSpan" id="kobo.418.1" xmlns="http://www.w3.org/1999/xhtml">, add two methods, one of which starts a task to run the other, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.419.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.420.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.421.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.422.1" xmlns="http://www.w3.org/1999/xhtml">OuterMethod</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.423.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.424.1" xmlns="http://www.w3.org/1999/xhtml">
{
  TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.425.1" xmlns="http://www.w3.org/1999/xhtml">"Outer method starting..."</span></span><span class="koboSpan" id="kobo.426.1" xmlns="http://www.w3.org/1999/xhtml">);
  Task innerTask = Task.Factory.StartNew(InnerMethod);
  TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.427.1" xmlns="http://www.w3.org/1999/xhtml">"Outer method finished."</span></span><span class="koboSpan" id="kobo.428.1" xmlns="http://www.w3.org/1999/xhtml">);
}
</span><span class="hljs-keyword"><span class="koboSpan" id="kobo.429.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.430.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.431.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.432.1" xmlns="http://www.w3.org/1999/xhtml">InnerMethod</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.433.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.434.1" xmlns="http://www.w3.org/1999/xhtml">
{
  TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.435.1" xmlns="http://www.w3.org/1999/xhtml">"Inner method starting..."</span></span><span class="koboSpan" id="kobo.436.1" xmlns="http://www.w3.org/1999/xhtml">);
  Thread.Sleep(</span><span class="hljs-number"><span class="koboSpan" id="kobo.437.1" xmlns="http://www.w3.org/1999/xhtml">2000</span></span><span class="koboSpan" id="kobo.438.1" xmlns="http://www.w3.org/1999/xhtml">);
  TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.439.1" xmlns="http://www.w3.org/1999/xhtml">"</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.440.1" xmlns="http://www.w3.org/1999/xhtml">Inner method finished."</span></span><span class="koboSpan" id="kobo.441.1" xmlns="http://www.w3.org/1999/xhtml">);
}
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.442.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.443.1" xmlns="http://www.w3.org/1999/xhtml">Program.cs</span></code><span class="koboSpan" id="kobo.444.1" xmlns="http://www.w3.org/1999/xhtml">, add statements to start a task to run the outer method and wait for it to finish before stopping, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="koboSpan" id="kobo.445.1" xmlns="http://www.w3.org/1999/xhtml">SectionTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.446.1" xmlns="http://www.w3.org/1999/xhtml">"Nested and child tasks"</span></span><span class="koboSpan" id="kobo.447.1" xmlns="http://www.w3.org/1999/xhtml">);
Task outerTask = Task.Factory.StartNew(OuterMethod);
outerTask.Wait();
WriteLine(</span><span class="hljs-string"><span class="koboSpan" id="kobo.448.1" xmlns="http://www.w3.org/1999/xhtml">"Console app is stopping."</span></span><span class="koboSpan" id="kobo.449.1" xmlns="http://www.w3.org/1999/xhtml">);
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.450.1" xmlns="http://www.w3.org/1999/xhtml">Run the </span><a id="_idIndexMarker436"/><span class="koboSpan" id="kobo.451.1" xmlns="http://www.w3.org/1999/xhtml">code</span><a id="_idIndexMarker437"/><span class="koboSpan" id="kobo.452.1" xmlns="http://www.w3.org/1999/xhtml"> and view the result, as shown in </span><a id="_idIndexMarker438"/><span class="koboSpan" id="kobo.453.1" xmlns="http://www.w3.org/1999/xhtml">the following</span><a id="_idIndexMarker439"/><span class="koboSpan" id="kobo.454.1" xmlns="http://www.w3.org/1999/xhtml"> output:
        </span><pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.455.1" xmlns="http://www.w3.org/1999/xhtml">Outer method starting...
</span><span class="koboSpan" id="kobo.455.2" xmlns="http://www.w3.org/1999/xhtml">Inner method starting...
</span><span class="koboSpan" id="kobo.455.3" xmlns="http://www.w3.org/1999/xhtml">Outer method finished.
</span><span class="koboSpan" id="kobo.455.4" xmlns="http://www.w3.org/1999/xhtml">Console app is stopping.
</span></code></pre>
<div class="note">
<p class="normal"><span class="koboSpan" id="kobo.456.1" xmlns="http://www.w3.org/1999/xhtml">Although we wait for the outer task to finish, its inner task does not have to finish as well. </span><span class="koboSpan" id="kobo.456.2" xmlns="http://www.w3.org/1999/xhtml">In fact, the outer task might finish, and the console app could end before the inner task even starts, as shown in the following output:</span></p>
<pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.457.1" xmlns="http://www.w3.org/1999/xhtml">Outer method starting...
</span><span class="koboSpan" id="kobo.457.2" xmlns="http://www.w3.org/1999/xhtml">Outer method finished.
</span><span class="koboSpan" id="kobo.457.3" xmlns="http://www.w3.org/1999/xhtml">Console app is stopping.
</span></code></pre>
</div></li>
</ol>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="4"><span class="koboSpan" id="kobo.458.1" xmlns="http://www.w3.org/1999/xhtml">To link these nested tasks as parent and child, we must use a special option. </span><span class="koboSpan" id="kobo.458.2" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.459.1" xmlns="http://www.w3.org/1999/xhtml">Program.Methods.cs</span></code><span class="koboSpan" id="kobo.460.1" xmlns="http://www.w3.org/1999/xhtml">, modify the existing code to add a </span><code class="inlineCode"><span class="koboSpan" id="kobo.461.1" xmlns="http://www.w3.org/1999/xhtml">TaskCreationOption</span></code><span class="koboSpan" id="kobo.462.1" xmlns="http://www.w3.org/1999/xhtml"> value of </span><code class="inlineCode"><span class="koboSpan" id="kobo.463.1" xmlns="http://www.w3.org/1999/xhtml">AttachedToParent</span></code><span class="koboSpan" id="kobo.464.1" xmlns="http://www.w3.org/1999/xhtml">, as shown highlighted in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.465.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.466.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.467.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.468.1" xmlns="http://www.w3.org/1999/xhtml">OuterMethod</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.469.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.470.1" xmlns="http://www.w3.org/1999/xhtml">
{
  TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.471.1" xmlns="http://www.w3.org/1999/xhtml">"Outer method starting..."</span></span><span class="koboSpan" id="kobo.472.1" xmlns="http://www.w3.org/1999/xhtml">);
  Task innerTask = Task.Factory.StartNew(InnerMethod</span><span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.473.1" xmlns="http://www.w3.org/1999/xhtml">,</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.474.1" xmlns="http://www.w3.org/1999/xhtml">    TaskCreationOptions.AttachedToParent</span></strong></span><span class="koboSpan" id="kobo.475.1" xmlns="http://www.w3.org/1999/xhtml">);
  TaskTitle(</span><span class="hljs-string"><span class="koboSpan" id="kobo.476.1" xmlns="http://www.w3.org/1999/xhtml">"Outer method finished."</span></span><span class="koboSpan" id="kobo.477.1" xmlns="http://www.w3.org/1999/xhtml">);
}
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.478.1" xmlns="http://www.w3.org/1999/xhtml">Run the code, view the result, and note that the inner task must finish before the outer task can, as shown in the following output:
        </span><pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.479.1" xmlns="http://www.w3.org/1999/xhtml">Outer method starting...
</span><span class="koboSpan" id="kobo.479.2" xmlns="http://www.w3.org/1999/xhtml">Inner method starting...
</span><span class="koboSpan" id="kobo.479.3" xmlns="http://www.w3.org/1999/xhtml">Outer method finished.
</span><span class="koboSpan" id="kobo.479.4" xmlns="http://www.w3.org/1999/xhtml">Inner method finished.
</span><span class="koboSpan" id="kobo.479.5" xmlns="http://www.w3.org/1999/xhtml">Console app is stopping.
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.480.1" xmlns="http://www.w3.org/1999/xhtml">Alternatively, the outer method could finish before the inner method starts, as shown in the following output:
        </span><pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.481.1" xmlns="http://www.w3.org/1999/xhtml">Outer method starting...
</span><span class="koboSpan" id="kobo.481.2" xmlns="http://www.w3.org/1999/xhtml">Outer method finished.
</span><span class="koboSpan" id="kobo.481.3" xmlns="http://www.w3.org/1999/xhtml">Inner method starting...
</span><span class="koboSpan" id="kobo.481.4" xmlns="http://www.w3.org/1999/xhtml">Inner method finished.
</span><span class="koboSpan" id="kobo.481.5" xmlns="http://www.w3.org/1999/xhtml">Console app is stopping.
</span></code></pre>
</li>
</ol>
<div class="note">
<p class="normal"><span class="koboSpan" id="kobo.482.1" xmlns="http://www.w3.org/1999/xhtml">The </span><code class="inlineCode"><span class="koboSpan" id="kobo.483.1" xmlns="http://www.w3.org/1999/xhtml">OuterMethod</span></code><span class="koboSpan" id="kobo.484.1" xmlns="http://www.w3.org/1999/xhtml"> can finish its work before the </span><code class="inlineCode"><span class="koboSpan" id="kobo.485.1" xmlns="http://www.w3.org/1999/xhtml">InnerMethod</span></code><span class="koboSpan" id="kobo.486.1" xmlns="http://www.w3.org/1999/xhtml">, as shown by what it writes to the console, but its task must wait, as shown by the console not stopping until both the outer and inner tasks finish.</span></p>
</div>
<h2 class="heading-2" id="_idParaDest-205"><span class="koboSpan" id="kobo.487.1" xmlns="http://www.w3.org/1999/xhtml">Wrapping tasks around other objects</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.488.1" xmlns="http://www.w3.org/1999/xhtml">Sometimes </span><a id="_idIndexMarker440"/><span class="koboSpan" id="kobo.489.1" xmlns="http://www.w3.org/1999/xhtml">you might have a method that you want to be asynchronous, but the result to be returned is not itself a task. </span><span class="koboSpan" id="kobo.489.2" xmlns="http://www.w3.org/1999/xhtml">You can wrap the return value in a successfully completed task, return an exception, or indicate that the task was canceled by using one of the </span><code class="inlineCode"><span class="koboSpan" id="kobo.490.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.491.1" xmlns="http://www.w3.org/1999/xhtml"> static methods, as shown in </span><em class="italic"><span class="koboSpan" id="kobo.492.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.2</span></em><span class="koboSpan" id="kobo.493.1" xmlns="http://www.w3.org/1999/xhtml">:</span></p>
<table class="table-container" id="table002-3">
<tbody>
<tr>
<td class="table-cell">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.494.1" xmlns="http://www.w3.org/1999/xhtml">Method</span></strong></p>
</td>
<td class="table-cell">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.495.1" xmlns="http://www.w3.org/1999/xhtml">Description</span></strong></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.496.1" xmlns="http://www.w3.org/1999/xhtml">FromResult&lt;TResult&gt;(TResult)</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><span class="koboSpan" id="kobo.497.1" xmlns="http://www.w3.org/1999/xhtml">Creates a </span><code class="inlineCode"><span class="koboSpan" id="kobo.498.1" xmlns="http://www.w3.org/1999/xhtml">Task&lt;TResult&gt;</span></code><span class="koboSpan" id="kobo.499.1" xmlns="http://www.w3.org/1999/xhtml"> object whose </span><code class="inlineCode"><span class="koboSpan" id="kobo.500.1" xmlns="http://www.w3.org/1999/xhtml">Result</span></code><span class="koboSpan" id="kobo.501.1" xmlns="http://www.w3.org/1999/xhtml"> property is the non-task result and whose </span><code class="inlineCode"><span class="koboSpan" id="kobo.502.1" xmlns="http://www.w3.org/1999/xhtml">Status</span></code><span class="koboSpan" id="kobo.503.1" xmlns="http://www.w3.org/1999/xhtml"> property is </span><code class="inlineCode"><span class="koboSpan" id="kobo.504.1" xmlns="http://www.w3.org/1999/xhtml">RanToCompletion</span></code><span class="koboSpan" id="kobo.505.1" xmlns="http://www.w3.org/1999/xhtml">.</span></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.506.1" xmlns="http://www.w3.org/1999/xhtml">FromException&lt;TResult&gt;(Exception)</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><span class="koboSpan" id="kobo.507.1" xmlns="http://www.w3.org/1999/xhtml">Creates a </span><code class="inlineCode"><span class="koboSpan" id="kobo.508.1" xmlns="http://www.w3.org/1999/xhtml">Task&lt;TResult&gt;</span></code><span class="koboSpan" id="kobo.509.1" xmlns="http://www.w3.org/1999/xhtml"> that’s completed with a specified exception.</span></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.510.1" xmlns="http://www.w3.org/1999/xhtml">FromCanceled&lt;TResult&gt;(CancellationToken)</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><span class="koboSpan" id="kobo.511.1" xmlns="http://www.w3.org/1999/xhtml">Creates a </span><code class="inlineCode"><span class="koboSpan" id="kobo.512.1" xmlns="http://www.w3.org/1999/xhtml">Task&lt;TResult&gt;</span></code><span class="koboSpan" id="kobo.513.1" xmlns="http://www.w3.org/1999/xhtml"> that’s completed due to cancellation with a specified cancellation token.</span></p>
</td>
</tr>
</tbody>
</table>
<p class="packt_figref"><span class="koboSpan" id="kobo.514.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.2: Methods to create a Task in various scenarios </span></p>
<p class="normal"><span class="koboSpan" id="kobo.515.1" xmlns="http://www.w3.org/1999/xhtml">These methods are useful when you need to:</span></p>
<ul>
<li class="bulletList"><span class="koboSpan" id="kobo.516.1" xmlns="http://www.w3.org/1999/xhtml">Implement an interface that has asynchronous methods, but your implementation is synchronous. </span><span class="koboSpan" id="kobo.516.2" xmlns="http://www.w3.org/1999/xhtml">This is common for websites and services.</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.517.1" xmlns="http://www.w3.org/1999/xhtml">Mock asynchronous implementations during unit testing.</span></li>
</ul>
<p class="normal"><span class="koboSpan" id="kobo.518.1" xmlns="http://www.w3.org/1999/xhtml">Imagine that you need to create a method to validate XML input and the method must conform to an</span><a id="_idIndexMarker441"/><span class="koboSpan" id="kobo.519.1" xmlns="http://www.w3.org/1999/xhtml"> interface that requires a </span><code class="inlineCode"><span class="koboSpan" id="kobo.520.1" xmlns="http://www.w3.org/1999/xhtml">Task&lt;T&gt;</span></code><span class="koboSpan" id="kobo.521.1" xmlns="http://www.w3.org/1999/xhtml"> to be returned, as shown in the following code:</span></p>
<pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.522.1" xmlns="http://www.w3.org/1999/xhtml">public</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.523.1" xmlns="http://www.w3.org/1999/xhtml">interface</span></span> <span class="hljs-title"><span class="koboSpan" id="kobo.524.1" xmlns="http://www.w3.org/1999/xhtml">IValidation</span></span><span class="koboSpan" id="kobo.525.1" xmlns="http://www.w3.org/1999/xhtml">
{
  </span><span class="hljs-function"><span class="koboSpan" id="kobo.526.1" xmlns="http://www.w3.org/1999/xhtml">Task&lt;</span></span><span class="hljs-built_in"><span class="koboSpan" id="kobo.527.1" xmlns="http://www.w3.org/1999/xhtml">bool</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.528.1" xmlns="http://www.w3.org/1999/xhtml">&gt; </span></span><span class="hljs-title"><span class="koboSpan" id="kobo.529.1" xmlns="http://www.w3.org/1999/xhtml">IsValidXmlTagAsync</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.530.1" xmlns="http://www.w3.org/1999/xhtml">(</span></span><span class="hljs-keyword"><span class="koboSpan" id="kobo.531.1" xmlns="http://www.w3.org/1999/xhtml">this</span></span><span class="hljs-params"> </span><span class="hljs-built_in"><span class="koboSpan" id="kobo.532.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="hljs-params"><span class="koboSpan" id="kobo.533.1" xmlns="http://www.w3.org/1999/xhtml"> input</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.534.1" xmlns="http://www.w3.org/1999/xhtml">)</span></span><span class="koboSpan" id="kobo.535.1" xmlns="http://www.w3.org/1999/xhtml">;
}
</span></code></pre>
<div class="note">
<p class="normal"><span class="koboSpan" id="kobo.536.1" xmlns="http://www.w3.org/1999/xhtml">The code in this section is for illustration only. </span><span class="koboSpan" id="kobo.536.2" xmlns="http://www.w3.org/1999/xhtml">You do not need to enter it in your project.</span></p>
</div>
<p class="normal"><span class="koboSpan" id="kobo.537.1" xmlns="http://www.w3.org/1999/xhtml">We could use these helpful </span><code class="inlineCode"><span class="koboSpan" id="kobo.538.1" xmlns="http://www.w3.org/1999/xhtml">FromX</span></code><span class="koboSpan" id="kobo.539.1" xmlns="http://www.w3.org/1999/xhtml"> methods to return the results wrapped in a task, as shown in the following code:</span></p>
<pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.540.1" xmlns="http://www.w3.org/1999/xhtml">using</span></span><span class="koboSpan" id="kobo.541.1" xmlns="http://www.w3.org/1999/xhtml"> System.Text.RegularExpressions;
</span><span class="hljs-keyword"><span class="koboSpan" id="kobo.542.1" xmlns="http://www.w3.org/1999/xhtml">namespace</span></span> <span class="hljs-title"><span class="koboSpan" id="kobo.543.1" xmlns="http://www.w3.org/1999/xhtml">Packt.Shared</span></span><span class="koboSpan" id="kobo.544.1" xmlns="http://www.w3.org/1999/xhtml">;
</span><span class="hljs-keyword"><span class="koboSpan" id="kobo.545.1" xmlns="http://www.w3.org/1999/xhtml">public</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.546.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.547.1" xmlns="http://www.w3.org/1999/xhtml">class</span></span> <span class="hljs-title"><span class="koboSpan" id="kobo.548.1" xmlns="http://www.w3.org/1999/xhtml">StringExtensions</span></span><span class="koboSpan" id="kobo.549.1" xmlns="http://www.w3.org/1999/xhtml"> : </span><span class="hljs-title"><span class="koboSpan" id="kobo.550.1" xmlns="http://www.w3.org/1999/xhtml">IValidation</span></span><span class="koboSpan" id="kobo.551.1" xmlns="http://www.w3.org/1999/xhtml">
{
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.552.1" xmlns="http://www.w3.org/1999/xhtml">public</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.553.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.554.1" xmlns="http://www.w3.org/1999/xhtml"> Task&lt;</span></span><span class="hljs-built_in"><span class="koboSpan" id="kobo.555.1" xmlns="http://www.w3.org/1999/xhtml">bool</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.556.1" xmlns="http://www.w3.org/1999/xhtml">&gt; </span></span><span class="hljs-title"><span class="koboSpan" id="kobo.557.1" xmlns="http://www.w3.org/1999/xhtml">IsValidXmlTagAsync</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.558.1" xmlns="http://www.w3.org/1999/xhtml">(</span></span><span class="hljs-keyword"><span class="koboSpan" id="kobo.559.1" xmlns="http://www.w3.org/1999/xhtml">this</span></span><span class="hljs-params"> </span><span class="hljs-built_in"><span class="koboSpan" id="kobo.560.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="hljs-params"><span class="koboSpan" id="kobo.561.1" xmlns="http://www.w3.org/1999/xhtml"> input</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.562.1" xmlns="http://www.w3.org/1999/xhtml">)</span></span><span class="koboSpan" id="kobo.563.1" xmlns="http://www.w3.org/1999/xhtml">
  {
    </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.564.1" xmlns="http://www.w3.org/1999/xhtml">if</span></span><span class="koboSpan" id="kobo.565.1" xmlns="http://www.w3.org/1999/xhtml"> (input == </span><span class="hljs-literal"><span class="koboSpan" id="kobo.566.1" xmlns="http://www.w3.org/1999/xhtml">null</span></span><span class="koboSpan" id="kobo.567.1" xmlns="http://www.w3.org/1999/xhtml">)
    {
      </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.568.1" xmlns="http://www.w3.org/1999/xhtml">return</span></span><span class="koboSpan" id="kobo.569.1" xmlns="http://www.w3.org/1999/xhtml"> Task.FromException&lt;</span><span class="hljs-built_in"><span class="koboSpan" id="kobo.570.1" xmlns="http://www.w3.org/1999/xhtml">bool</span></span><span class="koboSpan" id="kobo.571.1" xmlns="http://www.w3.org/1999/xhtml">&gt;(
        </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.572.1" xmlns="http://www.w3.org/1999/xhtml">new</span></span><span class="koboSpan" id="kobo.573.1" xmlns="http://www.w3.org/1999/xhtml"> ArgumentNullException(</span><span class="hljs-string"><span class="koboSpan" id="kobo.574.1" xmlns="http://www.w3.org/1999/xhtml">$"Missing </span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.575.1" xmlns="http://www.w3.org/1999/xhtml">{</span></span><span class="hljs-keyword"><span class="koboSpan" id="kobo.576.1" xmlns="http://www.w3.org/1999/xhtml">nameof</span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.577.1" xmlns="http://www.w3.org/1999/xhtml">(input)}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.578.1" xmlns="http://www.w3.org/1999/xhtml"> parameter"</span></span><span class="koboSpan" id="kobo.579.1" xmlns="http://www.w3.org/1999/xhtml">));
    }
    </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.580.1" xmlns="http://www.w3.org/1999/xhtml">if</span></span><span class="koboSpan" id="kobo.581.1" xmlns="http://www.w3.org/1999/xhtml"> (input.Length == </span><span class="hljs-number"><span class="koboSpan" id="kobo.582.1" xmlns="http://www.w3.org/1999/xhtml">0</span></span><span class="koboSpan" id="kobo.583.1" xmlns="http://www.w3.org/1999/xhtml">)
    {
      </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.584.1" xmlns="http://www.w3.org/1999/xhtml">return</span></span><span class="koboSpan" id="kobo.585.1" xmlns="http://www.w3.org/1999/xhtml"> Task.FromException&lt;</span><span class="hljs-built_in"><span class="koboSpan" id="kobo.586.1" xmlns="http://www.w3.org/1999/xhtml">bool</span></span><span class="koboSpan" id="kobo.587.1" xmlns="http://www.w3.org/1999/xhtml">&gt;(
        </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.588.1" xmlns="http://www.w3.org/1999/xhtml">new</span></span><span class="koboSpan" id="kobo.589.1" xmlns="http://www.w3.org/1999/xhtml"> ArgumentException(</span><span class="hljs-string"><span class="koboSpan" id="kobo.590.1" xmlns="http://www.w3.org/1999/xhtml">$"</span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.591.1" xmlns="http://www.w3.org/1999/xhtml">{</span></span><span class="hljs-keyword"><span class="koboSpan" id="kobo.592.1" xmlns="http://www.w3.org/1999/xhtml">nameof</span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.593.1" xmlns="http://www.w3.org/1999/xhtml">(input)}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.594.1" xmlns="http://www.w3.org/1999/xhtml"> parameter is empty."</span></span><span class="koboSpan" id="kobo.595.1" xmlns="http://www.w3.org/1999/xhtml">));
    }
    </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.596.1" xmlns="http://www.w3.org/1999/xhtml">return</span></span><span class="koboSpan" id="kobo.597.1" xmlns="http://www.w3.org/1999/xhtml"> Task.FromResult(Regex.IsMatch(input,
      </span><span class="hljs-string"><span class="koboSpan" id="kobo.598.1" xmlns="http://www.w3.org/1999/xhtml">@"^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;\/\1&gt;|\s+\/&gt;)$"</span></span><span class="koboSpan" id="kobo.599.1" xmlns="http://www.w3.org/1999/xhtml">));
  }
}
</span></code></pre>
<p class="normal"><span class="koboSpan" id="kobo.600.1" xmlns="http://www.w3.org/1999/xhtml">If the method you need to implement returns a </span><code class="inlineCode"><span class="koboSpan" id="kobo.601.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.602.1" xmlns="http://www.w3.org/1999/xhtml"> (equivalent to </span><code class="inlineCode"><span class="koboSpan" id="kobo.603.1" xmlns="http://www.w3.org/1999/xhtml">void</span></code><span class="koboSpan" id="kobo.604.1" xmlns="http://www.w3.org/1999/xhtml"> in a synchronous method), then</span><a id="_idIndexMarker442"/><span class="koboSpan" id="kobo.605.1" xmlns="http://www.w3.org/1999/xhtml"> you can return a predefined completed </span><code class="inlineCode"><span class="koboSpan" id="kobo.606.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.607.1" xmlns="http://www.w3.org/1999/xhtml"> object, as shown in the following code:</span></p>
<pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.608.1" xmlns="http://www.w3.org/1999/xhtml">public</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.609.1" xmlns="http://www.w3.org/1999/xhtml"> Task </span></span><span class="hljs-title"><span class="koboSpan" id="kobo.610.1" xmlns="http://www.w3.org/1999/xhtml">DeleteCustomerAsync</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.611.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.612.1" xmlns="http://www.w3.org/1999/xhtml">
{
  </span><span class="hljs-comment"><span class="koboSpan" id="kobo.613.1" xmlns="http://www.w3.org/1999/xhtml">// ...</span></span>
<span class="hljs-keyword"><span class="koboSpan" id="kobo.614.1" xmlns="http://www.w3.org/1999/xhtml">return</span></span><span class="koboSpan" id="kobo.615.1" xmlns="http://www.w3.org/1999/xhtml"> Task.CompletedTask;
}
</span></code></pre>
<p class="normal"><span class="koboSpan" id="kobo.616.1" xmlns="http://www.w3.org/1999/xhtml">When running tasks in parallel, the code will often need to access resources, and those resources are sometimes shared between tasks and threads. </span><span class="koboSpan" id="kobo.616.2" xmlns="http://www.w3.org/1999/xhtml">We, therefore, need to learn how to safely access those shared resources.</span></p>
<h1 class="heading-1" id="_idParaDest-206"><span class="koboSpan" id="kobo.617.1" xmlns="http://www.w3.org/1999/xhtml">Synchronizing access to shared resources</span></h1>
<p class="normal"><span class="koboSpan" id="kobo.618.1" xmlns="http://www.w3.org/1999/xhtml">When you </span><a id="_idIndexMarker443"/><span class="koboSpan" id="kobo.619.1" xmlns="http://www.w3.org/1999/xhtml">have multiple threads executing at the same time, there is a possibility that two or more of the threads may access the same variable or another resource at the same time, and as a result, may cause a problem. </span><span class="koboSpan" id="kobo.619.2" xmlns="http://www.w3.org/1999/xhtml">For this reason, you should carefully consider how to make your code </span><strong class="keyWord"><span class="koboSpan" id="kobo.620.1" xmlns="http://www.w3.org/1999/xhtml">thread-safe</span></strong><span class="koboSpan" id="kobo.621.1" xmlns="http://www.w3.org/1999/xhtml">.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.622.1" xmlns="http://www.w3.org/1999/xhtml">The simplest mechanism for implementing thread safety is to use an object variable as a flag or traffic light to indicate when a shared resource has an exclusive lock applied.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.623.1" xmlns="http://www.w3.org/1999/xhtml">In William Golding’s </span><em class="italic"><span class="koboSpan" id="kobo.624.1" xmlns="http://www.w3.org/1999/xhtml">Lord of the Flies</span></em><span class="koboSpan" id="kobo.625.1" xmlns="http://www.w3.org/1999/xhtml">, Piggy and Ralph find a conch shell and use it to call a meeting. </span><span class="koboSpan" id="kobo.625.2" xmlns="http://www.w3.org/1999/xhtml">The boys impose a “rule of the conch” on themselves, deciding that no one can speak unless they’re holding the conch.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.626.1" xmlns="http://www.w3.org/1999/xhtml">I like to name the object variable I use for implementing thread-safe code the “conch.” </span><span class="koboSpan" id="kobo.626.2" xmlns="http://www.w3.org/1999/xhtml">When a thread has the conch, no other thread should access the shared resource(s) represented by that conch. </span><span class="koboSpan" id="kobo.626.3" xmlns="http://www.w3.org/1999/xhtml">Note that I say </span><em class="italic"><span class="koboSpan" id="kobo.627.1" xmlns="http://www.w3.org/1999/xhtml">should</span></em><span class="koboSpan" id="kobo.628.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.628.2" xmlns="http://www.w3.org/1999/xhtml">Only code that respects the conch enables synchronized access. </span><span class="koboSpan" id="kobo.628.3" xmlns="http://www.w3.org/1999/xhtml">A conch is </span><em class="italic"><span class="koboSpan" id="kobo.629.1" xmlns="http://www.w3.org/1999/xhtml">not</span></em><span class="koboSpan" id="kobo.630.1" xmlns="http://www.w3.org/1999/xhtml"> a lock.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.631.1" xmlns="http://www.w3.org/1999/xhtml">We will explore a couple of types that can be used to synchronize access to shared resources:</span></p>
<ul>
<li class="bulletList"><code class="inlineCode"><span class="koboSpan" id="kobo.632.1" xmlns="http://www.w3.org/1999/xhtml">Monitor</span></code><span class="koboSpan" id="kobo.633.1" xmlns="http://www.w3.org/1999/xhtml">: An object that can be used by multiple threads to check if they should access a shared resource within the same process.</span></li>
<li class="bulletList"><code class="inlineCode"><span class="koboSpan" id="kobo.634.1" xmlns="http://www.w3.org/1999/xhtml">Interlocked</span></code><span class="koboSpan" id="kobo.635.1" xmlns="http://www.w3.org/1999/xhtml">: An object for manipulating simple numeric types at the CPU level.</span></li>
</ul>
<h2 class="heading-2" id="_idParaDest-207"><span class="koboSpan" id="kobo.636.1" xmlns="http://www.w3.org/1999/xhtml">Accessing a resource from multiple threads</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.637.1" xmlns="http://www.w3.org/1999/xhtml">Let’s create a </span><a id="_idIndexMarker444"/><span class="koboSpan" id="kobo.638.1" xmlns="http://www.w3.org/1999/xhtml">console app to explore sharing resources between multiple threads:</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.639.1" xmlns="http://www.w3.org/1999/xhtml">Use your preferred code editor to add a new </span><strong class="screenText"><span class="koboSpan" id="kobo.640.1" xmlns="http://www.w3.org/1999/xhtml">Console App</span></strong><span class="koboSpan" id="kobo.641.1" xmlns="http://www.w3.org/1999/xhtml"> / </span><code class="inlineCode"><span class="koboSpan" id="kobo.642.1" xmlns="http://www.w3.org/1999/xhtml">console</span></code><span class="koboSpan" id="kobo.643.1" xmlns="http://www.w3.org/1999/xhtml"> project to the </span><code class="inlineCode"><span class="koboSpan" id="kobo.644.1" xmlns="http://www.w3.org/1999/xhtml">Chapter05</span></code><span class="koboSpan" id="kobo.645.1" xmlns="http://www.w3.org/1999/xhtml"> solution named </span><code class="inlineCode"><span class="koboSpan" id="kobo.646.1" xmlns="http://www.w3.org/1999/xhtml">SynchronizingResourceAccess</span></code><span class="koboSpan" id="kobo.647.1" xmlns="http://www.w3.org/1999/xhtml">.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.648.1" xmlns="http://www.w3.org/1999/xhtml">Globally and statically import the </span><code class="inlineCode"><span class="koboSpan" id="kobo.649.1" xmlns="http://www.w3.org/1999/xhtml">System.Console</span></code><span class="koboSpan" id="kobo.650.1" xmlns="http://www.w3.org/1999/xhtml"> class and treat warnings as errors.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.651.1" xmlns="http://www.w3.org/1999/xhtml">Add a new class file named </span><code class="inlineCode"><span class="koboSpan" id="kobo.652.1" xmlns="http://www.w3.org/1999/xhtml">SharedObjects.cs</span></code><span class="koboSpan" id="kobo.653.1" xmlns="http://www.w3.org/1999/xhtml">.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.654.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.655.1" xmlns="http://www.w3.org/1999/xhtml">SharedObjects.cs</span></code><span class="koboSpan" id="kobo.656.1" xmlns="http://www.w3.org/1999/xhtml">, delete any existing statements and then define a static class with a field to store a message that is a shared resource, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.657.1" xmlns="http://www.w3.org/1999/xhtml">public</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.658.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.659.1" xmlns="http://www.w3.org/1999/xhtml">class</span></span> <span class="hljs-title"><span class="koboSpan" id="kobo.660.1" xmlns="http://www.w3.org/1999/xhtml">SharedObjects</span></span><span class="koboSpan" id="kobo.661.1" xmlns="http://www.w3.org/1999/xhtml">
{
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.662.1" xmlns="http://www.w3.org/1999/xhtml">public</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.663.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span> <span class="hljs-built_in"><span class="koboSpan" id="kobo.664.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="koboSpan" id="kobo.665.1" xmlns="http://www.w3.org/1999/xhtml">? </span><span class="koboSpan" id="kobo.665.2" xmlns="http://www.w3.org/1999/xhtml">Message; </span><span class="hljs-comment"><span class="koboSpan" id="kobo.666.1" xmlns="http://www.w3.org/1999/xhtml">// a shared resource</span></span><span class="koboSpan" id="kobo.667.1" xmlns="http://www.w3.org/1999/xhtml">
}
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.668.1" xmlns="http://www.w3.org/1999/xhtml">Add a new class file named </span><code class="inlineCode"><span class="koboSpan" id="kobo.669.1" xmlns="http://www.w3.org/1999/xhtml">Program.Methods.cs</span></code><span class="koboSpan" id="kobo.670.1" xmlns="http://www.w3.org/1999/xhtml">.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.671.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.672.1" xmlns="http://www.w3.org/1999/xhtml">Program.Methods.cs</span></code><span class="koboSpan" id="kobo.673.1" xmlns="http://www.w3.org/1999/xhtml">, delete any existing statements and then define two methods that both loop five times, waiting for a random interval of up to two seconds and appending either </span><code class="inlineCode"><span class="koboSpan" id="kobo.674.1" xmlns="http://www.w3.org/1999/xhtml">A</span></code><span class="koboSpan" id="kobo.675.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><code class="inlineCode"><span class="koboSpan" id="kobo.676.1" xmlns="http://www.w3.org/1999/xhtml">B</span></code><span class="koboSpan" id="kobo.677.1" xmlns="http://www.w3.org/1999/xhtml"> to the shared message resource, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.678.1" xmlns="http://www.w3.org/1999/xhtml">partial</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.679.1" xmlns="http://www.w3.org/1999/xhtml">class</span></span> <span class="hljs-title"><span class="koboSpan" id="kobo.680.1" xmlns="http://www.w3.org/1999/xhtml">Program</span></span><span class="koboSpan" id="kobo.681.1" xmlns="http://www.w3.org/1999/xhtml">
{
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.682.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.683.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.684.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.685.1" xmlns="http://www.w3.org/1999/xhtml">MethodA</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.686.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.687.1" xmlns="http://www.w3.org/1999/xhtml">
  {
    </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.688.1" xmlns="http://www.w3.org/1999/xhtml">for</span></span><span class="koboSpan" id="kobo.689.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><span class="hljs-built_in"><span class="koboSpan" id="kobo.690.1" xmlns="http://www.w3.org/1999/xhtml">int</span></span><span class="koboSpan" id="kobo.691.1" xmlns="http://www.w3.org/1999/xhtml"> i = </span><span class="hljs-number"><span class="koboSpan" id="kobo.692.1" xmlns="http://www.w3.org/1999/xhtml">0</span></span><span class="koboSpan" id="kobo.693.1" xmlns="http://www.w3.org/1999/xhtml">; i &lt; </span><span class="hljs-number"><span class="koboSpan" id="kobo.694.1" xmlns="http://www.w3.org/1999/xhtml">5</span></span><span class="koboSpan" id="kobo.695.1" xmlns="http://www.w3.org/1999/xhtml">; i++)
    {
      </span><span class="hljs-comment"><span class="koboSpan" id="kobo.696.1" xmlns="http://www.w3.org/1999/xhtml">// Simulate two seconds of work on the current thread.</span></span><span class="koboSpan" id="kobo.697.1" xmlns="http://www.w3.org/1999/xhtml">
      Thread.Sleep(Random.Shared.Next(</span><span class="hljs-number"><span class="koboSpan" id="kobo.698.1" xmlns="http://www.w3.org/1999/xhtml">2000</span></span><span class="koboSpan" id="kobo.699.1" xmlns="http://www.w3.org/1999/xhtml">));
      </span><span class="hljs-comment"><span class="koboSpan" id="kobo.700.1" xmlns="http://www.w3.org/1999/xhtml">// Concatenate the letter "A" to the shared message.</span></span><span class="koboSpan" id="kobo.701.1" xmlns="http://www.w3.org/1999/xhtml">
      SharedObjects.Message += </span><span class="hljs-string"><span class="koboSpan" id="kobo.702.1" xmlns="http://www.w3.org/1999/xhtml">"A"</span></span><span class="koboSpan" id="kobo.703.1" xmlns="http://www.w3.org/1999/xhtml">;
      </span><span class="hljs-comment"><span class="koboSpan" id="kobo.704.1" xmlns="http://www.w3.org/1999/xhtml">// Show some activity in the console output.</span></span><span class="koboSpan" id="kobo.705.1" xmlns="http://www.w3.org/1999/xhtml">
      Write(</span><span class="hljs-string"><span class="koboSpan" id="kobo.706.1" xmlns="http://www.w3.org/1999/xhtml">"."</span></span><span class="koboSpan" id="kobo.707.1" xmlns="http://www.w3.org/1999/xhtml">);
    }
  }
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.708.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.709.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.710.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.711.1" xmlns="http://www.w3.org/1999/xhtml">MethodB</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.712.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.713.1" xmlns="http://www.w3.org/1999/xhtml">
  {
    </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.714.1" xmlns="http://www.w3.org/1999/xhtml">for</span></span><span class="koboSpan" id="kobo.715.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><span class="hljs-built_in"><span class="koboSpan" id="kobo.716.1" xmlns="http://www.w3.org/1999/xhtml">int</span></span><span class="koboSpan" id="kobo.717.1" xmlns="http://www.w3.org/1999/xhtml"> i = </span><span class="hljs-number"><span class="koboSpan" id="kobo.718.1" xmlns="http://www.w3.org/1999/xhtml">0</span></span><span class="koboSpan" id="kobo.719.1" xmlns="http://www.w3.org/1999/xhtml">; i &lt; </span><span class="hljs-number"><span class="koboSpan" id="kobo.720.1" xmlns="http://www.w3.org/1999/xhtml">5</span></span><span class="koboSpan" id="kobo.721.1" xmlns="http://www.w3.org/1999/xhtml">; i++)
    {
      Thread.Sleep(Random.Shared.Next(</span><span class="hljs-number"><span class="koboSpan" id="kobo.722.1" xmlns="http://www.w3.org/1999/xhtml">2000</span></span><span class="koboSpan" id="kobo.723.1" xmlns="http://www.w3.org/1999/xhtml">));
      SharedObjects.Message += </span><span class="hljs-string"><span class="koboSpan" id="kobo.724.1" xmlns="http://www.w3.org/1999/xhtml">"B"</span></span><span class="koboSpan" id="kobo.725.1" xmlns="http://www.w3.org/1999/xhtml">;
      Write(</span><span class="hljs-string"><span class="koboSpan" id="kobo.726.1" xmlns="http://www.w3.org/1999/xhtml">"."</span></span><span class="koboSpan" id="kobo.727.1" xmlns="http://www.w3.org/1999/xhtml">);
    }
  }
}
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.728.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.729.1" xmlns="http://www.w3.org/1999/xhtml">Program.cs</span></code><span class="koboSpan" id="kobo.730.1" xmlns="http://www.w3.org/1999/xhtml">, delete</span><a id="_idIndexMarker445"/><span class="koboSpan" id="kobo.731.1" xmlns="http://www.w3.org/1999/xhtml"> the existing statements. </span><span class="koboSpan" id="kobo.731.2" xmlns="http://www.w3.org/1999/xhtml">Add statements to import the namespace for diagnostic types like </span><code class="inlineCode"><span class="koboSpan" id="kobo.732.1" xmlns="http://www.w3.org/1999/xhtml">Stopwatch</span></code><span class="koboSpan" id="kobo.733.1" xmlns="http://www.w3.org/1999/xhtml">, and statements to execute both methods on separate threads using a pair of tasks, and wait for them to complete before outputting the elapsed milliseconds, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.734.1" xmlns="http://www.w3.org/1999/xhtml">using</span></span><span class="koboSpan" id="kobo.735.1" xmlns="http://www.w3.org/1999/xhtml"> System.Diagnostics; </span><span class="hljs-comment"><span class="koboSpan" id="kobo.736.1" xmlns="http://www.w3.org/1999/xhtml">// To use Stopwatch.</span></span><span class="koboSpan" id="kobo.737.1" xmlns="http://www.w3.org/1999/xhtml">
WriteLine(</span><span class="hljs-string"><span class="koboSpan" id="kobo.738.1" xmlns="http://www.w3.org/1999/xhtml">"Please wait for the tasks to complete."</span></span><span class="koboSpan" id="kobo.739.1" xmlns="http://www.w3.org/1999/xhtml">);
Stopwatch watch = Stopwatch.StartNew();
Task a = Task.Factory.StartNew(MethodA);
Task b = Task.Factory.StartNew(MethodB);
 
Task.WaitAll(</span><span class="hljs-keyword"><span class="koboSpan" id="kobo.740.1" xmlns="http://www.w3.org/1999/xhtml">new</span></span><span class="koboSpan" id="kobo.741.1" xmlns="http://www.w3.org/1999/xhtml"> Task[] { a, b });
WriteLine();
WriteLine(</span><span class="hljs-string"><span class="koboSpan" id="kobo.742.1" xmlns="http://www.w3.org/1999/xhtml">$"Results: </span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.743.1" xmlns="http://www.w3.org/1999/xhtml">{SharedObjects.Message}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.744.1" xmlns="http://www.w3.org/1999/xhtml">."</span></span><span class="koboSpan" id="kobo.745.1" xmlns="http://www.w3.org/1999/xhtml">);
WriteLine(</span><span class="hljs-string"><span class="koboSpan" id="kobo.746.1" xmlns="http://www.w3.org/1999/xhtml">$"</span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.747.1" xmlns="http://www.w3.org/1999/xhtml">{watch.ElapsedMilliseconds:N0}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.748.1" xmlns="http://www.w3.org/1999/xhtml"> elapsed milliseconds."</span></span><span class="koboSpan" id="kobo.749.1" xmlns="http://www.w3.org/1999/xhtml">);
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.750.1" xmlns="http://www.w3.org/1999/xhtml">Run the code and view the result, as shown in the following output:
        </span><pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.751.1" xmlns="http://www.w3.org/1999/xhtml">Please wait for the tasks to complete.
</span><span class="koboSpan" id="kobo.751.2" xmlns="http://www.w3.org/1999/xhtml">..........
</span><span class="koboSpan" id="kobo.751.3" xmlns="http://www.w3.org/1999/xhtml">Results: BABABAABBA.
</span><span class="koboSpan" id="kobo.751.4" xmlns="http://www.w3.org/1999/xhtml">5,753 elapsed milliseconds.
</span></code></pre>
</li>
</ol>
<p class="normal"><span class="koboSpan" id="kobo.752.1" xmlns="http://www.w3.org/1999/xhtml">This shows that both threads were modifying the message concurrently. </span><span class="koboSpan" id="kobo.752.2" xmlns="http://www.w3.org/1999/xhtml">In an actual application, this could be a problem. </span><span class="koboSpan" id="kobo.752.3" xmlns="http://www.w3.org/1999/xhtml">But we can prevent concurrent access by applying a mutually exclusive lock to a conch object, as well as adding code to the two methods to voluntarily check the conch before modifying the shared resource, which we will do in the following section.</span></p>
<h2 class="heading-2" id="_idParaDest-208"><span class="koboSpan" id="kobo.753.1" xmlns="http://www.w3.org/1999/xhtml">Applying a mutually exclusive lock to a conch</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.754.1" xmlns="http://www.w3.org/1999/xhtml">Now, let’s </span><a id="_idIndexMarker446"/><span class="koboSpan" id="kobo.755.1" xmlns="http://www.w3.org/1999/xhtml">use a conch to ensure that only one thread accesses the shared resource at a time:</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.756.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.757.1" xmlns="http://www.w3.org/1999/xhtml">SharedObjects.cs</span></code><span class="koboSpan" id="kobo.758.1" xmlns="http://www.w3.org/1999/xhtml">, declare and instantiate an </span><code class="inlineCode"><span class="koboSpan" id="kobo.759.1" xmlns="http://www.w3.org/1999/xhtml">object</span></code><span class="koboSpan" id="kobo.760.1" xmlns="http://www.w3.org/1999/xhtml"> variable to act as a conch, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.761.1" xmlns="http://www.w3.org/1999/xhtml">public</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.762.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span> <span class="hljs-built_in"><span class="koboSpan" id="kobo.763.1" xmlns="http://www.w3.org/1999/xhtml">object</span></span><span class="koboSpan" id="kobo.764.1" xmlns="http://www.w3.org/1999/xhtml"> Conch = </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.765.1" xmlns="http://www.w3.org/1999/xhtml">new</span></span><span class="koboSpan" id="kobo.766.1" xmlns="http://www.w3.org/1999/xhtml">(); </span><span class="hljs-comment"><span class="koboSpan" id="kobo.767.1" xmlns="http://www.w3.org/1999/xhtml">// A shared object to lock.</span></span>
</code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.768.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.769.1" xmlns="http://www.w3.org/1999/xhtml">Program.Methods.cs</span></code><span class="koboSpan" id="kobo.770.1" xmlns="http://www.w3.org/1999/xhtml">, in both </span><code class="inlineCode"><span class="koboSpan" id="kobo.771.1" xmlns="http://www.w3.org/1999/xhtml">MethodA</span></code><span class="koboSpan" id="kobo.772.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><code class="inlineCode"><span class="koboSpan" id="kobo.773.1" xmlns="http://www.w3.org/1999/xhtml">MethodB</span></code><span class="koboSpan" id="kobo.774.1" xmlns="http://www.w3.org/1999/xhtml">, add a </span><code class="inlineCode"><span class="koboSpan" id="kobo.775.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></code><span class="koboSpan" id="kobo.776.1" xmlns="http://www.w3.org/1999/xhtml"> statement for the conch around the </span><code class="inlineCode"><span class="koboSpan" id="kobo.777.1" xmlns="http://www.w3.org/1999/xhtml">for</span></code><span class="koboSpan" id="kobo.778.1" xmlns="http://www.w3.org/1999/xhtml"> statements, as shown highlighted in the following code for </span><code class="inlineCode"><span class="koboSpan" id="kobo.779.1" xmlns="http://www.w3.org/1999/xhtml">MethodB</span></code><span class="koboSpan" id="kobo.780.1" xmlns="http://www.w3.org/1999/xhtml">:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="code-highlight"><strong class="hljs-keyword-slc"><span class="koboSpan" id="kobo.781.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></strong><strong class="hljs-slc"><span class="koboSpan" id="kobo.782.1" xmlns="http://www.w3.org/1999/xhtml"> (SharedObjects.Conch)</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.783.1" xmlns="http://www.w3.org/1999/xhtml">{</span></strong></span>
<span class="hljs-keyword"><span class="koboSpan" id="kobo.784.1" xmlns="http://www.w3.org/1999/xhtml">for</span></span><span class="koboSpan" id="kobo.785.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><span class="hljs-built_in"><span class="koboSpan" id="kobo.786.1" xmlns="http://www.w3.org/1999/xhtml">int</span></span><span class="koboSpan" id="kobo.787.1" xmlns="http://www.w3.org/1999/xhtml"> i = </span><span class="hljs-number"><span class="koboSpan" id="kobo.788.1" xmlns="http://www.w3.org/1999/xhtml">0</span></span><span class="koboSpan" id="kobo.789.1" xmlns="http://www.w3.org/1999/xhtml">; i &lt; </span><span class="hljs-number"><span class="koboSpan" id="kobo.790.1" xmlns="http://www.w3.org/1999/xhtml">5</span></span><span class="koboSpan" id="kobo.791.1" xmlns="http://www.w3.org/1999/xhtml">; i++)
  {
    Thread.Sleep(Random.Shared.Next(</span><span class="hljs-number"><span class="koboSpan" id="kobo.792.1" xmlns="http://www.w3.org/1999/xhtml">2000</span></span><span class="koboSpan" id="kobo.793.1" xmlns="http://www.w3.org/1999/xhtml">));
    SharedObjects.Message += </span><span class="hljs-string"><span class="koboSpan" id="kobo.794.1" xmlns="http://www.w3.org/1999/xhtml">"B"</span></span><span class="koboSpan" id="kobo.795.1" xmlns="http://www.w3.org/1999/xhtml">;
    Write(</span><span class="hljs-string"><span class="koboSpan" id="kobo.796.1" xmlns="http://www.w3.org/1999/xhtml">"."</span></span><span class="koboSpan" id="kobo.797.1" xmlns="http://www.w3.org/1999/xhtml">);
  }
</span><span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.798.1" xmlns="http://www.w3.org/1999/xhtml">}</span></strong></span>
</code></pre>
<div class="packt_tip">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.799.1" xmlns="http://www.w3.org/1999/xhtml">Good Practice</span></strong><span class="koboSpan" id="kobo.800.1" xmlns="http://www.w3.org/1999/xhtml">: Note that since checking the conch is voluntary, if you only use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.801.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></code><span class="koboSpan" id="kobo.802.1" xmlns="http://www.w3.org/1999/xhtml"> statement in one of the two methods, the shared resource will continue to be accessed by both methods. </span><span class="koboSpan" id="kobo.802.2" xmlns="http://www.w3.org/1999/xhtml">Make sure that all methods that access a shared resource respect the conch by calling </span><code class="inlineCode"><span class="koboSpan" id="kobo.803.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></code><span class="koboSpan" id="kobo.804.1" xmlns="http://www.w3.org/1999/xhtml"> on it before trying to use any shared resources.</span></p>
</div>
</li>
</ol>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="3"><span class="koboSpan" id="kobo.805.1" xmlns="http://www.w3.org/1999/xhtml">Run the code and view the result, as shown in the following output:
        </span><pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.806.1" xmlns="http://www.w3.org/1999/xhtml">Please wait for the tasks to complete.
</span><span class="koboSpan" id="kobo.806.2" xmlns="http://www.w3.org/1999/xhtml">..........
</span><span class="koboSpan" id="kobo.806.3" xmlns="http://www.w3.org/1999/xhtml">Results: BBBBBAAAAA.
</span><span class="koboSpan" id="kobo.806.4" xmlns="http://www.w3.org/1999/xhtml">10,345 elapsed milliseconds.
</span></code></pre>
</li>
</ol>
<p class="normal"><span class="koboSpan" id="kobo.807.1" xmlns="http://www.w3.org/1999/xhtml">Although the time elapsed was longer, only one method at a time could access the shared resource. </span><span class="koboSpan" id="kobo.807.2" xmlns="http://www.w3.org/1999/xhtml">Either </span><code class="inlineCode"><span class="koboSpan" id="kobo.808.1" xmlns="http://www.w3.org/1999/xhtml">MethodA</span></code><span class="koboSpan" id="kobo.809.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><code class="inlineCode"><span class="koboSpan" id="kobo.810.1" xmlns="http://www.w3.org/1999/xhtml">MethodB</span></code><span class="koboSpan" id="kobo.811.1" xmlns="http://www.w3.org/1999/xhtml"> can start first. </span><span class="koboSpan" id="kobo.811.2" xmlns="http://www.w3.org/1999/xhtml">Once a method has finished its work on</span><a id="_idIndexMarker447"/><span class="koboSpan" id="kobo.812.1" xmlns="http://www.w3.org/1999/xhtml"> the shared resource, then the conch gets released, and the other method has the chance to do its work.</span></p>
<h2 class="heading-2" id="_idParaDest-209"><span class="koboSpan" id="kobo.813.1" xmlns="http://www.w3.org/1999/xhtml">Understanding the lock statement</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.814.1" xmlns="http://www.w3.org/1999/xhtml">You might </span><a id="_idIndexMarker448"/><span class="koboSpan" id="kobo.815.1" xmlns="http://www.w3.org/1999/xhtml">wonder what the </span><code class="inlineCode"><span class="koboSpan" id="kobo.816.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></code><span class="koboSpan" id="kobo.817.1" xmlns="http://www.w3.org/1999/xhtml"> statement does when it “locks” an object variable (hint: it does not lock the object!), as shown in the following code:</span></p>
<pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.818.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></span><span class="koboSpan" id="kobo.819.1" xmlns="http://www.w3.org/1999/xhtml"> (SharedObjects.Conch)
{
  </span><span class="hljs-comment"><span class="koboSpan" id="kobo.820.1" xmlns="http://www.w3.org/1999/xhtml">// Work with a shared resource.</span></span><span class="koboSpan" id="kobo.821.1" xmlns="http://www.w3.org/1999/xhtml">
}
</span></code></pre>
<p class="normal"><span class="koboSpan" id="kobo.822.1" xmlns="http://www.w3.org/1999/xhtml">The C# compiler changes the </span><code class="inlineCode"><span class="koboSpan" id="kobo.823.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></code><span class="koboSpan" id="kobo.824.1" xmlns="http://www.w3.org/1999/xhtml"> statement into a </span><code class="inlineCode"><span class="koboSpan" id="kobo.825.1" xmlns="http://www.w3.org/1999/xhtml">try</span></code><span class="koboSpan" id="kobo.826.1" xmlns="http://www.w3.org/1999/xhtml">-</span><code class="inlineCode"><span class="koboSpan" id="kobo.827.1" xmlns="http://www.w3.org/1999/xhtml">finally</span></code><span class="koboSpan" id="kobo.828.1" xmlns="http://www.w3.org/1999/xhtml"> statement that uses the </span><code class="inlineCode"><span class="koboSpan" id="kobo.829.1" xmlns="http://www.w3.org/1999/xhtml">Monitor</span></code><span class="koboSpan" id="kobo.830.1" xmlns="http://www.w3.org/1999/xhtml"> class to </span><em class="italic"><span class="koboSpan" id="kobo.831.1" xmlns="http://www.w3.org/1999/xhtml">enter</span></em><span class="koboSpan" id="kobo.832.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><em class="italic"><span class="koboSpan" id="kobo.833.1" xmlns="http://www.w3.org/1999/xhtml">exit</span></em><span class="koboSpan" id="kobo.834.1" xmlns="http://www.w3.org/1999/xhtml"> the conch object (I like to think of it as </span><em class="italic"><span class="koboSpan" id="kobo.835.1" xmlns="http://www.w3.org/1999/xhtml">take</span></em><span class="koboSpan" id="kobo.836.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><em class="italic"><span class="koboSpan" id="kobo.837.1" xmlns="http://www.w3.org/1999/xhtml">release</span></em><span class="koboSpan" id="kobo.838.1" xmlns="http://www.w3.org/1999/xhtml"> the conch object), as shown in the following code:</span></p>
<pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.839.1" xmlns="http://www.w3.org/1999/xhtml">try</span></span><span class="koboSpan" id="kobo.840.1" xmlns="http://www.w3.org/1999/xhtml">
{
  Monitor.Enter(SharedObjects.Conch);
  </span><span class="hljs-comment"><span class="koboSpan" id="kobo.841.1" xmlns="http://www.w3.org/1999/xhtml">// Work with a shared resource.</span></span><span class="koboSpan" id="kobo.842.1" xmlns="http://www.w3.org/1999/xhtml">
}
</span><span class="hljs-keyword"><span class="koboSpan" id="kobo.843.1" xmlns="http://www.w3.org/1999/xhtml">finally</span></span><span class="koboSpan" id="kobo.844.1" xmlns="http://www.w3.org/1999/xhtml">
{
  Monitor.Exit(SharedObjects.Conch);
}
</span></code></pre>
<p class="normal"><span class="koboSpan" id="kobo.845.1" xmlns="http://www.w3.org/1999/xhtml">When a thread calls </span><code class="inlineCode"><span class="koboSpan" id="kobo.846.1" xmlns="http://www.w3.org/1999/xhtml">Monitor.Enter</span></code><span class="koboSpan" id="kobo.847.1" xmlns="http://www.w3.org/1999/xhtml"> on a reference type, it checks to see if some other thread has already taken the conch. </span><span class="koboSpan" id="kobo.847.2" xmlns="http://www.w3.org/1999/xhtml">If it has, the thread waits. </span><span class="koboSpan" id="kobo.847.3" xmlns="http://www.w3.org/1999/xhtml">If it has not, the thread takes the conch and gets on with its work on the shared resource. </span><span class="koboSpan" id="kobo.847.4" xmlns="http://www.w3.org/1999/xhtml">Once the thread has finished its work, it calls </span><code class="inlineCode"><span class="koboSpan" id="kobo.848.1" xmlns="http://www.w3.org/1999/xhtml">Monitor.Exit</span></code><span class="koboSpan" id="kobo.849.1" xmlns="http://www.w3.org/1999/xhtml">, releasing the conch. </span></p>
<p class="normal"><span class="koboSpan" id="kobo.850.1" xmlns="http://www.w3.org/1999/xhtml">If another thread was waiting, it could now take the conch and do its work. </span><span class="koboSpan" id="kobo.850.2" xmlns="http://www.w3.org/1999/xhtml">This requires all threads to respect the conch by calling </span><code class="inlineCode"><span class="koboSpan" id="kobo.851.1" xmlns="http://www.w3.org/1999/xhtml">Monitor.Enter</span></code><span class="koboSpan" id="kobo.852.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><code class="inlineCode"><span class="koboSpan" id="kobo.853.1" xmlns="http://www.w3.org/1999/xhtml">Monitor.Exit</span></code><span class="koboSpan" id="kobo.854.1" xmlns="http://www.w3.org/1999/xhtml"> appropriately.</span></p>
<div class="packt_tip">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.855.1" xmlns="http://www.w3.org/1999/xhtml">Good Practice</span></strong><span class="koboSpan" id="kobo.856.1" xmlns="http://www.w3.org/1999/xhtml">: You cannot use value types (</span><code class="inlineCode"><span class="koboSpan" id="kobo.857.1" xmlns="http://www.w3.org/1999/xhtml">struct</span></code><span class="koboSpan" id="kobo.858.1" xmlns="http://www.w3.org/1999/xhtml"> types) as a conch. </span><code class="inlineCode"><span class="koboSpan" id="kobo.859.1" xmlns="http://www.w3.org/1999/xhtml">Monitor.Enter</span></code><span class="koboSpan" id="kobo.860.1" xmlns="http://www.w3.org/1999/xhtml"> requires a reference type because it locks the memory address. </span><span class="koboSpan" id="kobo.860.2" xmlns="http://www.w3.org/1999/xhtml">Any internal data structures for that object are </span><em class="italic"><span class="koboSpan" id="kobo.861.1" xmlns="http://www.w3.org/1999/xhtml">not</span></em><span class="koboSpan" id="kobo.862.1" xmlns="http://www.w3.org/1999/xhtml"> locked.</span></p>
</div>
<h2 class="heading-2" id="_idParaDest-210"><span class="koboSpan" id="kobo.863.1" xmlns="http://www.w3.org/1999/xhtml">Avoiding deadlocks</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.864.1" xmlns="http://www.w3.org/1999/xhtml">Knowing </span><a id="_idIndexMarker449"/><span class="koboSpan" id="kobo.865.1" xmlns="http://www.w3.org/1999/xhtml">how the </span><code class="inlineCode"><span class="koboSpan" id="kobo.866.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></code><span class="koboSpan" id="kobo.867.1" xmlns="http://www.w3.org/1999/xhtml"> statement is translated by the compiler to method calls on the </span><code class="inlineCode"><span class="koboSpan" id="kobo.868.1" xmlns="http://www.w3.org/1999/xhtml">Monitor</span></code><span class="koboSpan" id="kobo.869.1" xmlns="http://www.w3.org/1999/xhtml"> class is also important because using the </span><code class="inlineCode"><span class="koboSpan" id="kobo.870.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></code><span class="koboSpan" id="kobo.871.1" xmlns="http://www.w3.org/1999/xhtml"> statement can cause a deadlock.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.872.1" xmlns="http://www.w3.org/1999/xhtml">Deadlocks can occur when there are two or more shared resources (each with a conch to monitor which thread is currently doing work on each shared resource), and the following sequence of events happens:</span></p>
<ul>
<li class="bulletList"><span class="koboSpan" id="kobo.873.1" xmlns="http://www.w3.org/1999/xhtml">Thread X “locks” conch A and starts working on shared resource A.</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.874.1" xmlns="http://www.w3.org/1999/xhtml">Thread Y “locks” conch B and starts working on shared resource B.</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.875.1" xmlns="http://www.w3.org/1999/xhtml">While still working on resource A, thread X needs to also work with resource B, and so it attempts to “lock” conch B but is blocked because thread Y already has conch B.</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.876.1" xmlns="http://www.w3.org/1999/xhtml">While still working on resource B, thread Y needs to also work with resource A, and so it attempts to “lock” conch A but is blocked because thread X already has conch A.</span></li>
</ul>
<p class="normal"><span class="koboSpan" id="kobo.877.1" xmlns="http://www.w3.org/1999/xhtml">One way to prevent deadlocks is to specify a timeout when attempting to get a lock. </span><span class="koboSpan" id="kobo.877.2" xmlns="http://www.w3.org/1999/xhtml">To do this, you must manually use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.878.1" xmlns="http://www.w3.org/1999/xhtml">Monitor</span></code><span class="koboSpan" id="kobo.879.1" xmlns="http://www.w3.org/1999/xhtml"> class instead of using the </span><code class="inlineCode"><span class="koboSpan" id="kobo.880.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></code><span class="koboSpan" id="kobo.881.1" xmlns="http://www.w3.org/1999/xhtml"> statement. </span><span class="koboSpan" id="kobo.881.2" xmlns="http://www.w3.org/1999/xhtml">Let’s see how:</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.882.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.883.1" xmlns="http://www.w3.org/1999/xhtml">Program.Methods.cs</span></code><span class="koboSpan" id="kobo.884.1" xmlns="http://www.w3.org/1999/xhtml">, modify your code to replace the </span><code class="inlineCode"><span class="koboSpan" id="kobo.885.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></code><span class="koboSpan" id="kobo.886.1" xmlns="http://www.w3.org/1999/xhtml"> statements with code that tries to enter the conch with a timeout, outputs an error, and then exits the monitor, allowing other threads to enter the monitor, as shown highlighted in the following code for </span><code class="inlineCode"><span class="koboSpan" id="kobo.887.1" xmlns="http://www.w3.org/1999/xhtml">MethodB</span></code><span class="koboSpan" id="kobo.888.1" xmlns="http://www.w3.org/1999/xhtml">:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="code-highlight"><strong class="hljs-keyword-slc"><span class="koboSpan" id="kobo.889.1" xmlns="http://www.w3.org/1999/xhtml">try</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.890.1" xmlns="http://www.w3.org/1999/xhtml">{</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"> </strong><strong class="hljs-keyword-slc"><span class="koboSpan" id="kobo.891.1" xmlns="http://www.w3.org/1999/xhtml">if</span></strong><strong class="hljs-slc"><span class="koboSpan" id="kobo.892.1" xmlns="http://www.w3.org/1999/xhtml"> (Monitor.TryEnter(SharedObjects.Conch, TimeSpan.FromSeconds(</span></strong><strong class="hljs-number-slc"><span class="koboSpan" id="kobo.893.1" xmlns="http://www.w3.org/1999/xhtml">15</span></strong><strong class="hljs-slc"><span class="koboSpan" id="kobo.894.1" xmlns="http://www.w3.org/1999/xhtml">)))</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.895.1" xmlns="http://www.w3.org/1999/xhtml">  {</span></strong></span>
<span class="hljs-keyword"><span class="koboSpan" id="kobo.896.1" xmlns="http://www.w3.org/1999/xhtml">for</span></span><span class="koboSpan" id="kobo.897.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><span class="hljs-built_in"><span class="koboSpan" id="kobo.898.1" xmlns="http://www.w3.org/1999/xhtml">int</span></span><span class="koboSpan" id="kobo.899.1" xmlns="http://www.w3.org/1999/xhtml"> i = </span><span class="hljs-number"><span class="koboSpan" id="kobo.900.1" xmlns="http://www.w3.org/1999/xhtml">0</span></span><span class="koboSpan" id="kobo.901.1" xmlns="http://www.w3.org/1999/xhtml">; i &lt; </span><span class="hljs-number"><span class="koboSpan" id="kobo.902.1" xmlns="http://www.w3.org/1999/xhtml">5</span></span><span class="koboSpan" id="kobo.903.1" xmlns="http://www.w3.org/1999/xhtml">; i++)
    {
      Thread.Sleep(Random.Shared.Next(</span><span class="hljs-number"><span class="koboSpan" id="kobo.904.1" xmlns="http://www.w3.org/1999/xhtml">2000</span></span><span class="koboSpan" id="kobo.905.1" xmlns="http://www.w3.org/1999/xhtml">));
      SharedObjects.Message += </span><span class="hljs-string"><span class="koboSpan" id="kobo.906.1" xmlns="http://www.w3.org/1999/xhtml">"B"</span></span><span class="koboSpan" id="kobo.907.1" xmlns="http://www.w3.org/1999/xhtml">;
      Write(</span><span class="hljs-string"><span class="koboSpan" id="kobo.908.1" xmlns="http://www.w3.org/1999/xhtml">"."</span></span><span class="koboSpan" id="kobo.909.1" xmlns="http://www.w3.org/1999/xhtml">);
    }
</span><span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.910.1" xmlns="http://www.w3.org/1999/xhtml">  }</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"> </strong><strong class="hljs-keyword-slc"><span class="koboSpan" id="kobo.911.1" xmlns="http://www.w3.org/1999/xhtml">else</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.912.1" xmlns="http://www.w3.org/1999/xhtml">  {</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.913.1" xmlns="http://www.w3.org/1999/xhtml">    WriteLine(</span></strong><strong class="hljs-string-slc"><span class="koboSpan" id="kobo.914.1" xmlns="http://www.w3.org/1999/xhtml">"Method B timed out when entering a monitor on conch."</span></strong><strong class="hljs-slc"><span class="koboSpan" id="kobo.915.1" xmlns="http://www.w3.org/1999/xhtml">);</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.916.1" xmlns="http://www.w3.org/1999/xhtml">  }</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.917.1" xmlns="http://www.w3.org/1999/xhtml">}</span></strong></span>
<span class="code-highlight"><strong class="hljs-keyword-slc"><span class="koboSpan" id="kobo.918.1" xmlns="http://www.w3.org/1999/xhtml">finally</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.919.1" xmlns="http://www.w3.org/1999/xhtml">{</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.920.1" xmlns="http://www.w3.org/1999/xhtml">  Monitor.Exit(SharedObjects.Conch);</span></strong></span>
<span class="code-highlight"><strong class="hljs-slc"><span class="koboSpan" id="kobo.921.1" xmlns="http://www.w3.org/1999/xhtml">}</span></strong></span>
</code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.922.1" xmlns="http://www.w3.org/1999/xhtml">Run the</span><a id="_idIndexMarker450"/><span class="koboSpan" id="kobo.923.1" xmlns="http://www.w3.org/1999/xhtml"> code and view the result, which should return the same results as before (although either A or B could grab the conch first) but is better code because it will prevent potential deadlocks.</span></li>
</ol>
<div class="packt_tip">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.924.1" xmlns="http://www.w3.org/1999/xhtml">Good Practice</span></strong><span class="koboSpan" id="kobo.925.1" xmlns="http://www.w3.org/1999/xhtml">: Only use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.926.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></code><span class="koboSpan" id="kobo.927.1" xmlns="http://www.w3.org/1999/xhtml"> keyword if you can write your code such that it avoids potential deadlocks. </span><span class="koboSpan" id="kobo.927.2" xmlns="http://www.w3.org/1999/xhtml">If you cannot avoid potential deadlocks, then always use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.928.1" xmlns="http://www.w3.org/1999/xhtml">Monitor.TryEnter</span></code><span class="koboSpan" id="kobo.929.1" xmlns="http://www.w3.org/1999/xhtml"> method instead of </span><code class="inlineCode"><span class="koboSpan" id="kobo.930.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></code><span class="koboSpan" id="kobo.931.1" xmlns="http://www.w3.org/1999/xhtml">, in combination with a </span><code class="inlineCode"><span class="koboSpan" id="kobo.932.1" xmlns="http://www.w3.org/1999/xhtml">try</span></code><span class="koboSpan" id="kobo.933.1" xmlns="http://www.w3.org/1999/xhtml">-</span><code class="inlineCode"><span class="koboSpan" id="kobo.934.1" xmlns="http://www.w3.org/1999/xhtml">finally</span></code><span class="koboSpan" id="kobo.935.1" xmlns="http://www.w3.org/1999/xhtml"> statement, so that you can supply a timeout and one of the threads will back out of a deadlock if it occurs. </span><span class="koboSpan" id="kobo.935.2" xmlns="http://www.w3.org/1999/xhtml">You can read more about good threading practices at the following link: </span><a href="https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices"><span class="url"><span class="koboSpan" id="kobo.936.1" xmlns="http://www.w3.org/1999/xhtml">https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices</span></span></a><span class="koboSpan" id="kobo.937.1" xmlns="http://www.w3.org/1999/xhtml">.</span></p>
</div>
<h2 class="heading-2" id="_idParaDest-211"><span class="koboSpan" id="kobo.938.1" xmlns="http://www.w3.org/1999/xhtml">Synchronizing events</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.939.1" xmlns="http://www.w3.org/1999/xhtml">.NET events </span><a id="_idIndexMarker451"/><span class="koboSpan" id="kobo.940.1" xmlns="http://www.w3.org/1999/xhtml">are not thread-safe, so you should avoid using them in multi-threaded scenarios.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.941.1" xmlns="http://www.w3.org/1999/xhtml">After learning that .NET events are not thread-safe, some developers attempt to use exclusive locks when adding and removing event handlers or when raising an event, as shown in the following code:</span></p>
<pre class="programlisting code"><code class="hljs-code"><span class="hljs-comment"><span class="koboSpan" id="kobo.942.1" xmlns="http://www.w3.org/1999/xhtml">// event delegate field</span></span>
<span class="hljs-keyword"><span class="koboSpan" id="kobo.943.1" xmlns="http://www.w3.org/1999/xhtml">public</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.944.1" xmlns="http://www.w3.org/1999/xhtml">event</span></span><span class="koboSpan" id="kobo.945.1" xmlns="http://www.w3.org/1999/xhtml"> EventHandler? </span><span class="koboSpan" id="kobo.945.2" xmlns="http://www.w3.org/1999/xhtml">Shout;
</span><span class="hljs-comment"><span class="koboSpan" id="kobo.946.1" xmlns="http://www.w3.org/1999/xhtml">// conch</span></span>
<span class="hljs-keyword"><span class="koboSpan" id="kobo.947.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span> <span class="hljs-built_in"><span class="koboSpan" id="kobo.948.1" xmlns="http://www.w3.org/1999/xhtml">object</span></span><span class="koboSpan" id="kobo.949.1" xmlns="http://www.w3.org/1999/xhtml"> eventConch = </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.950.1" xmlns="http://www.w3.org/1999/xhtml">new</span></span><span class="koboSpan" id="kobo.951.1" xmlns="http://www.w3.org/1999/xhtml">();
</span><span class="hljs-comment"><span class="koboSpan" id="kobo.952.1" xmlns="http://www.w3.org/1999/xhtml">// method</span></span>
<span class="hljs-keyword"><span class="koboSpan" id="kobo.953.1" xmlns="http://www.w3.org/1999/xhtml">public</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.954.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.955.1" xmlns="http://www.w3.org/1999/xhtml">Poke</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.956.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.957.1" xmlns="http://www.w3.org/1999/xhtml">
{
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.958.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></span><span class="koboSpan" id="kobo.959.1" xmlns="http://www.w3.org/1999/xhtml"> (eventConch) </span><span class="hljs-comment"><span class="koboSpan" id="kobo.960.1" xmlns="http://www.w3.org/1999/xhtml">// bad idea</span></span><span class="koboSpan" id="kobo.961.1" xmlns="http://www.w3.org/1999/xhtml">
  {
    </span><span class="hljs-comment"><span class="koboSpan" id="kobo.962.1" xmlns="http://www.w3.org/1999/xhtml">// If something is listening...</span></span>
<span class="hljs-keyword"><span class="koboSpan" id="kobo.963.1" xmlns="http://www.w3.org/1999/xhtml">if</span></span><span class="koboSpan" id="kobo.964.1" xmlns="http://www.w3.org/1999/xhtml"> (Shout != </span><span class="hljs-literal"><span class="koboSpan" id="kobo.965.1" xmlns="http://www.w3.org/1999/xhtml">null</span></span><span class="koboSpan" id="kobo.966.1" xmlns="http://www.w3.org/1999/xhtml">)
    {
      </span><span class="hljs-comment"><span class="koboSpan" id="kobo.967.1" xmlns="http://www.w3.org/1999/xhtml">// ...then call the delegate to raise the event.</span></span><span class="koboSpan" id="kobo.968.1" xmlns="http://www.w3.org/1999/xhtml">
      Shout(</span><span class="hljs-keyword"><span class="koboSpan" id="kobo.969.1" xmlns="http://www.w3.org/1999/xhtml">this</span></span><span class="koboSpan" id="kobo.970.1" xmlns="http://www.w3.org/1999/xhtml">, EventArgs.Empty);
    }
  }
}
</span></code></pre>
<div class="packt_tip">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.971.1" xmlns="http://www.w3.org/1999/xhtml">Good Practice</span></strong><span class="koboSpan" id="kobo.972.1" xmlns="http://www.w3.org/1999/xhtml">: Is it good or bad that some developers use locks in event handling? </span><span class="koboSpan" id="kobo.972.2" xmlns="http://www.w3.org/1999/xhtml">Well, it is complicated. </span><span class="koboSpan" id="kobo.972.3" xmlns="http://www.w3.org/1999/xhtml">It depends on complex factors so I cannot give a value judgement. </span><span class="koboSpan" id="kobo.972.4" xmlns="http://www.w3.org/1999/xhtml">You can read more about events and thread safety at the following link: </span><a href="https://learn.microsoft.com/en-us/archive/blogs/cburrows/field-like-events-considered-harmful"><span class="url"><span class="koboSpan" id="kobo.973.1" xmlns="http://www.w3.org/1999/xhtml">https://learn.microsoft.com/en-us/archive/blogs/cburrows/field-like-events-considered-harmful</span></span></a><span class="koboSpan" id="kobo.974.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.974.2" xmlns="http://www.w3.org/1999/xhtml">But it is complicated, as explained by Stephen Cleary in the following blog post: </span><a href="https://blog.stephencleary.com/2009/06/threadsafe-events.html"><span class="url"><span class="koboSpan" id="kobo.975.1" xmlns="http://www.w3.org/1999/xhtml">https://blog.stephencleary.com/2009/06/threadsafe-events.html</span></span></a><span class="koboSpan" id="kobo.976.1" xmlns="http://www.w3.org/1999/xhtml">.</span></p>
</div>
<h2 class="heading-2" id="_idParaDest-212"><span class="koboSpan" id="kobo.977.1" xmlns="http://www.w3.org/1999/xhtml">Making CPU operations atomic</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.978.1" xmlns="http://www.w3.org/1999/xhtml">Atomic is </span><a id="_idIndexMarker452"/><span class="koboSpan" id="kobo.979.1" xmlns="http://www.w3.org/1999/xhtml">from the Greek word </span><strong class="keyWord"><span class="koboSpan" id="kobo.980.1" xmlns="http://www.w3.org/1999/xhtml">atomos</span></strong><span class="koboSpan" id="kobo.981.1" xmlns="http://www.w3.org/1999/xhtml">, which means </span><em class="italic"><span class="koboSpan" id="kobo.982.1" xmlns="http://www.w3.org/1999/xhtml">undividable</span></em><span class="koboSpan" id="kobo.983.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.983.2" xmlns="http://www.w3.org/1999/xhtml">It is important to understand </span><a id="_idIndexMarker453"/><span class="koboSpan" id="kobo.984.1" xmlns="http://www.w3.org/1999/xhtml">which operations are atomic in multithreading because if they are not atomic, then they could be interrupted by another thread partway through their operation. </span><span class="koboSpan" id="kobo.984.2" xmlns="http://www.w3.org/1999/xhtml">Is the C# increment operator atomic, as shown in the following code?</span></p>
<pre class="programlisting code"><code class="hljs-code"><span class="hljs-built_in"><span class="koboSpan" id="kobo.985.1" xmlns="http://www.w3.org/1999/xhtml">int</span></span><span class="koboSpan" id="kobo.986.1" xmlns="http://www.w3.org/1999/xhtml"> x = </span><span class="hljs-number"><span class="koboSpan" id="kobo.987.1" xmlns="http://www.w3.org/1999/xhtml">3</span></span><span class="koboSpan" id="kobo.988.1" xmlns="http://www.w3.org/1999/xhtml">;
x++; </span><span class="hljs-comment"><span class="koboSpan" id="kobo.989.1" xmlns="http://www.w3.org/1999/xhtml">// is this an atomic CPU operation?</span></span>
</code></pre>
<p class="normal"><em class="italic"><span class="koboSpan" id="kobo.990.1" xmlns="http://www.w3.org/1999/xhtml">It is not atomic!</span></em><span class="koboSpan" id="kobo.991.1" xmlns="http://www.w3.org/1999/xhtml"> Incrementing an integer requires the following three CPU operations:</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.992.1" xmlns="http://www.w3.org/1999/xhtml">Load a value from an instance variable into a register.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.993.1" xmlns="http://www.w3.org/1999/xhtml">Increment the value.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.994.1" xmlns="http://www.w3.org/1999/xhtml">Store the value in the instance variable.</span></li>
</ol>
<p class="normal"><span class="koboSpan" id="kobo.995.1" xmlns="http://www.w3.org/1999/xhtml">A thread could be interrupted after executing the first two steps. </span><span class="koboSpan" id="kobo.995.2" xmlns="http://www.w3.org/1999/xhtml">A second thread could then execute all three steps. </span><span class="koboSpan" id="kobo.995.3" xmlns="http://www.w3.org/1999/xhtml">When the first thread resumes execution, it will overwrite the</span><a id="_idIndexMarker454"/><span class="koboSpan" id="kobo.996.1" xmlns="http://www.w3.org/1999/xhtml"> value in the variable, and the effect of the increment or decrement performed by the second thread will be lost!</span></p>
<p class="normal"><span class="koboSpan" id="kobo.997.1" xmlns="http://www.w3.org/1999/xhtml">There is a type named </span><code class="inlineCode"><span class="koboSpan" id="kobo.998.1" xmlns="http://www.w3.org/1999/xhtml">Interlocked</span></code><span class="koboSpan" id="kobo.999.1" xmlns="http://www.w3.org/1999/xhtml"> that can perform atomic actions like </span><code class="inlineCode"><span class="koboSpan" id="kobo.1000.1" xmlns="http://www.w3.org/1999/xhtml">Add</span></code><span class="koboSpan" id="kobo.1001.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1002.1" xmlns="http://www.w3.org/1999/xhtml">Increment</span></code><span class="koboSpan" id="kobo.1003.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1004.1" xmlns="http://www.w3.org/1999/xhtml">Decrement</span></code><span class="koboSpan" id="kobo.1005.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1006.1" xmlns="http://www.w3.org/1999/xhtml">Exchange</span></code><span class="koboSpan" id="kobo.1007.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1008.1" xmlns="http://www.w3.org/1999/xhtml">CompareExchange</span></code><span class="koboSpan" id="kobo.1009.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1010.1" xmlns="http://www.w3.org/1999/xhtml">And</span></code><span class="koboSpan" id="kobo.1011.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1012.1" xmlns="http://www.w3.org/1999/xhtml">Or</span></code><span class="koboSpan" id="kobo.1013.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1014.1" xmlns="http://www.w3.org/1999/xhtml">Read</span></code><span class="koboSpan" id="kobo.1015.1" xmlns="http://www.w3.org/1999/xhtml"> on the integer types in the following list:</span></p>
<ul>
<li class="bulletList"><code class="inlineCode"><span class="koboSpan" id="kobo.1016.1" xmlns="http://www.w3.org/1999/xhtml">System.Int32</span></code><span class="koboSpan" id="kobo.1017.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><code class="inlineCode"><span class="koboSpan" id="kobo.1018.1" xmlns="http://www.w3.org/1999/xhtml">int</span></code><span class="koboSpan" id="kobo.1019.1" xmlns="http://www.w3.org/1999/xhtml">), </span><code class="inlineCode"><span class="koboSpan" id="kobo.1020.1" xmlns="http://www.w3.org/1999/xhtml">System.UInt32</span></code><span class="koboSpan" id="kobo.1021.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><code class="inlineCode"><span class="koboSpan" id="kobo.1022.1" xmlns="http://www.w3.org/1999/xhtml">uint</span></code><span class="koboSpan" id="kobo.1023.1" xmlns="http://www.w3.org/1999/xhtml">)</span></li>
<li class="bulletList"><code class="inlineCode"><span class="koboSpan" id="kobo.1024.1" xmlns="http://www.w3.org/1999/xhtml">System.Int64</span></code><span class="koboSpan" id="kobo.1025.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><code class="inlineCode"><span class="koboSpan" id="kobo.1026.1" xmlns="http://www.w3.org/1999/xhtml">long</span></code><span class="koboSpan" id="kobo.1027.1" xmlns="http://www.w3.org/1999/xhtml">), </span><code class="inlineCode"><span class="koboSpan" id="kobo.1028.1" xmlns="http://www.w3.org/1999/xhtml">System.UInt64</span></code><span class="koboSpan" id="kobo.1029.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><code class="inlineCode"><span class="koboSpan" id="kobo.1030.1" xmlns="http://www.w3.org/1999/xhtml">ulong</span></code><span class="koboSpan" id="kobo.1031.1" xmlns="http://www.w3.org/1999/xhtml">)</span></li>
</ul>
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1032.1" xmlns="http://www.w3.org/1999/xhtml">Interlocked</span></code><span class="koboSpan" id="kobo.1033.1" xmlns="http://www.w3.org/1999/xhtml"> does not work on numeric types like </span><code class="inlineCode"><span class="koboSpan" id="kobo.1034.1" xmlns="http://www.w3.org/1999/xhtml">byte</span></code><span class="koboSpan" id="kobo.1035.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1036.1" xmlns="http://www.w3.org/1999/xhtml">sbyte</span></code><span class="koboSpan" id="kobo.1037.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1038.1" xmlns="http://www.w3.org/1999/xhtml">short</span></code><span class="koboSpan" id="kobo.1039.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1040.1" xmlns="http://www.w3.org/1999/xhtml">ushort</span></code><span class="koboSpan" id="kobo.1041.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1042.1" xmlns="http://www.w3.org/1999/xhtml">decimal</span></code><span class="koboSpan" id="kobo.1043.1" xmlns="http://www.w3.org/1999/xhtml">.</span></p>
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1044.1" xmlns="http://www.w3.org/1999/xhtml">Interlocked</span></code><span class="koboSpan" id="kobo.1045.1" xmlns="http://www.w3.org/1999/xhtml"> can perform atomic operations like </span><code class="inlineCode"><span class="koboSpan" id="kobo.1046.1" xmlns="http://www.w3.org/1999/xhtml">Exchange</span></code><span class="koboSpan" id="kobo.1047.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1048.1" xmlns="http://www.w3.org/1999/xhtml">CompareExchange</span></code><span class="koboSpan" id="kobo.1049.1" xmlns="http://www.w3.org/1999/xhtml"> that swap values in memory on the following types:</span></p>
<ul>
<li class="bulletList"><code class="inlineCode"><span class="koboSpan" id="kobo.1050.1" xmlns="http://www.w3.org/1999/xhtml">System.Single</span></code><span class="koboSpan" id="kobo.1051.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><code class="inlineCode"><span class="koboSpan" id="kobo.1052.1" xmlns="http://www.w3.org/1999/xhtml">float</span></code><span class="koboSpan" id="kobo.1053.1" xmlns="http://www.w3.org/1999/xhtml">), </span><code class="inlineCode"><span class="koboSpan" id="kobo.1054.1" xmlns="http://www.w3.org/1999/xhtml">System.Double</span></code><span class="koboSpan" id="kobo.1055.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><code class="inlineCode"><span class="koboSpan" id="kobo.1056.1" xmlns="http://www.w3.org/1999/xhtml">double</span></code><span class="koboSpan" id="kobo.1057.1" xmlns="http://www.w3.org/1999/xhtml">)</span></li>
<li class="bulletList"><code class="inlineCode"><span class="koboSpan" id="kobo.1058.1" xmlns="http://www.w3.org/1999/xhtml">nint</span></code><span class="koboSpan" id="kobo.1059.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1060.1" xmlns="http://www.w3.org/1999/xhtml">nuint</span></code></li>
<li class="bulletList"><code class="inlineCode"><span class="koboSpan" id="kobo.1061.1" xmlns="http://www.w3.org/1999/xhtml">System.Object</span></code><span class="koboSpan" id="kobo.1062.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><code class="inlineCode"><span class="koboSpan" id="kobo.1063.1" xmlns="http://www.w3.org/1999/xhtml">object</span></code><span class="koboSpan" id="kobo.1064.1" xmlns="http://www.w3.org/1999/xhtml">)</span></li>
</ul>
<p class="normal"><span class="koboSpan" id="kobo.1065.1" xmlns="http://www.w3.org/1999/xhtml">Let’s see it in action:</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.1066.1" xmlns="http://www.w3.org/1999/xhtml">Declare another field in the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1067.1" xmlns="http://www.w3.org/1999/xhtml">SharedObjects</span></code><span class="koboSpan" id="kobo.1068.1" xmlns="http://www.w3.org/1999/xhtml"> class that will count how many operations have occurred, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.1069.1" xmlns="http://www.w3.org/1999/xhtml">public</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.1070.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span> <span class="hljs-built_in"><span class="koboSpan" id="kobo.1071.1" xmlns="http://www.w3.org/1999/xhtml">int</span></span><span class="koboSpan" id="kobo.1072.1" xmlns="http://www.w3.org/1999/xhtml"> Counter; </span><span class="hljs-comment"><span class="koboSpan" id="kobo.1073.1" xmlns="http://www.w3.org/1999/xhtml">// Another shared resource.</span></span>
</code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.1074.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.1075.1" xmlns="http://www.w3.org/1999/xhtml">Program.Methods.cs</span></code><span class="koboSpan" id="kobo.1076.1" xmlns="http://www.w3.org/1999/xhtml">, in both methods A and B, inside the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1077.1" xmlns="http://www.w3.org/1999/xhtml">for</span></code><span class="koboSpan" id="kobo.1078.1" xmlns="http://www.w3.org/1999/xhtml"> statement and after modifying the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1079.1" xmlns="http://www.w3.org/1999/xhtml">string</span></code><span class="koboSpan" id="kobo.1080.1" xmlns="http://www.w3.org/1999/xhtml"> value, add a statement to safely increment the counter, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="koboSpan" id="kobo.1081.1" xmlns="http://www.w3.org/1999/xhtml">Interlocked.Increment(</span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1082.1" xmlns="http://www.w3.org/1999/xhtml">ref</span></span><span class="koboSpan" id="kobo.1083.1" xmlns="http://www.w3.org/1999/xhtml"> SharedObjects.Counter);
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.1084.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.1085.1" xmlns="http://www.w3.org/1999/xhtml">Program.cs</span></code><span class="koboSpan" id="kobo.1086.1" xmlns="http://www.w3.org/1999/xhtml">, before outputting the elapsed time, write the current value of the counter to the console, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="koboSpan" id="kobo.1087.1" xmlns="http://www.w3.org/1999/xhtml">WriteLine(</span><span class="hljs-string"><span class="koboSpan" id="kobo.1088.1" xmlns="http://www.w3.org/1999/xhtml">$"</span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.1089.1" xmlns="http://www.w3.org/1999/xhtml">{SharedObjects.Counter}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.1090.1" xmlns="http://www.w3.org/1999/xhtml"> string modifications."</span></span><span class="koboSpan" id="kobo.1091.1" xmlns="http://www.w3.org/1999/xhtml">);
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.1092.1" xmlns="http://www.w3.org/1999/xhtml">Run the code and view the result, as shown highlighted in the following output:
        </span><pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.1093.1" xmlns="http://www.w3.org/1999/xhtml">Please wait for the tasks to complete.
</span><span class="koboSpan" id="kobo.1093.2" xmlns="http://www.w3.org/1999/xhtml">..........
</span><span class="koboSpan" id="kobo.1093.3" xmlns="http://www.w3.org/1999/xhtml">Results: BBBBBAAAAA.
</span><span class="koboSpan" id="kobo.1093.4" xmlns="http://www.w3.org/1999/xhtml">10 string modifications.
</span><span class="koboSpan" id="kobo.1093.5" xmlns="http://www.w3.org/1999/xhtml">13,531 elapsed milliseconds.
</span></code></pre>
</li>
</ol>
<p class="normal"><span class="koboSpan" id="kobo.1094.1" xmlns="http://www.w3.org/1999/xhtml">Observant </span><a id="_idIndexMarker455"/><span class="koboSpan" id="kobo.1095.1" xmlns="http://www.w3.org/1999/xhtml">readers will realize that the existing conch object protects all shared resources accessed within a block of code locked by the conch, and therefore, it is unnecessary to use </span><code class="inlineCode"><span class="koboSpan" id="kobo.1096.1" xmlns="http://www.w3.org/1999/xhtml">Interlocked</span></code><span class="koboSpan" id="kobo.1097.1" xmlns="http://www.w3.org/1999/xhtml"> in this specific example. </span><span class="koboSpan" id="kobo.1097.2" xmlns="http://www.w3.org/1999/xhtml">But if we had not already been protecting another shared resource like </span><code class="inlineCode"><span class="koboSpan" id="kobo.1098.1" xmlns="http://www.w3.org/1999/xhtml">Message</span></code><span class="koboSpan" id="kobo.1099.1" xmlns="http://www.w3.org/1999/xhtml">, then using </span><code class="inlineCode"><span class="koboSpan" id="kobo.1100.1" xmlns="http://www.w3.org/1999/xhtml">Interlocked</span></code><span class="koboSpan" id="kobo.1101.1" xmlns="http://www.w3.org/1999/xhtml"> would be necessary.</span></p>
<h2 class="heading-2" id="_idParaDest-213"><span class="koboSpan" id="kobo.1102.1" xmlns="http://www.w3.org/1999/xhtml">Applying other types of synchronization</span></h2>
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1103.1" xmlns="http://www.w3.org/1999/xhtml">Monitor</span></code><span class="koboSpan" id="kobo.1104.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1105.1" xmlns="http://www.w3.org/1999/xhtml">Interlocked</span></code><span class="koboSpan" id="kobo.1106.1" xmlns="http://www.w3.org/1999/xhtml"> are </span><a id="_idIndexMarker456"/><span class="koboSpan" id="kobo.1107.1" xmlns="http://www.w3.org/1999/xhtml">mutually exclusive locks that are simple and effective, but sometimes, you need more advanced options to synchronize access to shared resources, as shown in </span><em class="italic"><span class="koboSpan" id="kobo.1108.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.3</span></em><span class="koboSpan" id="kobo.1109.1" xmlns="http://www.w3.org/1999/xhtml">:</span></p>
<table class="table-container" id="table003-3">
<tbody>
<tr>
<td class="table-cell">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.1110.1" xmlns="http://www.w3.org/1999/xhtml">Type</span></strong></p>
</td>
<td class="table-cell">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.1111.1" xmlns="http://www.w3.org/1999/xhtml">Description</span></strong></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1112.1" xmlns="http://www.w3.org/1999/xhtml">ReaderWriterLock</span></code><span class="koboSpan" id="kobo.1113.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1114.1" xmlns="http://www.w3.org/1999/xhtml">ReaderWriterLockSlim</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><span class="koboSpan" id="kobo.1115.1" xmlns="http://www.w3.org/1999/xhtml">These allow multiple threads to be in </span><strong class="keyWord"><span class="koboSpan" id="kobo.1116.1" xmlns="http://www.w3.org/1999/xhtml">read mode</span></strong><span class="koboSpan" id="kobo.1117.1" xmlns="http://www.w3.org/1999/xhtml">, one thread to be in </span><strong class="keyWord"><span class="koboSpan" id="kobo.1118.1" xmlns="http://www.w3.org/1999/xhtml">write mode</span></strong><span class="koboSpan" id="kobo.1119.1" xmlns="http://www.w3.org/1999/xhtml"> with exclusive ownership of the write lock, and one thread that has read access to be in </span><strong class="keyWord"><span class="koboSpan" id="kobo.1120.1" xmlns="http://www.w3.org/1999/xhtml">upgradeable read mode</span></strong><span class="koboSpan" id="kobo.1121.1" xmlns="http://www.w3.org/1999/xhtml">, from which the thread can upgrade to write mode without having to relinquish its read access to the resource.</span></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1122.1" xmlns="http://www.w3.org/1999/xhtml">Mutex</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><span class="koboSpan" id="kobo.1123.1" xmlns="http://www.w3.org/1999/xhtml">Like </span><code class="inlineCode"><span class="koboSpan" id="kobo.1124.1" xmlns="http://www.w3.org/1999/xhtml">Monitor</span></code><span class="koboSpan" id="kobo.1125.1" xmlns="http://www.w3.org/1999/xhtml">, this provides exclusive access to a shared resource, except it is used for inter-process synchronization.</span></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1126.1" xmlns="http://www.w3.org/1999/xhtml">Semaphore</span></code><span class="koboSpan" id="kobo.1127.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1128.1" xmlns="http://www.w3.org/1999/xhtml">SemaphoreSlim</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><span class="koboSpan" id="kobo.1129.1" xmlns="http://www.w3.org/1999/xhtml">These limit the number of threads that can access a resource or pool of resources concurrently by defining slots. </span><span class="koboSpan" id="kobo.1129.2" xmlns="http://www.w3.org/1999/xhtml">This is known as </span><strong class="keyWord"><span class="koboSpan" id="kobo.1130.1" xmlns="http://www.w3.org/1999/xhtml">resource throttling</span></strong><span class="koboSpan" id="kobo.1131.1" xmlns="http://www.w3.org/1999/xhtml"> rather than </span><strong class="keyWord"><span class="koboSpan" id="kobo.1132.1" xmlns="http://www.w3.org/1999/xhtml">resource locking</span></strong><span class="koboSpan" id="kobo.1133.1" xmlns="http://www.w3.org/1999/xhtml">.</span></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1134.1" xmlns="http://www.w3.org/1999/xhtml">AutoResetEvent</span></code><span class="koboSpan" id="kobo.1135.1" xmlns="http://www.w3.org/1999/xhtml">,</span><code class="inlineCode"><span class="koboSpan" id="kobo.1136.1" xmlns="http://www.w3.org/1999/xhtml"> ManualResetEvent</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><span class="koboSpan" id="kobo.1137.1" xmlns="http://www.w3.org/1999/xhtml">Event wait handles allow threads to synchronize activities by signaling each other and by waiting for each other’s signals.</span></p>
</td>
</tr>
</tbody>
</table>
<p class="packt_figref"><span class="koboSpan" id="kobo.1138.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.3: Synchronization types</span></p>
<p class="normal"><span class="koboSpan" id="kobo.1139.1" xmlns="http://www.w3.org/1999/xhtml">Now that we’ve explored the importance of synchronizing access to shared resources in multi-threaded applications, it’s time to delve into how some new keywords introduced in C# 5 make writing asynchronous code easier.</span></p>
<h1 class="heading-1" id="_idParaDest-214"><span class="koboSpan" id="kobo.1140.1" xmlns="http://www.w3.org/1999/xhtml">Understanding async and await</span></h1>
<p class="normal"><span class="koboSpan" id="kobo.1141.1" xmlns="http://www.w3.org/1999/xhtml">C# 5 introduced two C# keywords when </span><a id="_idIndexMarker457"/><span class="koboSpan" id="kobo.1142.1" xmlns="http://www.w3.org/1999/xhtml">working with the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1143.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.1144.1" xmlns="http://www.w3.org/1999/xhtml"> type. </span><span class="koboSpan" id="kobo.1144.2" xmlns="http://www.w3.org/1999/xhtml">They </span><a id="_idIndexMarker458"/><span class="koboSpan" id="kobo.1145.1" xmlns="http://www.w3.org/1999/xhtml">are especially useful for the following:</span></p>
<ul>
<li class="bulletList"><span class="koboSpan" id="kobo.1146.1" xmlns="http://www.w3.org/1999/xhtml">Implementing multitasking for a </span><strong class="keyWord"><span class="koboSpan" id="kobo.1147.1" xmlns="http://www.w3.org/1999/xhtml">graphical user interface</span></strong><span class="koboSpan" id="kobo.1148.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="keyWord"><span class="koboSpan" id="kobo.1149.1" xmlns="http://www.w3.org/1999/xhtml">GUI</span></strong><span class="koboSpan" id="kobo.1150.1" xmlns="http://www.w3.org/1999/xhtml">)</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.1151.1" xmlns="http://www.w3.org/1999/xhtml">Improving the scalability of web applications and web services</span></li>
</ul>
<p class="normal"><span class="koboSpan" id="kobo.1152.1" xmlns="http://www.w3.org/1999/xhtml">In </span><em class="chapterRef"><span class="koboSpan" id="kobo.1153.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 16</span></em><span class="koboSpan" id="kobo.1154.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.1155.1" xmlns="http://www.w3.org/1999/xhtml">Building Mobile and Desktop Apps Using .NET MAUI</span></em><span class="koboSpan" id="kobo.1156.1" xmlns="http://www.w3.org/1999/xhtml">, we will see how the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1157.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1158.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1159.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1160.1" xmlns="http://www.w3.org/1999/xhtml"> keywords can implement multitasking for a GUI.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.1161.1" xmlns="http://www.w3.org/1999/xhtml">But for now, let’s learn the theory of why these two C# keywords were introduced, and then later, you will see them used in practice.</span></p>
<h2 class="heading-2" id="_idParaDest-215"><span class="koboSpan" id="kobo.1162.1" xmlns="http://www.w3.org/1999/xhtml">Improving responsiveness for console apps</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.1163.1" xmlns="http://www.w3.org/1999/xhtml">One of the</span><a id="_idIndexMarker459"/><span class="koboSpan" id="kobo.1164.1" xmlns="http://www.w3.org/1999/xhtml"> limitations with console apps is that you can only use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1165.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1166.1" xmlns="http://www.w3.org/1999/xhtml"> keyword inside methods that are marked as </span><code class="inlineCode"><span class="koboSpan" id="kobo.1167.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1168.1" xmlns="http://www.w3.org/1999/xhtml">, but C# 7 and earlier do not allow the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1169.1" xmlns="http://www.w3.org/1999/xhtml">Main</span></code><span class="koboSpan" id="kobo.1170.1" xmlns="http://www.w3.org/1999/xhtml"> method to be marked as </span><code class="inlineCode"><span class="koboSpan" id="kobo.1171.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1172.1" xmlns="http://www.w3.org/1999/xhtml">! </span><span class="koboSpan" id="kobo.1172.2" xmlns="http://www.w3.org/1999/xhtml">Luckily, a new feature introduced in C# 7.1 was support for </span><code class="inlineCode"><span class="koboSpan" id="kobo.1173.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1174.1" xmlns="http://www.w3.org/1999/xhtml"> in </span><code class="inlineCode"><span class="koboSpan" id="kobo.1175.1" xmlns="http://www.w3.org/1999/xhtml">Main</span></code><span class="koboSpan" id="kobo.1176.1" xmlns="http://www.w3.org/1999/xhtml">:</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.1177.1" xmlns="http://www.w3.org/1999/xhtml">Use your preferred code editor to add a new </span><strong class="screenText"><span class="koboSpan" id="kobo.1178.1" xmlns="http://www.w3.org/1999/xhtml">Console App</span></strong><span class="koboSpan" id="kobo.1179.1" xmlns="http://www.w3.org/1999/xhtml"> / </span><code class="inlineCode"><span class="koboSpan" id="kobo.1180.1" xmlns="http://www.w3.org/1999/xhtml">console</span></code><span class="koboSpan" id="kobo.1181.1" xmlns="http://www.w3.org/1999/xhtml"> project to the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1182.1" xmlns="http://www.w3.org/1999/xhtml">Chapter05</span></code><span class="koboSpan" id="kobo.1183.1" xmlns="http://www.w3.org/1999/xhtml"> solution named </span><code class="inlineCode"><span class="koboSpan" id="kobo.1184.1" xmlns="http://www.w3.org/1999/xhtml">AsyncConsole</span></code><span class="koboSpan" id="kobo.1185.1" xmlns="http://www.w3.org/1999/xhtml">.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1186.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.1187.1" xmlns="http://www.w3.org/1999/xhtml">Program.cs</span></code><span class="koboSpan" id="kobo.1188.1" xmlns="http://www.w3.org/1999/xhtml">, delete the existing statements, statically import </span><code class="inlineCode"><span class="koboSpan" id="kobo.1189.1" xmlns="http://www.w3.org/1999/xhtml">Console</span></code><span class="koboSpan" id="kobo.1190.1" xmlns="http://www.w3.org/1999/xhtml">, and then add statements to create an </span><code class="inlineCode"><span class="koboSpan" id="kobo.1191.1" xmlns="http://www.w3.org/1999/xhtml">HttpClient</span></code><span class="koboSpan" id="kobo.1192.1" xmlns="http://www.w3.org/1999/xhtml"> instance, make a request for Apple’s home page, and output how many bytes it has, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.1193.1" xmlns="http://www.w3.org/1999/xhtml">using</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.1194.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="koboSpan" id="kobo.1195.1" xmlns="http://www.w3.org/1999/xhtml"> System.Console;
HttpClient client = </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1196.1" xmlns="http://www.w3.org/1999/xhtml">new</span></span><span class="koboSpan" id="kobo.1197.1" xmlns="http://www.w3.org/1999/xhtml">();
HttpResponseMessage response =
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1198.1" xmlns="http://www.w3.org/1999/xhtml">await</span></span><span class="koboSpan" id="kobo.1199.1" xmlns="http://www.w3.org/1999/xhtml"> client.GetAsync(</span><span class="hljs-string"><span class="koboSpan" id="kobo.1200.1" xmlns="http://www.w3.org/1999/xhtml">"http://www.apple.com/"</span></span><span class="koboSpan" id="kobo.1201.1" xmlns="http://www.w3.org/1999/xhtml">);
WriteLine(</span><span class="hljs-string"><span class="koboSpan" id="kobo.1202.1" xmlns="http://www.w3.org/1999/xhtml">"Apple's home page has {0:N0} bytes."</span></span><span class="koboSpan" id="kobo.1203.1" xmlns="http://www.w3.org/1999/xhtml">,
  response.Content.Headers.ContentLength);
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.1204.1" xmlns="http://www.w3.org/1999/xhtml">Build the project and note that it builds successfully. </span><span class="koboSpan" id="kobo.1204.2" xmlns="http://www.w3.org/1999/xhtml">In .NET 5 and earlier, the project template created an explicit </span><code class="inlineCode"><span class="koboSpan" id="kobo.1205.1" xmlns="http://www.w3.org/1999/xhtml">Program</span></code><span class="koboSpan" id="kobo.1206.1" xmlns="http://www.w3.org/1999/xhtml"> class with a non-async </span><code class="inlineCode"><span class="koboSpan" id="kobo.1207.1" xmlns="http://www.w3.org/1999/xhtml">Main</span></code><span class="koboSpan" id="kobo.1208.1" xmlns="http://www.w3.org/1999/xhtml"> method, so you would have seen an error message, as shown in the following output:
        </span><pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.1209.1" xmlns="http://www.w3.org/1999/xhtml">Program.cs(14,9): error CS4033: The 'await' operator can only be used within an async method. </span><span class="koboSpan" id="kobo.1209.2" xmlns="http://www.w3.org/1999/xhtml">Consider marking this method with the 'async' modifier and changing its return type to 'Task'. </span><span class="koboSpan" id="kobo.1209.3" xmlns="http://www.w3.org/1999/xhtml">[/Users/markjprice/apps-services-net7/Chapter04/AsyncConsole/AsyncConsole.csproj]
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.1210.1" xmlns="http://www.w3.org/1999/xhtml">You </span><a id="_idIndexMarker460"/><span class="koboSpan" id="kobo.1211.1" xmlns="http://www.w3.org/1999/xhtml">would have had to add the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1212.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1213.1" xmlns="http://www.w3.org/1999/xhtml"> keyword to the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1214.1" xmlns="http://www.w3.org/1999/xhtml">Main</span></code><span class="koboSpan" id="kobo.1215.1" xmlns="http://www.w3.org/1999/xhtml"> method and change its return type to </span><code class="inlineCode"><span class="koboSpan" id="kobo.1216.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.1217.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1217.2" xmlns="http://www.w3.org/1999/xhtml">With .NET 6 and later, the console app project template uses the top-level program feature to automatically define the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1218.1" xmlns="http://www.w3.org/1999/xhtml">Program</span></code><span class="koboSpan" id="kobo.1219.1" xmlns="http://www.w3.org/1999/xhtml"> class with an asynchronous </span><code class="inlineCode"><span class="koboSpan" id="kobo.1220.1" xmlns="http://www.w3.org/1999/xhtml">&lt;Main&gt;$</span></code><span class="koboSpan" id="kobo.1221.1" xmlns="http://www.w3.org/1999/xhtml"> method for you.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1222.1" xmlns="http://www.w3.org/1999/xhtml">Run the code and view the result, which is likely to have a different number of bytes since Apple changes its home page frequently, as shown in the following output:
        </span><pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.1223.1" xmlns="http://www.w3.org/1999/xhtml">Apple's home page has 40,252 bytes.
</span></code></pre>
</li>
</ol>
<h2 class="heading-2" id="_idParaDest-216"><span class="koboSpan" id="kobo.1224.1" xmlns="http://www.w3.org/1999/xhtml">Working with async streams</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.1225.1" xmlns="http://www.w3.org/1999/xhtml">With .NET Core 3, Microsoft</span><a id="_idIndexMarker461"/><span class="koboSpan" id="kobo.1226.1" xmlns="http://www.w3.org/1999/xhtml"> introduced the asynchronous processing of streams.</span></p>
<div class="note">
<p class="normal"><span class="koboSpan" id="kobo.1227.1" xmlns="http://www.w3.org/1999/xhtml">You can complete </span><a id="_idIndexMarker462"/><span class="koboSpan" id="kobo.1228.1" xmlns="http://www.w3.org/1999/xhtml">a tutorial about async streams at the following link: </span><a href="https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/generate-consume-asynchronous-stream"><span class="url"><span class="koboSpan" id="kobo.1229.1" xmlns="http://www.w3.org/1999/xhtml">https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/generate-consume-asynchronous-stream</span></span></a><span class="koboSpan" id="kobo.1230.1" xmlns="http://www.w3.org/1999/xhtml">.</span></p>
</div>
<p class="normal"><span class="koboSpan" id="kobo.1231.1" xmlns="http://www.w3.org/1999/xhtml">Before C# 8 and .NET Core 3, the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1232.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1233.1" xmlns="http://www.w3.org/1999/xhtml"> keyword only worked with tasks that return scalar values. </span><span class="koboSpan" id="kobo.1233.2" xmlns="http://www.w3.org/1999/xhtml">Async stream support in .NET Standard 2.1 allows an </span><code class="inlineCode"><span class="koboSpan" id="kobo.1234.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1235.1" xmlns="http://www.w3.org/1999/xhtml"> method to return one value after another asynchronously.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.1236.1" xmlns="http://www.w3.org/1999/xhtml">Let’s see a simulated example that returns three random integers as an async stream:</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.1237.1" xmlns="http://www.w3.org/1999/xhtml">Use your preferred code editor to add a new </span><strong class="screenText"><span class="koboSpan" id="kobo.1238.1" xmlns="http://www.w3.org/1999/xhtml">Console App</span></strong><span class="koboSpan" id="kobo.1239.1" xmlns="http://www.w3.org/1999/xhtml"> / </span><code class="inlineCode"><span class="koboSpan" id="kobo.1240.1" xmlns="http://www.w3.org/1999/xhtml">console</span></code><span class="koboSpan" id="kobo.1241.1" xmlns="http://www.w3.org/1999/xhtml"> project to the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1242.1" xmlns="http://www.w3.org/1999/xhtml">Chapter05</span></code><span class="koboSpan" id="kobo.1243.1" xmlns="http://www.w3.org/1999/xhtml"> solution named </span><code class="inlineCode"><span class="koboSpan" id="kobo.1244.1" xmlns="http://www.w3.org/1999/xhtml">AsyncEnumerable</span></code><span class="koboSpan" id="kobo.1245.1" xmlns="http://www.w3.org/1999/xhtml">.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1246.1" xmlns="http://www.w3.org/1999/xhtml">Globally and statically import the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1247.1" xmlns="http://www.w3.org/1999/xhtml">System.Console</span></code><span class="koboSpan" id="kobo.1248.1" xmlns="http://www.w3.org/1999/xhtml"> class and treat warnings as errors.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1249.1" xmlns="http://www.w3.org/1999/xhtml">Add a </span><a id="_idIndexMarker463"/><span class="koboSpan" id="kobo.1250.1" xmlns="http://www.w3.org/1999/xhtml">new file named </span><code class="inlineCode"><span class="koboSpan" id="kobo.1251.1" xmlns="http://www.w3.org/1999/xhtml">Program.Methods.cs</span></code><span class="koboSpan" id="kobo.1252.1" xmlns="http://www.w3.org/1999/xhtml">.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1253.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.1254.1" xmlns="http://www.w3.org/1999/xhtml">Program.Methods.cs</span></code><span class="koboSpan" id="kobo.1255.1" xmlns="http://www.w3.org/1999/xhtml">, delete any existing statements and then define a method that uses the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1256.1" xmlns="http://www.w3.org/1999/xhtml">yield</span></code><span class="koboSpan" id="kobo.1257.1" xmlns="http://www.w3.org/1999/xhtml"> keyword to return a random sequence of three numbers asynchronously, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.1258.1" xmlns="http://www.w3.org/1999/xhtml">partial</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.1259.1" xmlns="http://www.w3.org/1999/xhtml">class</span></span> <span class="hljs-title"><span class="koboSpan" id="kobo.1260.1" xmlns="http://www.w3.org/1999/xhtml">Program</span></span><span class="koboSpan" id="kobo.1261.1" xmlns="http://www.w3.org/1999/xhtml">
{
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1262.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1263.1" xmlns="http://www.w3.org/1999/xhtml">static</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1264.1" xmlns="http://www.w3.org/1999/xhtml">async</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.1265.1" xmlns="http://www.w3.org/1999/xhtml"> IAsyncEnumerable&lt;</span></span><span class="hljs-built_in"><span class="koboSpan" id="kobo.1266.1" xmlns="http://www.w3.org/1999/xhtml">int</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.1267.1" xmlns="http://www.w3.org/1999/xhtml">&gt; </span></span><span class="hljs-title"><span class="koboSpan" id="kobo.1268.1" xmlns="http://www.w3.org/1999/xhtml">GetNumbersAsync</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.1269.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.1270.1" xmlns="http://www.w3.org/1999/xhtml">
  {
    Random r = Random.Shared;
    </span><span class="hljs-comment"><span class="koboSpan" id="kobo.1271.1" xmlns="http://www.w3.org/1999/xhtml">// Simulate some work that takes 1.5 to 3 seconds.</span></span>
<span class="hljs-keyword"><span class="koboSpan" id="kobo.1272.1" xmlns="http://www.w3.org/1999/xhtml">await</span></span><span class="koboSpan" id="kobo.1273.1" xmlns="http://www.w3.org/1999/xhtml"> Task.Delay(r.Next(</span><span class="hljs-number"><span class="koboSpan" id="kobo.1274.1" xmlns="http://www.w3.org/1999/xhtml">1500</span></span><span class="koboSpan" id="kobo.1275.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="hljs-number"><span class="koboSpan" id="kobo.1276.1" xmlns="http://www.w3.org/1999/xhtml">3000</span></span><span class="koboSpan" id="kobo.1277.1" xmlns="http://www.w3.org/1999/xhtml">));
    </span><span class="hljs-comment"><span class="koboSpan" id="kobo.1278.1" xmlns="http://www.w3.org/1999/xhtml">// Return a random number between 1 and 1000.</span></span>
<span class="hljs-keyword"><span class="koboSpan" id="kobo.1279.1" xmlns="http://www.w3.org/1999/xhtml">yield</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.1280.1" xmlns="http://www.w3.org/1999/xhtml">return</span></span><span class="koboSpan" id="kobo.1281.1" xmlns="http://www.w3.org/1999/xhtml"> r.Next(</span><span class="hljs-number"><span class="koboSpan" id="kobo.1282.1" xmlns="http://www.w3.org/1999/xhtml">1</span></span><span class="koboSpan" id="kobo.1283.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="hljs-number"><span class="koboSpan" id="kobo.1284.1" xmlns="http://www.w3.org/1999/xhtml">1001</span></span><span class="koboSpan" id="kobo.1285.1" xmlns="http://www.w3.org/1999/xhtml">);
    </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1286.1" xmlns="http://www.w3.org/1999/xhtml">await</span></span><span class="koboSpan" id="kobo.1287.1" xmlns="http://www.w3.org/1999/xhtml"> Task.Delay(r.Next(</span><span class="hljs-number"><span class="koboSpan" id="kobo.1288.1" xmlns="http://www.w3.org/1999/xhtml">1500</span></span><span class="koboSpan" id="kobo.1289.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="hljs-number"><span class="koboSpan" id="kobo.1290.1" xmlns="http://www.w3.org/1999/xhtml">3000</span></span><span class="koboSpan" id="kobo.1291.1" xmlns="http://www.w3.org/1999/xhtml">));
    </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1292.1" xmlns="http://www.w3.org/1999/xhtml">yield</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.1293.1" xmlns="http://www.w3.org/1999/xhtml">return</span></span><span class="koboSpan" id="kobo.1294.1" xmlns="http://www.w3.org/1999/xhtml"> r.Next(</span><span class="hljs-number"><span class="koboSpan" id="kobo.1295.1" xmlns="http://www.w3.org/1999/xhtml">1</span></span><span class="koboSpan" id="kobo.1296.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="hljs-number"><span class="koboSpan" id="kobo.1297.1" xmlns="http://www.w3.org/1999/xhtml">1001</span></span><span class="koboSpan" id="kobo.1298.1" xmlns="http://www.w3.org/1999/xhtml">);
    </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1299.1" xmlns="http://www.w3.org/1999/xhtml">await</span></span><span class="koboSpan" id="kobo.1300.1" xmlns="http://www.w3.org/1999/xhtml"> Task.Delay(r.Next(</span><span class="hljs-number"><span class="koboSpan" id="kobo.1301.1" xmlns="http://www.w3.org/1999/xhtml">1500</span></span><span class="koboSpan" id="kobo.1302.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="hljs-number"><span class="koboSpan" id="kobo.1303.1" xmlns="http://www.w3.org/1999/xhtml">3000</span></span><span class="koboSpan" id="kobo.1304.1" xmlns="http://www.w3.org/1999/xhtml">));
    </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1305.1" xmlns="http://www.w3.org/1999/xhtml">yield</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.1306.1" xmlns="http://www.w3.org/1999/xhtml">return</span></span><span class="koboSpan" id="kobo.1307.1" xmlns="http://www.w3.org/1999/xhtml"> r.Next(</span><span class="hljs-number"><span class="koboSpan" id="kobo.1308.1" xmlns="http://www.w3.org/1999/xhtml">1</span></span><span class="koboSpan" id="kobo.1309.1" xmlns="http://www.w3.org/1999/xhtml">, </span><span class="hljs-number"><span class="koboSpan" id="kobo.1310.1" xmlns="http://www.w3.org/1999/xhtml">1001</span></span><span class="koboSpan" id="kobo.1311.1" xmlns="http://www.w3.org/1999/xhtml">);
  }
}
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.1312.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.1313.1" xmlns="http://www.w3.org/1999/xhtml">Program.cs</span></code><span class="koboSpan" id="kobo.1314.1" xmlns="http://www.w3.org/1999/xhtml">, delete the existing statements and then add statements to enumerate the sequence of numbers, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-comment"><span class="koboSpan" id="kobo.1315.1" xmlns="http://www.w3.org/1999/xhtml">// Use async streams to iterate over a collection asynchronously.</span></span>
<span class="hljs-keyword"><span class="koboSpan" id="kobo.1316.1" xmlns="http://www.w3.org/1999/xhtml">await</span></span> <span class="hljs-keyword"><span class="koboSpan" id="kobo.1317.1" xmlns="http://www.w3.org/1999/xhtml">foreach</span></span><span class="koboSpan" id="kobo.1318.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><span class="hljs-built_in"><span class="koboSpan" id="kobo.1319.1" xmlns="http://www.w3.org/1999/xhtml">int</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.1320.1" xmlns="http://www.w3.org/1999/xhtml"> number </span></span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1321.1" xmlns="http://www.w3.org/1999/xhtml">in</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.1322.1" xmlns="http://www.w3.org/1999/xhtml">GetNumbersAsync</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.1323.1" xmlns="http://www.w3.org/1999/xhtml">())</span></span><span class="koboSpan" id="kobo.1324.1" xmlns="http://www.w3.org/1999/xhtml">
{
  WriteLine(</span><span class="hljs-string"><span class="koboSpan" id="kobo.1325.1" xmlns="http://www.w3.org/1999/xhtml">$"Number: </span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.1326.1" xmlns="http://www.w3.org/1999/xhtml">{number}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.1327.1" xmlns="http://www.w3.org/1999/xhtml">"</span></span><span class="koboSpan" id="kobo.1328.1" xmlns="http://www.w3.org/1999/xhtml">);
}
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.1329.1" xmlns="http://www.w3.org/1999/xhtml">Run the code and view the result, as shown in the following output:
        </span><pre class="programlisting con"><code class="hljs-con"><span class="koboSpan" id="kobo.1330.1" xmlns="http://www.w3.org/1999/xhtml">Number: 509
Number: 813
Number: 307
</span></code></pre>
</li>
</ol>
<h2 class="heading-2" id="_idParaDest-217"><span class="koboSpan" id="kobo.1331.1" xmlns="http://www.w3.org/1999/xhtml">Improving responsiveness for GUI apps</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.1332.1" xmlns="http://www.w3.org/1999/xhtml">So far in</span><a id="_idIndexMarker464"/><span class="koboSpan" id="kobo.1333.1" xmlns="http://www.w3.org/1999/xhtml"> this book, we have only built console apps. </span><span class="koboSpan" id="kobo.1333.2" xmlns="http://www.w3.org/1999/xhtml">Life for a programmer gets more complicated when building web applications, web services, and apps with GUIs such as Windows desktop and mobile apps.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.1334.1" xmlns="http://www.w3.org/1999/xhtml">One reason for this is that for a GUI app, there is a special thread: the </span><strong class="keyWord"><span class="koboSpan" id="kobo.1335.1" xmlns="http://www.w3.org/1999/xhtml">user interface</span></strong><span class="koboSpan" id="kobo.1336.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="keyWord"><span class="koboSpan" id="kobo.1337.1" xmlns="http://www.w3.org/1999/xhtml">UI</span></strong><span class="koboSpan" id="kobo.1338.1" xmlns="http://www.w3.org/1999/xhtml">) thread.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.1339.1" xmlns="http://www.w3.org/1999/xhtml">There are two rules for working in GUIs:</span></p>
<ul>
<li class="bulletList"><span class="koboSpan" id="kobo.1340.1" xmlns="http://www.w3.org/1999/xhtml">Do not perform long-running tasks on the UI thread.</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.1341.1" xmlns="http://www.w3.org/1999/xhtml">Do not access UI elements on any thread except the UI thread.</span></li>
</ul>
<p class="normal"><span class="koboSpan" id="kobo.1342.1" xmlns="http://www.w3.org/1999/xhtml">To handle these rules, programmers used to have to write complex code to ensure that long-running tasks were executed by a non-UI thread, but once complete, the results of the task were safely passed to the UI thread to present to the user. </span><span class="koboSpan" id="kobo.1342.2" xmlns="http://www.w3.org/1999/xhtml">It could quickly get messy!</span></p>
<p class="normal"><span class="koboSpan" id="kobo.1343.1" xmlns="http://www.w3.org/1999/xhtml">Luckily, with C# 5 and later, you have the use of </span><code class="inlineCode"><span class="koboSpan" id="kobo.1344.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1345.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1346.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1347.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1347.2" xmlns="http://www.w3.org/1999/xhtml">They allow you to continue to write your code as if it is synchronous, which keeps your code clean and easy to understand, but underneath, the C# compiler creates a complex state machine and keeps track of running threads. </span><span class="koboSpan" id="kobo.1347.3" xmlns="http://www.w3.org/1999/xhtml">It’s kind of magical! </span><span class="koboSpan" id="kobo.1347.4" xmlns="http://www.w3.org/1999/xhtml">The combination of these two keywords makes the asynchronous method run on a worker thread and, when it’s complete, return the results on the UI thread.</span></p>
<p class="normal"><span class="koboSpan" id="kobo.1348.1" xmlns="http://www.w3.org/1999/xhtml">Let’s see an example. </span><span class="koboSpan" id="kobo.1348.2" xmlns="http://www.w3.org/1999/xhtml">We will build a Windows desktop app using </span><strong class="keyWord"><span class="koboSpan" id="kobo.1349.1" xmlns="http://www.w3.org/1999/xhtml">Windows Presentation Foundation</span></strong><span class="koboSpan" id="kobo.1350.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><strong class="keyWord"><span class="koboSpan" id="kobo.1351.1" xmlns="http://www.w3.org/1999/xhtml">WPF</span></strong><span class="koboSpan" id="kobo.1352.1" xmlns="http://www.w3.org/1999/xhtml">) that gets employees from the Northwind database in a SQL Server database using low-level types like </span><code class="inlineCode"><span class="koboSpan" id="kobo.1353.1" xmlns="http://www.w3.org/1999/xhtml">SqlConnection</span></code><span class="koboSpan" id="kobo.1354.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1355.1" xmlns="http://www.w3.org/1999/xhtml">SqlCommand</span></code><span class="koboSpan" id="kobo.1356.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1357.1" xmlns="http://www.w3.org/1999/xhtml">SqlDataReader</span></code><span class="koboSpan" id="kobo.1358.1" xmlns="http://www.w3.org/1999/xhtml">.</span></p>
<div class="note">
<p class="normal"><span class="koboSpan" id="kobo.1359.1" xmlns="http://www.w3.org/1999/xhtml">The Northwind database has medium complexity and a decent number of sample records. </span><span class="koboSpan" id="kobo.1359.2" xmlns="http://www.w3.org/1999/xhtml">You used it extensively in </span><em class="chapterRef"><span class="koboSpan" id="kobo.1360.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 2</span></em><span class="koboSpan" id="kobo.1361.1" xmlns="http://www.w3.org/1999/xhtml">,</span><em class="chapterRef"> </em><em class="italic"><span class="koboSpan" id="kobo.1362.1" xmlns="http://www.w3.org/1999/xhtml">Managing Relational Data Using SQL Server</span></em><span class="koboSpan" id="kobo.1363.1" xmlns="http://www.w3.org/1999/xhtml">, where it was introduced and set up.</span></p>
</div>
<div class="packt_tip">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.1364.1" xmlns="http://www.w3.org/1999/xhtml">Warning! </span></strong><span class="koboSpan" id="kobo.1365.1" xmlns="http://www.w3.org/1999/xhtml">You will only be able to complete this task if you have Microsoft Windows and the Northwind database stored in Microsoft SQL Server. </span><span class="koboSpan" id="kobo.1365.2" xmlns="http://www.w3.org/1999/xhtml">This is the only section in this book that is not cross-platform and modern (WPF is 17 years old!). </span><span class="koboSpan" id="kobo.1365.3" xmlns="http://www.w3.org/1999/xhtml">You can use either Visual Studio 2022 or Visual Studio Code.</span></p>
</div>
<p class="normal"><span class="koboSpan" id="kobo.1366.1" xmlns="http://www.w3.org/1999/xhtml">At this point, we</span><a id="_idIndexMarker465"/><span class="koboSpan" id="kobo.1367.1" xmlns="http://www.w3.org/1999/xhtml"> are focusing on making a GUI app responsive. </span><span class="koboSpan" id="kobo.1367.2" xmlns="http://www.w3.org/1999/xhtml">You will learn about XAML and building cross-platform GUI apps in </span><em class="chapterRef"><span class="koboSpan" id="kobo.1368.1" xmlns="http://www.w3.org/1999/xhtml">Chapter 16</span></em><span class="koboSpan" id="kobo.1369.1" xmlns="http://www.w3.org/1999/xhtml">, </span><em class="italic"><span class="koboSpan" id="kobo.1370.1" xmlns="http://www.w3.org/1999/xhtml">Building Mobile and Desktop Apps Using .NET MAUI</span></em><span class="koboSpan" id="kobo.1371.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1371.2" xmlns="http://www.w3.org/1999/xhtml">Since this book does not cover WPF elsewhere, I thought this task would be a good opportunity to at least see an example app built using WPF even if we do not look at it in detail. </span><span class="koboSpan" id="kobo.1371.3" xmlns="http://www.w3.org/1999/xhtml">Let’s go!</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.1372.1" xmlns="http://www.w3.org/1999/xhtml">If you are using Visual Studio 2022, add a new </span><strong class="keyWord"><span class="koboSpan" id="kobo.1373.1" xmlns="http://www.w3.org/1999/xhtml">WPF Application [C#]</span></strong><span class="koboSpan" id="kobo.1374.1" xmlns="http://www.w3.org/1999/xhtml"> project named </span><code class="inlineCode"><span class="koboSpan" id="kobo.1375.1" xmlns="http://www.w3.org/1999/xhtml">WpfResponsive</span></code><span class="koboSpan" id="kobo.1376.1" xmlns="http://www.w3.org/1999/xhtml"> to the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1377.1" xmlns="http://www.w3.org/1999/xhtml">Chapter05</span></code><span class="koboSpan" id="kobo.1378.1" xmlns="http://www.w3.org/1999/xhtml"> solution. </span><span class="koboSpan" id="kobo.1378.2" xmlns="http://www.w3.org/1999/xhtml">If you are using Visual Studio Code, use the following command: </span><code class="inlineCode"><span class="koboSpan" id="kobo.1379.1" xmlns="http://www.w3.org/1999/xhtml">dotnet new wpf</span></code><span class="koboSpan" id="kobo.1380.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1380.2" xmlns="http://www.w3.org/1999/xhtml">If you are using JetBrains Rider, select </span><strong class="screenText"><span class="koboSpan" id="kobo.1381.1" xmlns="http://www.w3.org/1999/xhtml">Desktop Application</span></strong><span class="koboSpan" id="kobo.1382.1" xmlns="http://www.w3.org/1999/xhtml"> and then select a </span><strong class="screenText"><span class="koboSpan" id="kobo.1383.1" xmlns="http://www.w3.org/1999/xhtml">Type</span></strong><span class="koboSpan" id="kobo.1384.1" xmlns="http://www.w3.org/1999/xhtml"> of </span><strong class="screenText"><span class="koboSpan" id="kobo.1385.1" xmlns="http://www.w3.org/1999/xhtml">WPF Application</span></strong><span class="koboSpan" id="kobo.1386.1" xmlns="http://www.w3.org/1999/xhtml">.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1387.1" xmlns="http://www.w3.org/1999/xhtml">Add a package reference for </span><code class="inlineCode"><span class="koboSpan" id="kobo.1388.1" xmlns="http://www.w3.org/1999/xhtml">Microsoft.Data.SqlClient</span></code><span class="koboSpan" id="kobo.1389.1" xmlns="http://www.w3.org/1999/xhtml"> to the project.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1390.1" xmlns="http://www.w3.org/1999/xhtml">In the project file, note the output type is a Windows EXE, the target framework is .NET for Windows (it will not run on other platforms, like macOS and Linux), and the project uses WPF, as shown in the following markup:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="koboSpan" id="kobo.1391.1" xmlns="http://www.w3.org/1999/xhtml">&lt;Project Sdk=</span><span class="hljs-string"><span class="koboSpan" id="kobo.1392.1" xmlns="http://www.w3.org/1999/xhtml">"Microsoft.NET.Sdk"</span></span><span class="koboSpan" id="kobo.1393.1" xmlns="http://www.w3.org/1999/xhtml">&gt;
  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;WinExe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;net8</span><span class="hljs-number"><span class="koboSpan" id="kobo.1394.1" xmlns="http://www.w3.org/1999/xhtml">.0</span></span><span class="koboSpan" id="kobo.1395.1" xmlns="http://www.w3.org/1999/xhtml">-windows&lt;/TargetFramework&gt;
    &lt;Nullable&gt;enable&lt;/Nullable&gt;
    &lt;UseWPF&gt;</span><span class="hljs-literal"><span class="koboSpan" id="kobo.1396.1" xmlns="http://www.w3.org/1999/xhtml">true</span></span><span class="koboSpan" id="kobo.1397.1" xmlns="http://www.w3.org/1999/xhtml">&lt;/UseWPF&gt;
  &lt;/PropertyGroup&gt;
  &lt;ItemGroup&gt;
    &lt;PackageReference Include=</span><span class="hljs-string"><span class="koboSpan" id="kobo.1398.1" xmlns="http://www.w3.org/1999/xhtml">"</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.1399.1" xmlns="http://www.w3.org/1999/xhtml">Microsoft.Data.SqlClient"</span></span><span class="koboSpan" id="kobo.1400.1" xmlns="http://www.w3.org/1999/xhtml"> Version=</span><span class="hljs-string"><span class="koboSpan" id="kobo.1401.1" xmlns="http://www.w3.org/1999/xhtml">"5.2.0"</span></span><span class="koboSpan" id="kobo.1402.1" xmlns="http://www.w3.org/1999/xhtml"> /&gt;
  &lt;/ItemGroup&gt;
&lt;/Project&gt;
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.1403.1" xmlns="http://www.w3.org/1999/xhtml">Build the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1404.1" xmlns="http://www.w3.org/1999/xhtml">WpfResponsive</span></code><span class="koboSpan" id="kobo.1405.1" xmlns="http://www.w3.org/1999/xhtml"> project to restore packages.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1406.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.1407.1" xmlns="http://www.w3.org/1999/xhtml">MainWindow.xaml</span></code><span class="koboSpan" id="kobo.1408.1" xmlns="http://www.w3.org/1999/xhtml">, in the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1409.1" xmlns="http://www.w3.org/1999/xhtml">&lt;Grid&gt;</span></code><span class="koboSpan" id="kobo.1410.1" xmlns="http://www.w3.org/1999/xhtml"> element, add elements to define two buttons, a text box and a list box, laid out vertically in a stack panel, as shown in the following markup:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="koboSpan" id="kobo.1411.1" xmlns="http://www.w3.org/1999/xhtml">&lt;StackPanel&gt;
  &lt;Button Name=</span><span class="hljs-string"><span class="koboSpan" id="kobo.1412.1" xmlns="http://www.w3.org/1999/xhtml">"GetEmployeesSyncButton"</span></span><span class="koboSpan" id="kobo.1413.1" xmlns="http://www.w3.org/1999/xhtml"> 
          Click=</span><span class="hljs-string"><span class="koboSpan" id="kobo.1414.1" xmlns="http://www.w3.org/1999/xhtml">"GetEmployeesSyncButton_Click"</span></span><span class="koboSpan" id="kobo.1415.1" xmlns="http://www.w3.org/1999/xhtml">&gt;
    Get Employees Synchronously&lt;/Button&gt;
  &lt;Button Name=</span><span class="hljs-string"><span class="koboSpan" id="kobo.1416.1" xmlns="http://www.w3.org/1999/xhtml">"GetEmployeesAsyncButton"</span></span><span class="koboSpan" id="kobo.1417.1" xmlns="http://www.w3.org/1999/xhtml"> 
          Click=</span><span class="hljs-string"><span class="koboSpan" id="kobo.1418.1" xmlns="http://www.w3.org/1999/xhtml">"GetEmployeesAsyncButton_Click"</span></span><span class="koboSpan" id="kobo.1419.1" xmlns="http://www.w3.org/1999/xhtml">&gt;
    Get Employees Asynchronously&lt;/Button&gt;
  &lt;TextBox HorizontalAlignment=</span><span class="hljs-string"><span class="koboSpan" id="kobo.1420.1" xmlns="http://www.w3.org/1999/xhtml">"</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.1421.1" xmlns="http://www.w3.org/1999/xhtml">Stretch"</span></span><span class="koboSpan" id="kobo.1422.1" xmlns="http://www.w3.org/1999/xhtml"> Text=</span><span class="hljs-string"><span class="koboSpan" id="kobo.1423.1" xmlns="http://www.w3.org/1999/xhtml">"Type in here"</span></span><span class="koboSpan" id="kobo.1424.1" xmlns="http://www.w3.org/1999/xhtml"> /&gt;
  &lt;ListBox Name=</span><span class="hljs-string"><span class="koboSpan" id="kobo.1425.1" xmlns="http://www.w3.org/1999/xhtml">"EmployeesListBox"</span></span><span class="koboSpan" id="kobo.1426.1" xmlns="http://www.w3.org/1999/xhtml"> Height=</span><span class="hljs-string"><span class="koboSpan" id="kobo.1427.1" xmlns="http://www.w3.org/1999/xhtml">"400"</span></span><span class="koboSpan" id="kobo.1428.1" xmlns="http://www.w3.org/1999/xhtml"> /&gt;
&lt;/StackPanel&gt;
</span></code></pre>
<div class="note">
<p class="normal"><span class="koboSpan" id="kobo.1429.1" xmlns="http://www.w3.org/1999/xhtml">Visual Studio 2022 has good support for building WPF apps and will provide IntelliSense as you edit code and XAML markup. </span><span class="koboSpan" id="kobo.1429.2" xmlns="http://www.w3.org/1999/xhtml">Visual Studio Code does not.</span></p>
</div></li>
</ol>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="6"><span class="koboSpan" id="kobo.1430.1" xmlns="http://www.w3.org/1999/xhtml">In </span><code class="inlineCode"><span class="koboSpan" id="kobo.1431.1" xmlns="http://www.w3.org/1999/xhtml">MainWindow.xaml.cs</span></code><span class="koboSpan" id="kobo.1432.1" xmlns="http://www.w3.org/1999/xhtml">, import</span><a id="_idIndexMarker466"/><span class="koboSpan" id="kobo.1433.1" xmlns="http://www.w3.org/1999/xhtml"> namespaces to work with ADO.NET and the stopwatch, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.1434.1" xmlns="http://www.w3.org/1999/xhtml">using</span></span><span class="koboSpan" id="kobo.1435.1" xmlns="http://www.w3.org/1999/xhtml"> Microsoft.Data.SqlClient; </span><span class="hljs-comment"><span class="koboSpan" id="kobo.1436.1" xmlns="http://www.w3.org/1999/xhtml">// To use SqlConnection and so on.</span></span>
<span class="hljs-keyword"><span class="koboSpan" id="kobo.1437.1" xmlns="http://www.w3.org/1999/xhtml">using</span></span><span class="koboSpan" id="kobo.1438.1" xmlns="http://www.w3.org/1999/xhtml"> System.Diagnostics; </span><span class="hljs-comment"><span class="koboSpan" id="kobo.1439.1" xmlns="http://www.w3.org/1999/xhtml">// To use Stopwatch.</span></span>
</code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.1440.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1441.1" xmlns="http://www.w3.org/1999/xhtml">MainWindow</span></code><span class="koboSpan" id="kobo.1442.1" xmlns="http://www.w3.org/1999/xhtml"> class, in the constructor, define two </span><code class="inlineCode"><span class="koboSpan" id="kobo.1443.1" xmlns="http://www.w3.org/1999/xhtml">string</span></code><span class="koboSpan" id="kobo.1444.1" xmlns="http://www.w3.org/1999/xhtml"> fields for the database connection string and SQL statement, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.1445.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span> <span class="hljs-built_in"><span class="koboSpan" id="kobo.1446.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="koboSpan" id="kobo.1447.1" xmlns="http://www.w3.org/1999/xhtml"> connectionString;
</span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1448.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span> <span class="hljs-built_in"><span class="koboSpan" id="kobo.1449.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="koboSpan" id="kobo.1450.1" xmlns="http://www.w3.org/1999/xhtml"> sql = </span><span class="hljs-string"><span class="koboSpan" id="kobo.1451.1" xmlns="http://www.w3.org/1999/xhtml">"WAITFOR DELAY '00:00:05';"</span></span><span class="koboSpan" id="kobo.1452.1" xmlns="http://www.w3.org/1999/xhtml"> +
  </span><span class="hljs-string"><span class="koboSpan" id="kobo.1453.1" xmlns="http://www.w3.org/1999/xhtml">"SELECT EmployeeId, FirstName, LastName FROM Employees"</span></span><span class="koboSpan" id="kobo.1454.1" xmlns="http://www.w3.org/1999/xhtml">;
</span></code></pre>
<div class="note">
<p class="normal"><span class="koboSpan" id="kobo.1455.1" xmlns="http://www.w3.org/1999/xhtml">The SQL has two statements. </span><span class="koboSpan" id="kobo.1455.2" xmlns="http://www.w3.org/1999/xhtml">The first waits for five seconds to simulate a long-running query.</span></p>
</div></li>
</ol>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="8"><span class="koboSpan" id="kobo.1456.1" xmlns="http://www.w3.org/1999/xhtml">In the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1457.1" xmlns="http://www.w3.org/1999/xhtml">MainWindow</span></code><span class="koboSpan" id="kobo.1458.1" xmlns="http://www.w3.org/1999/xhtml"> class, in the constructor, after the call to </span><code class="inlineCode"><span class="koboSpan" id="kobo.1459.1" xmlns="http://www.w3.org/1999/xhtml">InitializeComponent</span></code><span class="koboSpan" id="kobo.1460.1" xmlns="http://www.w3.org/1999/xhtml">, use an </span><code class="inlineCode"><span class="koboSpan" id="kobo.1461.1" xmlns="http://www.w3.org/1999/xhtml">SqlConnectionStringBuilder</span></code><span class="koboSpan" id="kobo.1462.1" xmlns="http://www.w3.org/1999/xhtml"> to set the database connection string, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.1463.1" xmlns="http://www.w3.org/1999/xhtml">public</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.1464.1" xmlns="http://www.w3.org/1999/xhtml">MainWindow</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.1465.1" xmlns="http://www.w3.org/1999/xhtml">()</span></span><span class="koboSpan" id="kobo.1466.1" xmlns="http://www.w3.org/1999/xhtml">
{
  InitializeComponent();
  </span><span class="hljs-comment"><span class="koboSpan" id="kobo.1467.1" xmlns="http://www.w3.org/1999/xhtml">// Change as needed to work with your Northwind database.</span></span><span class="koboSpan" id="kobo.1468.1" xmlns="http://www.w3.org/1999/xhtml">
  SqlConnectionStringBuilder builder = </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1469.1" xmlns="http://www.w3.org/1999/xhtml">new</span></span><span class="koboSpan" id="kobo.1470.1" xmlns="http://www.w3.org/1999/xhtml">();
  builder.DataSource = </span><span class="hljs-string"><span class="koboSpan" id="kobo.1471.1" xmlns="http://www.w3.org/1999/xhtml">"."</span></span><span class="koboSpan" id="kobo.1472.1" xmlns="http://www.w3.org/1999/xhtml">;
  builder.InitialCatalog = </span><span class="hljs-string"><span class="koboSpan" id="kobo.1473.1" xmlns="http://www.w3.org/1999/xhtml">"Northwind"</span></span><span class="koboSpan" id="kobo.1474.1" xmlns="http://www.w3.org/1999/xhtml">;
  builder.Encrypt = </span><span class="hljs-literal"><span class="koboSpan" id="kobo.1475.1" xmlns="http://www.w3.org/1999/xhtml">false</span></span><span class="koboSpan" id="kobo.1476.1" xmlns="http://www.w3.org/1999/xhtml">;
  builder.MultipleActiveResultSets = </span><span class="hljs-literal"><span class="koboSpan" id="kobo.1477.1" xmlns="http://www.w3.org/1999/xhtml">true</span></span><span class="koboSpan" id="kobo.1478.1" xmlns="http://www.w3.org/1999/xhtml">;
  builder.ConnectTimeout = </span><span class="hljs-number"><span class="koboSpan" id="kobo.1479.1" xmlns="http://www.w3.org/1999/xhtml">5</span></span><span class="koboSpan" id="kobo.1480.1" xmlns="http://www.w3.org/1999/xhtml">;
  </span><span class="hljs-comment"><span class="koboSpan" id="kobo.1481.1" xmlns="http://www.w3.org/1999/xhtml">// To use Windows Integrated authentication.</span></span><span class="koboSpan" id="kobo.1482.1" xmlns="http://www.w3.org/1999/xhtml">
  builder.IntegratedSecurity = </span><span class="hljs-literal"><span class="koboSpan" id="kobo.1483.1" xmlns="http://www.w3.org/1999/xhtml">true</span></span><span class="koboSpan" id="kobo.1484.1" xmlns="http://www.w3.org/1999/xhtml">;
  </span><span class="hljs-comment"><span class="koboSpan" id="kobo.1485.1" xmlns="http://www.w3.org/1999/xhtml">// To use SQL Server authentication.</span></span>
<span class="hljs-comment"><span class="koboSpan" id="kobo.1486.1" xmlns="http://www.w3.org/1999/xhtml">// builder.UserID = Environment.GetEnvironmentVariable("MY_SQL_USR");</span></span>
<span class="hljs-comment"><span class="koboSpan" id="kobo.1487.1" xmlns="http://www.w3.org/1999/xhtml">// builder.Password = Environment.GetEnvironmentVariable("MY_SQL_PWD");</span></span><span class="koboSpan" id="kobo.1488.1" xmlns="http://www.w3.org/1999/xhtml">
  connectionString = builder.ConnectionString;
}
</span></code></pre>
</li>
<li class="numberedList"><span class="koboSpan" id="kobo.1489.1" xmlns="http://www.w3.org/1999/xhtml">Create event</span><a id="_idIndexMarker467"/><span class="koboSpan" id="kobo.1490.1" xmlns="http://www.w3.org/1999/xhtml"> handlers for clicking on the two buttons. </span><span class="koboSpan" id="kobo.1490.2" xmlns="http://www.w3.org/1999/xhtml">They must use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1491.1" xmlns="http://www.w3.org/1999/xhtml">string</span></code><span class="koboSpan" id="kobo.1492.1" xmlns="http://www.w3.org/1999/xhtml"> constants to open a connection to the Northwind database and then populate the list box with the IDs and names of all employees, as shown in the following code:
        </span><pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword"><span class="koboSpan" id="kobo.1493.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1494.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.1495.1" xmlns="http://www.w3.org/1999/xhtml">GetEmployeesSyncButton_Click</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.1496.1" xmlns="http://www.w3.org/1999/xhtml">(</span></span><span class="hljs-built_in"><span class="koboSpan" id="kobo.1497.1" xmlns="http://www.w3.org/1999/xhtml">object</span></span><span class="hljs-params"><span class="koboSpan" id="kobo.1498.1" xmlns="http://www.w3.org/1999/xhtml"> sender, RoutedEventArgs e</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.1499.1" xmlns="http://www.w3.org/1999/xhtml">)</span></span><span class="koboSpan" id="kobo.1500.1" xmlns="http://www.w3.org/1999/xhtml">
{
  Stopwatch timer = Stopwatch.StartNew();
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1501.1" xmlns="http://www.w3.org/1999/xhtml">using</span></span><span class="koboSpan" id="kobo.1502.1" xmlns="http://www.w3.org/1999/xhtml"> (SqlConnection connection = </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1503.1" xmlns="http://www.w3.org/1999/xhtml">new</span></span><span class="koboSpan" id="kobo.1504.1" xmlns="http://www.w3.org/1999/xhtml">(connectionString))
  {
    </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1505.1" xmlns="http://www.w3.org/1999/xhtml">try</span></span><span class="koboSpan" id="kobo.1506.1" xmlns="http://www.w3.org/1999/xhtml">
    {
      connection.Open();
      SqlCommand command = </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1507.1" xmlns="http://www.w3.org/1999/xhtml">new</span></span><span class="koboSpan" id="kobo.1508.1" xmlns="http://www.w3.org/1999/xhtml">(sql, connection);
      SqlDataReader reader = command.ExecuteReader();
      </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1509.1" xmlns="http://www.w3.org/1999/xhtml">while</span></span><span class="koboSpan" id="kobo.1510.1" xmlns="http://www.w3.org/1999/xhtml"> (reader.Read())
      {
        </span><span class="hljs-built_in"><span class="koboSpan" id="kobo.1511.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="koboSpan" id="kobo.1512.1" xmlns="http://www.w3.org/1999/xhtml"> employee = </span><span class="hljs-built_in"><span class="koboSpan" id="kobo.1513.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="koboSpan" id="kobo.1514.1" xmlns="http://www.w3.org/1999/xhtml">.Format(</span><span class="hljs-string"><span class="koboSpan" id="kobo.1515.1" xmlns="http://www.w3.org/1999/xhtml">"{0}: {1} {2}"</span></span><span class="koboSpan" id="kobo.1516.1" xmlns="http://www.w3.org/1999/xhtml">,
          reader.GetInt32(</span><span class="hljs-number"><span class="koboSpan" id="kobo.1517.1" xmlns="http://www.w3.org/1999/xhtml">0</span></span><span class="koboSpan" id="kobo.1518.1" xmlns="http://www.w3.org/1999/xhtml">), reader.GetString(</span><span class="hljs-number"><span class="koboSpan" id="kobo.1519.1" xmlns="http://www.w3.org/1999/xhtml">1</span></span><span class="koboSpan" id="kobo.1520.1" xmlns="http://www.w3.org/1999/xhtml">),
          reader.GetString(</span><span class="hljs-number"><span class="koboSpan" id="kobo.1521.1" xmlns="http://www.w3.org/1999/xhtml">2</span></span><span class="koboSpan" id="kobo.1522.1" xmlns="http://www.w3.org/1999/xhtml">));
        EmployeesListBox.Items.Add(employee);
      }
      reader.Close();
      connection.Close();
    }
    </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1523.1" xmlns="http://www.w3.org/1999/xhtml">catch</span></span><span class="koboSpan" id="kobo.1524.1" xmlns="http://www.w3.org/1999/xhtml"> (Exception ex)
    {
      MessageBox.Show(ex.Message);
    }
  }
  EmployeesListBox.Items.Add(
    </span><span class="hljs-string"><span class="koboSpan" id="kobo.1525.1" xmlns="http://www.w3.org/1999/xhtml">$"Sync: </span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.1526.1" xmlns="http://www.w3.org/1999/xhtml">{timer.ElapsedMilliseconds:N0}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.1527.1" xmlns="http://www.w3.org/1999/xhtml">ms"</span></span><span class="koboSpan" id="kobo.1528.1" xmlns="http://www.w3.org/1999/xhtml">);
}
</span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1529.1" xmlns="http://www.w3.org/1999/xhtml">private</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1530.1" xmlns="http://www.w3.org/1999/xhtml">async</span></span><span class="hljs-function"> </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1531.1" xmlns="http://www.w3.org/1999/xhtml">void</span></span><span class="hljs-function"> </span><span class="hljs-title"><span class="koboSpan" id="kobo.1532.1" xmlns="http://www.w3.org/1999/xhtml">GetEmployeesAsyncButton_Click</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.1533.1" xmlns="http://www.w3.org/1999/xhtml">(</span></span>
<span class="hljs-params"> </span><span class="hljs-built_in"><span class="koboSpan" id="kobo.1534.1" xmlns="http://www.w3.org/1999/xhtml">object</span></span><span class="hljs-params"><span class="koboSpan" id="kobo.1535.1" xmlns="http://www.w3.org/1999/xhtml"> sender, RoutedEventArgs e</span></span><span class="hljs-function"><span class="koboSpan" id="kobo.1536.1" xmlns="http://www.w3.org/1999/xhtml">)</span></span><span class="koboSpan" id="kobo.1537.1" xmlns="http://www.w3.org/1999/xhtml">
{
  Stopwatch timer = Stopwatch.StartNew();
  </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1538.1" xmlns="http://www.w3.org/1999/xhtml">using</span></span><span class="koboSpan" id="kobo.1539.1" xmlns="http://www.w3.org/1999/xhtml"> (SqlConnection connection = </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1540.1" xmlns="http://www.w3.org/1999/xhtml">new</span></span><span class="koboSpan" id="kobo.1541.1" xmlns="http://www.w3.org/1999/xhtml">(connectionString))
  {
    </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1542.1" xmlns="http://www.w3.org/1999/xhtml">try</span></span><span class="koboSpan" id="kobo.1543.1" xmlns="http://www.w3.org/1999/xhtml">
    {
      </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1544.1" xmlns="http://www.w3.org/1999/xhtml">await</span></span><span class="koboSpan" id="kobo.1545.1" xmlns="http://www.w3.org/1999/xhtml"> connection.OpenAsync();
      SqlCommand command = </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1546.1" xmlns="http://www.w3.org/1999/xhtml">new</span></span><span class="koboSpan" id="kobo.1547.1" xmlns="http://www.w3.org/1999/xhtml">(sql, connection);
      SqlDataReader reader = </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1548.1" xmlns="http://www.w3.org/1999/xhtml">await</span></span><span class="koboSpan" id="kobo.1549.1" xmlns="http://www.w3.org/1999/xhtml"> command.ExecuteReaderAsync();
      </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1550.1" xmlns="http://www.w3.org/1999/xhtml">while</span></span><span class="koboSpan" id="kobo.1551.1" xmlns="http://www.w3.org/1999/xhtml"> (</span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1552.1" xmlns="http://www.w3.org/1999/xhtml">await</span></span><span class="koboSpan" id="kobo.1553.1" xmlns="http://www.w3.org/1999/xhtml"> reader.ReadAsync())
      {
        </span><span class="hljs-built_in"><span class="koboSpan" id="kobo.1554.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="koboSpan" id="kobo.1555.1" xmlns="http://www.w3.org/1999/xhtml"> employee = </span><span class="hljs-built_in"><span class="koboSpan" id="kobo.1556.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="koboSpan" id="kobo.1557.1" xmlns="http://www.w3.org/1999/xhtml">.Format(</span><span class="hljs-string"><span class="koboSpan" id="kobo.1558.1" xmlns="http://www.w3.org/1999/xhtml">"{0}: {1} {2}"</span></span><span class="koboSpan" id="kobo.1559.1" xmlns="http://www.w3.org/1999/xhtml">,
          </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1560.1" xmlns="http://www.w3.org/1999/xhtml">await</span></span><span class="koboSpan" id="kobo.1561.1" xmlns="http://www.w3.org/1999/xhtml"> reader.GetFieldValueAsync&lt;</span><span class="hljs-built_in"><span class="koboSpan" id="kobo.1562.1" xmlns="http://www.w3.org/1999/xhtml">int</span></span><span class="koboSpan" id="kobo.1563.1" xmlns="http://www.w3.org/1999/xhtml">&gt;(</span><span class="hljs-number"><span class="koboSpan" id="kobo.1564.1" xmlns="http://www.w3.org/1999/xhtml">0</span></span><span class="koboSpan" id="kobo.1565.1" xmlns="http://www.w3.org/1999/xhtml">), 
          </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1566.1" xmlns="http://www.w3.org/1999/xhtml">await</span></span><span class="koboSpan" id="kobo.1567.1" xmlns="http://www.w3.org/1999/xhtml"> reader.GetFieldValueAsync&lt;</span><span class="hljs-built_in"><span class="koboSpan" id="kobo.1568.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="koboSpan" id="kobo.1569.1" xmlns="http://www.w3.org/1999/xhtml">&gt;(</span><span class="hljs-number"><span class="koboSpan" id="kobo.1570.1" xmlns="http://www.w3.org/1999/xhtml">1</span></span><span class="koboSpan" id="kobo.1571.1" xmlns="http://www.w3.org/1999/xhtml">), 
          </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1572.1" xmlns="http://www.w3.org/1999/xhtml">await</span></span><span class="koboSpan" id="kobo.1573.1" xmlns="http://www.w3.org/1999/xhtml"> reader.GetFieldValueAsync&lt;</span><span class="hljs-built_in"><span class="koboSpan" id="kobo.1574.1" xmlns="http://www.w3.org/1999/xhtml">string</span></span><span class="koboSpan" id="kobo.1575.1" xmlns="http://www.w3.org/1999/xhtml">&gt;(</span><span class="hljs-number"><span class="koboSpan" id="kobo.1576.1" xmlns="http://www.w3.org/1999/xhtml">2</span></span><span class="koboSpan" id="kobo.1577.1" xmlns="http://www.w3.org/1999/xhtml">));
        EmployeesListBox.Items.Add(employee);
      }
      </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1578.1" xmlns="http://www.w3.org/1999/xhtml">await</span></span><span class="koboSpan" id="kobo.1579.1" xmlns="http://www.w3.org/1999/xhtml"> reader.CloseAsync();
      </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1580.1" xmlns="http://www.w3.org/1999/xhtml">await</span></span><span class="koboSpan" id="kobo.1581.1" xmlns="http://www.w3.org/1999/xhtml"> connection.CloseAsync();
    }
    </span><span class="hljs-keyword"><span class="koboSpan" id="kobo.1582.1" xmlns="http://www.w3.org/1999/xhtml">catch</span></span><span class="koboSpan" id="kobo.1583.1" xmlns="http://www.w3.org/1999/xhtml"> (Exception ex)
    {
      MessageBox.Show(ex.Message);
    }
  }
  EmployeesListBox.Items.Add(
    </span><span class="hljs-string"><span class="koboSpan" id="kobo.1584.1" xmlns="http://www.w3.org/1999/xhtml">$"Async: </span></span><span class="hljs-subst"><span class="koboSpan" id="kobo.1585.1" xmlns="http://www.w3.org/1999/xhtml">{timer.ElapsedMilliseconds:N0}</span></span><span class="hljs-string"><span class="koboSpan" id="kobo.1586.1" xmlns="http://www.w3.org/1999/xhtml">ms"</span></span><span class="koboSpan" id="kobo.1587.1" xmlns="http://www.w3.org/1999/xhtml">);
}
</span></code></pre>
<p class="normal"><span class="koboSpan" id="kobo.1588.1" xmlns="http://www.w3.org/1999/xhtml">Note the following:</span></p>
<ul>
<li class="bulletList"><span class="koboSpan" id="kobo.1589.1" xmlns="http://www.w3.org/1999/xhtml">Defining</span><a id="_idIndexMarker468"/><span class="koboSpan" id="kobo.1590.1" xmlns="http://www.w3.org/1999/xhtml"> an </span><code class="inlineCode"><span class="koboSpan" id="kobo.1591.1" xmlns="http://www.w3.org/1999/xhtml">async void</span></code><span class="koboSpan" id="kobo.1592.1" xmlns="http://www.w3.org/1999/xhtml"> method is generally bad practice because it is “fire and forget.” </span><span class="koboSpan" id="kobo.1592.2" xmlns="http://www.w3.org/1999/xhtml">You will not be notified when it is completed and there is no way to cancel it because it does not return a </span><code class="inlineCode"><span class="koboSpan" id="kobo.1593.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.1594.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><code class="inlineCode"><span class="koboSpan" id="kobo.1595.1" xmlns="http://www.w3.org/1999/xhtml">Task&lt;T&gt;</span></code><span class="koboSpan" id="kobo.1596.1" xmlns="http://www.w3.org/1999/xhtml"> that can be used to control it.</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.1597.1" xmlns="http://www.w3.org/1999/xhtml">The SQL statement uses the SQL Server </span><code class="inlineCode"><span class="koboSpan" id="kobo.1598.1" xmlns="http://www.w3.org/1999/xhtml">WAITFOR DELAY</span></code><span class="koboSpan" id="kobo.1599.1" xmlns="http://www.w3.org/1999/xhtml"> command to simulate processing that takes five seconds. </span><span class="koboSpan" id="kobo.1599.2" xmlns="http://www.w3.org/1999/xhtml">It then selects three columns from the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1600.1" xmlns="http://www.w3.org/1999/xhtml">Employees</span></code><span class="koboSpan" id="kobo.1601.1" xmlns="http://www.w3.org/1999/xhtml"> table.</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.1602.1" xmlns="http://www.w3.org/1999/xhtml">The </span><code class="inlineCode"><span class="koboSpan" id="kobo.1603.1" xmlns="http://www.w3.org/1999/xhtml">GetEmployeesSyncButton_Click</span></code><span class="koboSpan" id="kobo.1604.1" xmlns="http://www.w3.org/1999/xhtml"> event handler uses synchronous methods to open a connection and fetch the employee rows.</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.1605.1" xmlns="http://www.w3.org/1999/xhtml">The </span><code class="inlineCode"><span class="koboSpan" id="kobo.1606.1" xmlns="http://www.w3.org/1999/xhtml">GetEmployeesAsyncButton_Click</span></code><span class="koboSpan" id="kobo.1607.1" xmlns="http://www.w3.org/1999/xhtml"> event handler is marked as </span><code class="inlineCode"><span class="koboSpan" id="kobo.1608.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1609.1" xmlns="http://www.w3.org/1999/xhtml"> and uses asynchronous methods with the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1610.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1611.1" xmlns="http://www.w3.org/1999/xhtml"> keyword to open a connection and fetch the employee rows.</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.1612.1" xmlns="http://www.w3.org/1999/xhtml">Both event handlers use a stopwatch to record the number of milliseconds the operation takes and add it to the list box.</span></li>
</ul></li>
</ol>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="10"><span class="koboSpan" id="kobo.1613.1" xmlns="http://www.w3.org/1999/xhtml">Start the WPF app without debugging.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1614.1" xmlns="http://www.w3.org/1999/xhtml">Click in the text box, enter some text, and note that the GUI is responsive.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1615.1" xmlns="http://www.w3.org/1999/xhtml">Click the </span><strong class="screenText"><span class="koboSpan" id="kobo.1616.1" xmlns="http://www.w3.org/1999/xhtml">Get Employees Synchronously</span></strong><span class="koboSpan" id="kobo.1617.1" xmlns="http://www.w3.org/1999/xhtml"> button.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1618.1" xmlns="http://www.w3.org/1999/xhtml">Try to click in the text box, and note the GUI is not responsive.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1619.1" xmlns="http://www.w3.org/1999/xhtml">Wait for at least five seconds until the list box is filled with employees.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1620.1" xmlns="http://www.w3.org/1999/xhtml">Click in the text box, enter some text, and note the GUI is responsive again.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1621.1" xmlns="http://www.w3.org/1999/xhtml">Click the </span><strong class="screenText"><span class="koboSpan" id="kobo.1622.1" xmlns="http://www.w3.org/1999/xhtml">Get Employees Asynchronously</span></strong><span class="koboSpan" id="kobo.1623.1" xmlns="http://www.w3.org/1999/xhtml"> button.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1624.1" xmlns="http://www.w3.org/1999/xhtml">Click in </span><a id="_idIndexMarker469"/><span class="koboSpan" id="kobo.1625.1" xmlns="http://www.w3.org/1999/xhtml">the text box, enter some text, and note that the GUI is still responsive while it performs the operation. </span><span class="koboSpan" id="kobo.1625.2" xmlns="http://www.w3.org/1999/xhtml">Continue typing until the list box is filled with the employees, as shown in </span><em class="italic"><span class="koboSpan" id="kobo.1626.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5.2</span></em><span class="koboSpan" id="kobo.1627.1" xmlns="http://www.w3.org/1999/xhtml">:</span></li>
</ol>
<figure class="mediaobject"><span class="koboSpan" id="kobo.1628.1" xmlns="http://www.w3.org/1999/xhtml"><img alt="" src="../Images/B19587_05_02.png"/></span></figure>
<p class="packt_figref"><span class="koboSpan" id="kobo.1629.1" xmlns="http://www.w3.org/1999/xhtml">Figure 5.2: Loading employees into a WPF app synchronously and asynchronously</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="18"><span class="koboSpan" id="kobo.1630.1" xmlns="http://www.w3.org/1999/xhtml">Note the difference in timings for the two operations. </span><span class="koboSpan" id="kobo.1630.2" xmlns="http://www.w3.org/1999/xhtml">The UI is blocked when fetching data synchronously, while the UI remains responsive when fetching data asynchronously.</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1631.1" xmlns="http://www.w3.org/1999/xhtml">Close the WPF app.</span></li>
</ol>
<h2 class="heading-2" id="_idParaDest-218"><span class="koboSpan" id="kobo.1632.1" xmlns="http://www.w3.org/1999/xhtml">Improving scalability for web applications and web services</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.1633.1" xmlns="http://www.w3.org/1999/xhtml">The </span><code class="inlineCode"><span class="koboSpan" id="kobo.1634.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1635.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1636.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1637.1" xmlns="http://www.w3.org/1999/xhtml"> keywords</span><a id="_idIndexMarker470"/><span class="koboSpan" id="kobo.1638.1" xmlns="http://www.w3.org/1999/xhtml"> can also be applied on the server side when building websites, applications, and services. </span><span class="koboSpan" id="kobo.1638.2" xmlns="http://www.w3.org/1999/xhtml">From the client application’s point of view, nothing changes (or they might even notice a small increase in the time taken for a request to return). </span><span class="koboSpan" id="kobo.1638.3" xmlns="http://www.w3.org/1999/xhtml">So, from a single client’s point of view, the use of </span><code class="inlineCode"><span class="koboSpan" id="kobo.1639.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1640.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1641.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1642.1" xmlns="http://www.w3.org/1999/xhtml"> to implement multitasking on the server side makes their experience worse!</span></p>
<p class="normal"><span class="koboSpan" id="kobo.1643.1" xmlns="http://www.w3.org/1999/xhtml">On the server side, additional, cheaper worker threads are created to wait for long-running tasks to finish so that expensive I/O threads can handle other client requests instead of being blocked. </span><span class="koboSpan" id="kobo.1643.2" xmlns="http://www.w3.org/1999/xhtml">This improves the overall scalability of a web application or service. </span><span class="koboSpan" id="kobo.1643.3" xmlns="http://www.w3.org/1999/xhtml">More clients can be supported simultaneously.</span></p>
<h2 class="heading-2" id="_idParaDest-219"><span class="koboSpan" id="kobo.1644.1" xmlns="http://www.w3.org/1999/xhtml">Common types that support multitasking</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.1645.1" xmlns="http://www.w3.org/1999/xhtml">There are </span><a id="_idIndexMarker471"/><span class="koboSpan" id="kobo.1646.1" xmlns="http://www.w3.org/1999/xhtml">many common types that have asynchronous methods that you can await, as shown in </span><em class="italic"><span class="koboSpan" id="kobo.1647.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.4</span></em><span class="koboSpan" id="kobo.1648.1" xmlns="http://www.w3.org/1999/xhtml">:</span></p>
<table class="table-container" id="table004-3">
<tbody>
<tr>
<td class="table-cell">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.1649.1" xmlns="http://www.w3.org/1999/xhtml">Type</span></strong></p>
</td>
<td class="table-cell">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.1650.1" xmlns="http://www.w3.org/1999/xhtml">Methods</span></strong></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1651.1" xmlns="http://www.w3.org/1999/xhtml">DbContext&lt;T&gt;</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1652.1" xmlns="http://www.w3.org/1999/xhtml">AddAsync</span></code><span class="koboSpan" id="kobo.1653.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1654.1" xmlns="http://www.w3.org/1999/xhtml">AddRangeAsync</span></code><span class="koboSpan" id="kobo.1655.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1656.1" xmlns="http://www.w3.org/1999/xhtml">FindAsync</span></code><span class="koboSpan" id="kobo.1657.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1658.1" xmlns="http://www.w3.org/1999/xhtml">SaveChangesAsync</span></code></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1659.1" xmlns="http://www.w3.org/1999/xhtml">DbSet&lt;T&gt;</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1660.1" xmlns="http://www.w3.org/1999/xhtml">AddAsync</span></code><span class="koboSpan" id="kobo.1661.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1662.1" xmlns="http://www.w3.org/1999/xhtml">AddRangeAsync</span></code><span class="koboSpan" id="kobo.1663.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1664.1" xmlns="http://www.w3.org/1999/xhtml">ForEachAsync</span></code><span class="koboSpan" id="kobo.1665.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1666.1" xmlns="http://www.w3.org/1999/xhtml">SumAsync</span></code><span class="koboSpan" id="kobo.1667.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1668.1" xmlns="http://www.w3.org/1999/xhtml">ToListAsync ToDictionaryAsync</span></code><span class="koboSpan" id="kobo.1669.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1670.1" xmlns="http://www.w3.org/1999/xhtml">AverageAsync</span></code><span class="koboSpan" id="kobo.1671.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1672.1" xmlns="http://www.w3.org/1999/xhtml">CountAsync</span></code></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1673.1" xmlns="http://www.w3.org/1999/xhtml">HttpClient</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1674.1" xmlns="http://www.w3.org/1999/xhtml">GetAsync</span></code><span class="koboSpan" id="kobo.1675.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1676.1" xmlns="http://www.w3.org/1999/xhtml">PostAsync</span></code><span class="koboSpan" id="kobo.1677.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1678.1" xmlns="http://www.w3.org/1999/xhtml">PutAsync</span></code><span class="koboSpan" id="kobo.1679.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1680.1" xmlns="http://www.w3.org/1999/xhtml">DeleteAsync</span></code><span class="koboSpan" id="kobo.1681.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1682.1" xmlns="http://www.w3.org/1999/xhtml">SendAsync</span></code></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1683.1" xmlns="http://www.w3.org/1999/xhtml">StreamReader</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1684.1" xmlns="http://www.w3.org/1999/xhtml">ReadAsync</span></code><span class="koboSpan" id="kobo.1685.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1686.1" xmlns="http://www.w3.org/1999/xhtml">ReadLineAsync</span></code><span class="koboSpan" id="kobo.1687.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1688.1" xmlns="http://www.w3.org/1999/xhtml">ReadToEndAsync</span></code></p>
</td>
</tr>
<tr>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1689.1" xmlns="http://www.w3.org/1999/xhtml">StreamWriter</span></code></p>
</td>
<td class="table-cell">
<p class="normal"><code class="inlineCode"><span class="koboSpan" id="kobo.1690.1" xmlns="http://www.w3.org/1999/xhtml">WriteAsync</span></code><span class="koboSpan" id="kobo.1691.1" xmlns="http://www.w3.org/1999/xhtml">, </span><code class="inlineCode"><span class="koboSpan" id="kobo.1692.1" xmlns="http://www.w3.org/1999/xhtml">WriteLineAsync</span></code><span class="koboSpan" id="kobo.1693.1" xmlns="http://www.w3.org/1999/xhtml">, and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1694.1" xmlns="http://www.w3.org/1999/xhtml">FlushAsync</span></code></p>
</td>
</tr>
</tbody>
</table>
<p class="packt_figref"><span class="koboSpan" id="kobo.1695.1" xmlns="http://www.w3.org/1999/xhtml">Table 5.4: Common types with asynchronous methods</span></p>
<div class="packt_tip">
<p class="normal"><strong class="keyWord"><span class="koboSpan" id="kobo.1696.1" xmlns="http://www.w3.org/1999/xhtml">Good Practice</span></strong><span class="koboSpan" id="kobo.1697.1" xmlns="http://www.w3.org/1999/xhtml">: Any time you see a method that ends in the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1698.1" xmlns="http://www.w3.org/1999/xhtml">Async</span></code><span class="koboSpan" id="kobo.1699.1" xmlns="http://www.w3.org/1999/xhtml"> suffix, check to see whether it returns </span><code class="inlineCode"><span class="koboSpan" id="kobo.1700.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.1701.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><code class="inlineCode"><span class="koboSpan" id="kobo.1702.1" xmlns="http://www.w3.org/1999/xhtml">Task&lt;T&gt;</span></code><span class="koboSpan" id="kobo.1703.1" xmlns="http://www.w3.org/1999/xhtml">. </span><span class="koboSpan" id="kobo.1703.2" xmlns="http://www.w3.org/1999/xhtml">If it does return </span><code class="inlineCode"><span class="koboSpan" id="kobo.1704.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.1705.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><code class="inlineCode"><span class="koboSpan" id="kobo.1706.1" xmlns="http://www.w3.org/1999/xhtml">Task&lt;T&gt;</span></code><span class="koboSpan" id="kobo.1707.1" xmlns="http://www.w3.org/1999/xhtml">, then you could use it instead of the synchronous non-</span><code class="inlineCode"><span class="koboSpan" id="kobo.1708.1" xmlns="http://www.w3.org/1999/xhtml">Async</span></code><span class="koboSpan" id="kobo.1709.1" xmlns="http://www.w3.org/1999/xhtml"> suffixed method. </span><span class="koboSpan" id="kobo.1709.2" xmlns="http://www.w3.org/1999/xhtml">Remember to call it using </span><code class="inlineCode"><span class="koboSpan" id="kobo.1710.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1711.1" xmlns="http://www.w3.org/1999/xhtml"> and decorate your method with </span><code class="inlineCode"><span class="koboSpan" id="kobo.1712.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1713.1" xmlns="http://www.w3.org/1999/xhtml">.</span></p>
</div>
<h2 class="heading-2" id="_idParaDest-220"><span class="koboSpan" id="kobo.1714.1" xmlns="http://www.w3.org/1999/xhtml">Using await in catch blocks</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.1715.1" xmlns="http://www.w3.org/1999/xhtml">When </span><code class="inlineCode"><span class="koboSpan" id="kobo.1716.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1717.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1718.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1719.1" xmlns="http://www.w3.org/1999/xhtml"> were</span><a id="_idIndexMarker472"/><span class="koboSpan" id="kobo.1720.1" xmlns="http://www.w3.org/1999/xhtml"> first introduced in C# 5, it was only possible to use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1721.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1722.1" xmlns="http://www.w3.org/1999/xhtml"> keyword in a </span><code class="inlineCode"><span class="koboSpan" id="kobo.1723.1" xmlns="http://www.w3.org/1999/xhtml">try</span></code><span class="koboSpan" id="kobo.1724.1" xmlns="http://www.w3.org/1999/xhtml"> block, but not in a </span><code class="inlineCode"><span class="koboSpan" id="kobo.1725.1" xmlns="http://www.w3.org/1999/xhtml">catch</span></code><span class="koboSpan" id="kobo.1726.1" xmlns="http://www.w3.org/1999/xhtml"> block. </span><span class="koboSpan" id="kobo.1726.2" xmlns="http://www.w3.org/1999/xhtml">In C# 6 and later, it is now possible to use </span><code class="inlineCode"><span class="koboSpan" id="kobo.1727.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1728.1" xmlns="http://www.w3.org/1999/xhtml"> in both </span><code class="inlineCode"><span class="koboSpan" id="kobo.1729.1" xmlns="http://www.w3.org/1999/xhtml">try</span></code><span class="koboSpan" id="kobo.1730.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1731.1" xmlns="http://www.w3.org/1999/xhtml">catch</span></code><span class="koboSpan" id="kobo.1732.1" xmlns="http://www.w3.org/1999/xhtml"> blocks.</span></p>
<h1 class="heading-1" id="_idParaDest-221"><span class="koboSpan" id="kobo.1733.1" xmlns="http://www.w3.org/1999/xhtml">Practicing and exploring</span></h1>
<p class="normal"><span class="koboSpan" id="kobo.1734.1" xmlns="http://www.w3.org/1999/xhtml">Test your knowledge and understanding by answering some questions, getting some hands-on practice, and exploring this chapter’s topics with deeper research.</span></p>
<h2 class="heading-2" id="_idParaDest-222"><span class="koboSpan" id="kobo.1735.1" xmlns="http://www.w3.org/1999/xhtml">Exercise 5.1 – Test your knowledge</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.1736.1" xmlns="http://www.w3.org/1999/xhtml">Answer the following questions:</span></p>
<ol class="numberedList" style="list-style-type: decimal;">
<li class="numberedList" value="1"><span class="koboSpan" id="kobo.1737.1" xmlns="http://www.w3.org/1999/xhtml">What information can you find out about a process?</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1738.1" xmlns="http://www.w3.org/1999/xhtml">How accurate is the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1739.1" xmlns="http://www.w3.org/1999/xhtml">Stopwatch</span></code><span class="koboSpan" id="kobo.1740.1" xmlns="http://www.w3.org/1999/xhtml"> class?</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1741.1" xmlns="http://www.w3.org/1999/xhtml">By convention, what suffix should be applied to a method that returns </span><code class="inlineCode"><span class="koboSpan" id="kobo.1742.1" xmlns="http://www.w3.org/1999/xhtml">Task</span></code><span class="koboSpan" id="kobo.1743.1" xmlns="http://www.w3.org/1999/xhtml"> or </span><code class="inlineCode"><span class="koboSpan" id="kobo.1744.1" xmlns="http://www.w3.org/1999/xhtml">Task&lt;T&gt;</span></code><span class="koboSpan" id="kobo.1745.1" xmlns="http://www.w3.org/1999/xhtml">?</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1746.1" xmlns="http://www.w3.org/1999/xhtml">To use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1747.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1748.1" xmlns="http://www.w3.org/1999/xhtml"> keyword inside a method, what keyword must be applied to the method declaration?</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1749.1" xmlns="http://www.w3.org/1999/xhtml">How do you create a child task?</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1750.1" xmlns="http://www.w3.org/1999/xhtml">Why should you avoid the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1751.1" xmlns="http://www.w3.org/1999/xhtml">lock</span></code><span class="koboSpan" id="kobo.1752.1" xmlns="http://www.w3.org/1999/xhtml"> keyword?</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1753.1" xmlns="http://www.w3.org/1999/xhtml">When should you use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1754.1" xmlns="http://www.w3.org/1999/xhtml">Interlocked</span></code><span class="koboSpan" id="kobo.1755.1" xmlns="http://www.w3.org/1999/xhtml"> class?</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1756.1" xmlns="http://www.w3.org/1999/xhtml">When should you use the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1757.1" xmlns="http://www.w3.org/1999/xhtml">Mutex</span></code><span class="koboSpan" id="kobo.1758.1" xmlns="http://www.w3.org/1999/xhtml"> class instead of the </span><code class="inlineCode"><span class="koboSpan" id="kobo.1759.1" xmlns="http://www.w3.org/1999/xhtml">Monitor</span></code><span class="koboSpan" id="kobo.1760.1" xmlns="http://www.w3.org/1999/xhtml"> class?</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1761.1" xmlns="http://www.w3.org/1999/xhtml">What is the benefit of using </span><code class="inlineCode"><span class="koboSpan" id="kobo.1762.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1763.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1764.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1765.1" xmlns="http://www.w3.org/1999/xhtml"> in a website or web service?</span></li>
<li class="numberedList"><span class="koboSpan" id="kobo.1766.1" xmlns="http://www.w3.org/1999/xhtml">Can you cancel a task? </span><span class="koboSpan" id="kobo.1766.2" xmlns="http://www.w3.org/1999/xhtml">If so, how?</span></li>
</ol>
<h2 class="heading-2" id="_idParaDest-223"><span class="koboSpan" id="kobo.1767.1" xmlns="http://www.w3.org/1999/xhtml">Exercise 5.2 – Explore topics</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.1768.1" xmlns="http://www.w3.org/1999/xhtml">Use the links on the following web page to learn more about the topics covered in this chapter:</span></p>
<p class="normal"><a href="https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-5---multitasking-and-concurrency"><span class="url"><span class="koboSpan" id="kobo.1769.1" xmlns="http://www.w3.org/1999/xhtml">https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-5---multitasking-and-concurrency</span></span></a></p>
<h2 class="heading-2" id="_idParaDest-224"><span class="koboSpan" id="kobo.1770.1" xmlns="http://www.w3.org/1999/xhtml">Exercise 5.3 – Read more about parallel programming</span></h2>
<p class="normal"><span class="koboSpan" id="kobo.1771.1" xmlns="http://www.w3.org/1999/xhtml">Packt has a book that goes deeper into the topics in this chapter, </span><em class="italic"><span class="koboSpan" id="kobo.1772.1" xmlns="http://www.w3.org/1999/xhtml">Parallel Programming and Concurrency with C# 10 and .NET 6: A modern approach to building faster, more responsive, and asynchronous .NET applications using C#</span></em><span class="koboSpan" id="kobo.1773.1" xmlns="http://www.w3.org/1999/xhtml">, by Alvin Ashcroft:</span></p>
<p class="normal"><a href="https://www.packtpub.com/product/parallel-programming-and-concurrency-with-c-10-and-net-6/9781803243672"><span class="url"><span class="koboSpan" id="kobo.1774.1" xmlns="http://www.w3.org/1999/xhtml">https://www.packtpub.com/product/parallel-programming-and-concurrency-with-c-10-and-net-6/9781803243672</span></span></a></p>
<h1 class="heading-1" id="_idParaDest-225"><span class="koboSpan" id="kobo.1775.1" xmlns="http://www.w3.org/1999/xhtml">Summary</span></h1>
<p class="normal"><span class="koboSpan" id="kobo.1776.1" xmlns="http://www.w3.org/1999/xhtml">In this chapter, you learned: </span></p>
<ul>
<li class="bulletList"><span class="koboSpan" id="kobo.1777.1" xmlns="http://www.w3.org/1999/xhtml">How to define and start a task.</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.1778.1" xmlns="http://www.w3.org/1999/xhtml">How to wait for one or more tasks to finish.</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.1779.1" xmlns="http://www.w3.org/1999/xhtml">How to control task completion order. </span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.1780.1" xmlns="http://www.w3.org/1999/xhtml">How to synchronize access to shared resources.</span></li>
<li class="bulletList"><span class="koboSpan" id="kobo.1781.1" xmlns="http://www.w3.org/1999/xhtml">The magic behind </span><code class="inlineCode"><span class="koboSpan" id="kobo.1782.1" xmlns="http://www.w3.org/1999/xhtml">async</span></code><span class="koboSpan" id="kobo.1783.1" xmlns="http://www.w3.org/1999/xhtml"> and </span><code class="inlineCode"><span class="koboSpan" id="kobo.1784.1" xmlns="http://www.w3.org/1999/xhtml">await</span></code><span class="koboSpan" id="kobo.1785.1" xmlns="http://www.w3.org/1999/xhtml">.</span></li>
</ul>
<p class="normal"><span class="koboSpan" id="kobo.1786.1" xmlns="http://www.w3.org/1999/xhtml">In the next chapter, you will learn how to use some popular third-party libraries.</span></p>
</div>
</body>
</html>
