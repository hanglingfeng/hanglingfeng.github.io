<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>Chapter_2</title>
  <link href="../Styles/syntax-highlighting.css" rel="stylesheet" type="text/css"/>
  <link href="../Styles/epub.css" rel="stylesheet" type="text/css"/>
</head>

<body id="Chapter_2" lang="en-US" xml:lang="en-US">
  <div id="_idContainer076" class="Basic-Text-Frame">
    <h1 class="chapterNumber">2</h1>
    <h1 id="_idParaDest-48" class="chapterTitle">Building Your First Blazor WebAssembly Application</h1>
    <p class="normal"><strong class="keyWord">Razor components</strong> are the building blocks of Blazor WebAssembly applications. A Razor component is a <a id="_idIndexMarker092"></a>chunk of user interface that can be shared, nested, and reused. Razor components are ordinary C# classes and can be placed anywhere in a project.</p>
    <blockquote class="packt_quote">
      <p class="quote">Razor components.</p>
      <p class="quote">Building blocks of Blazor apps.</p>
      <p class="quote">Nestable magic.</p>
    </blockquote>
    <p class="normal">In this chapter, we will learn about Razor components. We will learn how to use them, how to apply parameters, and how to create them. We will also become familiar with their life cycle and their structure. We will learn how to use the <code class="inlineCode">@page</code> directive to define routing and we will learn how to use <strong class="keyWord">Razor syntax</strong> to combine C# code with HTML markup. Finally, we will introduce the <strong class="keyWord">Hot Reload</strong> experience.</p>
    <p class="normal">The Blazor WebAssembly project in this chapter will be created by using the <strong class="keyWord">Blazor WebAssembly App project template</strong> provided by Microsoft. After we create the project, we will examine it to further familiarize ourselves with Razor components. We will learn how to use them, how to add parameters, how to apply routing, how to use Razor syntax, and how to separate the Razor markup and code into separate files. As we make edits to the code, we will use <code class="inlineCode">Hot Reload</code> to automatically update the browser.</p>
    <p class="normal">In this chapter, we will cover the following topics:</p>
    <ul>
      <li class="bulletList">Razor components</li>
      <li class="bulletList">Routing</li>
      <li class="bulletList">Razor syntax</li>
      <li class="bulletList">Hot Reload</li>
      <li class="bulletList">Creating the demo WebAssembly project</li>
    </ul>
    <h1 id="_idParaDest-49" class="heading-1">Creating the Demo Blazor WebAssembly Project Technical Requirements</h1>
    <p class="normal">To complete this project, you need to have Microsoft Visual Studio 2022 installed on your PC. For instructions on how to install the free community edition of Microsoft Visual Studio 2022, refer to <em class="chapterRef">Chapter 1</em>, <em class="italic">Introduction to Blazor WebAssembly</em>.</p>
    <p class="normal">The source code for this chapter is available in the following GitHub repository: <a href="https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter02"><span class="url">https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter02</span></a>.</p>
    <p class="normal">The Code in Action video is available here: <a href="https://packt.link/Ch2"><span class="url">https://packt.link/Ch2</span></a>.</p>
    <h1 id="_idParaDest-50" class="heading-1">Razor components</h1>
    <p class="normal">Blazor WebAssembly is a component-driven framework. Razor components are the fundamental building <a id="_idIndexMarker093"></a>blocks of a Blazor WebAssembly application. They are classes that are implemented using a combination of C#, HTML, and Razor syntax. When the web app loads, the classes get downloaded into the browser as normal .NET assemblies (DLLs).</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">In this book, the terms Razor component and component are used interchangeably.</p>
    </div>
    <h2 id="_idParaDest-51" class="heading-2">Using components</h2>
    <p class="normal">HTML element syntax is used to add one component to another component. The markup <a id="_idIndexMarker094"></a>looks like an HTML tag where the name of the tag is the component type.</p>
    <p class="normal">The following markup in the <code class="inlineCode">Pages/Index.razor</code> file of the <code class="inlineCode">Demo</code> project, which we will create later in this chapter, will render a <code class="inlineCode">SurveyPrompt</code> instance:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">SurveyPrompt</span><span class="hljs-tag"> </span><span class="hljs-attr">Title</span><span class="hljs-tag">=</span><span class="hljs-string">"How is Blazor working for you?"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
    <p class="normal">The preceding <code class="inlineCode">SurveyPrompt</code> element includes an attribute parameter named <code class="inlineCode">Title</code>.</p>
    <h2 id="_idParaDest-52" class="heading-2">Parameters</h2>
    <p class="normal">Component parameters are used to make components dynamic. Parameters are public properties of the <a id="_idIndexMarker095"></a>component that are decorated with either the <code class="inlineCode">Parameter</code> attribute or the <code class="inlineCode">CascadingParameter</code> attribute. Parameters can be simple types, complex types, functions, <strong class="keyWord">RenderFragments</strong>, or event callbacks.</p>
    <p class="normal">The following code for a component named <code class="inlineCode">Hello</code> includes a parameter named <code class="inlineCode">Text</code>:</p>
    <p class="normal"><strong class="keyWord">Hello.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Hello @Text!<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
@code {
    [Parameter] public string? Text { get; set; }
}
</code></pre>
    <p class="normal">To use the <code class="inlineCode">Hello</code> component, include the following HTML syntax within another component:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">Hello</span><span class="hljs-tag"> </span><span class="hljs-attr">Text</span><span class="hljs-tag">=</span><span class="hljs-string">"World"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
    <p class="normal">In the preceding example, the <code class="inlineCode">Text</code> attribute of the <code class="inlineCode">Hello</code> component is the source of the <code class="inlineCode">Text</code> parameter. This screenshot shows the results of using the component as indicated:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_01.png" alt="Figure 2.1 – HelloWorld component
"/></figure>
    <p class="packt_figref">Figure 2.1: The Hello component</p>
    <p class="normal">A parameter’s <code class="inlineCode">get</code> and <code class="inlineCode">set</code> accessors must not contain custom logic. They are only intended as a <a id="_idIndexMarker096"></a>channel to allow information to flow to the child from the parent. Also, as mentioned earlier, they must be public.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">The application will enter an infinite loop if a child component includes a parameter that causes rerendering of the parent component.</p>
    </div>
    <h3 id="_idParaDest-53" class="heading-3">Required parameters</h3>
    <p class="normal">You can specify that <a id="_idIndexMarker097"></a>a parameter is required by the editor by decorating it with the <code class="inlineCode">EditorRequired</code> attribute. In the following version of the <code class="inlineCode">Hello2</code> component, the <code class="inlineCode">Text</code> parameter is required:</p>
    <p class="normal"><strong class="keyWord">Hello2.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">&lt;h1&gt;Hello @Text!&lt;/h1&gt;
@code {
    [<span class="hljs-meta">Parameter</span>] 
    [<span class="hljs-meta">EditorRequired</span>]
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? Text { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
}
</code></pre>
    <p class="normal">If we try to use <code class="inlineCode">Hello2</code> in a component and do not include the <code class="inlineCode">Text</code> attribute, Visual Studio will display the following warning:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_02.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.2: Missing parameter warning</p>
    <p class="normal">The preceding <a id="_idIndexMarker098"></a>warning will not prevent the application from building, and it is not enforced at runtime. It is only used by the editor.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Decorating a parameter with the <code class="inlineCode">EditorRequired</code> attribute does not guarantee that the parameter will have a value at runtime.</p>
    </div>
    <h3 id="_idParaDest-54" class="heading-3">Query strings</h3>
    <p class="normal">A component can also <a id="_idIndexMarker099"></a>receive parameters from the query string. A query string is used to assign values <a id="_idIndexMarker100"></a>to the specified parameters. To indicate that the parameter can come from the query string, we decorate the parameter with the <strong class="keyWord">SupplyParameterFromQuery</strong> attribute. </p>
    <p class="normal">In the following example, the <code class="inlineCode">Increment</code> parameter has been decorated with the <code class="inlineCode">SupplyParameterFromQuery</code> attribute:</p>
    <pre class="programlisting code"><code class="hljs-code">[<span class="hljs-meta">Parameter</span>] 
[<span class="hljs-meta">SupplyParameterFromQuery</span>]
<span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>? Increment { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
    <p class="normal">This is the code to set the value of <code class="inlineCode">Increment</code> to <code class="inlineCode">5</code>:</p>
    <p class="normal"><a href="https://localhost:7097/counter?increment=5"><span class="url">https://localhost:7097/counter?increment=5</span></a></p>
    <p class="normal">In the preceding example, everything after the question mark is the query string. The query string is not case sensitive. Also, the preceding example assumes that we are running our application locally on port 7097. Since the port that is used will vary by application, we will exclude the port in the rest of our examples.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">The <strong class="keyWord">applicationUrl</strong> is defined in the <code class="inlineCode">Properties/launchSettings.json</code> file. Each time we create a <a id="_idIndexMarker101"></a>new Blazor project using a Microsoft project template, the <code class="inlineCode">applicationUrl</code> will randomly reference a different port.</p>
    </div>
    <p class="normal">The parameters <a id="_idIndexMarker102"></a>provided by the query string are restricted to the following types, arrays of the following types, and their nullable variants:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">bool</code></li>
      <li class="bulletList"><code class="inlineCode">DateTime</code></li>
      <li class="bulletList"><code class="inlineCode">decimal</code></li>
      <li class="bulletList"><code class="inlineCode">double</code></li>
      <li class="bulletList"><code class="inlineCode">float</code></li>
      <li class="bulletList"><code class="inlineCode">Guid</code></li>
      <li class="bulletList"><code class="inlineCode">int </code></li>
      <li class="bulletList"><code class="inlineCode">long</code></li>
      <li class="bulletList"><code class="inlineCode">string</code></li>
    </ul>
    <p class="normal">They can also consist of arrays of the preceding types.</p>
    <h2 id="_idParaDest-55" class="heading-2">Naming components</h2>
    <p class="normal">The name of a Razor component <a id="_idIndexMarker103"></a>must be in title case. Therefore, <code class="inlineCode">hello</code> would not be a valid name for a Razor component since the h is not capitalized. Also, Razor components use the <code class="inlineCode">RAZOR</code> extension rather than the <code class="inlineCode">CSHTML</code> extension that is used by <code class="inlineCode">Razor</code> Pages.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Razor components must start with a capital letter.</p>
    </div>
    <h2 id="_idParaDest-56" class="heading-2">Component life cycle</h2>
    <p class="normal">Razor components inherit from the <code class="inlineCode">ComponentBase</code> class. The <code class="inlineCode">ComponentBase</code> class includes both <a id="_idIndexMarker104"></a>asynchronous and synchronous methods that are used to manage the life cycle of a component. In this book, we will be using the asynchronous versions of the methods since they execute without blocking other operations. This is the order in which the methods in the life cycle of a component are invoked:</p>
    <ul>
      <li class="bulletList"><strong class="keyWord">SetParametersAsync</strong>: This method sets the parameters that are supplied by the <a id="_idIndexMarker105"></a>component’s parent in the render tree.</li>
      <li class="bulletList"><strong class="keyWord">OnInitializedAsync</strong>: This method is invoked after the parameters have been set and <a id="_idIndexMarker106"></a>the component has been successfully initialized.</li>
      <li class="bulletList"><strong class="keyWord">OnParametersSetAsync</strong>: This method is invoked after the component initializes <a id="_idIndexMarker107"></a>and each time the component rerenders. A component will rerender when the parent component rerenders and at least one parameter has changed. Also, a component will rerender when the <strong class="keyWord">StateHasChanged</strong> method of the component is called.</li>
      <li class="bulletList"><strong class="keyWord">OnAfterRenderAsync</strong>: This method is invoked after the component has finished <a id="_idIndexMarker108"></a>rendering. This method is for working with <a id="_idIndexMarker109"></a>JavaScript since JavaScript requires the <strong class="keyWord">Document Object Model</strong> (<strong class="keyWord">DOM</strong>) elements to be rendered before they can do any work.</li>
    </ul>
    <h2 id="_idParaDest-57" class="heading-2">Component structure</h2>
    <p class="normal">The following <a id="_idIndexMarker110"></a>diagram shows code from the <code class="inlineCode">Counter</code> component of the <code class="inlineCode">Demo</code> project that we will create in this chapter:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_03.png" alt="Graphical user interface, text

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.3: Component structure</p>
    <p class="normal">The code in the <a id="_idIndexMarker111"></a>preceding example is divided into three sections:</p>
    <ul>
      <li class="bulletList">Directives</li>
      <li class="bulletList">Markup</li>
      <li class="bulletList">Code Block</li>
    </ul>
    <p class="normal">Each of the sections has a different purpose.</p>
    <h3 id="_idParaDest-58" class="heading-3">Directives</h3>
    <p class="normal">Directives are <a id="_idIndexMarker112"></a>used to add special functionality, such <a id="_idIndexMarker113"></a>as routing, layout, and dependency injection. File-level directives are defined within Razor, and you cannot define your own directives. Razor directives start with the <code class="inlineCode">@</code> symbol.</p>
    <p class="normal">In the preceding example, there is only one directive used – the <code class="inlineCode">@page</code> directive. The <code class="inlineCode">@page</code> directive is used for routing. In this example, the following URL will route the user to the <code class="inlineCode">Counter</code> component:</p>
    <pre class="programlisting code"><code class="hljs-code">/counter
</code></pre>
    <p class="normal">A typical page can include many directives at the top of the page. Also, many pages have more than one <code class="inlineCode">@page</code> directive.</p>
    <p class="normal">Most of the directives in <a id="_idIndexMarker114"></a>Razor can be used in a Blazor WebAssembly application. These are the <a id="_idIndexMarker115"></a>Razor directives that are used in Blazor, in alphabetical order:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">@attribute</code>: This directive adds a class-level attribute to the component. The following example adds the <code class="inlineCode">[Authorize]</code> attribute:
        <pre class="programlisting code"><code class="hljs-code">@attribute [Authorize]
</code></pre>
      </li>
      <li class="bulletList"><code class="inlineCode">@code</code>: This directive adds class members to the component. In the example, it is used to distinguish the code block.</li>
      <li class="bulletList"><code class="inlineCode">@implements</code>: This directive implements an interface for the specified class.</li>
      <li class="bulletList"><code class="inlineCode">@inherits</code>: This directive provides full control of the class that the view inherits.</li>
      <li class="bulletList"><code class="inlineCode">@inject</code>: This directive is used for dependency injection. It enables the component to inject a service from the dependency injection container into the view. The following example injects the <strong class="keyWord">HttpClient</strong> defined in the <code class="inlineCode">Program.cs</code> file into the component:
        <pre class="programlisting code"><code class="hljs-code">@inject HttpClient Http
</code></pre>
      </li>
      <li class="bulletList"><code class="inlineCode">@layout</code>: This directive is used to specify a layout for the Razor components that include an <code class="inlineCode">@page</code> directive.</li>
      <li class="bulletList"><code class="inlineCode">@namespace</code>: This directive sets the component’s namespace. You only need to use this directive if you do not want to use the default namespace for the component. The default namespace is based on the location of the component.</li>
      <li class="bulletList"><code class="inlineCode">@page</code>: This directive is used for routing.</li>
      <li class="bulletList"><code class="inlineCode">@preservewhitespace</code>: This directive is used to preserve the whitespace in the <a id="_idIndexMarker116"></a>rendered markup. If it is set to <code class="inlineCode">true</code>, the <a id="_idIndexMarker117"></a>whitespace is preserved. The default is <code class="inlineCode">false</code>.</li>
      <li class="bulletList"><code class="inlineCode">@using</code>: This directive controls the components that are in scope.</li>
    </ul>
    <h3 id="_idParaDest-59" class="heading-3">Markup</h3>
    <p class="normal">Markup is HTML with <a id="_idIndexMarker118"></a>Razor syntax. The Razor syntax can be used <a id="_idIndexMarker119"></a>to render text and allows C# to be included as part of the markup. We will cover more about Razor syntax later in this chapter.</p>
    <h3 id="_idParaDest-60" class="heading-3">Code block</h3>
    <p class="normal">The code block contains <a id="_idIndexMarker120"></a>the logic for the page. It begins <a id="_idIndexMarker121"></a>with the <code class="inlineCode">@code</code> directive. By convention, the code block is at the bottom of the page. It is the only file-level directive that is not placed at the top of the page.</p>
    <p class="normal">The code block is where we add C# fields, properties, and methods to the component. Later in this chapter, we will move the code block to a separate code-behind file.</p>
    <p class="normal">Razor components are the building blocks of a Blazor WebAssembly application. They are easy to use since they are simply a combination of HTML markup and C# code. They are structured with directives, markup, and code blocks. Components have a clearly defined life cycle. They can be nested and leverage different types of parameters to make them dynamic. In the next section, we will explain how routing is used to navigate between components.</p>
    <h1 id="_idParaDest-61" class="heading-1">Routing</h1>
    <p class="normal">In Blazor WebAssembly, routing is handled on the client, not on the server. As you navigate in the <a id="_idIndexMarker122"></a>browser, Blazor intercepts that navigation and renders the component with the matching route.</p>
    <p class="normal">The URLs are resolved relative to the base path that is specified in the <code class="inlineCode">wwwroot/index.html</code> file. The base path is specified in the <code class="inlineCode">head</code><strong class="keyWord"> </strong>element using the following syntax:</p>
    <pre class="programlisting code"><code class="hljs-code">&lt;<span class="hljs-keyword">base</span> href=<span class="hljs-string">"/"</span> /&gt;
</code></pre>
    <p class="normal">Unlike other frameworks that you may have used, the route is not inferred from the location of its file. For example, in the <code class="inlineCode">Demo</code> project, the <code class="inlineCode">Counter</code> component is in the <code class="inlineCode">/Pages/Counter</code> folder, yet it uses the following route:</p>
    <pre class="programlisting code"><code class="hljs-code">/counter
</code></pre>
    <p class="normal">This is the <code class="inlineCode">@page</code> directive <a id="_idIndexMarker123"></a>used by the <code class="inlineCode">Counter</code> component:</p>
    <pre class="programlisting code"><code class="hljs-code">@page <span class="hljs-string">"/counter"</span>
</code></pre>
    <h2 id="_idParaDest-62" class="heading-2">Route parameters</h2>
    <p class="normal">Route parameters can be <a id="_idIndexMarker124"></a>used to populate the parameters of a component. The parameters of both the component and the route must have the same name, but they are not case-sensitive.</p>
    <p class="normal">You can provide more than one <code class="inlineCode">@page</code> directive to a component. The following <code class="inlineCode">RoutingExample</code> component demonstrates how to include multiple <code class="inlineCode">@page</code> parameters:</p>
    <p class="normal"><strong class="keyWord">RoutingExample.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@page <span class="hljs-string">"/routing"</span>
@page <span class="hljs-string">"/routing/{text}"</span>
&lt;h1&gt;Blazor WebAssembly <span class="hljs-keyword">is</span> @Text!&lt;/h1&gt;
@code {
    [<span class="hljs-meta">Parameter</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? Text { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">OnInitialized</span><span class="hljs-function">()</span>
    {
        Text = Text ?? <span class="hljs-string">"fantastic"</span>;
    }
}
</code></pre>
    <p class="normal">In the preceding code, the first <code class="inlineCode">@page</code> directive allows navigation to the component without a parameter, while the second <code class="inlineCode">@page</code> directive includes a route parameter. If a value for <code class="inlineCode">text</code> is provided, it is assigned to the <code class="inlineCode">Text</code> property of the component. If the <code class="inlineCode">Text</code> property of the component is <code class="inlineCode">null</code>, it is set to <code class="inlineCode">fantastic</code>.</p>
    <p class="normal">The following URL will route the user to the <code class="inlineCode">RoutingExample</code> component:</p>
    <pre class="programlisting code"><code class="hljs-code">/routing
</code></pre>
    <p class="normal">The following URL <a id="_idIndexMarker125"></a>will also route the user to the <code class="inlineCode">RoutingExample</code> component, but this time, the <code class="inlineCode">Text</code> parameter will be set by the route:</p>
    <pre class="programlisting code"><code class="hljs-code">/routing/amazing
</code></pre>
    <p class="normal">This screenshot shows the results of using the indicated route:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_04.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.4: The RoutingExample component</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Route parameters are not case-sensitive.</p>
    </div>
    <h2 id="_idParaDest-63" class="heading-2">Optional route parameters</h2>
    <p class="normal">Optional route parameters <a id="_idIndexMarker126"></a>are supported by Blazor. In the following version of the <code class="inlineCode">RoutingExample</code> component, the <code class="inlineCode">Text</code> property is optional:</p>
    <p class="normal"><strong class="keyWord">RoutingExample.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@page <span class="hljs-string">"/routing/{text?}"</span>
&lt;h1&gt;Blazor WebAssembly <span class="hljs-keyword">is</span> @Text!&lt;/h1&gt;
@code {
    [<span class="hljs-meta">Parameter</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? Text { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">OnInitialized</span><span class="hljs-function">()</span>
    {
        Text = Text ?? <span class="hljs-string">"fantastic"</span>;
    }
}
</code></pre>
    <p class="normal">The difference between this version of the <code class="inlineCode">RoutingExample</code> component and the original version is that the two <code class="inlineCode">@page</code> directives have been combined and the <code class="inlineCode">text</code> route parameter has been changed to a nullable type. By using an optional route parameter, we can reduce the number of <code class="inlineCode">@page</code> directives that are required by the application.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">If you need a component to navigate to itself with a different optional parameter value, you should set the value in the <code class="inlineCode">OnParametersSet</code> event instead of the <code class="inlineCode">OnInitialized</code> event.</p>
    </div>
    <h2 id="_idParaDest-64" class="heading-2">Catch-all route parameters</h2>
    <p class="normal">Catch-all route parameters are used to capture paths across multiple folder boundaries. This type <a id="_idIndexMarker127"></a>of route parameter is a <code class="inlineCode">string</code> type and can only be placed at the end of the URL. Catch-all route parameters are designated with an asterisk.</p>
    <p class="normal">This is a sample component that uses a catch-all route parameter:</p>
    <p class="normal"><strong class="keyWord">CatchAll.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@page <span class="hljs-string">"/error/{*path}"</span>
@page <span class="hljs-string">"/warning/{*path}"</span>
&lt;h1&gt;Catch All&lt;/h1&gt;
Route: @Path
@code {
    [<span class="hljs-meta">Parameter</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? Path { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
}
</code></pre>
    <p class="normal">For the <code class="inlineCode">/error/type/3</code> URL, the preceding code will set the value of the <code class="inlineCode">Path</code> parameter to <code class="inlineCode">type/3</code>, as shown in <a id="_idIndexMarker128"></a>the following image:</p>
    <figure class="mediaobject"> <img src="../Images/B18471_02_05.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.5: Catch-all route parameter example</p>
    <h2 id="_idParaDest-65" class="heading-2">Route constraints</h2>
    <p class="normal">Route constraints are used to enforce the datatype of a route parameter. To define a constraint, add a colon <a id="_idIndexMarker129"></a>followed by the constraint type to the parameter. In the following example, the route is expecting a route parameter named <code class="inlineCode">Increment</code> with the type of <code class="inlineCode">int</code>:</p>
    <pre class="programlisting code"><code class="hljs-code">@page <span class="hljs-string">"/counter/{increment:int}"</span>
</code></pre>
    <p class="normal">For route constraints, the following types, and their nullable variants, are supported:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">bool</code></li>
      <li class="bulletList"><code class="inlineCode">datetime</code></li>
      <li class="bulletList"><code class="inlineCode">decimal</code></li>
      <li class="bulletList"><code class="inlineCode">double</code></li>
      <li class="bulletList"><code class="inlineCode">float</code></li>
      <li class="bulletList"><code class="inlineCode">guid</code></li>
      <li class="bulletList"><code class="inlineCode">int </code></li>
      <li class="bulletList"><code class="inlineCode">long</code>
        <div class="note">
          <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
          <p class="normal">Route constraints use the invariant culture and do not support localization. For example, dates are <a id="_idIndexMarker130"></a>only valid in the form MM-dd-yyyy or yyyy-MM-dd, and Boolean values must be either <code class="inlineCode">true</code> or <code class="inlineCode">false</code>.</p>
        </div>
      </li>
    </ul>
    <p class="normal">The following types are not currently supported as constraints:</p>
    <ul>
      <li class="bulletList">Regular expressions</li>
      <li class="bulletList">Enums</li>
      <li class="bulletList">Custom constraints</li>
    </ul>
    <p class="normal">Route constraints support optional parameters. In the following example, the route parameter named <code class="inlineCode">increment</code> with the type of <code class="inlineCode">int</code> is optional:</p>
    <pre class="programlisting code"><code class="hljs-code">@page <span class="hljs-string">"/counter/{increment:int?}"</span>
</code></pre>
    <p class="normal">Routing is handled on the client. Each routable component can include one or more routes. We can use <a id="_idIndexMarker131"></a>both route parameters and catch-all route parameters to define routing. Route constraints are used to ensure that a route parameter is of the required datatype. Razor components use Razor syntax to seamlessly merge HTML with C# code, which is what we will see in the next section.</p>
    <h1 id="_idParaDest-66" class="heading-1">Razor syntax</h1>
    <p class="normal">Razor syntax is made up of HTML, Razor markup, and C#. Rendering HTML from a Razor component is <a id="_idIndexMarker132"></a>the same as rendering HTML from an HTML file. Razor syntax uses both inline expressions and control structures to render dynamic values.</p>
    <h2 id="_idParaDest-67" class="heading-2">Inline expressions</h2>
    <p class="normal">Inline expressions start <a id="_idIndexMarker133"></a>with an <code class="inlineCode">@</code> symbol followed by a <a id="_idIndexMarker134"></a>variable or function name. This is an example of an inline expression:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Blazor is @Text!<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">In the preceding example, Blazor will interpret the text after the <code class="inlineCode">@</code> symbol as either a property name or a method name.</p>
    <h2 id="_idParaDest-68" class="heading-2">Control structures</h2>
    <p class="normal">Control structures also start with an <code class="inlineCode">@</code> symbol. The content within the curly brackets is evaluated and rendered <a id="_idIndexMarker135"></a>to the output. This is an example of <a id="_idIndexMarker136"></a>an <code class="inlineCode">if</code> statement from the <code class="inlineCode">FetchData</code> component in the <code class="inlineCode">Demo</code> project that we will create later in this chapter:</p>
    <pre class="programlisting code"><code class="hljs-code">@if (forecasts == null)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;</span>Loading...<span class="hljs-tag">&lt;/</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
}
</code></pre>
    <h3 id="_idParaDest-69" class="heading-3">Conditionals</h3>
    <p class="normal">The following <a id="_idIndexMarker137"></a>types of conditionals are included in Razor syntax:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">if</code> statements</li>
      <li class="bulletList"><code class="inlineCode">switch</code><strong class="keyWord"> </strong>statements</li>
    </ul>
    <p class="normal">This is <a id="_idIndexMarker138"></a>an example of an <code class="inlineCode">if</code> statement:</p>
    <pre class="programlisting code"><code class="hljs-code">@if (DateTime.Now.DayOfWeek.ToString() != "Friday")
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>Today is not Friday.<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
}
else if (DateTime.Now.Day != 13)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>Today is not the 13th.<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
}
else
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>Today is Friday the 13th.<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
}
</code></pre>
    <p class="normal">The preceding code uses an <code class="inlineCode">if</code> statement to check if the current day of the week is Friday and/or the current day of the month is the 13th. The result renders the appropriate <code class="inlineCode">p</code> element.</p>
    <p class="normal">This is <a id="_idIndexMarker139"></a>an example of a <code class="inlineCode">switch</code> statement:</p>
    <pre class="programlisting code"><code class="hljs-code">@switch (value)
{
    case 1:
        <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>The value is 1!<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
        break;
    case 42:
        <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>Your number is 42!<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
        break;
    default:
        <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>Your number was not 1 or 42.<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
        break;
}
@code {
    private int value = 2;
}
</code></pre>
    <p class="normal">The preceding <code class="inlineCode">switch</code> statement compares the <code class="inlineCode">value</code> variable to <code class="inlineCode">1</code> and <code class="inlineCode">42</code>. The result renders <a id="_idIndexMarker140"></a>the appropriate <code class="inlineCode">p</code> element.</p>
    <h3 id="_idParaDest-70" class="heading-3">Loops</h3>
    <p class="normal">The <a id="_idIndexMarker141"></a>following types of loops <a id="_idIndexMarker142"></a>are provided in Razor syntax:</p>
    <ul>
      <li class="bulletList"><strong class="keyWord">for</strong> loops</li>
      <li class="bulletList"><strong class="keyWord">foreach</strong> loops</li>
      <li class="bulletList"><strong class="keyWord">while</strong> loops</li>
      <li class="bulletList"><strong class="keyWord">do while</strong> loops</li>
    </ul>
    <p class="normal">Each of the following examples loops through an array of the <code class="inlineCode">WeatherForecast</code> items to display the <code class="inlineCode">Summary</code> property of each item in the array. </p>
    <p class="normal">This is <a id="_idIndexMarker143"></a>an example of a <code class="inlineCode">for</code> loop:</p>
    <pre class="programlisting code"><code class="hljs-code">@for (var i = 0; i &lt; forecasts.Count(); i++)
{
   <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>@forecasts[i].Summary<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
}
@code {
    private WeatherForecast[] forecasts;
}
</code></pre>
    <p class="normal">This is an <a id="_idIndexMarker144"></a>example of a <code class="inlineCode">foreach</code> loop:</p>
    <pre class="programlisting code"><code class="hljs-code">@foreach (var forecast in forecasts)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>@forecast.Summary<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
}
@code {
    private WeatherForecast[] forecasts;
}
</code></pre>
    <p class="normal">This is <a id="_idIndexMarker145"></a>an example of a <code class="inlineCode">while</code> loop:</p>
    <pre class="programlisting code"><code class="hljs-code">@while (i &lt; forecasts.Count())
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>@forecasts[i].Summary<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    i++;
}
@code {
    private WeatherForecast[] forecasts;
    private int i = 0;
}
</code></pre>
    <p class="normal">This is <a id="_idIndexMarker146"></a>an example of a <code class="inlineCode">do while</code> loop:</p>
    <pre class="programlisting code"><code class="hljs-code">@do
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>@forecasts[i].Summary<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    i++;
} while (i &lt; forecasts.Count());
@code {
    private WeatherForecast[] forecasts;
    private int i = 0;
}
</code></pre>
    <p class="normal">All the preceding examples <a id="_idIndexMarker147"></a>of loops render the same output. There are many ways to loop through a collection using Razor syntax.</p>
    <p class="normal">Razor syntax is easy to learn if you already know C#. It includes both inline expressions and control structures such as conditionals and loops. By using <code class="inlineCode">Hot Reload</code>, we can edit our code and view the results immediately in the browser.</p>
    <h1 id="_idParaDest-71" class="heading-1">Hot Reload</h1>
    <p class="normal"><code class="inlineCode">Hot Reload</code> allows developers to edit the markup and C# code of a currently running app without requiring <a id="_idIndexMarker148"></a>the app to be rebuilt or refreshed. Also, it does all of that while maintaining the app’s state.</p>
    <p class="normal">You can use <code class="inlineCode">Hot Reload</code> with or without the debugger. To trigger <code class="inlineCode">Hot Reload</code>, you can either use the <strong class="screenText">Hot Reload</strong> drop-down button on the toolbar or press <em class="keystroke">Alt</em>+<em class="keystroke">F10</em>.</p>
    <p class="normal">This is the <strong class="screenText">Hot Reload</strong> drop-down button that is accessed from the toolbar:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_06.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.6: Hot Reload drop-down button</p>
    <p class="normal">As you can see from the <strong class="screenText">Hot Reload</strong> drop-down button, you can set <strong class="screenText">Hot Reload</strong> to automatically be triggered whenever you save a file. There are more settings available via the <strong class="screenText">Settings</strong> option on the menu. <strong class="screenText">Hot Reload</strong> is supported for most changes to a component, including stylesheets. However, sometimes a change will require that the application be restarted.</p>
    <p class="normal">This is a list of some of the activities that require a restart:</p>
    <ul>
      <li class="bulletList">Adding new local functions</li>
      <li class="bulletList">Adding new lambdas</li>
      <li class="bulletList">Adding new fields</li>
      <li class="bulletList">Changing a parameter’s name</li>
      <li class="bulletList">Adding an await operator</li>
    </ul>
    <p class="normal">If a restart is required, the following dialog is displayed:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_07.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.7: Hot Reload warning dialog</p>
    <p class="normal">If you check the <strong class="screenText">Always rebuild when updates can’t be applied</strong> checkbox, Visual Studio will <a id="_idIndexMarker149"></a>automatically rebuild and reload the app when <code class="inlineCode">Hot Reload</code> is unable to automatically apply the changes. Also, this dialog will no longer be displayed until this setting is changed in <strong class="screenText">Settings</strong> or the solution is closed.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal"><code class="inlineCode">Hot Reload</code> will not work if native code debugging is enabled. Also, you can disable it at the <a id="_idIndexMarker150"></a>project level by setting <code class="inlineCode">hotReloadEnabled</code> to <code class="inlineCode">false</code> in the project’s <code class="inlineCode">Properties/launchSettings.json</code> file.</p>
    </div>
    <p class="normal">Hot Reload makes you more efficient since you don’t have to stop and restart your application every time you make an update.</p>
    <h1 id="_idParaDest-72" class="heading-1">Creating the Demo Blazor WebAssembly project</h1>
    <p class="normal">The Blazor WebAssembly <a id="_idIndexMarker151"></a>application that we are going to build in this chapter is a simple three-page application. Each page will be used to demonstrate one or more features of Razor components.</p>
    <p class="normal">This is a screenshot of the completed <code class="inlineCode">Demo</code> project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_08.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.8: Home page of the Demo project</p>
    <p class="normal">The build time <a id="_idIndexMarker152"></a>for this project is approximately 60 minutes.</p>
    <h2 id="_idParaDest-73" class="heading-2">Project overview</h2>
    <p class="normal">The <code class="inlineCode">Demo</code> project that we are creating is based on one of the sample projects that are provided by the <code class="inlineCode">Blazor WebAssembly App </code>project template. After we have used the template to <a id="_idIndexMarker153"></a>create the project, we will examine the files in the sample project and update some of the files to demonstrate how to use Razor components. To elevate the development experience, we will enable <code class="inlineCode">Hot Reload</code>. Finally, we will separate the code block of one of the components into a separate file to demonstrate how to use the code-behind technique to separate the markup from the code.</p>
    <h2 id="_idParaDest-74" class="heading-2">Getting started with the project</h2>
    <p class="normal">Visual Studio <a id="_idIndexMarker154"></a>comes with quite a few project templates. We are going to use the <strong class="keyWord">Blazor WebAssembly App</strong> project template to create our first Blazor WebAssembly project. Since this project template can be used to create many different types of Blazor projects, it is important to follow these instructions precisely:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open Microsoft Visual Studio 2022.</li>
      <li class="numberedList">Click the <strong class="screenText">Create a new project</strong> button.</li>
      <li class="numberedList">In the <strong class="screenText">Search for templates</strong> (<em class="keystroke">Alt</em>+<em class="keystroke">S</em>) textbox, enter <code class="inlineCode">Blazor</code> and hit the <em class="keystroke">Enter</em> key.
    <p class="normal">The following screenshot shows the <strong class="screenText">Blazor WebAssembly App</strong> project template that we will be using:</p> 
    <figure class="mediaobject"><img src="../Images/B18471_02_09.png" alt="Graphical user interface, text, application, chat or text message

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.9: Blazor WebAssembly App project template</p></li>
   </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="4">Select the <strong class="screenText">Blazor WebAssembly App</strong> project template and click the <strong class="screenText">Next</strong> button.</li>
      <li class="numberedList">Enter <code class="inlineCode">Demo</code> in the <strong class="screenText">Project name</strong> textbox and click the <strong class="screenText">Next</strong> button.
    <p class="normal">This is a <a id="_idIndexMarker155"></a>screenshot of the dialog used to configure our new project:</p> 
    <figure class="mediaobject"><img src="../Images/B18471_02_10.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.10: The Configure your new project dialog</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">In the preceding example, we placed the <code class="inlineCode">Demo</code> project into the <code class="inlineCode">E:\Blazor</code> folder. However, the location of this project is not important.</p>
    </div></li>
   </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Select <strong class="screenText">.NET 7.0 </strong>as the version of the <strong class="screenText">Framework</strong> to use.</li>
      <li class="numberedList">Select <strong class="screenText">None</strong> as the <strong class="screenText">Authentication type</strong>.</li>
      <li class="numberedList">Check the <strong class="screenText">Configure for HTTPS</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">ASP.NET Core Hosted</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">Progressive Web Application</strong> checkbox.</li>
      <li class="numberedList">Check the <strong class="screenText">Do not use top-level statements</strong> checkbox.
    
    <p class="normal">This is <a id="_idIndexMarker156"></a>a screenshot of the dialog used to create our new Blazor WebAssembly application:</p></li></ol>
    <figure class="mediaobject"><img src="../Images/B18471_02_11.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <figure class="mediaobject">Figure 2.11: Additional information for the Blazor WebAssembly App dialog</figure>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="12">Click <a id="_idIndexMarker157"></a>the <strong class="screenText">Create</strong> button.
    <p class="normal">You have created the <code class="inlineCode">Demo</code> project.</p></li>
  </ol>  
    <h2 id="_idParaDest-75" class="heading-2">Running the Demo project</h2>
    <p class="normal">Once the <a id="_idIndexMarker158"></a>project has been created, you need to run it to get an understanding of what it does. The <code class="inlineCode">Demo</code> project contains three pages: <strong class="screenText">Home</strong>, <strong class="screenText">Counter</strong>, and <strong class="screenText">Fetch data</strong>:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">From the <strong class="screenText">Debug</strong> menu, select the <strong class="screenText">Start Without Debugging</strong> (<em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em>) option to run the <code class="inlineCode">Demo</code> project.
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">If this is your first web app, Visual Studio will ask to set up a certificate for hosting the web app. You should trust the certificate.</p>
    </div>
    <p class="normal">This is a screenshot of the <strong class="screenText">Home</strong> page from the <code class="inlineCode">Demo</code> project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_12.png" alt="Figure 2.10 – The Home page
"/></figure>
    <p class="packt_figref">Figure 2.12: The Home page</p>
    <p class="normal">The <strong class="screenText">Home</strong> page is split into two sections. The navigation menu is on the left side of the <a id="_idIndexMarker159"></a>page and the body is on the right side of the page. The body of the <strong class="screenText">Home</strong> page consists of some static text and a link to a survey.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="2">Click the <strong class="screenText">Counter</strong> option on the navigation menu to navigate to the <strong class="screenText">Counter</strong> page.
    <p class="normal">This is a screenshot of the <strong class="screenText">Counter</strong> page from the <code class="inlineCode">Demo</code> project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_13.png" alt="Graphical user interface, text, application, chat or text message

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.13: The Counter page</p>
    <p class="normal">The body <a id="_idIndexMarker160"></a>of the <strong class="screenText">Counter</strong> page includes the <strong class="screenText">Current count</strong> and a <strong class="screenText">Click me</strong> button. Each time the button on the <strong class="screenText">Counter</strong> page is clicked, the <strong class="screenText">Current count</strong> is incremented.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Since the <code class="inlineCode">Demo</code> project is a <strong class="keyWord">single-page application</strong> (<strong class="keyWord">SPA</strong>), only the section of the <a id="_idIndexMarker161"></a>page that has changed is updated.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="3">Click the <strong class="screenText">Fetch data</strong> option on the navigation menu to navigate to the <strong class="screenText">Fetch data</strong> page.
    <p class="normal">This is a screenshot of the <strong class="screenText">Fetch data</strong> page from the <code class="inlineCode">Demo</code> project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_14.png" alt="Graphical user interface

Description automatically generated with medium confidence"/></figure>
    <p class="packt_figref">Figure 2.14: The Fetch data page</p>
    <p class="normal">The body of the <strong class="screenText">Fetch data</strong> page includes a table that shows a fabricated weather <a id="_idIndexMarker162"></a>forecast for the second week in January 2022. As you will see, the data displayed in the table is just static data from the <code class="inlineCode">wwwroot\sample-data\weather.json</code> file.</p></li>
    </ol>
    <h2 id="_idParaDest-76" class="heading-2">Examining the Demo project’s structure</h2>
    <p class="normal">Now let’s <a id="_idIndexMarker163"></a>return to Visual Studio to examine the files in the <code class="inlineCode">Demo</code> project.</p>
    <p class="normal">The following figure shows the file structure of the project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_15.png" alt="Graphical user interface, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.15: File structure of the Demo project</p>
    <p class="normal">The project includes <a id="_idIndexMarker164"></a>quite a few files with some of them divided into their own folders. Let’s examine them.</p>
    <h3 id="_idParaDest-77" class="heading-3">The Properties folder</h3>
    <p class="normal">The <code class="inlineCode">Properties</code> folder contains the <code class="inlineCode">launchSettings.json</code> file. This file contains various settings that can be <a id="_idIndexMarker165"></a>defined for each profile. As mentioned earlier in this chapter, the <code class="inlineCode">applicationUrl</code> is defined in this file. Also, <code class="inlineCode">Hot Reload</code> can be disabled by setting <code class="inlineCode">hotReloadEnabled</code> to <code class="inlineCode">false</code>.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">The settings in the <code class="inlineCode">launchSettings.json</code> file are only applied to your local development machine.</p>
    </div>
    <h3 id="_idParaDest-78" class="heading-3">The wwwroot folder</h3>
    <p class="normal">The <code class="inlineCode">wwwroot</code> folder is the application’s web root. Only the files in this folder are web addressable. The <code class="inlineCode">wwwroot</code> folder <a id="_idIndexMarker166"></a>contains a collection of <strong class="keyWord">Cascading Style Sheets</strong> (<strong class="keyWord">CSS</strong>), a sample data <a id="_idIndexMarker167"></a>file, icon files, a font, and <code class="inlineCode">index.html</code>. Later in this book, in addition to these types of files, we will use this folder for public static resources such as images and JavaScript files.</p>
    <p class="normal">The <code class="inlineCode">index.html</code> file is the root page of the web application. Whenever a page is initially requested, the contents of the <code class="inlineCode">index.html</code> page are rendered and returned in the response. The <code class="inlineCode">head</code> element of the <code class="inlineCode">index.html</code> file includes links to each of the CSS files in the <code class="inlineCode">css</code> folder and specifies the base path to use for the web app. The <code class="inlineCode">body</code> element of the <code class="inlineCode">index.html</code> file includes two <code class="inlineCode">div</code> elements and a reference to the <code class="inlineCode">blazor.webassembly.js</code> file.</p>
    <p class="normal">This is the code in the <code class="inlineCode">head</code> element of the <code class="inlineCode">index.html</code> file:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">head</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">meta</span><span class="hljs-tag"> </span><span class="hljs-attr">charset</span><span class="hljs-tag">=</span><span class="hljs-string">"utf-8"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">meta</span><span class="hljs-tag"> </span><span class="hljs-attr">name</span><span class="hljs-tag">=</span><span class="hljs-string">"viewport"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">          </span><span class="hljs-attr">content</span><span class="hljs-tag">=</span><span class="hljs-string">"width=device-width, </span>
<span class="hljs-string">                   initial-scale=1.0, </span>
<span class="hljs-string">                   maximum-scale=1.0, </span>
<span class="hljs-string">                   user-scalable=no"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">title</span><span class="hljs-tag">&gt;</span>Demo<span class="hljs-tag">&lt;/</span><span class="hljs-name">title</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">base</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"/"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">link</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"css/bootstrap/bootstrap.min.css"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">          </span><span class="hljs-attr">rel</span><span class="hljs-tag">=</span><span class="hljs-string">"stylesheet"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">link</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"css/app.css"</span><span class="hljs-tag"> </span><span class="hljs-attr">rel</span><span class="hljs-tag">=</span><span class="hljs-string">"stylesheet"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">link</span><span class="hljs-tag"> </span><span class="hljs-attr">rel</span><span class="hljs-tag">=</span><span class="hljs-string">"icon"</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"</span><span class="hljs-string">image/png"</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"favicon.png"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">link</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"Demo.styles.css"</span><span class="hljs-tag"> </span><span class="hljs-attr">rel</span><span class="hljs-tag">=</span><span class="hljs-string">"stylesheet"</span><span class="hljs-tag"> /&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">head</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">The <code class="inlineCode">base</code> element is used to indicate the base path for the URLs that are expressed with the <code class="inlineCode">@path</code> directive. In the <code class="inlineCode">Demo</code> project, the <code class="inlineCode">href</code> attribute points to the root of the application. The <code class="inlineCode">base</code> element is required in the <code class="inlineCode">index.html</code> file.</p>
    <p class="normal">The <code class="inlineCode">index.html</code> references three different stylesheets. The <code class="inlineCode">bootstrap.min.css</code> file is for <code class="inlineCode">Bootstrap 5.1</code> and is in the /<code class="inlineCode">css/bootstrap</code> folder. The <code class="inlineCode">app.css</code> file is in the /<code class="inlineCode">css</code> folder. It includes <a id="_idIndexMarker168"></a>the styles that are applied globally to the <code class="inlineCode">Demo</code> project. Finally, the <code class="inlineCode">Demo.styles.css</code> file is used for bundling any of the CSS files that are defined at the component level into one file. This is done to enable CSS isolation. The bundled CSS file is created at build time in the <code class="inlineCode">obj</code> folder.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP </strong></p>
      <p class="normal">A copy of <code class="inlineCode">Demo.styles.css</code> for the <code class="inlineCode">Demo</code> project is in <code class="inlineCode">…\Demo\Demo\obj\Debug\net7.0\scopedcss\bundle</code>.</p>
    </div>
    <p class="normal">This is the code in the <code class="inlineCode">body</code> element of the <code class="inlineCode">index.html</code> file:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">body</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">id</span><span class="hljs-tag">=</span><span class="hljs-string">"app"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">svg</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"loading-progress"</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">circle</span><span class="hljs-tag"> </span><span class="hljs-attr">r</span><span class="hljs-tag">=</span><span class="hljs-string">"40%"</span><span class="hljs-tag"> </span><span class="hljs-attr">cx</span><span class="hljs-tag">=</span><span class="hljs-string">"50%"</span><span class="hljs-tag"> </span><span class="hljs-attr">cy</span><span class="hljs-tag">=</span><span class="hljs-string">"</span><span class="hljs-string">50%"</span><span class="hljs-tag"> /&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">circle</span><span class="hljs-tag"> </span><span class="hljs-attr">r</span><span class="hljs-tag">=</span><span class="hljs-string">"40%"</span><span class="hljs-tag"> </span><span class="hljs-attr">cx</span><span class="hljs-tag">=</span><span class="hljs-string">"50%"</span><span class="hljs-tag"> </span><span class="hljs-attr">cy</span><span class="hljs-tag">=</span><span class="hljs-string">"50%"</span><span class="hljs-tag"> /&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">svg</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"loading-progress-text"</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">id</span><span class="hljs-tag">=</span><span class="hljs-string">"blazor-error-ui"</span><span class="hljs-tag">&gt;</span>
        An unhandled error has occurred.
        <span class="hljs-tag">&lt;</span><span class="hljs-name">a</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">""</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"reload"</span><span class="hljs-tag">&gt;</span>Reload<span class="hljs-tag">&lt;/</span><span class="hljs-name">a</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">a</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"dismiss"</span><span class="hljs-tag">&gt;</span>X<span class="hljs-tag">&lt;/</span><span class="hljs-name">a</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">script</span><span class="hljs-tag"> </span><span class="hljs-attr">src</span><span class="hljs-tag">=</span><span class="hljs-string">"_framework/blazor.webassembly.js"</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">script</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">body</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">The highlighted <code class="inlineCode">div</code> element in the preceding code loads the <code class="inlineCode">App</code> component. As you can see, the <code class="inlineCode">App</code> component includes a loading progress indicator. Since the <code class="inlineCode">Demo</code> project is very simple, you <a id="_idIndexMarker169"></a>may not have noticed it when you ran the application since it loads so quickly. This is an image of the loading progress indicator:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_16.png" alt="A picture containing diagram

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.16: Loading Progress Indicator</p>
    <p class="normal">You can remove the loading progress indicator by updating the highlighted <code class="inlineCode">div</code> to the following:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">id</span><span class="hljs-tag">=</span><span class="hljs-string">"app"</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">Also, you can customize the look and feel of the loading progress indicator by updating the relevant styles in the <code class="inlineCode">\css\app.css</code> file.</p>
    <p class="normal">The <code class="inlineCode">blazor-error-ui div</code> element is for displaying unhandled exceptions. The styling for this <code class="inlineCode">div</code> element is also in the <code class="inlineCode">\css\app.css</code> file. The <code class="inlineCode">blazor.webassembly.js</code> file is the script that <a id="_idIndexMarker170"></a>downloads the .NET runtime, your application’s assemblies, and your application’s dependencies. It also initializes the runtime to run the web app.</p>
    <h3 id="_idParaDest-79" class="heading-3">The App component</h3>
    <p class="normal">The <code class="inlineCode">App</code> component is <a id="_idIndexMarker171"></a>defined in the <code class="inlineCode">App.razor</code> file:</p>
    <p class="normal"><strong class="keyWord">App.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">Router</span><span class="hljs-tag"> </span><span class="hljs-attr">AppAssembly</span><span class="hljs-tag">=</span><span class="hljs-string">"@typeof(App).Assembly"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">Found</span><span class="hljs-tag"> </span><span class="hljs-attr">Context</span><span class="hljs-tag">=</span><span class="hljs-string">"routeData"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">RouteView</span><span class="hljs-tag"> </span><span class="hljs-attr">RouteData</span><span class="hljs-tag">=</span><span class="hljs-string">"@routeData"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">                   </span><span class="hljs-attr">DefaultLayout</span><span class="hljs-tag">=</span><span class="hljs-string">"@typeof(MainLayout)"</span><span class="hljs-tag"> /&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">FocusOnNavigate</span><span class="hljs-tag"> </span><span class="hljs-attr">RouteData</span><span class="hljs-tag">=</span><span class="hljs-string">"@routeData"</span><span class="hljs-tag"> </span><span class="hljs-attr">Selector</span><span class="hljs-tag">=</span><span class="hljs-string">"h1"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">Found</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">NotFound</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>Not found<span class="hljs-tag">&lt;/</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">LayoutView</span><span class="hljs-tag"> </span><span class="hljs-attr">Layout</span><span class="hljs-tag">=</span><span class="hljs-string">"@typeof(MainLayout)"</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag"> </span><span class="hljs-attr">role</span><span class="hljs-tag">=</span><span class="hljs-string">"alert"</span><span class="hljs-tag">&gt;</span>
                Sorry, there's nothing at this address.
                <span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">LayoutView</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">NotFound</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">Router</span><span class="hljs-tag">&gt;</span> 
</code></pre>
    <p class="normal">The <code class="inlineCode">App</code> component is the root component of a Blazor WebAssembly application. It uses the <code class="inlineCode">Router</code> component to set up the routing for the web app. In the preceding code, if the route is found, the <code class="inlineCode">RouteView</code> component receives <code class="inlineCode">RouteData</code> and renders the specified component using the indicated <code class="inlineCode">DefaultLayout</code>. If the route is not found, the <code class="inlineCode">NotFound</code> template is used and <code class="inlineCode">LayoutView</code> is rendered using the indicated <code class="inlineCode">Layout</code>.</p>
    <p class="normal">As you can see, in the <code class="inlineCode">Demo</code> project, both the <code class="inlineCode">Found</code> template and the <code class="inlineCode">NotFound</code> template use the same layout. They are both using the <code class="inlineCode">MainLayout</code> component. However, they do not need to use the same layout component. We will examine the <code class="inlineCode">MainLayout</code> component later in this chapter.</p>
    <p class="normal">The <code class="inlineCode">Found</code> template includes a <code class="inlineCode">FocusOnNavigate</code> component. It takes two properties:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">RouteData</code> – the route data from the <code class="inlineCode">Router</code> component</li>
      <li class="bulletList"><code class="inlineCode">Selector</code> – the CSS selector for the element that should have the focus when the navigation completes</li>
    </ul>
    <p class="normal">In the <a id="_idIndexMarker172"></a>preceding code, when the Router navigates to a new page, the focus will be on the first <code class="inlineCode">h1</code> element on that page.</p>
    <h3 id="_idParaDest-80" class="heading-3">The Shared folder</h3>
    <p class="normal">The <code class="inlineCode">Shared</code> folder in the <code class="inlineCode">Demo</code> project includes the shared Razor components, including the <code class="inlineCode">MainLayout</code> component. Each of these components may be used one or more times by other Razor <a id="_idIndexMarker173"></a>components. None of the components in the <code class="inlineCode">Shared</code> folder include an <code class="inlineCode">@page</code> directive since they are not routable.</p>
    <h3 id="_idParaDest-81" class="heading-3">The Pages folder</h3>
    <p class="normal">The <code class="inlineCode">Pages</code> folder includes the routable Razor components used by the project. The routable <a id="_idIndexMarker174"></a>components are <code class="inlineCode">Counter</code>, <code class="inlineCode">FetchData</code>, and <code class="inlineCode">Index</code>. Each of these components includes an <code class="inlineCode">@page</code> directive that is used to route the user to the page.</p>
    <h3 id="_idParaDest-82" class="heading-3">The Client folder</h3>
    <p class="normal">The <code class="inlineCode">Client</code> folder contains <a id="_idIndexMarker175"></a>the <code class="inlineCode">Program.cs</code> file. The <code class="inlineCode">Program.cs</code> file is the entry point for the application. It contains the method called <code class="inlineCode">Main</code>:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span><span class="hljs-function"> </span><span class="hljs-keyword">static</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">Main</span><span class="hljs-function">(</span><span class="hljs-built_in">string</span><span class="hljs-params">[] args</span><span class="hljs-function">)</span>
{
    <span class="hljs-keyword">var</span> builder = WebAssemblyHostBuilder.CreateDefault(args);
    builder.RootComponents.Add&lt;App&gt;(<span class="hljs-string">"#app"</span>);
    builder.RootComponents.Add&lt;HeadOutlet&gt;(<span class="hljs-string">"head::after"</span>);
    builder.Services.AddScoped(sp =&gt; 
        <span class="hljs-keyword">new</span> HttpClient { 
            BaseAddress = 
            <span class="hljs-keyword">new</span> Uri(builder.HostEnvironment.BaseAddress) 
        });
    <span class="hljs-keyword">await</span> builder.Build().RunAsync();
} 
</code></pre>
    <p class="normal">In the preceding method, the <code class="inlineCode">WebAssemblyHost</code> is built and run. As part of that process, the <code class="inlineCode">App</code> component is defined as the <code class="inlineCode">RootComponent</code> and is placed into the <code class="inlineCode">app</code> object of the <code class="inlineCode">wwwroot/index.html</code> file. Also, the <code class="inlineCode">HttpClient</code> base address is configured when the <code class="inlineCode">HttpClient</code> is registered in the dependency injection service. Registered services can be injected into <a id="_idIndexMarker176"></a>components using the <code class="inlineCode">@inject</code> directive. For more information on dependency injection, see <em class="chapterRef">Chapter 7</em>, <em class="italic">Building a Shopping Cart Using AppState</em>.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">The <code class="inlineCode">HttpClient</code> allows the application to send HTTP requests and receive HTTP responses.</p>
    </div>
    <h3 id="_idParaDest-83" class="heading-3">The _Imports.razor file</h3>
    <p class="normal">The <code class="inlineCode">_Imports.razor</code> file includes common Razor directives that are shared by multiple Razor <a id="_idIndexMarker177"></a>components. By including them in this file, they do not need to be included in the individual components. A project can include multiple <code class="inlineCode">_Imports.razor</code> files. Each one is applied to its current folder and subfolders.</p>
    <p class="normal">Any <code class="inlineCode">@using</code> directives in the <code class="inlineCode">_Imports.razor</code> file are only applied to Razor (RAZOR) files. They are not <a id="_idIndexMarker178"></a>applied to C# (CS) files. This distinction is important when using the code-behind technique that we will examine later in this chapter.</p>
    <p class="normal">The <code class="inlineCode">Demo</code> project includes many types of files divided into various folders. Next, we will examine the contents of the <code class="inlineCode">Shared</code> folder.</p>
    <h2 id="_idParaDest-84" class="heading-2">Examining the shared Razor components</h2>
    <p class="normal">The shared Razor components <a id="_idIndexMarker179"></a>are in the <code class="inlineCode">Shared</code> folder. There <a id="_idIndexMarker180"></a>are three shared Razor components in the <code class="inlineCode">Demo</code> project:</p>
    <ul>
      <li class="bulletList">The <code class="inlineCode">MainLayout</code> component</li>
      <li class="bulletList">The <code class="inlineCode">NavMenu</code> component</li>
      <li class="bulletList">The <code class="inlineCode">SurveyPrompt</code> component</li>
    </ul>
    <h3 id="_idParaDest-85" class="heading-3">The MainLayout component</h3>
    <p class="normal">The <code class="inlineCode">MainLayout</code> component is used <a id="_idIndexMarker181"></a>to define the page layout for the <code class="inlineCode">Demo</code> project:</p>
    <p class="normal"><strong class="keyWord">Shared/MainLayout.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code"><span class="code-highlight"><strong class="hljs-slc">@inherits LayoutComponentBase</strong></span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"page"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"sidebar"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">NavMenu</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">main</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"top-row px-4"</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">a</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"https://docs.microsoft.com/aspnet/"</span><span class="hljs-tag">  </span>
<span class="hljs-tag">               </span><span class="hljs-attr">target</span><span class="hljs-tag">=</span><span class="hljs-string">"_blank"</span><span class="hljs-tag">&gt;</span>About<span class="hljs-tag">&lt;/</span><span class="hljs-name">a</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">article</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"content px-4"</span><span class="hljs-tag">&gt;</span>
            @Body
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">article</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">main</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">The highlighted code indicates that the <code class="inlineCode">MainLayout</code> component inherits from the <code class="inlineCode">LayoutComponentBase</code> class. The <code class="inlineCode">LayoutComponentBase</code> class represents a layout and has only one property, which is the <code class="inlineCode">Body</code> property. The <code class="inlineCode">Body</code> property gets the content to be rendered inside the layout.</p>
    <p class="normal">The <a id="_idIndexMarker182"></a>following diagram illustrates the layout of a page as defined by the <code class="inlineCode">MainLayout</code> component of the <code class="inlineCode">Demo</code> project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_17.png" alt="Figure 2.14 – Screen layout
"/></figure>
    <p class="packt_figref">Figure 2.17: Page layout of the Demo project</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">The <code class="inlineCode">Blazor WebAssembly App </code>project template uses <code class="inlineCode">Bootstrap 5.1</code> to style its pages. If you are unfamiliar with Bootstrap 5.1, you can refer to <a href="https://getbootstrap.com/docs/5.1/getting-started/introduction/"><span class="url">https://getbootstrap.com/docs/5.1/getting-started/introduction/</span></a> to familiarize yourself with its syntax. Regrettably, the project template provided by Microsoft does not use the most current version of Bootstrap. To learn <a id="_idIndexMarker183"></a>more about the current version of Bootstrap, refer to <a href="https://getbootstrap.com"><span class="url">https://getbootstrap.com</span></a>.</p>
    </div>
    <p class="normal">The <code class="inlineCode">MainLayout</code> component includes its own dedicated CSS styles that are defined in the <code class="inlineCode">MainLayout.razor.css</code> file. This is <a id="_idIndexMarker184"></a>an example of <strong class="keyWord">CSS isolation</strong>. By using CSS isolation, we can <a id="_idIndexMarker185"></a>reduce the number of global styles and avoid style conflicts in nested content. As we mentioned earlier, all the component-level styles will be bundled together into one CSS file during the build process.</p>
    <h3 id="_idParaDest-86" class="heading-3">The NavMenu component</h3>
    <p class="normal">The <code class="inlineCode">NavMenu</code> component defines the navigation menu for the <code class="inlineCode">Demo</code> project. It uses multiple <code class="inlineCode">NavLink</code> components <a id="_idIndexMarker186"></a>to define the various menu options. This is the section of the <code class="inlineCode">NavMenu</code> component that references the <code class="inlineCode">NavLink</code> components used for the project’s navigation:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"</span><span class="hljs-string">@NavMenuCssClass nav-scrollable"</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"ToggleNavMenu"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">nav</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"flex-column"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"</span><span class="hljs-string">nav-item px-3"</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">NavLink</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"nav-link"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">                     </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">""</span><span class="hljs-tag"> </span><span class="hljs-attr">Match</span><span class="hljs-tag">=</span><span class="hljs-string">"NavLinkMatch.All"</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">span</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"oi oi-home"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">                      </span><span class="hljs-attr">aria-hidden</span><span class="hljs-tag">=</span><span class="hljs-string">"true"</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;/</span><span class="hljs-name">span</span><span class="hljs-tag">&gt;</span> Home
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">NavLink</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"nav-item px-3"</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">NavLink</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"nav-link"</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"</span><span class="hljs-string">counter"</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">span</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"oi oi-plus"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">                      </span><span class="hljs-attr">aria-hidden</span><span class="hljs-tag">=</span><span class="hljs-string">"true"</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;/</span><span class="hljs-name">span</span><span class="hljs-tag">&gt;</span> Counter
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">NavLink</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"nav-item px-3"</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">NavLink</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"</span><span class="hljs-string">nav-link"</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"fetchdata"</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">span</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"oi oi-list-rich"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">                      </span><span class="hljs-attr">aria-hidden</span><span class="hljs-tag">=</span><span class="hljs-string">"true"</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;/</span><span class="hljs-name">span</span><span class="hljs-tag">&gt;</span> Fetch data
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">NavLink</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">nav</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">The <code class="inlineCode">NavLink</code> component is defined in the <code class="inlineCode">Microsoft.AspNetCore.Components.Routing</code> namespace. It behaves like an <code class="inlineCode">a</code> element, except it has added functionality that highlights <a id="_idIndexMarker187"></a>the current URL. This is the HTML that is rendered by <code class="inlineCode">NavLink</code> for the <code class="inlineCode">Counter</code> component when the <code class="inlineCode">Counter</code> component is selected:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">a</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"counter"</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"nav-link active"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">span</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"oi oi-plus"</span><span class="hljs-tag"> </span><span class="hljs-attr">aria-hidden</span><span class="hljs-tag">=</span><span class="hljs-string">"true"</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">span</span><span class="hljs-tag">&gt;</span>
    Counter
<span class="hljs-tag">&lt;/</span><span class="hljs-name">a</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">The style used for the <code class="inlineCode">nav-link</code> class is from Bootstrap.</p>
    <p class="normal">The <code class="inlineCode">NavMenu</code> component includes its own dedicated CSS styles that are defined in the <code class="inlineCode">NavMenu.razor.css</code> file. This is another example of CSS isolation.</p>
    <h3 id="_idParaDest-87" class="heading-3">The SurveyPrompt component</h3>
    <p class="normal">The <code class="inlineCode">SurveyPrompt</code> component <a id="_idIndexMarker188"></a>creates a link to a brief survey on Blazor.</p>
    <p class="normal">In the <code class="inlineCode">Demo</code> project, the <code class="inlineCode">Shared</code> folder contains the non-routable components. Next, we will examine the routable components in the <code class="inlineCode">Pages</code> folder.</p>
    <h2 id="_idParaDest-88" class="heading-2">Examining the routable Razor components</h2>
    <p class="normal">The routable Razor components are in the <code class="inlineCode">Pages</code> folder. A routable Razor component includes <a id="_idIndexMarker189"></a>one or more <code class="inlineCode">@page</code> directives at the top of the file. There are three routable Razor components in the <code class="inlineCode">Demo</code> project:</p>
    <ul>
      <li class="bulletList">The <code class="inlineCode">Index</code> component</li>
      <li class="bulletList">The <code class="inlineCode">Counter</code> component</li>
      <li class="bulletList">The <code class="inlineCode">FetchData</code> component</li>
    </ul>
    <h3 id="_idParaDest-89" class="heading-3">The Index component</h3>
    <p class="normal">The <code class="inlineCode">Home</code> page of <a id="_idIndexMarker190"></a>the <code class="inlineCode">Demo</code> project uses the <code class="inlineCode">Index</code> component that is defined in the <code class="inlineCode">Pages/Index.razor</code> file:</p>
    <p class="normal"><strong class="keyWord">Pages/Index.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@page "/"
<span class="hljs-tag">&lt;</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>Index<span class="hljs-tag">&lt;/</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Hello, world!<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
Welcome to your new app.
<span class="hljs-tag">&lt;</span><span class="hljs-name">SurveyPrompt</span><span class="hljs-tag"> </span><span class="hljs-attr">Title</span><span class="hljs-tag">=</span><span class="hljs-string">"How is Blazor working for you?"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
    <p class="normal">The preceding code includes an <code class="inlineCode">@page</code> directive that references the root of the web app and some markup. The markup includes both a <code class="inlineCode">PageTitle</code> component and a <code class="inlineCode">SurveyPrompt</code> component. </p>
    <p class="normal">The <code class="inlineCode">PageTitle</code> component is a built-in Razor component that renders an HTML <code class="inlineCode">title</code> element. The <code class="inlineCode">title</code> element is used <a id="_idIndexMarker191"></a>to define the page’s title in the browser and is the text displayed <a id="_idIndexMarker192"></a>on the tab in the browser. It also is used when the page is added to favorites.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">If your component includes more than one <code class="inlineCode">PageTitle</code> component, only the last one to be rendered will be used. The other ones will be ignored.</p>
    </div>
    <p class="normal">The <code class="inlineCode">SurveyPrompt</code> component is a custom component that is defined in the <code class="inlineCode">Shared</code> folder. </p>
    <h3 id="_idParaDest-90" class="heading-3">The Counter component</h3>
    <p class="normal">The <code class="inlineCode">Counter</code> component is more complex than the <code class="inlineCode">Index</code> component. Like the <code class="inlineCode">Index</code> component, it contains <a id="_idIndexMarker193"></a>an <code class="inlineCode">@page</code> directive that is used for routing and some markup. However, it also contains a C# code block:</p>
    <p class="normal"><strong class="keyWord">Pages/Counter.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@page "/counter"
<span class="hljs-tag">&lt;</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>Counter<span class="hljs-tag">&lt;/</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Counter<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag"> </span><span class="hljs-attr">role</span><span class="hljs-tag">=</span><span class="hljs-string">"status"</span><span class="hljs-tag">&gt;</span>Current count: @currentCount<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"btn btn-primary"</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"IncrementCount"</span><span class="hljs-tag">&gt;</span>Click me<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
@code {
    private int currentCount = 0;
    private void IncrementCount()
    {
        currentCount++;
    }
}
</code></pre>
    <p class="normal">In the preceding code block, a private <code class="inlineCode">currentCount</code> variable is used to hold the number of times that the button has been clicked. Each time the <code class="inlineCode">Counter</code> button is clicked, the <code class="inlineCode">Counter</code> component’s registered <code class="inlineCode">@onclick</code> handler is called. In this case, it is the <code class="inlineCode">IncrementCount</code> method.</p>
    <p class="normal">The <code class="inlineCode">IncrementCount</code> method increments the value of the <code class="inlineCode">currentCount</code> variable, and the <code class="inlineCode">Counter</code> component regenerates its render tree. Blazor compares the new render tree against the <a id="_idIndexMarker194"></a>previous one and applies any modifications to the browser’s DOM. This results in the displayed count being updated.</p>
    <h3 id="_idParaDest-91" class="heading-3">The FetchData component</h3>
    <p class="normal">The <code class="inlineCode">FetchData</code> component is by far the most complex component in the <code class="inlineCode">Demo</code> project.</p>
    <p class="normal">These <a id="_idIndexMarker195"></a>are the directives in the <code class="inlineCode">Pages/FetchData.razor</code> file:</p>
    <pre class="programlisting code"><code class="hljs-code">@page <span class="hljs-string">"/fetchdata"</span>
@inject HttpClient Http
</code></pre>
    <p class="normal">The <code class="inlineCode">@page</code> directive is used for routing and the <code class="inlineCode">@inject</code> directive is used for dependency injection. In this <a id="_idIndexMarker196"></a>component, the <code class="inlineCode">HttpClient</code> that is defined in the <code class="inlineCode">Program.cs</code> file is <a id="_idIndexMarker197"></a>being injected into the view. For more information on dependency injection, refer to <em class="chapterRef">Chapter 7</em>, <em class="italic">Building a Shopping Cart Using Application State</em>.</p>
    <p class="normal">The following markup demonstrates the use of a very important pattern that you will often use when developing a Blazor WebAssembly application. Because the application runs on the browser, all data access must be asynchronous. That means that when the page first loads, the data will be <code class="inlineCode">null</code>. For that reason, you always need to test for the <code class="inlineCode">null</code> case before attempting to process the data.</p>
    <p class="normal">This is the <a id="_idIndexMarker198"></a>markup in the <code class="inlineCode">Pages/FetchData.razor</code> file:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt; </span>Weather forecast<span class="hljs-tag">&lt;/</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Weather forecast<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>This component demonstrates fetching data from the server.<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
@if (forecasts == null)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;</span>Loading...<span class="hljs-tag">&lt;/</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
}
else
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">table</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"table"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">thead</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">tr</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>Date<span class="hljs-tag">&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>Temp. (C)<span class="hljs-tag">&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>Temp. (F)<span class="hljs-tag">&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>Summary<span class="hljs-tag">&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">tr</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">thead</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">tbody</span><span class="hljs-tag">&gt;</span>
            @foreach (var forecast in forecasts)
            {
                <span class="hljs-tag">&lt;</span><span class="hljs-name">tr</span><span class="hljs-tag">&gt;</span>
                    <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>@forecast.Date.ToShortDateString()<span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
                    <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>@forecast.TemperatureC<span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
                    <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>@forecast.TemperatureF<span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
                    <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>@forecast.Summary<span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;/</span><span class="hljs-name">tr</span><span class="hljs-tag">&gt;</span>
            }
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">tbody</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">table</span><span class="hljs-tag">&gt;</span>
}
</code></pre>
    <p class="normal">The preceding markup includes an <code class="inlineCode">if</code> statement and a <code class="inlineCode">foreach</code> loop. While the value of <code class="inlineCode">forecasts</code> is <code class="inlineCode">null</code>, a <code class="inlineCode">Loading</code> message is displayed. Once the value of <code class="inlineCode">forecasts</code> is no longer <code class="inlineCode">null</code>, all the items in the array are presented in a table.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">The value of <code class="inlineCode">forecasts</code> will be <code class="inlineCode">null</code> the first time that the page is rendered. If you do not handle the case when the value of <code class="inlineCode">forecasts</code> is <code class="inlineCode">null</code>, the framework will throw an exception.</p>
    </div>
    <p class="normal">As previously mentioned, Blazor components have a well-defined life cycle. The <code class="inlineCode">OnInitializedAsync</code> method is invoked when the component is rendered. After the <code class="inlineCode">OnInitializedAsync</code> method completes, the component is rerendered.</p>
    <p class="normal">This is the <a id="_idIndexMarker199"></a>code block in the <code class="inlineCode">Pages/FetchData.razor</code> file:</p>
    <pre class="programlisting code"><code class="hljs-code">@code {
    <span class="hljs-keyword">private</span> WeatherForecast[]? forecasts;
    <span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">OnInitializedAsync</span><span class="hljs-function">()</span>
    {
        forecasts = <span class="hljs-keyword">await</span>
            Http.GetFromJsonAsync&lt;WeatherForecast[]&gt;
            (<span class="hljs-string">"sample-data/weather.json"</span>);
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WeatherForecast</span>
    {
        <span class="hljs-keyword">public</span> DateOnly Date { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> TemperatureC { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? Summary { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> TemperatureF =&gt; 
            <span class="hljs-number">32</span> + (<span class="hljs-built_in">int</span>)(TemperatureC / <span class="hljs-number">0.5556</span>);
    }
}
</code></pre>
    <p class="normal">First, the preceding code block declares a parameter to contain a nullable array of the type <code class="inlineCode">WeatherForecast</code>. Next, it uses the <code class="inlineCode">OnInitializedAsync</code> asynchronous method to populate the array. To <a id="_idIndexMarker200"></a>populate the array, the <code class="inlineCode">GetFromJsonAsync</code> method of the <code class="inlineCode">HttpClient</code> service is used. For more information on <code class="inlineCode">HttpClient</code>, refer to <em class="chapterRef">Chapter 11</em>, <em class="italic">Building a Task Manager Using the </em><em class="italic">ASP.NET</em><em class="italic"> Web API</em>.</p>
    <h2 id="_idParaDest-92" class="heading-2">Using a component</h2>
    <p class="normal">Razor components are used <a id="_idIndexMarker201"></a>by including them in the markup of another component. We will add a <code class="inlineCode">Counter</code> component to the <code class="inlineCode">Home</code> page. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Open the <code class="inlineCode">Pages/Index.razor</code> file.</li>
      <li class="numberedList">Delete all the markup after the <code class="inlineCode">PageTitle</code> component.
    <p class="normal">Be sure you do not remove the <code class="inlineCode">@page</code> directive at the top of the file.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="4">Add the following markup below the <code class="inlineCode">PageTitle</code> component:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">Counter</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">From the <strong class="screenText">Build</strong> menu, select the <strong class="screenText">Build Solution</strong> option.</li>
      <li class="numberedList">Return to the browser and navigate to the <strong class="screenText">Home</strong> page. If the <code class="inlineCode">Demo</code> project is not running, from the <strong class="screenText">Debug</strong> menu, select the <strong class="screenText">Start Without Debugging</strong> (<em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em>) option to run it.</li>
      <li class="numberedList">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">R</em> to refresh the browser.</li>
    </ol>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">Whenever you update your C# code, you need to refresh the browser for the browser to load the updated DLL unless you use <code class="inlineCode">Hot Reload</code>.</p>
    </div>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Click the <strong class="screenText">Click me</strong> button 3 times to test the <code class="inlineCode">Counter</code> component.</li>
      <li class="numberedList">The <strong class="screenText">Current value</strong> is now <code class="inlineCode">3</code>.
    <p class="normal">We have <a id="_idIndexMarker202"></a>nested a Razor component within another Razor component. Next, we will update a component using <code class="inlineCode">Hot Reload</code>.</p></li>
    </ol>
    <h2 id="_idParaDest-93" class="heading-2">Modifying a component</h2>
    <p class="normal">By using <code class="inlineCode">Hot Reload</code>, we can automatically update the app without having to rebuild it or refresh <a id="_idIndexMarker203"></a>the browser. We will update the <code class="inlineCode">Counter</code> component and rebuild the app using <code class="inlineCode">Hot Reload</code>. We <a id="_idIndexMarker204"></a>do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio, without closing the browser.
    <p class="normal">If you can, configure your screen to display both the browser and Visual Studio at the same time.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="2">Open the <code class="inlineCode">Pages/Counter.razor</code> file.</li>
      <li class="numberedList">Change the text in the <code class="inlineCode">h1</code> element to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Count by 1<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Click the <strong class="screenText">Hot Reload</strong> drop-down button on the toolbar or press <em class="keystroke">Alt</em>+<em class="keystroke">F10</em>.</li>
      <li class="numberedList">Verify that the text on the browser has changed.</li>
      <li class="numberedList">Click the <strong class="screenText">Click me</strong> button 3 times. </li>
      <li class="numberedList">The <strong class="screenText">Current value</strong> is now <code class="inlineCode">6</code>.</li>
    </ol>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">The value of the current count did not change when <code class="inlineCode">Hot Reload</code> was used to update the code.</p>
    </div>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Use the <strong class="screenText">Hot Reload</strong> drop-down button on the toolbar to select <strong class="screenText">Hot Reload on File Save</strong>.</li>
      <li class="numberedList">Update the markup below the <code class="inlineCode">PageTitle</code> component to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"alert alert-info"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Count by 1<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag"> </span><span class="hljs-attr">role</span><span class="hljs-tag">=</span><span class="hljs-string">"</span><span class="hljs-string">status"</span><span class="hljs-tag">&gt;</span>Current value: @currentCount<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"btn btn-primary"</span>
<span class="hljs-tag">            @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"IncrementCount"</span><span class="hljs-tag">&gt;</span>
        Click me
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">The <a id="_idIndexMarker205"></a>preceding code will add some formatting to the <code class="inlineCode">Counter</code> component <a id="_idIndexMarker206"></a>and change the label from <strong class="screenText">Current count</strong> to <strong class="screenText">Current value</strong>.</li>
      <li class="numberedList">Add the following code to the top of the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> increment = <span class="hljs-number">1</span>;
</code></pre>
      </li>
      <li class="numberedList">Click <em class="keystroke">Ctrl</em>+<em class="keystroke">S</em>.</li>
      <li class="numberedList">The <strong class="screenText">Hot Reload</strong> warning dialog is displayed.</li>
      <li class="numberedList">Check the <strong class="screenText">Always rebuild when updates can’t be applied</strong> checkbox. </li>
      <li class="numberedList">Click the <strong class="screenText">Rebuild and Apply Changes</strong> button.</li>
      <li class="numberedList">Update the <code class="inlineCode">IncrementCount</code> method to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">IncrementCount</span><span class="hljs-function">()</span>
{
    currentCount += increment;
}
</code></pre>
      </li>
      <li class="numberedList">Click <em class="keystroke">Ctrl</em>+<em class="keystroke">S</em>.</li>
    </ol>
    <p class="normal">The app rebuilds and refreshes the browser without displaying the <strong class="screenText">Hot Reload</strong> warning dialog.</p>
    <p class="normal">By using <code class="inlineCode">Hot Reload</code>, we were able to make changes to our code and see those changes immediately <a id="_idIndexMarker207"></a>reflected in the browser. In this example, we were not in debug mode, but it is <a id="_idIndexMarker208"></a>important to remember that <code class="inlineCode">Hot Reload</code> also works in debug mode. Next, we need to set the value of the increment.</p>
    <h2 id="_idParaDest-94" class="heading-2">Adding a parameter to a component</h2>
    <p class="normal">Most components <a id="_idIndexMarker209"></a>require parameters. To add a parameter to a component, use the <code class="inlineCode">Parameter</code> attribute. We will add a parameter to specify the increment used by the <code class="inlineCode">IncrementCount</code> method. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Open the <code class="inlineCode">Pages/Counter.razor</code> file.</li>
      <li class="numberedList">Add the following code to the top of the code block to define the new parameter:
        <pre class="programlisting code"><code class="hljs-code">[<span class="hljs-meta">Parameter</span>] 
[<span class="hljs-meta">SupplyParameterFromQuery</span>]
<span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>? Increment { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      </li>
      <li class="numberedList">Add the following <code class="inlineCode">OnParametersSet</code> method to set the value of <code class="inlineCode">increment</code> to the value of the <code class="inlineCode">Increment</code> parameter:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">OnParametersSet</span><span class="hljs-function">()</span>
{
    <span class="hljs-keyword">if</span> (Increment.HasValue)
        increment = Increment.Value;
}
</code></pre>
      
    <p class="normal">Adding the <code class="inlineCode">OnParametersSet</code> method will require a restart, as indicated by the following image:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_18.png" alt="Graphical user interface, text, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.18: Page layout of the Demo project</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Select <strong class="screenText">Restart Application</strong> from the <strong class="screenText">Hot Reload</strong> drop-down button.</li>
      <li class="numberedList">Change the text in the <code class="inlineCode">h1</code> element to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Count by @increment<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Update the address bar to the following
        <pre class="programlisting code"><code class="hljs-code">/counter?increment=<span class="hljs-number">5</span>
</code></pre>
      </li>
      <li class="numberedList">Click the <strong class="screenText">Click me</strong> button 3 times. </li>
      <li class="numberedList">The <strong class="screenText">Current value</strong> is now <code class="inlineCode">15</code>.</li>
    </ol>
    <p class="normal">We have <a id="_idIndexMarker210"></a>added a parameter <a id="_idIndexMarker211"></a>that can obtain its value from the query string. It can also obtain its value from an attribute. Next, we will add a <code class="inlineCode">Counter</code> component to the <code class="inlineCode">Index</code> component that increments its value by 7 each time it is clicked.</p>
    <h2 id="_idParaDest-95" class="heading-2">Using a parameter with an attribute</h2>
    <p class="normal">We will add another instance of the <code class="inlineCode">Counter</code> component <a id="_idIndexMarker212"></a>to the <code class="inlineCode">Home</code> page that uses the new parameter. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">Pages/Index.razor</code> file.</li>
      <li class="numberedList">Add the following markup to the bottom of the <code class="inlineCode">Index.razor</code> file:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">hr</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">Counter</span><span class="hljs-tag"> </span><span class="hljs-attr">Increment</span><span class="hljs-tag">=</span><span class="hljs-string">"7"</span><span class="hljs-tag">/&gt;</span>
</code></pre>
      
    <p class="normal">As you add the markup, <strong class="keyWord">IntelliSense</strong> is provided for the new <code class="inlineCode">Increment</code> parameter:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_19.png" alt="Graphical user interface, application, Teams

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.19: IntelliSense</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="3">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">S</em>.</li>
      <li class="numberedList">Return to the browser.</li>
      <li class="numberedList">Navigate <a id="_idIndexMarker213"></a>to the <strong class="screenText">Home</strong> page.
    <p class="normal">The <strong class="screenText">Home</strong> page now contains two instances of the <code class="inlineCode">Counter</code> component. If you click the first <strong class="screenText">Click me</strong> button, the first counter will be incremented by 1; if you click the second <strong class="screenText">Click me</strong> button, the second counter will be incremented by 7.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Click each of the <strong class="screenText">Click me</strong> buttons to verify they both work as intended.</li>
    </ol>
    <h2 id="_idParaDest-96" class="heading-2">Adding a route parameter</h2>
    <p class="normal">Components can <a id="_idIndexMarker214"></a>have multiple <code class="inlineCode">@page</code> directives. We will add an <code class="inlineCode">@page</code> directive to the <code class="inlineCode">Counter</code> component that uses a parameter. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Open the <code class="inlineCode">Pages/Counter.razor</code> file.</li>
      <li class="numberedList">Remove the <code class="inlineCode">SupplyParameterFromQuery</code> attribute from the <code class="inlineCode">Increment</code> parameter.</li>
      <li class="numberedList">Add the following <code class="inlineCode">@page</code> directive to the top of the file:
        <pre class="programlisting code"><code class="hljs-code">@page <span class="hljs-string">"/counter/{increment:int}"</span>
</code></pre>
      </li>
      <li class="numberedList">The <code class="inlineCode">Counter</code> component now includes two <code class="inlineCode">@page</code> directives.</li>
      <li class="numberedList">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">S</em>.</li>
      <li class="numberedList">Navigate to the <code class="inlineCode">Counter</code> page.</li>
      <li class="numberedList">Update the URL to the following:
        <pre class="programlisting code"><code class="hljs-code">/counter/<span class="hljs-number">4</span>
</code></pre>
      </li>
    </ol>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Since the page is automatically reloaded when you change the URL, you do not need to refresh the browser to reload the page.</p>
    </div>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Click the <strong class="screenText">Click me</strong> button.
    <p class="normal">The <a id="_idIndexMarker215"></a>counter should now increment by 4.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="10">Update the URL to an invalid route:
        <pre class="programlisting code"><code class="hljs-code">/counter/a
</code></pre>
      
    <p class="normal">Since this is not a valid route, you will be directed to the <code class="inlineCode">NotFound</code> content defined in the <code class="inlineCode">App</code> component:</p>
    <figure class="mediaobject"><img src="../Images/B18471_02_20.png" alt="Graphical user interface, application, Teams

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 2.20: Page not found</p></li>
    </ol>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">If you need to navigate to a URL in code, you should use <code class="inlineCode">NavigationManager</code>. <code class="inlineCode">NavigationManager</code> provides a <code class="inlineCode">NavigateTo</code> method that is used to navigate the user to the specified URI without forcing a page load.</p>
    </div>
    <h2 id="_idParaDest-97" class="heading-2">Using partial classes to separate markup from code</h2>
    <p class="normal">Many developers <a id="_idIndexMarker216"></a>prefer to separate their markup from their C# fields, properties, and methods. Since Razor components are regular C# classes, they support partial classes. The <code class="inlineCode">partial</code> keyword is used to create a partial class. We will use a partial class to move the code block from the <code class="inlineCode">RAZOR</code> file to a <code class="inlineCode">CS</code> file. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">Pages</code> folder and select <strong class="screenText">Add</strong>, <strong class="screenText">Class</strong> from the menu.</li>
      <li class="numberedList">Name the new class <code class="inlineCode">Counter.razor.cs</code>.</li>
      <li class="numberedList">Update the <code class="inlineCode">Counter</code> class to be a partial class by using the <code class="inlineCode">partial</code> keyword:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <code style="font-weight: bold;" class="codeHighlighted">partial</code> <span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span>{}
</code></pre>
      </li>
      <li class="numberedList">Open the <code class="inlineCode">Pages/Counter.razor</code> file.</li>
      <li class="numberedList">Copy all the code in the code block to the partial <code class="inlineCode">Counter</code> class in the <code class="inlineCode">Counter.razor.cs </code>file.</li>
      <li class="numberedList">Delete the code block from the <code class="inlineCode">Counter.razor</code> file.</li>
      <li class="numberedList">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">S</em>.</li>
      <li class="numberedList">Navigate to the <strong class="screenText">Counter</strong> page.</li>
      <li class="numberedList">Click the <strong class="screenText">Click me</strong> button to verify that it still works.</li>
      <li class="numberedList">Close the browser.
    <p class="normal">Using partial classes gives you the flexibility to move the code in the code block to a separate file, allowing you to use the code-behind technique. </p></li>
    </ol>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">A quick way to create the code-behind page is to right-click on the code block and use the <strong class="screenText">Quick Actions and Refactorings</strong> option to extract the block to code behind.</p>
    </div>
    <p class="normal">We have <a id="_idIndexMarker217"></a>created a <code class="inlineCode">Demo</code> project by using the <strong class="screenText">Blazor WebAssembly App</strong><code class="inlineCode"> </code>project template provided by Microsoft. We added a parameter to the <code class="inlineCode">Counter</code> component and moved the code in the code block of the <code class="inlineCode">Counter</code> component to a separate file.</p>
    <h1 id="_idParaDest-98" class="heading-1">Summary</h1>
    <p class="normal">You should now be able to create a Blazor WebAssembly application.</p>
    <p class="normal">In this chapter, we introduced Razor components. We learned about their parameters, naming conventions, life cycle, and structure. We also learned about routing and Razor syntax. Finally, we learned how to use <code class="inlineCode">Hot Reload</code>.</p>
    <p class="normal">After that, we used the <strong class="keyWord">Blazor WebAssembly App</strong> project template provided by Microsoft to create the <code class="inlineCode">Demo</code> project. We examined each of the files in the <code class="inlineCode">Demo</code> project. We added a parameter to the <code class="inlineCode">Counter</code> component and examined how routing works. Finally, we practiced using <code class="inlineCode">Hot Reload</code>.</p>
    <h1 id="_idParaDest-99" class="heading-1">Questions</h1>
    <p class="normal">The following questions are provided for your consideration:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Can Razor components include JavaScript?</li>
      <li class="numberedList">What types of loops are supported by Razor syntax?</li>
      <li class="numberedList">Can the parameter of a component be defined using a POCO?</li>
      <li class="numberedList">Will <code class="inlineCode">Hot Reload</code> render changes to CSS files?</li>
      <li class="numberedList">How can a child component trigger an infinite loop?</li>
    </ol>
    <h1 id="_idParaDest-100" class="heading-1">Further reading</h1>
    <p class="normal">The following resources provide more information concerning the topics in this chapter:</p>
    <ul>
      <li class="bulletList">For more information on Bootstrap, refer to <a href="https://getbootstrap.com"><span class="url">https://getbootstrap.com</span></a>.</li>
      <li class="bulletList">For more information on Razor syntax, refer to <a href="https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor"><span class="url">https://learn.microsoft.com/en-us/aspnet/core/mvc/views/razor</span></a>.</li>
      <li class="bulletList">For more information on <code class="inlineCode">Hot Reload</code>, refer to <a href="https://learn.microsoft.com/en-us/visualstudio/debugger/hot-reload"><span class="url">https://learn.microsoft.com/en-us/visualstudio/debugger/hot-reload</span></a>.</li>
    </ul>
  </div>
</body>
</html>