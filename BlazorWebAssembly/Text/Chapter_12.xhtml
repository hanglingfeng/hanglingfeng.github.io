<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>Chapter_12</title>
  <link href="../Styles/syntax-highlighting.css" rel="stylesheet" type="text/css"/>
  <link href="../Styles/epub.css" rel="stylesheet" type="text/css"/>
</head>

<body id="Chapter_12" lang="en-US" xml:lang="en-US">
  <div id="_idContainer337" class="Basic-Text-Frame">
    <h1 class="chapterNumber">12</h1>
    <h1 id="_idParaDest-339" class="chapterTitle">Building an Expense Tracker Using the EditForm Component</h1>
    <p class="normal">Most applications require some data input by the user. The Blazor WebAssembly framework includes a component that makes it easy to create data input forms and validate the data on those forms.</p>
    <p class="normal">In this chapter, we will learn how to use the <strong class="keyWord">EditForm</strong> component and the various built-in input components. We will also learn how to use the built-in input validation components in conjunction with <strong class="keyWord">Data Annotations</strong> to validate the data on the form. Finally, we will learn how to use the <strong class="keyWord">NavigationLock</strong> component to prevent users from losing their edits if they navigate away from the form before they have saved their updates.</p>
    <p class="normal">The project that weâ€™ll create in this chapter will be a travel expense tracker. We will use a multi-project architecture to separate the Blazor WebAssembly app from the ASP.NET Web API endpoints. The page used to add and edit expenses will use the <code class="inlineCode">EditForm</code> component as well as many of the built-in input components. It will also use the built-in validation components to validate the data on the form. Finally, we will add a <code class="inlineCode">NavigationLock</code> component to remind the user to save their data before navigating to another page.</p>
    <blockquote class="packt_quote">
      <p class="quote">Editing data?</p>
      <p class="quote">The EditForm component</p>
      <p class="quote">makes it effortless!</p>
    </blockquote>
    <p class="normal">In this chapter, we will cover the following topics:</p>
    <ul>
      <li class="bulletList">Creating a data entry form</li>
      <li class="bulletList">Using the built-in input components</li>
      <li class="bulletList">Using the validation components</li>
      <li class="bulletList">Locking navigation</li>
      <li class="bulletList">Creating the expense tracker project</li>
    </ul>
    <h1 id="_idParaDest-340" class="heading-1">Technical requirements</h1>
    <p class="normal">To complete this project, you need to have Visual Studio 2022 installed on your PC. For instructions on how to install the free Community Edition of Visual Studio 2022, refer to <em class="chapterRef">Chapter 1</em>, <em class="italic">Introduction to Blazor WebAssembly</em>. You will also need access to a version of SQL Server. For instructions on how to install the free edition of SQL Server 2022, refer to <em class="chapterRef">Chapter 1</em>, <em class="italic">Introduction to Blazor WebAssembly</em>.</p>
    <p class="normal">The source code for this chapter is available in the following GitHub repository: <a href="https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter12"><span class="url">https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter12</span></a>.</p>
    <p class="normal">The Code in Action video is available here: <a href="https://packt.link/Ch12"><span class="url">https://packt.link/Ch12</span></a>.</p>
    <h1 id="_idParaDest-341" class="heading-1">Creating a data entry form</h1>
    <p class="normal">In the previous <a id="_idIndexMarker832"></a>chapters of this book, we used the standard HTML <code class="inlineCode">form</code> element to collect user input. However, the Blazor WebAssembly framework provides an enhanced version of the standard HTML <code class="inlineCode">form</code> element called the <code class="inlineCode">EditForm</code> component.</p>
    <p class="normal">The <code class="inlineCode">EditForm</code> component not only manages forms but also coordinates both validation and submission events. The following code shows a simple <code class="inlineCode">EditForm</code> element:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">EditForm</span><span class="hljs-tag"> </span><span class="hljs-attr">Model</span><span class="hljs-tag">=</span><span class="hljs-string">"expense"</span><span class="hljs-tag"> </span><span class="hljs-attr">OnValidSubmit</span><span class="hljs-tag">=</span><span class="hljs-string">"@HandleValidSubmit"</span><span class="hljs-tag">&gt;</span>
    Vendor <span class="hljs-tag">&lt;</span><span class="hljs-name">InputText</span><span class="hljs-tag"> @</span><span class="hljs-attr">bind-Value</span><span class="hljs-tag">=</span><span class="hljs-string">"expense.Vendor"</span>
<span class="hljs-tag">                      </span><span class="hljs-attr">placeholder</span><span class="hljs-tag">=</span><span class="hljs-string">"Enter Vendor"</span><span class="hljs-tag">/&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"submit"</span><span class="hljs-tag">&gt;</span>
        Save
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">EditForm</span><span class="hljs-tag">&gt;</span>
@code {
    private Expense expense = new();
}
</code></pre>
    <p class="normal">This is the HTML that is rendered by the proceeding <code class="inlineCode">EditForm</code> component:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">form</span><span class="hljs-tag">&gt;</span>
    Vendor <span class="hljs-tag">&lt;</span><span class="hljs-name">input</span><span class="hljs-tag"> </span><span class="hljs-attr">placeholder</span><span class="hljs-tag">=</span><span class="hljs-string">"Enter Vendor"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">                  </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"valid"</span><span class="hljs-tag"> </span><span class="hljs-attr">_bl_2</span><span class="hljs-tag">=</span><span class="hljs-string">""</span><span class="hljs-tag">&gt;</span>
     <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"submit"</span><span class="hljs-tag">&gt;</span>
         Save
     <span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">form</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">In the <a id="_idIndexMarker833"></a>preceding <code class="inlineCode">EditForm</code> component, the <code class="inlineCode">Model</code> property specifies the top-level model object for the form. The <code class="inlineCode">OnValidSubmit</code> property specifies the callback that will be invoked when the form is submitted without any validation errors.</p>
    <h2 id="_idParaDest-342" class="heading-2">Binding a form</h2>
    <p class="normal">The <code class="inlineCode">EditContext</code> property <a id="_idIndexMarker834"></a>of the <code class="inlineCode">EditForm</code> class is used to track the metadata about the editing process. The metadata includes the fields that have been modified and the current validation messages. There are two ways to assign the <code class="inlineCode">EditContext</code> property:</p>
    <ul>
      <li class="bulletList">Assign the <code class="inlineCode">Model</code> property of the <code class="inlineCode">EditForm</code> class. If we use the <code class="inlineCode">Model</code> property, the edit context will be automatically constructed using the model.</li>
      <li class="bulletList">Assign the <code class="inlineCode">EditContext</code> property of the <code class="inlineCode">EditForm</code> class.</li>
    </ul>
    <p class="normal">The following code shows how to render the preceding <code class="inlineCode">EditForm</code> component using the <code class="inlineCode">EditContext</code> property instead of the <code class="inlineCode">Model</code> property:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">EditForm</span><span class="hljs-tag"> </span><span class="hljs-attr">EditContext</span><span class="hljs-tag">=</span><span class="hljs-string">"editContext"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">          </span><span class="hljs-attr">OnValidSubmit</span><span class="hljs-tag">=</span><span class="hljs-string">"@HandleValidSubmit"</span><span class="hljs-tag">&gt;</span>
    Vendor <span class="hljs-tag">&lt;</span><span class="hljs-name">InputText</span><span class="hljs-tag"> @</span><span class="hljs-attr">bind-Value</span><span class="hljs-tag">=</span><span class="hljs-string">"expense.Vendor"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"submit"</span><span class="hljs-tag">&gt;</span>
        Save
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">EditForm</span><span class="hljs-tag">&gt;</span>
@code {
    private Expense expense = new();
    private EditContext? editContext;
 
    protected override void OnInitialized()
    {
        editContext = new(expense);
    }
}
</code></pre>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">If we attempt to assign both the <code class="inlineCode">Model</code> property and the <code class="inlineCode">EditContext</code> property of an <code class="inlineCode">EditForm</code> component, a runtime error will be generated.</p>
    </div>
    <h2 id="_idParaDest-343" class="heading-2">Submitting a form</h2>
    <p class="normal">There <a id="_idIndexMarker835"></a>are three properties of the <code class="inlineCode">EditForm</code> component <a id="_idIndexMarker836"></a>that are involved with form submission:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">OnValidSubmit</code>: The callback that is invoked when the form is submitted and the <code class="inlineCode">EditContext</code> property is valid.</li>
      <li class="bulletList"><code class="inlineCode">OnInvalidSubmit</code>: The callback that is invoked when the form is submitted and the <code class="inlineCode">EditContext</code> property is invalid.</li>
      <li class="bulletList"><code class="inlineCode">OnSubmit</code>: The callback that is invoked when the form is submitted. When we use this property, we need to manually trigger validation by using the Validate method of the <code class="inlineCode">EditContext</code> property of the <code class="inlineCode">EditForm</code>.</li>
    </ul>
    <p class="normal">We can use the <code class="inlineCode">OnValidSubmit</code> and <code class="inlineCode">OnInvalidSubmit</code> callbacks together or separately, or we can use the <code class="inlineCode">OnSubmit</code> callback by itself. If we use the <code class="inlineCode">OnSubmit</code> callback, we are responsible for performing the form validation. Otherwise, the form validation is performed by the <code class="inlineCode">EditForm</code> component.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">If we set an <code class="inlineCode">OnSubmit</code> callback, any callbacks set using <code class="inlineCode">OnValidSubmit</code> or <code class="inlineCode">OnInvalidSubmit</code> are ignored.</p>
    </div>
    <p class="normal">There are quite a <a id="_idIndexMarker837"></a>few built-in input components that we can use in conjunction with the <code class="inlineCode">EditForm</code> component.</p>
    <h1 id="_idParaDest-344" class="heading-1">Using the built-in input components</h1>
    <p class="normal">The following <a id="_idIndexMarker838"></a>table lists the built-in input components along with the HTML that they render:</p>
    <table id="table001-3" class="table-container">
      <tbody>
        <tr>
          <td class="table-cell">
            <p class="normal">Input Component</p>
          </td>
          <td class="table-cell">
            <p class="normal">HTML Rendered</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">InputCheckbox</code></p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">&lt;input type="checkbox"&gt;</code></p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">InputDate&lt;TValue&gt;</code></p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">&lt;input type="date"&gt;</code></p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">InputFile</code></p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">&lt;input type="file"&gt;</code></p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">InputNumber&lt;TValue&gt;</code></p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">&lt;input type="number"&gt;</code></p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">InputRadio&lt;TValue&gt;</code></p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">&lt;input type="radio"&gt;</code></p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">InputRadioGroup&lt;TValue&gt;</code></p>
          </td>
          <td class="table-cell">
            <p class="normal">Group of child <code class="inlineCode">InputRadio&lt;TValue&gt;</code></p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">InputSelect&lt;TValue&gt;</code></p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">&lt;select&gt;</code></p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">InputText</code></p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">&lt;input&gt;</code></p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">InputTextArea</code></p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">&lt;textarea&gt;</code></p>
          </td>
        </tr>
      </tbody>
    </table>
    <p class="packt_figref">Table 12.1: Built-in input components</p>
    <p class="normal">All the built-in input components can receive and validate user inputs when placed within an <code class="inlineCode">EditForm</code> element. The <code class="inlineCode">EditForm</code> cascades its <code class="inlineCode">EditContext</code> to its descendants. Also, all of the built-in input components support arbitrary attributes. Therefore, any attribute that does not match a component parameter is added to the HTML element that is rendered by the component.</p>
    <h2 id="_idParaDest-345" class="heading-2">InputCheckbox</h2>
    <p class="normal">The <code class="inlineCode">InputCheckbox</code> component is <a id="_idIndexMarker839"></a>for editing Boolean values. It <a id="_idIndexMarker840"></a>does not allow binding to a nullable property.</p>
    <h2 id="_idParaDest-346" class="heading-2">InputDate</h2>
    <p class="normal">The <code class="inlineCode">InputDate</code> component is for <a id="_idIndexMarker841"></a>editing date values. The supported <a id="_idIndexMarker842"></a>date types are <code class="inlineCode">DateTime</code> and <code class="inlineCode">DateTimeOffset</code>. If a datatype that is not supported is entered into this component, the framework will create a validation error.</p>
    <h2 id="_idParaDest-347" class="heading-2">InputFile</h2>
    <p class="normal">The <code class="inlineCode">InputFile</code> component is <a id="_idIndexMarker843"></a>for uploading <a id="_idIndexMarker844"></a>files. </p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">The project in this chapter does not use the <code class="inlineCode">InputFile</code> component. For more information on using the <code class="inlineCode">InputFile</code> component, refer to <em class="chapterRef">Chapter 9</em>, <em class="italic">Uploading and Reading an Excel File</em>.</p>
    </div>
    <h2 id="_idParaDest-348" class="heading-2">InputNumber</h2>
    <p class="normal">The <code class="inlineCode">InputNumber</code> component is for editing numeric values. The supported numeric types are <code class="inlineCode">Int32</code>, <code class="inlineCode">Int64</code>, <code class="inlineCode">Single</code>, <code class="inlineCode">Double</code>, and <code class="inlineCode">Decimal</code>. If a datatype that is not supported is entered <a id="_idIndexMarker845"></a>into this component, the framework will create a <a id="_idIndexMarker846"></a>validation error unless the target property is nullable. In that case, the invalid input will be considered <code class="inlineCode">null</code> and the text in the input will be cleared.</p>
    <h2 id="_idParaDest-349" class="heading-2">InputRadio</h2>
    <p class="normal">The <code class="inlineCode">InputRadio</code> component <a id="_idIndexMarker847"></a>is for selecting a value from a <a id="_idIndexMarker848"></a>group of choices.</p>
    <h2 id="_idParaDest-350" class="heading-2">InputRadioGroup</h2>
    <p class="normal">The <code class="inlineCode">InputRadioGroup</code> component <a id="_idIndexMarker849"></a>is for grouping <code class="inlineCode">InputRadio</code> <a id="_idIndexMarker850"></a>components.</p>
    <h2 id="_idParaDest-351" class="heading-2">InputSelect</h2>
    <p class="normal">The <code class="inlineCode">InputSelect</code> component is <a id="_idIndexMarker851"></a>for rendering a dropdown <a id="_idIndexMarker852"></a>selection. The <code class="inlineCode">InputSelect</code> component includes a <code class="inlineCode">ChildContent</code> property for rendering the content inside of the <code class="inlineCode">select</code> element.</p>
    <p class="normal">If the option you select does not have a value attribute since its value is null, the text content is treated <a id="_idIndexMarker853"></a>as the value. This is standard HTML. However, when using two-way binding with Blazor, you must provide a <code class="inlineCode">string.Empty</code> as the value for null values to prevent the value of the text from being returned.</p>
    <h2 id="_idParaDest-352" class="heading-2">InputText</h2>
    <p class="normal">The <code class="inlineCode">InputText</code> component is for editing string values. The <code class="inlineCode">InputText</code> component does not <a id="_idIndexMarker854"></a>specify a type. This allows you to use any of the available input types <a id="_idIndexMarker855"></a>for the HTML input element, such as <code class="inlineCode">password</code>, <code class="inlineCode">tel</code>, or <code class="inlineCode">color</code>.</p>
    <p class="normal">The default type for an HTML input element is <code class="inlineCode">text</code>.</p>
    <h2 id="_idParaDest-353" class="heading-2">InputTextArea</h2>
    <p class="normal">The <code class="inlineCode">InputTextArea</code> component is <a id="_idIndexMarker856"></a>for editing string values <a id="_idIndexMarker857"></a>using multiline input.</p>
    <p class="normal">By using the various built-in input components in conjunction with their parent <code class="inlineCode">EditForm</code>, we can easily add an input form to a Blazor WebAssembly app.</p>
    <p class="normal">The input data is validated both when the form is submitted and when the data is changed. To communicate the validation status of the input form, we can use the built-in validation components.</p>
    <h1 id="_idParaDest-354" class="heading-1">Using the validation components</h1>
    <p class="normal">Input validation is an <a id="_idIndexMarker858"></a>important aspect of every application since it prevents users from entering invalid data. The Blazor WebAssembly framework uses data annotations for input validation. There are over 30 built-in Data Annotation attributes. This is a list of the ones that we will be using in this project:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">Required</code>: This attribute specifies that a value is required.</li>
      <li class="bulletList"><code class="inlineCode">Display</code>: This attribute specifies the string to display in error messages.</li>
      <li class="bulletList"><code class="inlineCode">MaxLength</code>: This attribute specifies the maximum string length allowed.</li>
      <li class="bulletList"><code class="inlineCode">Range</code>: This attribute specifies the maximum and minimum values.</li>
    </ul>
    <p class="normal">The following code <a id="_idIndexMarker859"></a>demonstrates the use of a few data annotations:</p>
    <pre class="programlisting code"><code class="hljs-code">[<span class="hljs-meta">Required</span>]
<span class="hljs-keyword">public</span> DateTime? Date { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
[<span class="hljs-meta">Required</span>]
[<span class="hljs-meta">Range(0, 500, ErrorMessage = </span><span class="hljs-string">"The Amount must be &lt;= $500"</span><span class="hljs-meta">)</span>]
<span class="hljs-keyword">public</span> <span class="hljs-built_in">decimal</span>? Amount { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
    <p class="normal">In the preceding example, both the <code class="inlineCode">Date</code> field and the <code class="inlineCode">Amount</code> field are required. Also, the <code class="inlineCode">Amount</code> field must be a value between 0 and 500 inclusive, or the indicated error message is displayed.</p>
    <p class="normal">There are two built-in validation components:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">ValidationMessage</code>: This component displays all the validation messages for the indicated field within the <code class="inlineCode">EditContext</code>.</li>
      <li class="bulletList"><code class="inlineCode">ValidationSummary</code>: This <a id="_idIndexMarker860"></a>component displays all the validation messages for all the fields within the <code class="inlineCode">EditContext</code>. It provides a summary of the validation messages.</li>
    </ul>
    <p class="normal">The location of the validation component within the page determines where it will be rendered. In the following example, the <code class="inlineCode">ValidationMessage</code> is placed after each related input component and the <code class="inlineCode">ValidationSummary</code> is placed after the <strong class="screenText">Save</strong> button.</p>
    <p class="normal">This is a sample <code class="inlineCode">ValidationMessage</code> component:</p>
    <pre class="programlisting code"><code class="hljs-code">&lt;ValidationMessage For=<span class="hljs-string">"() =&gt; expense.Date"</span> /&gt;
</code></pre>
    <p class="normal">This is a sample <code class="inlineCode">ValidationSummary</code> component:</p>
    <pre class="programlisting code"><code class="hljs-code">&lt;ValidationSummary /&gt;
</code></pre>
    <p class="normal">An <code class="inlineCode">EditForm</code> component can include both types of validation components. However, to use either type of validation component, we must add <code class="inlineCode">DataAnnotationsValidator</code> to the <code class="inlineCode">EditForm</code> component.</p>
    <p class="normal">The following <a id="_idIndexMarker861"></a>screenshot shows the results of both a <code class="inlineCode">ValidationSummary</code> component and individual <code class="inlineCode">ValidationMesssage</code> components:</p>
    <figure class="mediaobject"><img src="../Images/B18471_12_01.png" alt="Shape

Description automatically generated with medium confidence"/></figure>
    <p class="packt_figref">Figure 12.1: Validation components</p>
    <p class="normal">The validation components make it easy to add validation to a Blazor WebAssembly app.</p>
    <h1 id="_idParaDest-355" class="heading-1">Locking navigation</h1>
    <p class="normal">How many times have you completed a form and forgotten to save it before navigating to another page? It happens to everyone. The <code class="inlineCode">NavigationLock</code> component can be used to notify the user <a id="_idIndexMarker862"></a>that they are about to navigate away from the <a id="_idIndexMarker863"></a>current page and allow them to cancel that action. It does that by intercepting navigation events.</p>
    <p class="normal">This is a sample <code class="inlineCode">NavigationLock</code>:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">NavigationLock</span><span class="hljs-tag"> </span><span class="hljs-attr">ConfirmExternalNavigation</span><span class="hljs-tag">=</span><span class="hljs-string">"true"</span>
<span class="hljs-tag">    </span><span class="hljs-attr">OnBeforeInternalNavigation</span><span class="hljs-tag">=</span><span class="hljs-string">"HandleBeforeInternalNav"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
    <p class="normal">The <code class="inlineCode">NavigationLock</code> class <a id="_idIndexMarker864"></a>includes two properties:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">ConfirmExternalNavigation</code> â€“ gets or sets whether the user should be asked to confirm external navigations. The default value is <code class="inlineCode">false</code>.</li>
      <li class="bulletList"><code class="inlineCode">OnBeforeInternalNavigation</code> â€“ gets or sets the callback that is invoked when an internal navigation event occurs.</li>
    </ul>
    <p class="normal">This is a sample method that is invoked from the <code class="inlineCode">OnBeforeInternalNavigation</code> property:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">HandleBeforeInternalNav</span>
<span class="hljs-function">    (</span><span class="hljs-params">LocationChangingContext context</span><span class="hljs-function">)</span>
{
    <span class="hljs-keyword">if</span> (context.IsNavigationIntercepted)
    {
        <span class="hljs-keyword">var</span> confirm = <span class="hljs-keyword">await</span> JS.InvokeAsync&lt;<span class="hljs-built_in">bool</span>&gt;(<span class="hljs-string">"confirm"</span>,
                <span class="hljs-string">"Are you sure you are ready to leave?"</span>);
        <span class="hljs-keyword">if</span> (!confirm)
        {
            context.PreventNavigation();
        }
    }
}
</code></pre>
    <p class="normal">In the preceding <a id="_idIndexMarker865"></a>code, the <code class="inlineCode">IsNavigationIntercepted</code> method is used to determine whether the navigation was intercepted from a link. If it was intercepted from a link, a JavaScript <code class="inlineCode">confirm</code> dialog is displayed. If the user does not confirm that they want to leave the page, the <code class="inlineCode">PreventNavigation</code> method prevents the navigation from occurring.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">For more information on invoking JavaScript functions from .NET methods, refer to <em class="chapterRef">Chapter 5</em>, <em class="italic">Building a Local Storage Service Using JavaScript Interoperability (JS Interop).</em></p>
    </div>
    <p class="normal">Now letâ€™s get a quick overview of the project that we are going to build in this chapter.</p>
    <h1 id="_idParaDest-356" class="heading-1">Creating the expense tracker project</h1>
    <p class="normal">In this chapter, we <a id="_idIndexMarker866"></a>will build a project to track travel expenses. We will be able to view, add, and edit expenses. The expenses will be stored in a Microsoft SQL Server database.</p>
    <p class="normal">This is a screenshot of the <code class="inlineCode">Home</code> page from the completed application:</p>
    <figure class="mediaobject"><img src="../Images/B18471_12_02.png" alt="Table

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.2: Home page of the expenses tracker</p>
    <p class="normal">This is a screenshot of the <code class="inlineCode">Add Expense</code> page from the completed application:</p>
    <figure class="mediaobject"><img src="../Images/B18471_12_03.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.3: Add Expense page of expense tracker</p>
    <p class="normal">The build <a id="_idIndexMarker867"></a>time for this project is approximately 60 minutes.</p>
    <h2 id="_idParaDest-357" class="heading-2">Project overview</h2>
    <p class="normal">The <code class="inlineCode">ExpenseTracker</code> project will <a id="_idIndexMarker868"></a>be created by using Microsoftâ€™s <strong class="keyWord">Blazor WebAssembly App Empty</strong> project template to create a hosted Blazor WebAssembly project. First, we will add Bootstrap and a tabbed menu. Then, we will add the classes and API controllers needed for our project. We will add a table to the <code class="inlineCode">Home</code> page to display the current list of expenses. We will use the <code class="inlineCode">EditForm</code> component in <a id="_idIndexMarker869"></a>conjunction with many of the built-in input components to add and edit the expenses. Finally, we will add a <code class="inlineCode">NavigationLock</code> component to prevent the user from losing their edits by navigating to another page.</p>
    <h2 id="_idParaDest-358" class="heading-2">Create the expense tracker project</h2>
    <p class="normal">We need to <a id="_idIndexMarker870"></a>create a new Blazor WebAssembly app. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open Visual Studio 2022.</li>
      <li class="numberedList">Click the <strong class="screenText">Create a new project</strong> button.</li>
      <li class="numberedList">Press <em class="keystroke">Alt</em>+<em class="keystroke">S</em> to enter the search for templates textbox.</li>
      <li class="numberedList">Enter <code class="inlineCode">Blazor</code> and press the <em class="keystroke">Enter</em> key.
    <p class="normal">The following screenshot shows the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template:</p>
    <figure class="mediaobject"><img src="../Images/B18471_12_04.png" alt="Graphical user interface, text, application, chat or text message

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.4: Blazor WebAssembly App Empty project template</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Select the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template and click the <strong class="screenText">Next</strong> button.</li>
      <li class="numberedList">Enter <code class="inlineCode">ExpenseTracker</code> in the <strong class="screenText">Project name</strong> textbox and click the <strong class="screenText">Next</strong> button.
    <p class="normal">This is a screenshot of the dialog used to configure our new project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_12_05.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.5: Configure your new project dialog</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">In the preceding example, we placed the <code class="inlineCode">ExpenseTracker</code> project into the <code class="inlineCode">E:/Blazor</code> folder. However, the location of this project is not important.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Select <strong class="screenText">.NET 7.0</strong> as the version of the <code class="inlineCode">Framework</code> to use.</li>
      <li class="numberedList">Check <a id="_idIndexMarker871"></a>the <strong class="screenText">Configure for HTTPS</strong> checkbox.</li>
      <li class="numberedList">Check the <strong class="screenText">ASP.NET Core Hosted</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">Progressive Web Application</strong> checkbox.
    <p class="normal">This is a screenshot of the dialog used to collect additional information about our new project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_12_06.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.6: Additional Information Dialog</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="11">Click the <strong class="screenText">Create</strong> button.
    <p class="normal">We have <a id="_idIndexMarker872"></a>now created a hosted <strong class="screenText">ExpenseTracker</strong> Blazor WebAssembly project.</p>
    <p class="normal">The <strong class="screenText">ExpenseTracker</strong> solution comprises three different projects. The following screenshot of Visual Studioâ€™s <strong class="screenText">Solution Explorer</strong> shows the three projects that are in the solution:</p>
    <figure class="mediaobject"><img src="../Images/B18471_12_07.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.7: Solution Explorer</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="12">Right-click the <strong class="screenText">ExpenseTracker.Server</strong> project and select the <strong class="screenText">Set as Startup Project </strong>option from the menu.</li>
    </ol>
    <p class="normal">We have <a id="_idIndexMarker873"></a>created the <strong class="screenText">ExpenseTracker</strong> solution and set the <strong class="screenText">ExpenseTracker.Server</strong> project as the startup project. Now we need to work on our UI. We will use <code class="inlineCode">Bootstrap</code> to style our controls.</p>
    <h2 id="_idParaDest-359" class="heading-2">Install Bootstrap</h2>
    <p class="normal">We need <a id="_idIndexMarker874"></a>to install <code class="inlineCode">Bootstrap</code> into our web app. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">ExpenseTracker.Client/wwwroot/css</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Client-Side Library</strong> option from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">bootstrap</code> into the <strong class="screenText">Library</strong> search textbox and press the <em class="keystroke">Enter</em> key.</li>
      <li class="numberedList">Select <strong class="screenText">Choose specific files</strong>.</li>
      <li class="numberedList">Select only the <strong class="screenText">css</strong> files, as shown in the following screenshot:
    <figure class="mediaobject"><img src="../Images/B18471_12_08.png" alt="Graphical user interface, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.8: Add Client-Side Library dialog</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">Although the preceding screenshot has version 5.2.3 of Bootstrap selected, you can use any version of Bootstrap 5 to complete this project.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Click <a id="_idIndexMarker875"></a>the <strong class="screenText">Install</strong> button.
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">After you install <code class="inlineCode">Bootstrap</code>, a new folder will be added to the <code class="inlineCode">wwwroot/css</code> folder. This new folder contains all the CSS files needed for <code class="inlineCode">Bootstrap</code>. We will only be using the <code class="inlineCode">bootstrap.min.css</code> file in this project. </p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Open the <code class="inlineCode">ExpenseTracker.Client/wwwroot/index.html</code> file.</li>
      <li class="numberedList">Add the following markup to the <code class="inlineCode">head</code> element before the link to the <code class="inlineCode">css/app.css</code> stylesheet:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">link</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"css/bootstrap/css/bootstrap.min.css"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">      </span><span class="hljs-attr">rel</span><span class="hljs-tag">=</span><span class="hljs-string">"stylesheet"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
    </ol>
    <p class="normal">We have <a id="_idIndexMarker876"></a>installed <code class="inlineCode">Bootstrap</code>. Now we will add the classes to store the expense information.</p>
    <h2 id="_idParaDest-360" class="heading-2">Add the classes</h2>
    <p class="normal">We need to <a id="_idIndexMarker877"></a>add both an <code class="inlineCode">ExpenseType</code> class and an <code class="inlineCode">Expense</code> class. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">ExpenseTracker.Shared</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Class</strong> option from the menu.</li>
      <li class="numberedList">Name the new class <code class="inlineCode">ExpenseType</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Make the class public by adding the <code class="inlineCode">public</code> modifier:
        <pre class="programlisting code"><code class="hljs-code"><span class="code-highlight"><strong class="hljs-keyword-slc">public</strong></span> <span class="hljs-keyword">class</span> <span class="hljs-title">ExpenseType</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following properties to the <code class="inlineCode">ExpenseType</code> class:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Id { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? Type { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      </li>
      <li class="numberedList">Right-click the <code class="inlineCode">ExpenseTracker.Shared</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Class</strong> option from the menu.</li>
      <li class="numberedList">Name the new class <code class="inlineCode">Expense</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Make the class public by adding the <code class="inlineCode">public</code> modifier:
        <pre class="programlisting code"><code class="hljs-code"><span class="code-highlight"><strong class="hljs-keyword-slc">public</strong></span> <span class="hljs-keyword">class</span> <span class="hljs-title">Expense</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following <code class="inlineCode">using</code> statement:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">using</span> System.ComponentModel.DataAnnotations;
</code></pre>
      </li>
      <li class="numberedList">Add the following properties to the <code class="inlineCode">Expense</code> class:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Id { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
[<span class="hljs-meta">Required</span>]
<span class="hljs-keyword">public</span> DateTime? Date { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
[<span class="hljs-meta">Required</span>]
[<span class="hljs-meta">MaxLength(100)</span>]
<span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? Vendor { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? Description { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
[<span class="hljs-meta">Required</span>]
[<span class="hljs-meta">Display(Name = </span><span class="hljs-string">"Expense Type"</span><span class="hljs-meta">)</span>]
<span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>? ExpenseTypeId { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
[<span class="hljs-meta">Required</span>]
[<span class="hljs-meta">Range(0, </span>
<span class="hljs-meta">       500, </span>
<span class="hljs-meta">       ErrorMessage = </span><span class="hljs-string">"The {0} field must be &lt;= {2}"</span><span class="hljs-meta">)</span>]
<span class="hljs-keyword">public</span> <span class="hljs-built_in">decimal</span>? Amount { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> Paid { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      
    <p class="normal">In the preceding code, we have used data annotations to add some simple data <a id="_idIndexMarker878"></a>validation. <code class="inlineCode">Date</code>, <code class="inlineCode">Vendor</code>, <code class="inlineCode">ExpenseTypeId</code>, and <code class="inlineCode">Amount</code> are all required. The maximum length of <code class="inlineCode">Vendor</code> is 100 characters. The display name for <code class="inlineCode">ExpenseTypeId</code> is <code class="inlineCode">ExpenseType</code>. The <code class="inlineCode">Amount</code> of the expense is capped at 500.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="12">From the <strong class="screenText">Build</strong> menu, select the <strong class="screenText">Build Solution</strong> option.</li>
    </ol>
    <p class="normal">We have now added both the <code class="inlineCode">ExpenseType</code> class and the <code class="inlineCode">Expense</code> class and built our application. Now we need to configure the ASP.NET Web API endpoints.</p>
    <h2 id="_idParaDest-361" class="heading-2">Add the API controllers</h2>
    <p class="normal">We need to <a id="_idIndexMarker879"></a>add an API controller for each of the new classes. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">ExpenseTracker.Server</code> project and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Folder</strong> option from the menu.</li>
      <li class="numberedList">Name the new folder <code class="inlineCode">Controllers</code>.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">ExpenseTracker.Server.Contollers</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Controller</strong> option from the menu.</li>
      <li class="numberedList">Select the <strong class="screenText">API Controller with actions, using Entity Framework</strong> option.
    <p class="normal">The following screenshot of the <strong class="screenText">Add New Scaffolded Item </strong>dialog has the <strong class="screenText">API Controller with actions, using Entity Framework</strong> option highlighted:</p>
    <figure class="mediaobject"><img src="../Images/B18471_12_09.png" alt="Graphical user interface, application, Teams

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.9: Add New Scaffolded Item dialog</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Click <a id="_idIndexMarker880"></a>the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Set <strong class="screenText">Model class</strong> to <strong class="screenText">ExpenseType (ExpenseTracker.Shared)</strong>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add data context</strong> button to open the <strong class="screenText">Add Data Context</strong> dialog:</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_12_10.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.10: Add API Controller with actions, using the Entity Framework dialog</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Click <a id="_idIndexMarker881"></a>the <strong class="screenText">Add</strong> button to accept the default values.</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_12_11.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.11: Add Data Context dialog</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Click the <strong class="screenText">Add</strong> button on the <strong class="screenText">Add API Controller with actions, using Entity Framework</strong> dialog.
    <p class="normal">We have created the <code class="inlineCode">ExpenseTypeController</code> class. Now we need to repeat the preceding steps to create the <code class="inlineCode">ExpenseController</code> class.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="10">Right-click the <code class="inlineCode">ExpenseTracker.Server.Controllers</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Controller</strong> option from the menu.</li>
      <li class="numberedList">Select the <strong class="screenText">API Controller with actions</strong>, <strong class="screenText">using Entity Framework</strong> option.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Set <strong class="screenText">Model class</strong> to <strong class="screenText">Expense (ExpenseTracker.Shared)</strong>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
    </ol>
    <p class="normal">We have <a id="_idIndexMarker882"></a>added two new controllers to provide the API endpoints that our application will use. For more information on using ASP.NET Web API, refer to <em class="chapterRef">Chapter 11</em>, <em class="italic">Building a Task Manager Using ASP.NET Web API</em>.</p>
    <p class="normal">Next, we need to create the SQL Server database.</p>
    <h2 id="_idParaDest-362" class="heading-2">Create the SQL Server database</h2>
    <p class="normal">We need to <a id="_idIndexMarker883"></a>create the SQL Server database and add a table for the expenses and a table for the expense types. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">ExpenseTracker.Server/appsettings.json</code> file.</li>
      <li class="numberedList">Update the connection string to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-attr">"ConnectionStrings"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"ExpenseTrackerServerContext"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Server={Server name}; Database=ExpenseTracker; Trusted_Connection=True; Encrypt=False;"</span>
<span class="hljs-punctuation">}</span>
</code></pre>
      </li>
      <li class="numberedList">Replace the <code class="inlineCode">{Server name} </code>placeholder with the name of your SQL Server.
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Although we are using SQL Server Express 2022, it does not matter what version of SQL Server you use for this project.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="4">Open the <code class="inlineCode">ExpenseTracker.Server.Data/ExpenseTrackerServerContext.cs</code> file.</li>
      <li class="numberedList">Add the following <code class="inlineCode">OnModelCreating</code> method:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">OnModelCreating</span>
<span class="hljs-function">    (</span><span class="hljs-params">ModelBuilder modelBuilder</span><span class="hljs-function">)</span>
{
    modelBuilder.Entity&lt;ExpenseType&gt;().HasData(
    <span class="hljs-keyword">new</span> ExpenseType { Type = <span class="hljs-string">"</span><span class="hljs-string">Airfare"</span>, Id = <span class="hljs-number">1</span> },
    <span class="hljs-keyword">new</span> ExpenseType { Type = <span class="hljs-string">"Lodging"</span>, Id = <span class="hljs-number">2</span> },
    <span class="hljs-keyword">new</span> ExpenseType { Type = <span class="hljs-string">"Meal"</span>, Id = <span class="hljs-number">3</span> },
    <span class="hljs-keyword">new</span> ExpenseType { Type = <span class="hljs-string">"Other"</span>, Id = <span class="hljs-number">4</span> }
    );
}
</code></pre>
      
    <p class="normal">The preceding code will seed the <code class="inlineCode">ExpenseType</code> table.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">From the <strong class="screenText">Tools</strong> menu, select the <strong class="screenText">NuGet Package Manager</strong>, <strong class="screenText">Package Manager Console</strong> option.</li>
      <li class="numberedList">In the <strong class="screenText">Package Manager Console</strong>, verify that the <strong class="screenText">Default project</strong> is set to <strong class="screenText">ExpenseTracker.Server</strong>.</li>
      <li class="numberedList">Execute the following commands in the <strong class="screenText">Package Manager Console</strong>:
        <pre class="programlisting con"><code class="hljs-con">Add-Migration Init
Update-Database
</code></pre>
      
    <p class="normal">The <a id="_idIndexMarker884"></a>preceding commands use <code class="inlineCode">Entity Framework</code> <code class="inlineCode">migrations</code> to update SQL Server.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Add <code class="inlineCode">/api/expensetypes</code> to the address bar and press <em class="keystroke">Enter</em>.
    <p class="normal">The following screenshot shows the JSON that is returned by <code class="inlineCode">ExpenseTypesController</code>:</p>
    <figure class="mediaobject"><img src="../Images/B18471_12_12.png" alt="A picture containing text

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.12: JSON returned by the ExpenseTypes API controller</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="11">Close the browser.</li>
    </ol>
    <p class="normal">We have <a id="_idIndexMarker885"></a>created a new database on SQL Server, added two tables, and populated one of the tables with seed data. After we finished setting up SQL Server, we tested that <code class="inlineCode">ExpenseTypesController</code> works. Finally, we are ready to create a component to display the expenses that are stored in SQL Server.</p>
    <h2 id="_idParaDest-363" class="heading-2">View the expenses</h2>
    <p class="normal">We need to <a id="_idIndexMarker886"></a>add a table to the <strong class="screenText">Home</strong> page to display the list of expenses. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Open the <code class="inlineCode">ExpenseTracker.Client.Pages/Index.razor</code> page.</li>
      <li class="numberedList">Remove the <code class="inlineCode">h1</code> element.</li>
      <li class="numberedList">Add the following code:
        <pre class="programlisting code"><code class="hljs-code">@using ExpenseTracker.Shared
@inject HttpClient Http
<span class="hljs-tag">&lt;</span><span class="hljs-name">h2</span><span class="hljs-tag">&gt;</span>Expenses<span class="hljs-tag">&lt;/</span><span class="hljs-name">h2</span><span class="hljs-tag">&gt;</span>
@if (expenses == null)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;</span>Loadingâ€¦<span class="hljs-tag">&lt;/</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
}
else if (expenses.Count == 0)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>None Found<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
}
else
{
}
@code {
    List<span class="hljs-tag">&lt;</span><span class="hljs-name">Expense</span><span class="hljs-tag">&gt;</span>? expenses;
}
</code></pre>
     
    <p class="normal">The preceding code defines <code class="inlineCode">expenses</code> as a <code class="inlineCode">List&lt;Expense&gt;</code> and checks to see if it is <a id="_idIndexMarker887"></a>null or empty. If it is null, it renders the loading message, and if it is empty, it renders the <strong class="screenText">None Found</strong> message.</p> </li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Add the following <code class="inlineCode">OnInitializedAsync</code> method to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">OnInitializedAsync</span><span class="hljs-function">()</span>
{
    expenses = <span class="hljs-keyword">await</span> Http.GetFromJsonAsync
        &lt;List&lt;Expense&gt;&gt;(<span class="hljs-string">"api/expenses"</span>);
}
</code></pre>
      
    <p class="normal">The preceding code populates the <code class="inlineCode">expenses</code> object by using the <code class="inlineCode">GetFromJsonAsync</code> method of the <code class="inlineCode">HttpClient</code>. For more information on the <code class="inlineCode">HttpClient</code> refer to <em class="chapterRef">Chapter 11</em>, <em class="italic">Building a Task Manager User ASP.NET Web API</em>.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Add the following <code class="inlineCode">table</code> element to the <code class="inlineCode">else</code> statement:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">table</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"table"</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">table</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following <code class="inlineCode">thead</code> element to the <code class="inlineCode">table</code> element:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">thead</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">tr</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>#<span class="hljs-tag">&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>Date<span class="hljs-tag">&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>Vendor<span class="hljs-tag">&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"text-right"</span><span class="hljs-tag">&gt;</span>Amount<span class="hljs-tag">&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">tr</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">thead</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add the <a id="_idIndexMarker888"></a>following <code class="inlineCode">tbody</code> element to the <code class="inlineCode">table</code> element after the <code class="inlineCode">thead</code> element:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">tbody</span><span class="hljs-tag">&gt;</span>
    @foreach (var item in expenses)
    {
        <span class="hljs-tag">&lt;</span><span class="hljs-name">tr</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"@(item.Paid ? "</span><span class="hljs-tag">" </span><span class="hljs-attr">:</span><span class="hljs-tag"> "</span><span class="hljs-attr">table-danger</span><span class="hljs-tag">")"&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">a</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"/expense/@item.Id"</span><span class="hljs-tag">&gt;</span>Edit<span class="hljs-tag">&lt;/</span><span class="hljs-name">a</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>@item.Id<span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>@item.Date!.Value.ToShortDateString()<span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>@item.Vendor<span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"text-right"</span><span class="hljs-tag">&gt;</span>@item.Amount<span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">tr</span><span class="hljs-tag">&gt;</span>
    }
<span class="hljs-tag">&lt;/</span><span class="hljs-name">tbody</span><span class="hljs-tag">&gt;</span>
</code></pre>
      
    <p class="normal">The preceding code loops through each of the <code class="inlineCode">Expense</code> objects in the collection and displays them as rows in a table. If the expense is not yet paid, the row is highlighted in red by using the <code class="inlineCode">table-danger</code> class.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.
    <p class="normal">This is a screenshot of our application:</p>
    <figure class="mediaobject"><img src="../Images/B18471_12_13.png" alt="Graphical user interface, text, application, chat or text message

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.13: Home page of the ExpenseTracker</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="10">Close <a id="_idIndexMarker889"></a>the browser window.</li>
    </ol>
    <p class="normal">We have added the ability to display the expenses in a table on the <code class="inlineCode">Home</code> page. Next, we need to add the ability to add expenses.</p>
    <h2 id="_idParaDest-364" class="heading-2">Add the edit expense component</h2>
    <p class="normal">We need <a id="_idIndexMarker890"></a>to add a component to enable us to add and edit expenses. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Open the <code class="inlineCode">ExpenseTracker.Client.MainLayout.razor</code> page.</li>
      <li class="numberedList">Add the following markup before the <code class="inlineCode">main</code> element:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">ul</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"nav nav-tabs bg-secondary bg-opacity-10"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">li</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"nav-item"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">NavLink</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"</span><span class="hljs-string">nav-link"</span>
<span class="hljs-tag">                 </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">""</span>
<span class="hljs-tag">                 </span><span class="hljs-attr">Match</span><span class="hljs-tag">=</span><span class="hljs-string">"NavLinkMatch.All"</span><span class="hljs-tag">&gt;</span>
            Home
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">NavLink</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">li</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">li</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"nav-item"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">NavLink</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"nav-link"</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"expense"</span><span class="hljs-tag">&gt;</span>
            Add Expense
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">NavLink</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">li</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">ul</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">The preceding markup uses <code class="inlineCode">Bootstrap</code> to render a tabbed interface with two options: <strong class="screenText">Home</strong> and <strong class="screenText">Add Expense</strong>.</li>
      <li class="numberedList">Update the main element to the following to add some padding to the rendered element:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">main</span><span class="hljs-tag"> </span><span class="code-highlight"><strong class="hljs-attr-slc">class</strong><strong class="hljs-tag-slc">=</strong><strong class="hljs-string-slc">"p-3"</strong></span><span class="hljs-tag">&gt;</span>
    @Body
<span class="hljs-tag">&lt;/</span><span class="hljs-name">main</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Right-click the <code class="inlineCode">ExpenseTracker.Client.Pages</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Razor Component</strong> option from the menu.</li>
      <li class="numberedList">Name <a id="_idIndexMarker891"></a>the new component <code class="inlineCode">ExpenseEdit</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Update the markup to the following:
        <pre class="programlisting code"><code class="hljs-code">@page "/expense"
@page "/expense/{id:int}"
@using ExpenseTracker.Shared
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject NavigationManager Nav
@if (id == 0)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">h2</span><span class="hljs-tag">&gt;</span>Add Expense<span class="hljs-tag">&lt;/</span><span class="hljs-name">h2</span><span class="hljs-tag">&gt;</span>
}
else
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">h2</span><span class="hljs-tag">&gt;</span>Edit Expense<span class="hljs-tag">&lt;/</span><span class="hljs-name">h2</span><span class="hljs-tag">&gt;</span>
}
@if (!ready)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;</span>Loading...<span class="hljs-tag">&lt;/</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
}
else
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">EditForm</span><span class="hljs-tag"> </span><span class="hljs-attr">Model</span><span class="hljs-tag">=</span><span class="hljs-string">"expense"</span>
<span class="hljs-tag">          </span><span class="hljs-attr">OnValidSubmit</span><span class="hljs-tag">=</span><span class="hljs-string">"HandleValidSubmit"</span><span class="hljs-tag">&gt;</span>        
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">EditForm</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>@error<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
}
@code {
}
</code></pre>
      
    <p class="normal">The preceding code displays <code class="inlineCode">EditForm</code> if the component is ready. It uses the value <a id="_idIndexMarker892"></a>of the <code class="inlineCode">id</code> parameter to determine if the form is performing an add or an edit.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="10">Add the following code to the code block:
        <pre class="programlisting code"><code class="hljs-code">[<span class="hljs-meta">Parameter</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> id { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> ready;
<span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span>? error;
<span class="hljs-keyword">private</span> Expense? expense = <span class="hljs-keyword">new</span>(); 
<span class="hljs-keyword">private</span> List&lt;ExpenseType&gt;? types;
</code></pre>
      </li>
      <li class="numberedList">Add the following <code class="inlineCode">OnInitializedAsync</code> method to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">OnInitializedAsync</span><span class="hljs-function">()</span>
{
    types = <span class="hljs-keyword">await</span> Http.GetFromJsonAsync&lt;List&lt;ExpenseType&gt;&gt;
      (<span class="hljs-string">"api/ExpenseTypes"</span>); 
    <span class="hljs-keyword">if</span> (id &gt; <span class="hljs-number">0</span>)
    {
        <span class="hljs-keyword">try</span>
        {
        }
        <span class="hljs-keyword">catch</span> (Exception)
        {
            Nav.NavigateTo(<span class="hljs-string">"/"</span>);
        }
    }
    ready = <span class="hljs-literal">true</span>;
}
</code></pre>
     
    <p class="normal">The preceding code initializes both the <code class="inlineCode">types</code> object and the <code class="inlineCode">expense</code> object. Once they have both been initialized, the value of <code class="inlineCode">ready</code> is set to <code class="inlineCode">true</code>.</p> </li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="12">Add the following code to the <code class="inlineCode">try</code> block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">var</span> result = <span class="hljs-keyword">await</span> Http.GetFromJsonAsync&lt;Expense&gt;
   (<span class="hljs-string">$"api/Expenses/</span><span class="hljs-subst">{id}</span><span class="hljs-string">"</span>);
<span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>)
{
    expense = result;
}
</code></pre>
      
    <p class="normal">The <a id="_idIndexMarker893"></a>preceding code initializes the expense object.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="13">Add the following <code class="inlineCode">HandleValidSubmit</code> method to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">HandleValidSubmit</span><span class="hljs-function">()</span>
{
    HttpResponseMessage response;
    <span class="hljs-keyword">if</span> (expense!.Id == <span class="hljs-number">0</span>)
    {
        response = <span class="hljs-keyword">await</span> Http.PostAsJsonAsync
          (<span class="hljs-string">"api/Expenses"</span>, expense);
    }
    <span class="hljs-keyword">else</span>
    {
        <span class="hljs-built_in">string</span> requestUri = <span class="hljs-string">$"api/Expenses/</span><span class="hljs-subst">{expense.Id}</span><span class="hljs-string">"</span>;
        response = <span class="hljs-keyword">await</span> Http.PutAsJsonAsync
            (requestUri, expense);
    };
    <span class="hljs-keyword">if</span> (response.IsSuccessStatusCode)
    {
        Nav.NavigateTo(<span class="hljs-string">"/"</span>);
    }
    <span class="hljs-keyword">else</span>
    {
        error = response.ReasonPhrase;
    };
}
</code></pre>
      </li>
    </ol>
    <p class="normal">The preceding code adds new expenses by using the <code class="inlineCode">PostAsJsonAsync</code> method and updates existing expenses by using the <code class="inlineCode">PutAsJsonAsync</code> method. If the relevant method is successful, the <a id="_idIndexMarker894"></a>user is returned to the <strong class="screenText">Home</strong> page. Otherwise, an error message is displayed.</p>
    <p class="normal">We have completed the code for this component, but <code class="inlineCode">EditForm</code> is still empty. We now need to add some markup to <code class="inlineCode">EditForm</code>.</p>
    <h2 id="_idParaDest-365" class="heading-2">Add the input components</h2>
    <p class="normal">We need to <a id="_idIndexMarker895"></a>add input components to the <code class="inlineCode">EditForm</code> element. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Add the following markup to <code class="inlineCode">EditForm</code> to input the <code class="inlineCode">Date</code> property:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"row mb-3"</span><span class="hljs-tag">&gt;</span>    
    <span class="hljs-tag">&lt;</span><span class="hljs-name">label</span><span class="hljs-tag">&gt;</span>
        Date
        <span class="hljs-tag">&lt;</span><span class="hljs-name">InputDate</span><span class="hljs-tag"> @</span><span class="hljs-attr">bind-Value</span><span class="hljs-tag">=</span><span class="hljs-string">"expense.Date"</span>
<span class="hljs-tag">                   </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"form-control"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">label</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following markup to <code class="inlineCode">EditForm</code> to input the <code class="inlineCode">Vendor</code> property:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"row mb-3"</span><span class="hljs-tag">&gt;</span>    
    <span class="hljs-tag">&lt;</span><span class="hljs-name">label</span><span class="hljs-tag">&gt;</span>
        Vendor
        <span class="hljs-tag">&lt;</span><span class="hljs-name">InputText</span><span class="hljs-tag"> @</span><span class="hljs-attr">bind-Value</span><span class="hljs-tag">=</span><span class="hljs-string">"expense.Vendor"</span>
<span class="hljs-tag">                   </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"form-control"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">label</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following markup to <code class="inlineCode">EditForm</code> to input the <code class="inlineCode">Description</code> property:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"row mb-3"</span><span class="hljs-tag">&gt;</span>    
    <span class="hljs-tag">&lt;</span><span class="hljs-name">label</span><span class="hljs-tag">&gt;</span>
        Description
        <span class="hljs-tag">&lt;</span><span class="hljs-name">InputTextArea</span><span class="hljs-tag"> @</span><span class="hljs-attr">bind-Value</span><span class="hljs-tag">=</span><span class="hljs-string">"expense.Description"</span>
<span class="hljs-tag">                       </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"form-control"</span><span class="hljs-tag"> /&gt;</span>    <span class="hljs-tag">&lt;/</span><span class="hljs-name">label</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following markup to <code class="inlineCode">EditForm</code> to input the <code class="inlineCode">ExpenseTypeId</code> property:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"row mb-3"</span><span class="hljs-tag">&gt;</span>    
    <span class="hljs-tag">&lt;</span><span class="hljs-name">label</span><span class="hljs-tag">&gt;</span>
        Expense Type
        <span class="hljs-tag">&lt;</span><span class="hljs-name">InputSelect</span><span class="hljs-tag"> @</span><span class="hljs-attr">bind-Value</span><span class="hljs-tag">=</span><span class="hljs-string">"expense.ExpenseTypeId"</span>
<span class="hljs-tag">                     </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"form-control"</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">option</span><span class="hljs-tag"> </span><span class="hljs-attr">value</span><span class="hljs-tag">=</span><span class="hljs-string">""</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">option</span><span class="hljs-tag">&gt;</span>
            @foreach (var item in types!)
            {
                <span class="hljs-tag">&lt;</span><span class="hljs-name">option</span><span class="hljs-tag"> </span><span class="hljs-attr">value</span><span class="hljs-tag">=</span><span class="hljs-string">"@item.Id"</span><span class="hljs-tag">&gt;</span>
                    @item.Type
                <span class="hljs-tag">&lt;/</span><span class="hljs-name">option</span><span class="hljs-tag">&gt;</span>
            }
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">InputSelect</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">label</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following markup to <code class="inlineCode">EditForm</code> to input the <code class="inlineCode">Amount</code> property:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"row mb-3"</span><span class="hljs-tag">&gt;</span>    
    <span class="hljs-tag">&lt;</span><span class="hljs-name">label</span><span class="hljs-tag">&gt;</span>
        Amount
        <span class="hljs-tag">&lt;</span><span class="hljs-name">InputNumber</span><span class="hljs-tag"> @</span><span class="hljs-attr">bind-Value</span><span class="hljs-tag">=</span><span class="hljs-string">"expense.Amount"</span>
<span class="hljs-tag">                    </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"form-control"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">label</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add <a id="_idIndexMarker896"></a>the following markup to <code class="inlineCode">EditForm</code> to input the <code class="inlineCode">Paid</code> property:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"row mb-3"</span><span class="hljs-tag">&gt;</span>    
    <span class="hljs-tag">&lt;</span><span class="hljs-name">label</span><span class="hljs-tag">&gt;</span>
        Paid?
        <span class="hljs-tag">&lt;</span><span class="hljs-name">InputCheckbox</span><span class="hljs-tag"> @</span><span class="hljs-attr">bind-Value</span><span class="hljs-tag">=</span><span class="hljs-string">"expense.Paid"</span>
<span class="hljs-tag">                       </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"form-check-input mx-1"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">label</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following markup to <code class="inlineCode">EditForm</code> for the <code class="inlineCode">Submit</code> button:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"pt-2 pb-2"</span><span class="hljs-tag">&gt;</span>    
    <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"submit"</span>
<span class="hljs-tag">        </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"btn btn-primary mr-auto"</span><span class="hljs-tag">&gt;</span>
        Save
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following markup to <code class="inlineCode">EditForm</code> to add the validation summary:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">DataAnnotationsValidator</span><span class="hljs-tag"> /&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">ValidationSummary</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Open the <code class="inlineCode">ExpenseTracker.Client.wwroot/css/app.css</code> file.</li>
      <li class="numberedList">Add the following styles:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-selector-class">.invalid</span> {
    <span class="hljs-attribute">outline</span>: <span class="hljs-number">1px</span> solid red;
}
<span class="hljs-selector-class">.validation-message</span> {
    <span class="hljs-attribute">color</span>: red;
}
<span class="hljs-selector-tag">h2</span> {
    <span class="hljs-attribute">color</span>: darkblue;
}
</code></pre>
      
    <p class="normal">The <a id="_idIndexMarker897"></a>preceding styles provide validation styling for the related elements and change the color of the <code class="inlineCode">h2</code> elements to dark blue.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="11">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Select the <strong class="screenText">Add Expense</strong> link.</li>
      <li class="numberedList">Click the <strong class="screenText">Save</strong> button.
    <p class="normal">The following screenshot shows the validation errors:</p>
    <figure class="mediaobject"><img src="../Images/B18471_12_14.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.14: Data validation for the ExpenseEdit component</p></li>
    </ol>
    <h2 id="_idParaDest-366" class="heading-2">Test the edit expense component</h2>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Add a <a id="_idIndexMarker898"></a>valid expense.</li>
      <li class="numberedList">Click the <strong class="screenText">Save</strong> button.
    <p class="normal">If the expense is valid, clicking the <strong class="screenText">Save</strong> button will save the expense to the SQL Server database and return the user to the <strong class="screenText">Home</strong> page.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="3">Click the <strong class="screenText">Edit</strong> link next to the new expense.</li>
      <li class="numberedList">Modify the expense.</li>
      <li class="numberedList">Click the <strong class="screenText">Save</strong> button.</li>
      <li class="numberedList">Click the <strong class="screenText">Add Expense</strong> link.</li>
      <li class="numberedList">Add another valid expense.</li>
      <li class="numberedList">Click the <strong class="screenText">Save</strong> button.</li>
      <li class="numberedList">Click the <strong class="screenText">Add Expense</strong> link.</li>
      <li class="numberedList">Add another valid expense but do not click the <strong class="screenText">Save</strong> button.</li>
      <li class="numberedList">Click the <strong class="screenText">Home</strong> link.</li>
      <li class="numberedList">Click the <strong class="screenText">Add Expense</strong> link.</li>
    </ol>
    <p class="normal">The valid expense is gone.</p>
    <p class="normal">If the user enters data and navigates away from the page before they click the <strong class="screenText">Save</strong> button, all their data entry is lost. To help prevent this from happening, we can lock their navigation by using the <code class="inlineCode">NavigationLock</code> component.</p>
    <h2 id="_idParaDest-367" class="heading-2">Lock navigation</h2>
    <p class="normal">We need <a id="_idIndexMarker899"></a>to add a <code class="inlineCode">NavigationLock</code> component. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Open the <code class="inlineCode">ExpenseTracker.Client.Pages/ExpenseEdit.razor</code> page.</li>
      <li class="numberedList">Add the following <code class="inlineCode">@inject</code> directive:
        <pre class="programlisting code"><code class="hljs-code">@inject IJSRuntime JS
</code></pre>
      </li>
      <li class="numberedList">Add the following <code class="inlineCode">NavigationLock</code> below the <code class="inlineCode">@inject</code> directives:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">NavigationLock</span><span class="hljs-tag"> </span><span class="hljs-attr">ConfirmExternalNavigation</span><span class="hljs-tag">=</span><span class="hljs-string">"true"</span>
<span class="hljs-tag">    </span><span class="hljs-attr">OnBeforeInternalNavigation</span><span class="hljs-tag">=</span><span class="hljs-string">"HandleBeforeInternalNav"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following code to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">HandleBeforeInternalNav</span>
<span class="hljs-function">    (</span><span class="hljs-params">LocationChangingContext context</span><span class="hljs-function">)</span>
{
    <span class="hljs-keyword">if</span> (context.IsNavigationIntercepted)
    {
        <span class="hljs-keyword">var</span> confirm = <span class="hljs-keyword">await</span> JS.InvokeAsync&lt;boo&gt;(<span class="hljs-string">"confirm"</span>,
           <span class="hljs-string">"Are you sure you are ready to leave?"</span>);
        <span class="hljs-keyword">if</span> (!confirm)
        {
            context.PreventNavigation();
        }
    }
}
</code></pre>
      
    <p class="normal">The preceding <a id="_idIndexMarker900"></a>code uses JavaScript to display a confirm dialog when the user uses a link to navigate away from the current page. </p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Select the <strong class="screenText">Add Expense</strong> link.</li>
      <li class="numberedList">Add a valid expense.</li>
      <li class="numberedList">Click the <strong class="screenText">Home</strong> link.
    <p class="normal">The following <code class="inlineCode">confirm</code> dialog will be displayed:</p>
    <figure class="mediaobject"><img src="../Images/B18471_12_15.png" alt="Graphical user interface, text, application, Word

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 12.15: Confirm dialog</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="10">Click <a id="_idIndexMarker901"></a>the <strong class="screenText">Cancel</strong> button to cancel navigation.</li>
    </ol>
    <p class="normal">We have completed the expense tracker project.</p>
    <h1 id="_idParaDest-368" class="heading-1">Summary</h1>
    <p class="normal">You should now be able to use the <code class="inlineCode">EditForm</code> component in conjunction with the built-in input components to create an input data form. You should also be comfortable with the built-in validation components. Finally, you should understand how to lock the navigation.</p>
    <p class="normal">In this chapter, we introduced the built-in <code class="inlineCode">EditForm</code> component, various input components, and the validation components. We also introduced a component that can be used to lock the userâ€™s navigation. After that, we used the <strong class="keyWord">Blazor WebAssembly App</strong> project template to create a multi-project solution. We added a couple of classes and a couple of API controllers. Next, we configured SQL Server by updating the connection string to the database and using <strong class="screenText">Entity Framework</strong> migrations. We updated the <code class="inlineCode">Home</code> page to display the list of expenses. We added a new page that included an <code class="inlineCode">EditForm</code> component and many of the built-in input components to input, validate, and submit the expenses. Finally, we added a <code class="inlineCode">NavigationLock</code> component.</p>
    <p class="normal">We can apply our new skills to add data input and validation to any Blazor WebAssembly app.</p>
    <p class="normal">The next step is to start building your own web apps. To stay up to date and learn more about Blazor WebAssembly, visit <a href="https://blazor.net"><span class="url">https://blazor.net</span></a>, and read the <em class="italic">ASP.NET Blog</em> at <a href="https://devblogs.microsoft.com/dotnet/category/aspnet/"><span class="url">https://devblogs.microsoft.com/dotnet/category/aspnet/</span></a>.</p>
    <p class="normal">We hope you enjoyed the book and wish you every success!</p>
    <h1 id="_idParaDest-369" class="heading-1">Questions</h1>
    <p class="normal">The following questions are provided for your consideration:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">What are the advantages of using the built-in input components?</li>
      <li class="numberedList">How would you update the <code class="inlineCode">HandleBeforeInternalNav</code> method to only display the confirm dialog if there are unsaved changes?</li>
      <li class="numberedList">What is the purpose of the <code class="inlineCode">EditForm</code> component?</li>
    </ol>
    <h1 id="_idParaDest-370" class="heading-1">Further reading</h1>
    <p class="normal">The following resources provide more information concerning the topics in this chapter:</p>
    <ul>
      <li class="bulletList">For more information on ASP.NET Core component forms, refer to <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.forms"><span class="url">https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.forms</span></a>.</li>
      <li class="bulletList">For more information on data annotations, refer to <a href="https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations"><span class="url">https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations</span></a>.</li>
      <li class="bulletList">For more information on routing, refer to <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.routing"><span class="url">https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.routing</span></a>.</li>
    </ul>
  </div>
  <div id="_idContainer339" class="Basic-Text-Frame">
    <h1 id="_idParaDest-371" class="heading-1">Join our community on Discord</h1>
    <p class="normal">Join our communityâ€™s Discord space for discussions with the author and other readers:</p>
    <p class="normal"><a href="https://packt.link/BlazorWASM2e"><span class="url">https://packt.link/BlazorWASM2e</span></a></p>
    <p class="normal"><img src="../Images/Discord_QR.png" alt=""/></p>
  </div>
</body>
</html>