<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>Chapter_1</title>
  <link href="../Styles/syntax-highlighting.css" rel="stylesheet" type="text/css"/>
  <link href="../Styles/epub.css" rel="stylesheet" type="text/css"/>
</head>

<body id="Chapter_1" lang="en-US" xml:lang="en-US">
  <div id="_idContainer029" class="Basic-Text-Frame">
    <h1 class="chapterNumber">1</h1>
    <h1 id="_idParaDest-17" class="chapterTitle">Introduction to Blazor WebAssembly</h1>
    <p class="normal"><strong class="keyWord">Blazor WebAssembly</strong> is Microsoft’s new <strong class="keyWord">single-page application</strong> (<strong class="keyWord">SPA</strong>) framework for building interactive web <a id="_idIndexMarker000"></a>applications on <strong class="keyWord">.NET Framework</strong>. Since it is built on .NET Framework, Blazor WebAssembly allows you to run C# code on the client as well as the server. Therefore, instead of being forced to write <strong class="keyWord">JavaScript</strong> on the client, we can now use C# everywhere.</p>
    <blockquote class="packt_quote">
      <p class="quote">Blazor is red hot!</p>
      <p class="quote">Run C# on the client.</p>
      <p class="quote">Goodbye, JavaScript!</p>
    </blockquote>
    <p class="normal">In this chapter, we will explain the benefits of using the <strong class="keyWord">Blazor</strong> framework. We will introduce the three different Blazor hosting models and discuss both the advantages and disadvantages of each of them. Also, we will discuss the goals of <strong class="keyWord">WebAssembly</strong> and share where it is supported. Finally, we will guide you through the process of setting up your computer to complete the projects in this book.</p>
    <p class="normal">In this chapter, we will cover the following topics:</p>
    <ul>
      <li class="bulletList">Benefits of using the Blazor framework</li>
      <li class="bulletList">Hosting models:<ul>
          <li class="bulletList"><strong class="keyWord">Blazor Server</strong></li>
          <li class="bulletList"><strong class="keyWord">Blazor Hybrid</strong></li>
          <li class="bulletList">Blazor WebAssembly</li>
        </ul>
      </li>
      <li class="bulletList">Differences between the Blazor hosting models</li>
      <li class="bulletList">What is <strong class="keyWord">WebAssembly</strong>?</li>
      <li class="bulletList">Setting up your PC</li>
    </ul>
    <h1 id="_idParaDest-18" class="heading-1">Benefits of using the Blazor framework</h1>
    <p class="normal">Using the Blazor framework offers several benefits. For starters, it is a free and open-source framework built on <a id="_idIndexMarker001"></a>Microsoft’s robust and mature .NET Framework. Also, it is a SPA framework that uses <strong class="keyWord">Razor</strong> syntax and can be developed using Microsoft’s exceptional tooling. Finally, Microsoft is actively supporting and updating the Blazor framework. Let’s examine each of these benefits in detail in the following sections.</p>
    <h2 id="_idParaDest-19" class="heading-2">.NET Framework</h2>
    <p class="normal">The Blazor framework is built on .NET Framework. Therefore, anyone familiar with .NET Framework can <a id="_idIndexMarker002"></a>quickly become productive using <a id="_idIndexMarker003"></a>the Blazor framework. The Blazor framework leverages the robust ecosystem of .NET libraries and NuGet packages from .NET Framework. Also, since the code for both the client and server can be written in C#, the client and server can share code and libraries. For example, the client and server can share the application logic used for data validation.</p>
    <h2 id="_idParaDest-20" class="heading-2">Open source</h2>
    <p class="normal">The Blazor framework is open source. Since Blazor is <a id="_idIndexMarker004"></a>a feature of the <strong class="keyWord">ASP.NET</strong> framework, all <a id="_idIndexMarker005"></a>the source code for Blazor is available on GitHub as part of the <code class="inlineCode">dotnet/aspnetcore</code> repository, which is owned by the <strong class="keyWord">.NET Foundation</strong>. The .NET Foundation is an independent, non-profit organization established to <a id="_idIndexMarker006"></a>support the innovative, commercially <a id="_idIndexMarker007"></a>friendly, open-source ecosystem around the .NET platform. The .NET platform <a id="_idIndexMarker008"></a>has a strong community of over 100,000 contributions from more than 3,700 companies.</p>
    <p class="normal">Since .NET Framework is free, this means that Blazor is also free. There are no fees or licensing costs associated with using Blazor, including for commercial use.</p>
    <h2 id="_idParaDest-21" class="heading-2">SPA framework</h2>
    <p class="normal">The Blazor framework is a SPA framework. As the name implies, a SPA is a web app that consists of a single page. The application dynamically rewrites the areas of the page that have changed <a id="_idIndexMarker009"></a>instead of loading an entirely new page in <a id="_idIndexMarker010"></a>response to each UI update. The goal is faster transitions that make the web app feel more like a native app.</p>
    <p class="normal">When a page is rendered, Blazor creates a render tree that is a graph of the components on the page. It is like the <strong class="keyWord">Document Object Model</strong> (<strong class="keyWord">DOM</strong>) created by the browser. However, it is a <a id="_idIndexMarker011"></a>virtual DOM. Updates to the UI are applied to the virtual DOM and only the differences between the DOM and the virtual DOM are rendered by the browser.</p>
    <h2 id="_idParaDest-22" class="heading-2">Razor syntax</h2>
    <p class="normal"><strong class="keyWord">Razor</strong> is the ASP.NET view engine <a id="_idIndexMarker012"></a>used to create dynamic web pages with C#. Razor is a syntax for <a id="_idIndexMarker013"></a>combining HTML markup with C# code that <a id="_idIndexMarker014"></a>was designed for developer productivity. It allows the developer to use both HTML markup and C# in the same file.</p>
    <p class="normal">Blazor web apps are built using <strong class="keyWord">Razor components</strong>. Razor components are reusable UI elements that <a id="_idIndexMarker015"></a>contain C# code, markup, and other Razor components. Razor components are quite literally the building blocks of the Blazor framework. For more information on Razor components, refer to <em class="chapterRef">Chapter 2</em>, <em class="italic">Building Your First Blazor WebAssembly Application</em>.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal"><strong class="keyWord">Razor Pages</strong> and <strong class="keyWord">MVC</strong> also use the Razor syntax. Unlike Razor Pages and MVC, which render the <a id="_idIndexMarker016"></a>whole page, Razor components only render the DOM <a id="_idIndexMarker017"></a>changes. One way to easily distinguish between them is that Razor components use the <code class="inlineCode">RAZOR</code> file extension, while both MVC and Razor Pages use the <code class="inlineCode">CSHTML</code> file extension.</p>
    </div>
    <p class="normal">The name <a id="_idIndexMarker018"></a>of the Blazor framework has an interesting <a id="_idIndexMarker019"></a>origin story. The term <em class="italic">Blazor</em> is a <a id="_idIndexMarker020"></a>combination of the word <em class="italic">browser</em> and the word <em class="italic">razor</em>.</p>
    <h2 id="_idParaDest-23" class="heading-2">Awesome tooling</h2>
    <p class="normal">You can use <a id="_idIndexMarker021"></a>either <strong class="keyWord">Microsoft Visual Studio</strong> or <strong class="keyWord">Microsoft Visual Studio Code</strong> to <a id="_idIndexMarker022"></a>develop Blazor applications. Microsoft Visual <a id="_idIndexMarker023"></a>Studio is an <strong class="keyWord">integrated development environment</strong> (<strong class="keyWord">IDE</strong>), while Microsoft <a id="_idIndexMarker024"></a>Visual Studio Code is a lightweight, yet powerful, editor. They are both incredible tools for building enterprise applications. As an added bonus, there are versions of both tools that are available for free.</p>
    <h2 id="_idParaDest-24" class="heading-2">Supported by Microsoft</h2>
    <p class="normal">Although the Blazor framework is open source, it is maintained by Microsoft. They continue to make <a id="_idIndexMarker025"></a>large investments in the future of Blazor. The following list includes features that Microsoft is actively working on adding to Blazor:</p>
    <ul>
      <li class="bulletList">Hot reload improvements</li>
      <li class="bulletList"><strong class="keyWord">Ahead-of-time</strong> (<strong class="keyWord">AOT</strong>) compilation performance improvements</li>
      <li class="bulletList">Authentication improvements</li>
      <li class="bulletList">Additional built-in components</li>
      <li class="bulletList">Multithreading</li>
    </ul>
    <p class="normal">There are many benefits associated with using the Blazor framework to develop web applications. Since it <a id="_idIndexMarker026"></a>is built on .NET Framework, it enables developers to use the skills, such as C#, and the tools, such as Visual Studio, that they have already mastered. Also, since it is a SPA framework, Blazor web apps feel like native apps to the user. Finally, Microsoft is making a large investment in the future of Blazor.</p>
    <h1 id="_idParaDest-25" class="heading-1">Hosting models</h1>
    <p class="normal">As we mentioned earlier, Razor components are the building blocks of Blazor applications. Where <a id="_idIndexMarker027"></a>those Razor components are hosted varies depending on the hosting model.</p>
    <p class="normal">Blazor has three different hosting models:</p>
    <ul>
      <li class="bulletList">Blazor Server</li>
      <li class="bulletList">Blazor Hybrid</li>
      <li class="bulletList">Blazor WebAssembly</li>
    </ul>
    <p class="normal">The first hosting model that Microsoft released was Blazor Server. In this hosting model, the Razor components are executed on the server. The second hosting model that Microsoft released, and the topic of this book, is Blazor WebAssembly. In this hosting model, the Razor components are executed on the browser using WebAssembly. The newest hosting model is Blazor Hybrid. Blazor Hybrid allows you to build native client apps by hosting the Razor components in an embedded Web View control.</p>
    <p class="normal">Each hosting model has its own advantages and disadvantages. However, they all rely upon the same underlying architecture. Therefore, it is possible to write and test your code independently of the hosting model. </p>
    <p class="normal">The major differences between the hosting models concern where the code executes, latency, security, payload size, and offline support. The one thing <a id="_idIndexMarker028"></a>that all the hosting models have in common is the ability to execute at near native speed.</p>
    <h2 id="_idParaDest-26" class="heading-2">Blazor Server</h2>
    <p class="normal">As we just <a id="_idIndexMarker029"></a>mentioned, the Blazor Server hosting model <a id="_idIndexMarker030"></a>was the first hosting model released by Microsoft. It was released as part of the .NET Core 3 release in September 2019.</p>
    <p class="normal">The following diagram illustrates the Blazor Server hosting model:</p>
    <figure class="mediaobject"><img src="../Images/B18471_01_01.png" alt=""/></figure>
    <p class="packt_figref">Figure 1.1: Blazor Server</p>
    <p class="normal">In this hosting model, the web app is executed on the server and only updates to the UI are sent to the client’s browser. The browser is treated as a thin client and all the processing occurs on the server. Therefore, this model requires a constant connection to the server. When <a id="_idIndexMarker031"></a>using Blazor Server, UI updates, event <a id="_idIndexMarker032"></a>handling, and JavaScript calls are all handled over an ASP.NET Core <strong class="keyWord">SignalR</strong> connection.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">SignalR is a software <a id="_idIndexMarker033"></a>library that allows the web server to push real-time notifications to the browser. Blazor Server uses it to send UI updates to the browser.</p>
    </div>
    <h3 id="_idParaDest-27" class="heading-3">Advantages of Blazor Server</h3>
    <p class="normal">There are a few advantages of using Blazor Server versus using Blazor WebAssembly. However, the key <a id="_idIndexMarker034"></a>advantage is that everything <a id="_idIndexMarker035"></a>happens on the server. Since the web app runs on the server, it has access to everything on the server. As a result, security and data access are simplified. Also, since everything happens on the server, the assemblies (DLLs) that contain the web app’s code remain on the server.</p>
    <p class="normal">Another advantage of using Blazor Server is that it can run on thin clients and older browsers, such as Internet Explorer, that do not support WebAssembly.</p>
    <p class="normal">Finally, the initial load time for the first use of a web app that is using Blazor Server can be much less than that of a web app that is using Blazor WebAssembly because there are much fewer files to download.</p>
    <h3 id="_idParaDest-28" class="heading-3">Disadvantages of Blazor Server</h3>
    <p class="normal">The Blazor Server hosting model has several disadvantages versus Blazor WebAssembly. The biggest <a id="_idIndexMarker036"></a>disadvantage is that the browser must <a id="_idIndexMarker037"></a>maintain a constant connection to the server. Since there is no offline support, every single user interaction requires a network roundtrip. As a result of all these roundtrips, Blazor Server web apps have higher latency than Blazor WebAssembly web apps and can feel sluggish. Also, network interruptions may cause a client to unexpectedly disconnect.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">Latency is the time <a id="_idIndexMarker038"></a>between the UI action and the time when the UI is updated.</p>
    </div>
    <p class="normal">Another disadvantage of using Blazor Server is that it relies on SignalR for every single UI update. Microsoft’s <a id="_idIndexMarker039"></a>support for SignalR has been improving, but it can be challenging to scale. When too many concurrent connections to the server are open, connection exhaustion can prevent other clients from establishing new connections.</p>
    <p class="normal">Finally, a Blazor Server web <a id="_idIndexMarker040"></a>app must be served from an <strong class="keyWord">ASP.NET Core</strong> <strong class="keyWord">server</strong>.</p>
    <h2 id="_idParaDest-29" class="heading-2">Blazor Hybrid</h2>
    <p class="normal">The Blazor Hybrid <a id="_idIndexMarker041"></a>hosting model is the most recent hosting <a id="_idIndexMarker042"></a>model released by Microsoft. It was released as part of the .NET 6 release in November 2021.</p>
    <p class="normal">The following diagram illustrates the Blazor Hybrid hosting model:</p>
    <figure class="mediaobject"><img src="../Images/B18471_01_02.png" alt=""/></figure>
    <p class="packt_figref">Figure 1.2: Blazor Hybrid</p>
    <p class="normal">In this model, the Razor components run in an embedded Web View control. Blazor Hybrid apps <a id="_idIndexMarker043"></a>include Windows Forms, WPF, and .NET MAUI <a id="_idIndexMarker044"></a>apps. By using the Blazor Hybrid hosting model, your apps have full access to the native capabilities of the devices that you choose to target.</p>
    <h3 id="_idParaDest-30" class="heading-3">Advantages of Blazor Hybrid</h3>
    <p class="normal">The advantage of using this <a id="_idIndexMarker045"></a>model versus Blazor WebAssembly is that it does not require WebAssembly. Also, since the component’s C# code is executed in the host process, the Blazor Hybrid apps have access to the native capabilities of the device.</p>
    <h3 id="_idParaDest-31" class="heading-3">Disadvantages of Blazor Hybrid</h3>
    <p class="normal">The major disadvantage of using Blazor Hybrid is that they are hosted in a Web View component in the <a id="_idIndexMarker046"></a>native app. So, the developer must know how to develop each type of native client app that they want to target. Another disadvantage is that they usually require a server to deliver the app. In contrast, a Blazor WebAssembly app can be downloaded as a set of static files.</p>
    <h2 id="_idParaDest-32" class="heading-2">Blazor WebAssembly</h2>
    <p class="normal">The Blazor WebAssembly hosting <a id="_idIndexMarker047"></a>model is the <a id="_idIndexMarker048"></a>topic of this book.</p>
    <p class="normal"><strong class="keyWord">Blazor WebAssembly 3.2.0</strong> was released <a id="_idIndexMarker049"></a>in May 2020. <strong class="keyWord">Blazor WebAssembly in .NET 5</strong> was released as part of the <strong class="keyWord">.NET 5.0</strong> release in November <a id="_idIndexMarker050"></a>2020. <strong class="keyWord">ASP.NET Core Blazor</strong> was released as part of the .NET 6.0 release in November 2021, and it is a <strong class="keyWord">long-term support</strong> (<strong class="keyWord">LTS</strong>) release. The most recent release of Blazor WebAssembly was <a id="_idIndexMarker051"></a>released as part of the .NET 7 release in November 2022 This book will be using <strong class="keyWord">Blazor WebAssembly in .NET 7</strong> for all the projects.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">LTS releases are supported by Microsoft for at least 3 years after their initial release. Blazor WebAssembly in .NET 7 is a current release rather than an LTS release. Current releases <a id="_idIndexMarker052"></a>get free support and patches for 18 months. We recommend that if you are starting a new project with Blazor WebAssembly, you should use the most recent release.</p>
    </div>
    <p class="normal">The following diagram illustrates the Blazor WebAssembly hosting model:</p>
    <figure class="mediaobject"><img src="../Images/B18471_01_03.png" alt="Graphical user interface, diagram, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 1.3: Blazor WebAssembly</p>
    <p class="normal">In this hosting <a id="_idIndexMarker053"></a>model, the web app is executed <a id="_idIndexMarker054"></a>on the browser. For both the web app and the .NET runtime to run on the browser, the browser must support WebAssembly. WebAssembly is a web standard supported by all modern browsers, including mobile browsers. While Blazor WebAssembly itself does not require a server, the web app may require one for data access and authentication.</p>
    <p class="normal">In the past, the only way to run C# code on the browser was to use a plugin, such as <strong class="keyWord">Silverlight</strong>. Silverlight was a free browser plugin provided by Microsoft. It was very popular until Apple decided <a id="_idIndexMarker055"></a>to forbid the use of any browser plugins on iOS. As a result of Apple’s decision, Silverlight was abandoned by Microsoft.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Blazor does not rely on plugins or recompiling the code into other languages. Instead, it is based on <a id="_idIndexMarker056"></a>open web standards and is supported by all modern browsers, including mobile browsers.</p>
    </div>
    <h3 id="_idParaDest-33" class="heading-3">Advantages of Blazor WebAssembly</h3>
    <p class="normal">Blazor WebAssembly has many advantages. First, since it runs on the browser, it relies on client <a id="_idIndexMarker057"></a>resources instead of server resources. Therefore, the processing is offloaded to the client. Also, unlike Blazor Server, there is no latency due to each UI interaction requiring a roundtrip to the server.</p>
    <p class="normal">Blazor WebAssembly can be used to create a <strong class="keyWord">Progressive Web App </strong>(<strong class="keyWord">PWA</strong>). A PWA is a web app that looks <a id="_idIndexMarker058"></a>and feels like a native application. They provide offline functionality, background activity, native API layers, and push notifications. They can even be listed in the various app stores. By configuring your Blazor WebAssembly app as a PWA, your app can reach anyone, anywhere, on any device with a single code base. For more information on creating a PWA, refer to <em class="chapterRef">Chapter 6</em>, <em class="italic">Building a Weather App as a Progressive Web App (PWA)</em>.</p>
    <p class="normal">Finally, a Blazor WebAssembly web app does not rely on an ASP.NET Core server. In fact, it is possible to <a id="_idIndexMarker059"></a>deploy a Blazor WebAssembly web app via a <strong class="keyWord">Content Delivery Network</strong> (<strong class="keyWord">CDN</strong>).</p>
    <h3 id="_idParaDest-34" class="heading-3">Disadvantages of Blazor WebAssembly</h3>
    <p class="normal">To be fair, there are some disadvantages when using Blazor WebAssembly that should be <a id="_idIndexMarker060"></a>considered. For starters, when using Blazor WebAssembly, the .NET runtime, the <code class="inlineCode">dotnet.wasm</code> file, and your assemblies need to be downloaded to the browser for your web app to work. Therefore, the first time you run a Blazor WebAssembly application it usually takes longer to initially load than an identical Blazor Server application. However, there are strategies that you can use to speed up the initial load time, such as deferring the loading of some of the assemblies until they are needed. Also, this is only an issue during the initial load since subsequent runs of the application will access the files from a local cache.</p>
    <p class="normal">Another disadvantage of Blazor WebAssembly web apps is that they are only as powerful as the <a id="_idIndexMarker061"></a>browser that they run on. Therefore, thin clients are not supported. Blazor WebAssembly can only run on a browser that supports WebAssembly. Luckily, due to a significant amount of coordination between the <strong class="keyWord">World Wide Web Consortium</strong> (<strong class="keyWord">W3C</strong>) and engineers from Apple, Google, Microsoft, and <a id="_idIndexMarker062"></a>Mozilla, all modern browsers support WebAssembly.</p>
    <h2 id="_idParaDest-35" class="heading-2">Hosting model differences</h2>
    <p class="normal">The following table <a id="_idIndexMarker063"></a>indicates the differences between the three models:</p>
    <table id="table001" class="table-container">
      <tbody>
        <tr>
          <td class="table-cell"></td>
          <td class="table-cell">
            <p class="normal">Blazor WebAssembly</p>
          </td>
          <td class="table-cell">
            <p class="normal">Blazor Hybrid</p>
          </td>
          <td class="table-cell">
            <p class="normal">Blazor Server</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Native execution speed</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Executes on client</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell"></td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Executes on server</p>
          </td>
          <td class="table-cell"></td>
          <td class="table-cell"></td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Low latency after initial load time</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell"></td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Fast initial load time</p>
          </td>
          <td class="table-cell"></td>
          <td class="table-cell"></td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Offline support</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell"></td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Does not require a server</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell"></td>
          <td class="table-cell"></td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Requires constant connection to a server</p>
          </td>
          <td class="table-cell"></td>
          <td class="table-cell"></td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Can build PWAs</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell"></td>
          <td class="table-cell"></td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Assemblies sent to client</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell"></td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Assembles remain on server</p>
          </td>
          <td class="table-cell"></td>
          <td class="table-cell"></td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Can access native client features</p>
          </td>
          <td class="table-cell"></td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell"></td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Requires WebAssembly</p>
          </td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
          <td class="table-cell"></td>
          <td class="table-cell"></td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Requires SignalR</p>
          </td>
          <td class="table-cell"></td>
          <td class="table-cell"></td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Can run on thin clients</p>
          </td>
          <td class="table-cell"></td>
          <td class="table-cell"></td>
          <td class="table-cell">
            <p class="normal">X</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p class="packt_figref">Table 1.1: Hosting model differences</p>
    <p class="normal">The Blazor framework provides three different hosting models, Blazor Server, Blazor Hybrid, and Blazor WebAssembly. A Blazor Server web app runs on the server and uses SignalR to serve <a id="_idIndexMarker064"></a>the HTML to the browser. A Blazor Hybrid web app runs in a Web View control in the native app. A Blazor WebAssembly web app runs directly in the browser using WebAssembly. They each have their advantages and disadvantages. However, if you want to create interactive, highly responsive, native-like web apps that can work offline, we recommend Blazor WebAssembly. Let’s learn more about WebAssembly in the next section.</p>
    <h1 id="_idParaDest-36" class="heading-1">What is WebAssembly?</h1>
    <p class="normal">WebAssembly is a binary <a id="_idIndexMarker065"></a>instruction format that allows code written in high-level languages, such as C#, to run on the browser at near-native speed. To run .NET binaries in a web browser, it uses a version of the .NET runtime that has been compiled to WebAssembly. You can think of it as executing natively compiled code in a browser.</p>
    <p class="normal">WebAssembly is an open standard developed by a W3C Community Group. It was originally announced in 2015, and the first browser that supported it was released in 2017.</p>
    <h2 id="_idParaDest-37" class="heading-2">WebAssembly goals</h2>
    <p class="normal">When WebAssembly was originally <a id="_idIndexMarker066"></a>being developed, there were four main design goals for the project. This is a list of the original goals for WebAssembly:</p>
    <ul>
      <li class="bulletList">Fast and efficient</li>
      <li class="bulletList">Safe</li>
      <li class="bulletList">Open</li>
      <li class="bulletList">Don’t break the web</li>
    </ul>
    <p class="normal">WebAssembly is fast and efficient. It is designed to allow developers to write code in any language that can then be compiled to run in the browser. Since the code is compiled, it is fast and performs at near-native speed.</p>
    <p class="normal">WebAssembly is safe. It does not allow direct interaction with the browser’s DOM. Instead, it runs in its own memory-safe, sandboxed execution environment. You must use JavaScript interop to interact with the DOM. The project in <em class="chapterRef">Chapter 5</em>, <em class="italic">Building a Local Storage Service Using JavaScript Interoperability (JS interop)</em>,<em class="italic"> </em>will teach you how to use JavaScript interop.</p>
    <p class="normal">WebAssembly is open. Although it is a low-level assembly language, it can be edited and debugged by hand.</p>
    <p class="normal">WebAssembly didn’t break <a id="_idIndexMarker067"></a>the web. It is a web standard that is designed to work with other web technologies. Also, WebAssembly modules can access the same Web APIs that are accessible from JavaScript.</p>
    <p class="normal">Overall, WebAssembly was able to meet all of the original goals and rapidly gained support from all of the modern browsers.</p>
    <h2 id="_idParaDest-38" class="heading-2">WebAssembly support</h2>
    <p class="normal">As mentioned earlier, WebAssembly runs on all modern browsers, including mobile browsers. As you can see <a id="_idIndexMarker068"></a>from the following table, all current versions of the most popular browsers are compatible with WebAssembly:</p>
    <table id="table002" class="table-container">
      <tbody>
        <tr>
          <td class="table-cell">
            <p class="normal">Browser</p>
          </td>
          <td class="table-cell">
            <p class="normal">Version</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Microsoft Edge</p>
          </td>
          <td class="table-cell">
            <p class="normal">Current</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Mozilla Firefox, including Android</p>
          </td>
          <td class="table-cell">
            <p class="normal">Current</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Google Chrome, including Android</p>
          </td>
          <td class="table-cell">
            <p class="normal">Current</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Safari, including iOS</p>
          </td>
          <td class="table-cell">
            <p class="normal">Current</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Opera, including Android</p>
          </td>
          <td class="table-cell">
            <p class="normal">Current</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Microsoft Internet Explorer</p>
          </td>
          <td class="table-cell">
            <p class="normal">Not Supported</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p class="packt_figref">Table 1.2: WebAssembly browser compatibility</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Microsoft Internet Explorer is no longer supported by Microsoft as of June 15, 2022. It does not support WebAssembly and will never support WebAssembly. </p>
    </div>
    <p class="normal">WebAssembly is a web <a id="_idIndexMarker069"></a>standard that allows developers to run code written in any language in the browser. It is supported by all modern browsers.</p>
    <p class="normal">Now that we have discussed the benefits of using the Blazor framework and compared the various hosting models, it’s time to start developing using the Blazor WebAssembly framework. However, before we can get started, you need to set up your PC.</p>
    <h1 id="_idParaDest-39" class="heading-1">Setting up your PC</h1>
    <p class="normal">For the projects in <a id="_idIndexMarker070"></a>this book, we use Microsoft Visual Studio Community 2022, .NET 7, Microsoft SQL Server 2022 Express Edition, and Microsoft Azure.</p>
    <p class="normal">All the projects are built using <strong class="keyWord">Microsoft</strong> <strong class="keyWord">Visual Studio Community 2022 (64-bit) – Current Version</strong> 17.4.2 with the ASP.NET and Web Development workload. If you need to install Microsoft Visual Studio Community 2022, follow the directions in the <em class="italic">Installing Microsoft Visual Studio Community Edition</em> section later in this chapter.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">Although we are using Microsoft Visual Studio Community 2022, any edition of Microsoft Visual Studio 2022 can be used to complete the projects in this book. Microsoft Visual Studio Code can also be used. However, all the screenshots are from Microsoft Visual Studio Community 2022.</p>
    </div>
    <p class="normal">Blazor WebAssembly in .NET 7 requires .NET 7.0. To determine the version of .NET that is running <a id="_idIndexMarker071"></a>on your computer, open <strong class="keyWord">Command Prompt</strong> and enter the following command:</p>
    <pre class="programlisting con"><code class="hljs-con">dotnet –-version
</code></pre>
    <p class="normal">If your computer is not running .NET 7.0 or higher, follow the directions in the <em class="italic">Installing .NET 7.0</em> section later in this chapter.</p>
    <p class="normal"><em class="italic">Chapters 3</em> and <em class="italic">10</em> use Microsoft Azure. <em class="italic">Chapter 3</em> uses Microsoft Azure to publish a Blazor WebAssembly application and <em class="italic">Chapter 10</em> uses Microsoft Azure Active Directory to secure a Blazor WebAssembly application.</p>
    <p class="normal">The final two projects in this book use <strong class="keyWord">Microsoft</strong> <strong class="keyWord">SQL Server 2022 Express Edition</strong> as the backend database. If you need to install Microsoft SQL Server Express Edition, follow the directions in the <em class="italic">Installing Microsoft SQL Server Express</em> section later in this chapter.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">Although we are using Microsoft SQL Server 2022 Express Edition, any year or edition of SQL Server can be used to complete the projects in this book.</p>
    </div>
    <h2 id="_idParaDest-40" class="heading-2">Installing Microsoft Visual Studio Community Edition</h2>
    <p class="normal">Microsoft Visual <a id="_idIndexMarker072"></a>Studio Community <a id="_idIndexMarker073"></a>Edition is the free edition of Microsoft Visual Studio. To install Microsoft Visual Studio Community Edition, perform the following steps:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Download the <strong class="screenText">Visual Studio installer</strong> from <a href="https://visualstudio.microsoft.com"><span class="url">https://visualstudio.microsoft.com</span></a>.</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_01_04.png" alt="Text

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 1.4: Download Visual Studio selector</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="2">Once the <a id="_idIndexMarker074"></a>download is <a id="_idIndexMarker075"></a>complete, run the installer to complete the installation. </li>
      <li class="numberedList">During the first step in the installation process, the Visual Studio installer will check the system for existing versions of Visual Studio. Once the installer has finished checking for installed versions, it will open the following installation dialog:</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_01_05.png" alt="Graphical user interface, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 1.5: The Visual Studio installer</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="4">Select <a id="_idIndexMarker076"></a>the <strong class="screenText">ASP.NET and web development</strong> <a id="_idIndexMarker077"></a>workload and click the <strong class="screenText">Install</strong> button to complete the installation.</li>
    </ol>
    <h2 id="_idParaDest-41" class="heading-2">Installing .NET 7.0</h2>
    <p class="normal">To <a id="_idIndexMarker078"></a>install .NET 7.0, perform the following steps:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Download <a id="_idIndexMarker079"></a>the <strong class="screenText">.NET 7.0</strong> installer from <a href="https://dotnet.microsoft.com/download/dotnet/7.0"><span class="url">https://dotnet.microsoft.com/download/dotnet/7.0</span></a>. We are using the <strong class="keyWord">Windows x64 SDK Installer</strong>.</li>
      <li class="numberedList">Once the download completes, run the installer to complete the installation of .NET 7.0 on your computer.</li>
      <li class="numberedList">Open <strong class="screenText">Command Prompt</strong> and enter the following command to verify that your computer is now running .NET 7.0:
        <pre class="programlisting code"><code class="hljs-code">dotnet –-version
</code></pre>
      
    <p class="normal">The following <a id="_idIndexMarker080"></a>screenshot is from a computer that is <a id="_idIndexMarker081"></a>running .NET 7.0:</p> 
    <figure class="mediaobject"><img src="../Images/B18471_01_06.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 1.6: .NET version</p></li>
   </ol>
    <h2 id="_idParaDest-42" class="heading-2">Installing Microsoft SQL Server Express</h2>
    <p class="normal">Microsoft SQL Server Express is <a id="_idIndexMarker082"></a>the free edition <a id="_idIndexMarker083"></a>of Microsoft SQL Server. To install <a id="_idIndexMarker084"></a>Microsoft SQL Server Express, do the following:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Download the Microsoft SQL Server installer for <strong class="screenText">SQL Server Express</strong> from <a href="https://www.microsoft.com/en-us/sql-server/sql-server-downloads"><span class="url">https://www.microsoft.com/en-us/sql-server/sql-server-downloads</span></a>.</li>
      <li class="numberedList">After the download completes, run the SQL Server installer.</li>
      <li class="numberedList">Select the <strong class="screenText">Basic</strong> installation type:</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_01_07.png" alt="Graphical user interface

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 1.7: The SQL Server installer</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="4">Click <a id="_idIndexMarker085"></a>the <strong class="screenText">Accept</strong> button to accept the <a id="_idIndexMarker086"></a>Microsoft SQL Server License Terms.</li>
      <li class="numberedList">Click the <strong class="screenText">Install</strong> button to complete the installation.
    <p class="normal">The following screenshot shows the dialog that appears after SQL Server Express has been successfully installed:</p>
    <figure class="mediaobject"><img src="../Images/B18471_01_08.png" alt=""/></figure>
    <p class="packt_figref">Figure 1.8: SQL Server Express Edition</p></li>
    </ol>
    <h2 id="_idParaDest-43" class="heading-2">Create a Microsoft Azure account</h2>
    <p class="normal">Microsoft Azure is Microsoft’s <a id="_idIndexMarker087"></a>cloud platform and it offers over 200 products and cloud services. You can <a id="_idIndexMarker088"></a>use it to run <a id="_idIndexMarker089"></a>and manage applications with the tools and frameworks of your choice.</p>
    <p class="normal">If you do not already have a Microsoft Azure account, you can create a free account. Each free account comes with a generous $200 credit to get you started and over 55+ free services.</p>
    <figure class="mediaobject"><img src="../Images/B18471_01_09.png" alt="Graphical user interface, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 1.9: Microsoft Azure</p>
    <p class="normal">To create a free Microsoft Azure account, do the following:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Navigate to the Microsoft Azure page, <a href="https://azure.microsoft.com/"><span class="url">https://azure.microsoft.com/</span></a>.</li>
      <li class="numberedList">Click the <strong class="screenText">Free account</strong> button.</li>
      <li class="numberedList">Click the <strong class="screenText">Start free</strong> button.</li>
      <li class="numberedList">Complete the agreement and click the <strong class="screenText">Sign up</strong> button.</li>
    </ol>
    <p class="normal">To complete all the <a id="_idIndexMarker090"></a>projects in this book, you will need a code <a id="_idIndexMarker091"></a>editor, such as Microsoft Visual Studio Community 2022, .NET 7.0, Microsoft Azure, and Microsoft SQL Server. In this chapter, we showed you how to install Visual Studio 2022 Community Edition, .NET 7.0, and SQL Server 2022 Express Edition. We also showed you how to open a free Microsoft Azure account.</p>
    <h1 id="_idParaDest-44" class="heading-1">Summary</h1>
    <p class="normal">After completing this chapter, you should understand the benefits of using Blazor WebAssembly versus other Blazor hosting models and be prepared to complete the projects in this book.</p>
    <p class="normal">In this chapter, we introduced the Blazor framework. The Blazor framework is built on .NET Framework and allows web developers to use C# on both the client and the server of a web app.</p>
    <p class="normal">After that, we compared Blazor WebAssembly with both Blazor Server and Blazor Hybrid. All three hosting models are used to host Razor components. They each have their own advantages and disadvantages. We prefer Blazor WebAssembly. </p>
    <p class="normal">In the last part of the chapter, we explained how to set up your computer with Microsoft Visual Studio Community Edition, .NET 7.0, and Microsoft SQL Server Express and how to open a Microsoft Azure account, all of which are required to complete the projects in this book.</p>
    <p class="normal">Now that your computer is set up to complete the projects in this book, it is time to get started. In the next chapter, you will create your first Blazor WebAssembly web app.</p>
    <h1 id="_idParaDest-45" class="heading-1">Questions</h1>
    <p class="normal">The following questions are provided for your consideration:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Which of the following hosting models requires a constant connection to a server: Blazor WebAssembly, Blazor Server, or Blazor Hybrid?</li>
      <li class="numberedList">Does using Blazor WebAssembly mean that you will never need to write JavaScript ever again?</li>
      <li class="numberedList">Does Blazor WebAssembly require any plugins to be installed on the browser?</li>
      <li class="numberedList">How much does it cost to get started developing with Blazor WebAssembly?</li>
    </ol>
    <h1 id="_idParaDest-46" class="heading-1">Further reading</h1>
    <p class="normal">The following resources provide more information concerning the topics in this chapter:</p>
    <ul>
      <li class="bulletList">For more information on Blazor, refer to <a href="https://blazor.net"><span class="url">https://blazor.net</span></a>.</li>
      <li class="bulletList">For more information on the .NET Foundation, refer to <a href="https://dotnetfoundation.org"><span class="url">https://dotnetfoundation.org</span></a>.</li>
      <li class="bulletList">For more information on the ASP.NET repository on GitHub, refer to <a href="https://github.com/dotnet/aspnetcore"><span class="url">https://github.com/dotnet/aspnetcore</span></a>.</li>
      <li class="bulletList">For general information on WebAssembly, refer to <a href="https://webassembly.org"><span class="url">https://webassembly.org</span></a>.</li>
      <li class="bulletList">For more information on browser compatibility with WebAssembly, refer to <a href="https://caniuse.com/?search=wasm"><span class="url">https://caniuse.com/?search=wasm</span></a>.</li>
      <li class="bulletList">For more information on Razor Pages, refer to <a href="https://learn.microsoft.com/en-us/aspnet/core/razor-pages"><span class="url">https://learn.microsoft.com/en-us/aspnet/core/razor-pages</span></a>.</li>
    </ul>
  </div>
  <div id="_idContainer031" class="Basic-Text-Frame">
    <h1 id="_idParaDest-47" class="heading-1">Join our community on Discord</h1>
    <p class="normal">Join our community’s Discord space for discussions with the author and other readers:</p>
    <p class="normal"><a href="https://packt.link/BlazorWASM2e"><span class="url">https://packt.link/BlazorWASM2e</span></a></p>
    <p class="normal"><img src="../Images/Discord_QR.png" alt=""/></p>
  </div>
</body>
</html>