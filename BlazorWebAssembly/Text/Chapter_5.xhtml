<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>Chapter_5</title>
  <link href="../Styles/syntax-highlighting.css" rel="stylesheet" type="text/css"/>
  <link href="../Styles/epub.css" rel="stylesheet" type="text/css"/>
</head>

<body id="Chapter_5" lang="en-US" xml:lang="en-US">
  <div id="_idContainer160" class="Basic-Text-Frame">
    <h1 class="chapterNumber">5</h1>
    <h1 id="_idParaDest-152" class="chapterTitle">Building a Local Storage Service Using JavaScript Interoperability (JS Interop)</h1>
    <p class="normal">The Blazor WebAssembly framework makes it possible for us to run C# code on the browser. However, there are some scenarios that C# simply cannot handle, and for those scenarios, we need to use JavaScript functions.</p>
    <p class="normal">In this chapter, we will learn how to use JavaScript with Blazor WebAssembly. We will learn how to invoke a JavaScript function from a .NET method with and without a return value. Conversely, we will learn how to invoke a .NET method from a JavaScript function. We will accomplish both scenarios by using <strong class="keyWord">JavaScript interop</strong> (<strong class="keyWord">JS interop</strong>). Finally, we will learn how to store data on the browser by using the Web Storage API for JavaScript.</p>
    <p class="normal">The project that we will create in this chapter will be a local storage service that will read and write to the application’s local storage. To access the application’s local storage, we will use JavaScript. We will also create a test component to test the local storage service. The test component will use JavaScript to display text in a JavaScript alert box.</p>
    <blockquote class="packt_quote">
      <p class="quote">It is sad, but true.</p>
      <p class="quote">We may not like JavaScript,</p>
      <p class="quote">but we still need it!</p>
    </blockquote>
    <p class="normal">In this chapter, we will cover the following topics:</p>
    <ul>
      <li class="bulletList">Why use JavaScript?</li>
      <li class="bulletList">Exploring JS interop</li>
      <li class="bulletList">Using local storage</li>
      <li class="bulletList">Creating the local storage service</li>
    </ul>
    <h1 id="_idParaDest-153" class="heading-1">Technical requirements</h1>
    <p class="normal">To complete this project, you need to have Visual Studio 2022 installed on your PC. For instructions on how to install the free Community Edition of Visual Studio 2022, refer to <em class="chapterRef">Chapter 1</em>, <em class="italic">Introduction to Blazor WebAssembly</em>.</p>
    <p class="normal">The source code for this chapter is available in the following GitHub repository: <a href="https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter05"><span class="url">https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter05</span></a>.</p>
    <p class="normal">The Code in Action video is available here: <a href="https://packt.link/Ch5"><span class="url">https://packt.link/Ch5</span></a>.</p>
    <h1 id="_idParaDest-154" class="heading-1">Why use JavaScript?</h1>
    <p class="normal">With Blazor WebAssembly, we can create robust applications without writing any JavaScript. However, there are some scenarios that require the use of JavaScript. For example, we may have a<a id="_idIndexMarker340"></a> favorite JavaScript library that we want to continue to use. Also, without JavaScript, we can’t manipulate the DOM or call any of the JavaScript APIs.</p>
    <p class="normal">This is a partial list of things that we do not have access to directly from the Blazor WebAssembly framework:</p>
    <ul>
      <li class="bulletList"><strong class="keyWord">DOM manipulation</strong></li>
      <li class="bulletList">The <strong class="keyWord">Media Capture and Streams API</strong></li>
      <li class="bulletList">The <strong class="keyWord">WebGL API</strong> (2D and 3D graphics for the web)</li>
      <li class="bulletList">The <strong class="keyWord">Web Storage API</strong> (<code class="inlineCode">localStorage</code> and <code class="inlineCode">sessionStorage</code>)</li>
      <li class="bulletList">The <strong class="keyWord">Geolocation API</strong></li>
      <li class="bulletList">JavaScript pop-up boxes (an alert box, a confirm box, and a prompt box)</li>
      <li class="bulletList">The online status of the browser</li>
      <li class="bulletList">The browser’s history</li>
      <li class="bulletList"><strong class="keyWord">Chart.js</strong></li>
      <li class="bulletList">Other third-party JavaScript libraries</li>
    </ul>
    <p class="normal">The preceding list is not at all comprehensive since there are hundreds of JavaScript libraries that are currently available. However, the key point to remember is that we cannot manipulate the DOM without using JavaScript. Therefore, we will probably always need to use some<a id="_idIndexMarker341"></a> JavaScript in our web apps. Luckily, by using JS interop, this is easy to do.</p>
    <h1 id="_idParaDest-155" class="heading-1">Exploring JS interop</h1>
    <p class="normal">To invoke a JavaScript function from .NET, we use the <code class="inlineCode">IJSRuntime</code> abstraction. This abstraction represents an instance of a JavaScript runtime that the framework can call into. To use <code class="inlineCode">IJSRuntime</code>, we must<a id="_idIndexMarker342"></a> first inject it into our component using dependency injection. For more information on dependency injection, refer to <em class="chapterRef">Chapter 7</em>, <em class="italic">Building a Shopping Cart Using Application State</em>.</p>
    <p class="normal">The <code class="inlineCode">@inject</code> directive is used to inject a dependency into a component. The following code injects <code class="inlineCode">IJSRuntime</code> into the current component:</p>
    <pre class="programlisting code"><code class="hljs-code">@inject IJSRuntime js
</code></pre>
    <p class="normal">The <code class="inlineCode">IJSRuntime</code> abstraction has two methods that we can use to invoke JavaScript functions:</p>
    <ul>
      <li class="bulletList"><strong class="keyWord">InvokeAsync</strong></li>
      <li class="bulletList"><strong class="keyWord">InvokeVoidAsync</strong></li>
    </ul>
    <p class="normal">Both methods are asynchronous. The<a id="_idIndexMarker343"></a> difference between these two methods is that one of them returns a value and the other does not. We can downcast an instance of <code class="inlineCode">IJSRuntime</code> to an instance of <code class="inlineCode">IJSInProcessRuntime</code> to run the method synchronously. Finally, we can invoke a .NET method from JavaScript by decorating the method with <code class="inlineCode">JsInvokable</code>. We will look at examples of each of these methods later in this chapter.</p>
    <p class="normal">However, before we can invoke a JavaScript method, we need to load the JavaScript into our application.</p>
    <h2 id="_idParaDest-156" class="heading-2">Loading JavaScript code</h2>
    <p class="normal">There are a few ways to<a id="_idIndexMarker344"></a> load JavaScript code into a Blazor WebAssembly app. One way is to enter the JavaScript code directly into a <code class="inlineCode">script</code> element in the <code class="inlineCode">body</code> element of the <code class="inlineCode">wwwroot/index.html</code> file. However, instead of entering the JavaScript code directly into the .<code class="inlineCode">html</code> file, we recommend using an external JavaScript file for your JavaScript functions.</p>
    <p class="normal">We can add an external file by referencing it in the <code class="inlineCode">wwwroot./index.html</code> file. The following code references a file called <code class="inlineCode">btwInterop.js</code> that is in the <code class="inlineCode">wwwroot/scripts</code> folder:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">script</span><span class="hljs-tag"> </span><span class="hljs-attr">src</span><span class="hljs-tag">=</span><span class="hljs-string">"scripts/bweInterop.js"</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">script</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">A better way to organize scripts is to collocate an external JavaScript file with a specific component. To add a JavaScript file that is collocated with a specific component, create a JavaScript file in the same folder as the component with the same name as the component, but with a JavaScript file extension. For example, the <code class="inlineCode">MyComponent</code> component that is defined in the <code class="inlineCode">MyComponent.razor</code> file would use <code class="inlineCode">MyComponent.razor.js</code> as its collocated JavaScript file.</p>
    <p class="normal">For the component to <a id="_idIndexMarker345"></a>reference the code in the JavaScript file, the file must be imported into the component during the <code class="inlineCode">OnAfterRenderAsync</code> method of the component. In the following example, the <code class="inlineCode">import</code> identifier is used to import a JavaScript file:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">OnAfterRenderAsync</span><span class="hljs-function">(</span><span class="hljs-built_in">bool</span><span class="hljs-params"> firstRender</span><span class="hljs-function">)</span>
{
    <span class="hljs-keyword">if</span> (firstRender)
    {
        module = <span class="hljs-keyword">await</span> js.InvokeAsync&lt;IJSObjectReference&gt;
                (<span class="hljs-string">"import"</span>, <span class="hljs-string">"</span><span class="hljs-string">./Pages/MyComponent.razor.js"</span>);
    }
}
</code></pre>
    <p class="normal">In the preceding code, the JavaScript file that is being imported is in the <code class="inlineCode">Pages</code> folder and is named <code class="inlineCode">MyComponent.razor.js</code>.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">The collocated JavaScript files will be automatically moved to the <code class="inlineCode">wwwroot</code> folder when the application is published. This approach is called JavaScript isolation and it makes downloading the JavaScript file lazy.</p>
    </div>
    <p class="normal">The preceding code uses the <code class="inlineCode">InvokeAsync</code> method of <code class="inlineCode">IJSRuntime</code> to invoke the JavaScript <code class="inlineCode">import</code> function from .NET.</p>
    <h2 id="_idParaDest-157" class="heading-2">Invoking a JavaScript function from a .NET method</h2>
    <p class="normal">There are two different <a id="_idIndexMarker346"></a>methods of <code class="inlineCode">IJSRutime</code> that we can use to invoke JavaScript from .NET asynchronously:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">InvokeAsync</code></li>
      <li class="bulletList"><code class="inlineCode">InvokeVoidAsync</code></li>
    </ul>
    <p class="normal">To invoke a<a id="_idIndexMarker347"></a> JavaScript function from .NET synchronously, <code class="inlineCode">IJSRutime</code> must<a id="_idIndexMarker348"></a> be downcast to <code class="inlineCode">IJSInProcessRuntime</code>.</p>
    <h3 id="_idParaDest-158" class="heading-3">InvokeAsync</h3>
    <p class="normal">The <code class="inlineCode">InvokeAsync</code> method is an <a id="_idIndexMarker349"></a>asynchronous method that is used to invoke a JavaScript function that returns a value.</p>
    <p class="normal">This<a id="_idIndexMarker350"></a> is the <code class="inlineCode">InvokeAsync</code> method of <code class="inlineCode">IJSRuntime</code>:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-title">ValueTask</span><span class="hljs-function">&lt;</span><span class="hljs-title">TValue</span><span class="hljs-function">&gt; </span><span class="hljs-title">InvokeAsync</span><span class="hljs-function">&lt;</span><span class="hljs-title">TValue</span><span class="hljs-function">&gt;(</span><span class="hljs-built_in">string</span><span class="hljs-params"> identifier,</span>
<span class="hljs-params">                                     </span><span class="hljs-keyword">params</span><span class="hljs-params"> </span><span class="hljs-built_in">object</span><span class="hljs-params">[] args</span><span class="hljs-function">)</span>;
</code></pre>
    <p class="normal">In the preceding code, the first argument is the identifier for the JavaScript function, and the second argument is an array of JSON-serializable arguments. The second argument is optional. The <code class="inlineCode">InvokeAsync</code> method returns a <code class="inlineCode">ValueTask</code> of the <code class="inlineCode">TValue</code> type. <code class="inlineCode">TValue</code> is a JSON-deserialized instance of the JavaScript’s return value.</p>
    <p class="normal">In JavaScript, the <code class="inlineCode">Window</code> object represents the browser’s window. To determine the width and height of the current window, we use the <code class="inlineCode">innerWidth </code>and <code class="inlineCode">innerHeight </code>properties of the <code class="inlineCode">Window</code> object.</p>
    <p class="normal">The following JavaScript code includes a method called <code class="inlineCode">getWindowSize</code> that returns the width and height of the <code class="inlineCode">Window</code> object:</p>
    <p class="normal"><strong class="keyWord">wwwroot/bweInterop.js</strong></p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">var</span> bweInterop = {};
bweInterop.<span class="hljs-property">getWindowSize</span> = <span class="hljs-keyword">function</span> () {
    <span class="hljs-keyword">var</span> size = {
        <span class="hljs-attr">width</span>: <span class="hljs-variable">window</span>.<span class="hljs-property">innerWidth</span>,
        <span class="hljs-attr">height</span>: <span class="hljs-variable">window</span>.<span class="hljs-property">innerHeight</span>
    }
    <span class="hljs-keyword">return</span> size;
}
</code></pre>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">In this book, we will use the <code class="inlineCode">bweInterop</code> namespace for our JavaScript code to both structure our code and minimize the risk of naming conflicts.</p>
    </div>
    <p class="normal">This is the <a id="_idIndexMarker351"></a>definition of the <code class="inlineCode">WindowSize</code> class that is used to store the size of the window in .NET:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WindowSize</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>? Width { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>? Height { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
}
</code></pre>
    <p class="normal">The following <code class="inlineCode">Index</code> component<a id="_idIndexMarker352"></a> invokes the <code class="inlineCode">GetWindowSize</code> method from the <code class="inlineCode">bweInterop.js</code> file:</p>
    <p class="normal"><strong class="keyWord">Pages/Index.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@page "/"
@inject IJSRuntime js
<span class="hljs-tag">&lt;</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>Home<span class="hljs-tag">&lt;/</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>
@if (windowSize.Width != null)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">h2</span><span class="hljs-tag">&gt;</span>
        Window Size: @windowSize.Width x @windowSize.Height
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">h2</span><span class="hljs-tag">&gt;</span>
}
<span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"GetWindowSize"</span><span class="hljs-tag">&gt;</span>Get Window Size<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
@code {
    private WindowSize windowSize = new WindowSize();
    private async Task GetWindowSize()
    {
        windowSize = await js.InvokeAsync<span class="hljs-tag">&lt;</span><span class="hljs-name">WindowSize</span><span class="hljs-tag">&gt;</span>(
            "bweInterop.getWindowSize");
    }
}
</code></pre>
    <p class="normal">In the preceding code, <code class="inlineCode">IJSRuntime</code> is injected into the component. When the <strong class="screenText">Get Window Size</strong> button is clicked, the <code class="inlineCode">GetWindowSize</code> method uses the <code class="inlineCode">InvokeAsync</code> method of <code class="inlineCode">IJSRuntime</code> to invoke the <code class="inlineCode">getWindowSize</code> JavaScript function. The <code class="inlineCode">GetWindowSize</code> JavaScript function returns the width and height of the window to the <code class="inlineCode">windowSize</code> property. Finally, the component regenerates its render tree and applies any changes to the<a id="_idIndexMarker353"></a> browser’s DOM.</p>
    <p class="normal">This is a screenshot <a id="_idIndexMarker354"></a>of the page after the <strong class="screenText">Get Window Size</strong> button has been clicked:</p>
    <figure class="mediaobject"><img src="../Images/B18471_05_01.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 5.1: Window size example</p>
    <p class="normal">The <code class="inlineCode">InvokeSync</code> method of <code class="inlineCode">IJSRuntime</code> is used to call JavaScript functions that return a value. If we do not need to return a value, we can use the <code class="inlineCode">InvokeAsync</code> method instead.</p>
    <h3 id="_idParaDest-159" class="heading-3">InvokeVoidAsync</h3>
    <p class="normal">The <code class="inlineCode">InvokeVoidAsync</code> method is an <a id="_idIndexMarker355"></a>asynchronous method that is used to invoke a JavaScript function that does not<a id="_idIndexMarker356"></a> return a value.</p>
    <p class="normal">This is the <code class="inlineCode">InvokeVoidAsync</code> method of <code class="inlineCode">IJSRuntime</code>:</p>
    <pre class="programlisting code"><code class="hljs-code">InvokeVoidAsync(<span class="hljs-built_in">string</span> identifier, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] args);
</code></pre>
    <p class="normal">Just like the <code class="inlineCode">InvokeAsync</code> method, the first argument is the identifier for the JavaScript function that is being called, and the second argument is an array of JSON-serializable arguments. The second argument is optional.</p>
    <p class="normal">In JavaScript, the <code class="inlineCode">Document</code> object <a id="_idIndexMarker357"></a>represents the root node of the HTML document. The <code class="inlineCode">title</code> property of the <code class="inlineCode">Document</code> object is used to specify the text that appears in the browser’s title bar. Assume that we want to update the browser’s title as we navigate between the components in our Blazor WebAssembly app. To do that, we need to use JavaScript to update the <code class="inlineCode">title</code> property.</p>
    <p class="normal">The following JavaScript <a id="_idIndexMarker358"></a>code exports a function called <code class="inlineCode">setDocumentTitle</code> that sets the <code class="inlineCode">title</code> property of the <code class="inlineCode">Document</code> object to the value provided by the <code class="inlineCode">title</code> argument:</p>
    <p class="normal"><strong class="keyWord">Shared/Document.razor.js</strong></p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title">setDocumentTitle</span>(<span class="hljs-params">title</span>) {
    <span class="hljs-variable">document</span>.<span class="hljs-property">title</span> = title;
}
</code></pre>
    <p class="normal">The preceding code uses an <code class="inlineCode">export</code> statement to export the <code class="inlineCode">setDocumentTitle</code> function.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">The <code class="inlineCode">export</code> statement in JavaScript is used to export functions from JavaScript to be imported into other programs.</p>
    </div>
    <p class="normal">The following <code class="inlineCode">Document</code> component uses the <code class="inlineCode">setDocumentTitle</code> JavaScript function to update the browser’s title bar:</p>
    <p class="normal"><strong class="keyWord">Shared/Document.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@inject IJSRuntime js
@code {
    [<span class="hljs-meta">Parameter</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Title { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; } = <span class="hljs-string">"Home"</span>;
    <span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">OnAfterRenderAsync</span>
<span class="hljs-function">        (</span><span class="hljs-built_in">bool</span><span class="hljs-params"> firstRender</span><span class="hljs-function">)</span>
    {
        <span class="hljs-keyword">if</span> (firstRender)
        {
            IJSObjectReference module =
                <span class="hljs-keyword">await</span> js.InvokeAsync&lt;IJSObjectReference&gt;
                    (<span class="hljs-string">"import"</span>, <span class="hljs-string">"./Shared/Document.razor.js"</span>);
            <span class="hljs-keyword">await</span> module.InvokeVoidAsync
                (<span class="hljs-string">"setDocumentTitle"</span>, Title);
        }
    }
}
</code></pre>
    <p class="normal">In the preceding code, <code class="inlineCode">IJSRuntime</code> is injected into the component. Then, the <code class="inlineCode">OnAfterRenderAsync</code> method <a id="_idIndexMarker359"></a>uses the <code class="inlineCode">InvokeAsync</code> method to import the JavaScript code and the <code class="inlineCode">InvokeVoidAsync</code> method to invoke the <code class="inlineCode">setDocumentTitle</code> JavaScript<a id="_idIndexMarker360"></a> function.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">We are not using the <code class="inlineCode">bweInterop</code> namespace in the collocated JavaScript code to emphasize that it is only referenced by one component.</p>
    </div>
    <p class="normal">The following markup uses the <code class="inlineCode">Document</code> component to update the browser’s title bar to <code class="inlineCode">Home – My App</code>:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">Document</span><span class="hljs-tag"> </span><span class="hljs-attr">Title</span><span class="hljs-tag">=</span><span class="hljs-string">"Home - My App"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
    <p class="normal">The following screenshot shows the resulting document title:</p>
    <figure class="mediaobject"><img src="../Images/B18471_05_02.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 5.2: Updated document title</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">You can use the built-in <code class="inlineCode">PageTitle</code> component to set the title of the page.</p>
    </div>
    <p class="normal">By default, JS interop calls<a id="_idIndexMarker361"></a> are asynchronous. To make synchronous JS interop calls, we need to<a id="_idIndexMarker362"></a> use <code class="inlineCode">IJSInProcessRuntime</code>.</p>
    <h3 id="_idParaDest-160" class="heading-3">IJSInProcessRuntime</h3>
    <p class="normal">So far in this chapter, we <a id="_idIndexMarker363"></a>have only looked at invoking JavaScript functions asynchronously. But we can also<a id="_idIndexMarker364"></a> invoke JavaScript functions synchronously. We do that by downcasting <code class="inlineCode">IJSRuntime</code> to <code class="inlineCode">IJSInProcessRuntime</code>. <code class="inlineCode">IJSInProcessRuntime</code> allows our .NET code to invoke JS interop calls synchronously. This can be advantageous because these calls have less overhead than their asynchronous counterparts.</p>
    <p class="normal">These are the synchronous methods of <code class="inlineCode">IJsInProcessRuntime</code>:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">Invoke</code></li>
      <li class="bulletList"><code class="inlineCode">InvokeVoid</code></li>
    </ul>
    <p class="normal">The following code uses <code class="inlineCode">IJSInProcessRuntime</code> to invoke a JavaScript function synchronously:</p>
    <pre class="programlisting code"><code class="hljs-code">@inject IJSRuntime js
@code {
    <span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-built_in">string</span><span class="hljs-function"> </span><span class="hljs-title">GetGuid</span><span class="hljs-function">()</span>
    {
        <span class="hljs-built_in">string</span> guid = 
            ((IJSInProcessRuntime)js).Invoke&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">"getGuid"</span>);
        <span class="hljs-keyword">return</span> guid;
    }
}
</code></pre>
    <p class="normal">In the preceding code, the <code class="inlineCode">IJsRuntime</code> instance has been downcast to an <code class="inlineCode">IJSInProcessRuntime</code> instance. The <code class="inlineCode">Invoke</code> method of the <code class="inlineCode">IJSInProcessRuntime</code> instance is used to invoke the <code class="inlineCode">getGuid</code> JavaScript method.</p>
    <p class="normal">The <code class="inlineCode">IJSRuntime</code> abstraction provides methods to invoke JavaScript functions directly from .NET methods. They can<a id="_idIndexMarker365"></a> be invoked either asynchronously or synchronously. Invoking a .NET method directly from a JavaScript function requires a special attribute.</p>
    <h2 id="_idParaDest-161" class="heading-2">Invoking a .NET method from a JavaScript function</h2>
    <p class="normal">We can invoke a public .NET<a id="_idIndexMarker366"></a> method from JavaScript by decorating the method with the <code class="inlineCode">JSInvokable</code> attribute.</p>
    <p class="normal">The following .NET method is <a id="_idIndexMarker367"></a>decorated with the <code class="inlineCode">JSInvokable</code> attribute to<a id="_idIndexMarker368"></a> enable it to be invoked from JavaScript:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span> WindowSize windowSize = <span class="hljs-keyword">new</span> WindowSize();
[<span class="hljs-meta">JSInvokable</span>]
<span class="hljs-keyword">public</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">GetWindowSize</span><span class="hljs-function">(</span><span class="hljs-params">WindowSize newWindowSize</span><span class="hljs-function">)</span>
{
    windowSize = newWindowSize;
    StateHasChanged();
}
</code></pre>
    <p class="normal">In the preceding code, the <code class="inlineCode">windowSize</code> property is updated each time the <code class="inlineCode">GetWindowSize</code> method is invoked from JavaScript. After the <code class="inlineCode">windowSize</code> property is updated, the component’s <code class="inlineCode">StateHasChanged</code> method is called to notify the component that its state has changed, and therefore, the component should be re-rendered.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">The <code class="inlineCode">StateHasChanged</code> method of a component is only called automatically for <code class="inlineCode">EventCallback</code> methods. In other cases, it must be called manually to notify the UI that it may need to be re-rendered.</p>
    </div>
    <p class="normal">To invoke a .NET method from JavaScript, we must create a <code class="inlineCode">DotNetObjectReference</code> class for JavaScript to use to locate the .NET method. The <code class="inlineCode">DotNetObjectReference</code> class wraps a JS interop argument, indicating that the value should not be serialized as JSON but instead, should be passed as a reference.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">To avoid memory leaks and allow garbage collection on a component that creates a <code class="inlineCode">DotNetObjectReference</code> class, you must diligently dispose of each instance of <code class="inlineCode">DotNetObjectReference</code>.</p>
    </div>
    <p class="normal">The following code creates a <code class="inlineCode">DotNetObjectReference</code> instance that wraps the <code class="inlineCode">Resize</code> component. The reference<a id="_idIndexMarker369"></a> is then passed to the JavaScript method:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span> DotNetObjectReference&lt;Resize&gt; objRef;
<span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> Task </span><span class="hljs-title">OnAfterRenderAsync</span><span class="hljs-function">(</span><span class="hljs-built_in">bool</span><span class="hljs-params"> firstRender</span><span class="hljs-function">)</span>
{
    <span class="hljs-keyword">if</span> (firstRender)
    {
        objRef = DotNetObjectReference.Create(<span class="hljs-keyword">this</span>);
        <span class="hljs-keyword">await</span> js.InvokeVoidAsync(
            <span class="hljs-string">"bweInterop.registerResizeHandler"</span>,
             objRef);
    }
}
</code></pre>
    <p class="normal">We can invoke a<a id="_idIndexMarker370"></a> method in a .NET component from JavaScript using a reference to the component created with <code class="inlineCode">DotNetObjectReference</code>. In the following JavaScript, the <code class="inlineCode">registerResizeHandler</code> function creates the <code class="inlineCode">resizeHandler</code> function that is called at initialization, and every time the window is resized.</p>
    <p class="normal"><strong class="keyWord">bweInterop.js</strong></p>
    <pre class="programlisting code"><code class="hljs-code">bweInterop.<span class="hljs-property">registerResizeHandler</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">dotNetObjectRef</span>) {
    <span class="hljs-keyword">function</span> <span class="hljs-title">resizeHandler</span>() {
        dotNetObjectRef.<span class="hljs-title">invokeMethodAsync</span>(<span class="hljs-string">'GetWindowSize'</span>,
            {
                <span class="hljs-attr">width</span>: <span class="hljs-variable">window</span>.<span class="hljs-property">innerWidth</span>,
                <span class="hljs-attr">height</span>: <span class="hljs-variable">window</span>.<span class="hljs-property">innerHeight</span>
            });
    };
    <span class="hljs-title">resizeHandler</span>();
    <span class="hljs-variable">window</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-string">"resize"</span>, resizeHandler);
}
</code></pre>
    <p class="normal">In the preceding example, the <code class="inlineCode">invokeMethodAsync</code> function is used to invoke the <code class="inlineCode">GetWindowSize</code> .NET method that was<a id="_idIndexMarker371"></a> decorated with the <code class="inlineCode">JSInvokable</code> attribute.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">You can use either the <code class="inlineCode">invokeMethod</code> function or the <code class="inlineCode">invokeMethodAsync</code> function to invoke .NET instance methods from JavaScript.</p>
    </div>
    <p class="normal">This is the<a id="_idIndexMarker372"></a> complete .NET code for the <code class="inlineCode">Resize</code> component:</p>
    <p class="normal"><strong class="keyWord">Resize.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@page <span class="hljs-string">"/resize"</span>
@inject IJSRuntime js
@implements IDisposable
&lt;PageTitle&gt;Resize&lt;/PageTitle&gt;
@if (windowSize.Width != <span class="hljs-literal">null</span>)
{
        &lt;h2&gt;
            Window Size: @windowSize.Width x @windowSize.Height
        &lt;/h2&gt;
}
@code {
    <span class="hljs-keyword">private</span> DotNetObjectReference&lt;Resize&gt; objRef;
    <span class="hljs-keyword">private</span> WindowSize windowSize = <span class="hljs-keyword">new</span> WindowSize();
    <span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> Task </span><span class="hljs-title">OnAfterRenderAsync</span><span class="hljs-function">(</span>
<span class="hljs-params">        </span><span class="hljs-built_in">bool</span><span class="hljs-params"> firstRender</span><span class="hljs-function">)</span>
    {
        <span class="hljs-keyword">if</span> (firstRender)
        {
            objRef = DotNetObjectReference.Create(<span class="hljs-keyword">this</span>);
            <span class="hljs-keyword">await</span> js.InvokeVoidAsync(
                <span class="hljs-string">"bweInterop.registerResizeHandler"</span>,
                    objRef);
        }
    }
    [<span class="hljs-meta">JSInvokable</span>]
    <span class="hljs-keyword">public</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">GetWindowSize</span><span class="hljs-function">(</span><span class="hljs-params">WindowSize newWindowSize</span><span class="hljs-function">)</span>
    {
        windowSize = newWindowSize;
        StateHasChanged();
    }
    <span class="hljs-keyword">public</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">Dispose</span><span class="hljs-function">()</span>
    {
        objRef?.Dispose();
    }
}
</code></pre>
    <p class="normal">The preceding code for the <code class="inlineCode">Resize</code> component displays the current width and height of the browser. As you resize the <a id="_idIndexMarker373"></a>browser, the displayed values are automatically updated. Also, the <code class="inlineCode">DotNetObjectReference</code> object is disposed of when the component is disposed. To test the <code class="inlineCode">Resize</code> component, press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging. After the <a id="_idIndexMarker374"></a>application starts, navigate to the <code class="inlineCode">/resize</code> page and resize the window.</p>
    <p class="normal">The <code class="inlineCode">IJSRuntime</code> abstraction provides us with a way to invoke JavaScript functions from .NET and to invoke .NET methods from JavaScript. </p>
    <p class="normal">We will be using JavaScript’s Web Storage API to complete the project in this chapter. But before we can use it, we need to understand how it works.</p>
    <h1 id="_idParaDest-162" class="heading-1">Using local storage</h1>
    <p class="normal">The Web Storage API for JavaScript provides mechanisms for browsers to store key/value pairs. For each web browser, the size of data that can be stored in web storage is at least 5 MB per origin. The <code class="inlineCode">localStorage</code> mechanism is defined in the Web Storage API for JavaScript. We need to use JS interop to access the application’s local storage because the Web Storage API requires the use of JavaScript.</p>
    <p class="normal">The application’s local storage is<a id="_idIndexMarker375"></a> scoped to a particular URL. If the user reloads the page or closes and reopens the browser, the contents of local storage are retained. If the user opens multiple tabs, each tab shares the same local storage. The data in local storage is retained until it is explicitly cleared, since it does not have an expiration date.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Data in a <code class="inlineCode">localStorage</code> object that is created when using an <em class="italic">InPrivate</em> window or <em class="italic">Incognito</em> window is cleared when the last tab is closed.</p>
    </div>
    <p class="normal">These are the methods of <code class="inlineCode">localStorage</code>:</p>
    <ul>
      <li class="bulletList"><strong class="keyWord">key</strong>: This method returns the <a id="_idIndexMarker376"></a>name of the indicated key based<a id="_idIndexMarker377"></a> on its position in <code class="inlineCode">localStorage</code>.</li>
      <li class="bulletList"><strong class="keyWord">getItem</strong>: This method returns <a id="_idIndexMarker378"></a>the value for the indicated<a id="_idIndexMarker379"></a> key from <code class="inlineCode">localStorage</code>.</li>
      <li class="bulletList"><strong class="keyWord">setItem</strong>: This <a id="_idIndexMarker380"></a>method takes a<a id="_idIndexMarker381"></a> key and value pair and adds them to <code class="inlineCode">localStorage</code>.</li>
      <li class="bulletList"><strong class="keyWord">removeItem</strong>: This method<a id="_idIndexMarker382"></a> removes the indicated<a id="_idIndexMarker383"></a> key from <code class="inlineCode">localStorage</code>.</li>
      <li class="bulletList"><strong class="keyWord">clear</strong>: This <a id="_idIndexMarker384"></a>method<a id="_idIndexMarker385"></a> clears <code class="inlineCode">localStorage</code>.</li>
    </ul>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal"><code class="inlineCode">sessionStorage</code> is also defined in the Web Storage API. Unlike <code class="inlineCode">localStorage</code>, which shares its value between multiple browser tabs, <code class="inlineCode">sesssionStorage</code> is scoped to an individual browser tab. Therefore, if the user reloads the page, the data persists, but if the user closes the tab (or the browser), the data is cleared.</p>
    </div>
    <p class="normal">To view the contents of the application’s local storage, open the browser’s developer tools by pressing <em class="keystroke">F12</em> and selecting the <strong class="screenText">Application</strong> tab. Select <strong class="screenText">Local Storage</strong> in the <strong class="screenText">Storage</strong> section of the menu <a id="_idIndexMarker386"></a>on the left. The following screenshot shows the <strong class="screenText">Application</strong> tab of the <strong class="screenText">DevTools</strong> dialog in Microsoft Edge:</p>
    <figure class="mediaobject"><img src="../Images/B18471_05_03.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 5.3: Local Storage</p>
    <p class="normal">By using the Web Storage API, it is easy to store data in the browser and retrieve it. Now, let’s get a quick overview of the project that we are going to build in this chapter.</p>
    <h1 id="_idParaDest-163" class="heading-1">Creating the local storage service</h1>
    <p class="normal">In this chapter, we will build a<a id="_idIndexMarker387"></a> local storage service. The service will both write to and read from the application’s local storage. We will use JS interop to accomplish this. We will use the <code class="inlineCode">InvokeVoidAsync</code> method to write to local storage and the <code class="inlineCode">InvokeAsync</code> method to read from local storage. Finally, we will create a component to test our service. </p>
    <p class="normal">The test component will both read and write local storage. It will use JS interop to display the contents of local storage in a JavaScript alert box.</p>
    <p class="normal">The following screenshot shows both the test component and the application’s local storage. When the <strong class="screenText">Save to Local Storage</strong> button is clicked, the value of the text in the <strong class="screenText">localStorageData</strong> textbox is <a id="_idIndexMarker388"></a>saved to local storage.</p>
    <figure class="mediaobject"><img src="../Images/B18471_05_04.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 5.4: Local Storage Service test page</p>
    <p class="normal">When the <strong class="screenText">Read from Local Storage</strong> button is clicked, the value of <strong class="screenText">localStorageData</strong> is displayed in a JavaScript alert box. The following screenshot shows a sample of an alert that is displaying the value in local storage:</p>
    <figure class="mediaobject"><img src="../Images/B18471_05_05.png" alt="Text

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 5.5: Read from Local Storage</p>
    <p class="normal">The build time<a id="_idIndexMarker389"></a> for this project is approximately 60 minutes.</p>
    <h2 id="_idParaDest-164" class="heading-2">Project overview</h2>
    <p class="normal">The <code class="inlineCode">LocalStorage</code> project will be created by using Microsoft’s <strong class="keyWord">Blazor WebAssembly App Empty</strong> project template to create an empty Blazor WebAssembly project. First, we will add a JavaScript file with the <a id="_idIndexMarker390"></a>JavaScript functions that our service will need to use to update the application’s local storage. Next, we will create the interface and class with the .NET methods that will invoke the JavaScript functions. Finally, we will test our service by adding a collocated JavaScript file.</p>
    <h2 id="_idParaDest-165" class="heading-2">Getting started with the project</h2>
    <p class="normal">We need to create a<a id="_idIndexMarker391"></a> new Blazor WebAssembly app. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open Visual Studio 2022.</li>
      <li class="numberedList">Click the <strong class="screenText">Create a new project</strong> button.</li>
      <li class="numberedList">Press <em class="keystroke">Alt</em>+<em class="keystroke">S</em> to enter the <strong class="screenText">Search for templates</strong> textbox.</li>
      <li class="numberedList">Enter <code class="inlineCode">Blazor</code> and press the <em class="keystroke">Enter</em> key.
    <p class="normal">The following screenshot shows the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template:</p>
    <figure class="mediaobject"><img src="../Images/B18471_05_06.png" alt="Graphical user interface, text, application, chat or text message

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 5.6: Blazor WebAssembly App Empty project template</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Select the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template and click the <strong class="screenText">Next</strong> button.</li>
      <li class="numberedList">Enter <code class="inlineCode">LocalStorage</code> in the <strong class="screenText">Project name</strong> textbox and click the <strong class="screenText">Next</strong> button.
    <p class="normal">This is a<a id="_idIndexMarker392"></a> screenshot of the dialog used to configure our new project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_05_07.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 5.7: Configure your new project dialog</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">In the preceding example, we placed the <code class="inlineCode">LocalStorage</code> project into the <code class="inlineCode">E:/Blazor</code> folder. However, the location of this project is not important.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Select <strong class="screenText">.NET 7.0</strong> as the <strong class="screenText">Framework</strong> version to use.</li>
      <li class="numberedList">Check the <strong class="screenText">Configure for HTTPS</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">ASP.NET Core Hosted</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">Progressive Web Application</strong> checkbox.
    <p class="normal">This is a screenshot <a id="_idIndexMarker393"></a>of the dialog used to collect additional information about our new project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_05_08.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 5.8: Additional information dialog</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="11">Click the <strong class="screenText">Create</strong> button.</li>
    </ol>
    <p class="normal">We have created an empty <code class="inlineCode">LocalStorage</code> Blazor WebAssembly project. Let’s now start adding the JavaScript <a id="_idIndexMarker394"></a>functions that we will need for reading and writing to local storage.</p>
    <h2 id="_idParaDest-166" class="heading-2">Writing JavaScript to access local storage</h2>
    <p class="normal">We need to write the JavaScript <a id="_idIndexMarker395"></a>functions that will read to and write from the application’s local storage. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">wwwroot</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Folder</strong> option from the menu.</li>
      <li class="numberedList">Name the new folder <code class="inlineCode">scripts</code>.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">scripts</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Item</strong> option from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">javascript</code> in the <strong class="screenText">Search</strong> box.</li>
      <li class="numberedList">Select <strong class="screenText">JavaScript File</strong>.</li>
      <li class="numberedList">Name the JavaScript file <code class="inlineCode">bweInterop.js</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Enter the following JavaScript:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">var</span> bweInterop = {};
bweInterop.<span class="hljs-property">setLocalStorage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">key, data</span>) {
    <span class="hljs-variable">localStorage</span>.<span class="hljs-title">setItem</span>(key, data);
}
bweInterop.<span class="hljs-property">getLocalStorage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) {
    <span class="hljs-keyword">return</span> <span class="hljs-variable">localStorage</span>.<span class="hljs-title">getItem</span>(key);
}
</code></pre>
      
    <p class="normal">The preceding JavaScript includes a <code class="inlineCode">setLocalStorage</code> function that writes to local storage, and the <code class="inlineCode">getLocalStorage</code> function, which reads from local storage.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Open the <code class="inlineCode">wwwroot/index.html</code> file.</li>
      <li class="numberedList">Add the following markup to the bottom of the <code class="inlineCode">body</code> element:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">script</span><span class="hljs-tag"> </span><span class="hljs-attr">src</span><span class="hljs-tag">=</span><span class="hljs-string">"scripts/bweInterop.js"</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">script</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
    </ol>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">In the <code class="inlineCode">wwwroot/index.html</code> file, the <code class="inlineCode">script</code> tag that references your custom Java-Script should be after the Blazor script reference.</p>
    </div>
    <p class="normal">Now we need to add the .NET code that <a id="_idIndexMarker396"></a>will invoke these JavaScript functions. First, we will create the interface for our service.</p>
    <h2 id="_idParaDest-167" class="heading-2">Adding the ILocalStorageService interface</h2>
    <p class="normal">We need to create an interface for our <a id="_idIndexMarker397"></a>service. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">LocalStorage</code> project and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Folder</strong> option from the menu.</li>
      <li class="numberedList">Name the new folder <code class="inlineCode">Services</code>.</li>
      <li class="numberedList">Right-click the <strong class="screenText">Services</strong> folder and then select the <strong class="screenText">Add</strong>, <strong class="screenText">New Item</strong> option from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">interface</code> in the <strong class="screenText">Search</strong> box.</li>
      <li class="numberedList">Select <strong class="screenText">Interface</strong>.</li>
      <li class="numberedList">Name the file <code class="inlineCode">ILocalStorageService</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Add the following code to the <code class="inlineCode">ILocalStorageService</code> interface:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-function">ValueTask </span><span class="hljs-title">SetItemAsync</span><span class="hljs-function">&lt;</span><span class="hljs-title">T</span><span class="hljs-function">&gt;(</span><span class="hljs-built_in">string</span><span class="hljs-params"> key, T item</span><span class="hljs-function">)</span>;
ValueTask&lt;T?&gt; GetItemAsync&lt;T&gt;(<span class="hljs-built_in">string</span> key);
</code></pre>
      
    <p class="normal">The preceding methods will be used to set the value of local storage.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Open the <code class="inlineCode">Program.cs</code> file.</li>
      <li class="numberedList">Add the following <code class="inlineCode">using</code> statement:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">using</span> LocalStorage.Services;
</code></pre>
      </li>
      <li class="numberedList">Add the following code after the code that registers <code class="inlineCode">HttpClient</code>:
        <pre class="programlisting code"><code class="hljs-code">builder.Services.AddScoped
    &lt;ILocalStorageService, LocalStorageService&gt;(); 
</code></pre>
      </li>
    </ol>
    <p class="normal">The preceding code registers the <code class="inlineCode">LocalStorageService</code> in the dependency injection container. For more information on dependency injection, refer to <em class="chapterRef">Chapter 7</em>, <em class="italic">Building a Shopping Cart Using Application State.</em></p>
    <p class="normal">We have defined the abstract <a id="_idIndexMarker398"></a>methods of the service and registered it with the application. Now it’s time to create the <code class="inlineCode">LocalStorageService</code> class.</p>
    <h2 id="_idParaDest-168" class="heading-2">Creating the LocalStorageService class</h2>
    <p class="normal">We need to create a<a id="_idIndexMarker399"></a> new class based on the interface we just created. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <strong class="screenText">Services</strong> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Class</strong> option from the menu.</li>
      <li class="numberedList">Name the new class <code class="inlineCode">LocalStorageService</code>.</li>
      <li class="numberedList">Update the <code class="inlineCode">LocalStorageService</code> class to inherit from <code class="inlineCode">ILocalStorageService</code>:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">LocalStorageService</span> : <span class="hljs-title">ILocalStorageService</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following code to the <code class="inlineCode">LocalStorageService</code> class:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span> IJSRuntime js;
<span class="hljs-keyword">public</span><span class="hljs-function"> </span><span class="hljs-title">LocalStorageService</span><span class="hljs-function">(</span><span class="hljs-params">IJSRuntime JsRuntime</span><span class="hljs-function">)</span>
{
    js = JsRuntime;
}
</code></pre>
      
    <p class="normal">The preceding code defines the constructor for the <code class="inlineCode">LocalStorageService</code> class. </p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Add the <code class="inlineCode">SetItemAsync</code> method to the <code class="inlineCode">LocalStorageService</code> class:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> ValueTask </span><span class="hljs-title">SetItemAsync</span><span class="hljs-function">&lt;</span><span class="hljs-title">T</span><span class="hljs-function">&gt;(</span><span class="hljs-built_in">string</span><span class="hljs-params"> key, T item</span><span class="hljs-function">)</span>
{
    <span class="hljs-keyword">await</span> js.InvokeVoidAsync(
        <span class="hljs-string">"bweInterop.setLocalStorage"</span>,
         key,
         JsonSerializer.Serialize(item));
}
</code></pre>
      
    <p class="normal">The <code class="inlineCode">SetItemAsync</code> method invokes the <code class="inlineCode">bweInterop.setLocalStorage</code> JavaScript function with a key and a serialized version of the item to be stored in <code class="inlineCode">localStorage</code>.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Update the <code class="inlineCode">GetItemAsync</code> method to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> </span><span class="hljs-title">ValueTask</span><span class="hljs-function">&lt;</span><span class="hljs-title">T</span><span class="hljs-function">?&gt; </span><span class="hljs-title">GetItemAsync</span><span class="hljs-function">&lt;</span><span class="hljs-title">T</span><span class="hljs-function">&gt;(</span><span class="hljs-built_in">string</span><span class="hljs-params"> key</span><span class="hljs-function">)</span>
{
    <span class="hljs-keyword">var</span> json = <span class="hljs-keyword">await</span> js.InvokeAsync&lt;<span class="hljs-built_in">string</span>&gt;
        (<span class="hljs-string">"bweInterop.getLocalStorage"</span>, key);
    <span class="hljs-keyword">return</span> JsonSerializer.Deserialize&lt;T&gt;(json);
}
</code></pre>
      
    <p class="normal">The <code class="inlineCode">GetItemAsync</code> method <a id="_idIndexMarker400"></a>invokes the <code class="inlineCode">bweInterop.getLocalStorage</code> JavaScript function with a key. If <code class="inlineCode">bweInterop.getLocalStorage</code> returns a value, that value is deserialized and returned.</p></li>
    </ol>
    <p class="normal">We have completed our service. Now we need to test it.</p>
    <h2 id="_idParaDest-169" class="heading-2">Creating the DataInfo class</h2>
    <p class="normal">The <code class="inlineCode">DataInfo</code> class will be used to <a id="_idIndexMarker401"></a>hold the data that we read and write from the application’s local storage:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">LocalStorage</code> project and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Folder</strong> option from the menu.</li>
      <li class="numberedList">Name the new folder <code class="inlineCode">Models</code>.</li>
      <li class="numberedList">Right-click the <strong class="screenText">Models</strong> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Class</strong> option from the menu.</li>
      <li class="numberedList">Name the new class <code class="inlineCode">DataInfo</code>.</li>
      <li class="numberedList">Add the following properties to the <code class="inlineCode">DataInfo</code> class:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? Value { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Length { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">public</span> DateTime Timestamp { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      </li>
    </ol>
    <p class="normal">The <code class="inlineCode">DataInfo</code> class includes the data, information about the length of the data, and the date and time the data was updated.</p>
    <p class="normal">Now that we have defined an object to hold our data, it’s time to test writing data to the application’s local storage.</p>
    <h2 id="_idParaDest-170" class="heading-2">Writing to local storage</h2>
    <p class="normal">We need to test writing to the <a id="_idIndexMarker402"></a>application’s local storage using our local storage service. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">Pages/Index.razor</code> file.</li>
      <li class="numberedList">Delete the <code class="inlineCode">H1</code> element.</li>
      <li class="numberedList">Add the following directive:
        <pre class="programlisting code"><code class="hljs-code">@using LocalStorage.Services
</code></pre>
      </li>
      <li class="numberedList">Add the following markup:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>Local Storage Service<span class="hljs-tag">&lt;/</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">h2</span><span class="hljs-tag">&gt;</span>Local Storage Service<span class="hljs-tag">&lt;/</span><span class="hljs-name">h2</span><span class="hljs-tag">&gt;</span>
localStorageData:
<span class="hljs-tag">&lt;</span><span class="hljs-name">input</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"text"</span><span class="hljs-tag"> @</span><span class="hljs-attr">bind-value</span><span class="hljs-tag">=</span><span class="hljs-string">"data"</span><span class="hljs-tag"> </span><span class="hljs-attr">size</span><span class="hljs-tag">=</span><span class="hljs-string">"25"</span><span class="hljs-tag"> /&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">hr</span><span class="hljs-tag"> /&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"SaveToLocalStorageAsync"</span><span class="hljs-tag">&gt;</span>
    Save to Local Storage
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
</code></pre>
      
    <p class="normal">The preceding markup adds a textbox to enter the data to be saved to the application’s local storage and a button to call the <code class="inlineCode">SaveToLocalStorageAsync</code> method.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Right-click the <strong class="screenText">Pages</strong> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Class</strong> option from the menu.</li>
      <li class="numberedList">Name the new class <code class="inlineCode">Index.razor.cs</code>.</li>
      <li class="numberedList">Change the class into a partial class by adding the <code class="inlineCode">partial</code> keyword:
        <pre class="programlisting code"><code class="hljs-code">Public <span class="code-highlight"><strong class="hljs-slc">partial</strong></span> <span class="hljs-keyword">class</span> <span class="hljs-title">Index</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following to the code:
        <pre class="programlisting code"><code class="hljs-code">[<span class="hljs-meta">Inject</span>]
ILocalStorageService? localStorage { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span>? data;
<span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">SaveToLocalStorageAsync</span><span class="hljs-function">()</span>
{
    <span class="hljs-keyword">var</span> dataInfo = <span class="hljs-keyword">new</span> DataInfo()
    {
        Value = data,
        Length = data!.Length,
        Timestamp = DateTime.Now
    };
    <span class="hljs-keyword">await</span> localStorage!.SetItemAsync&lt;DataInfo?&gt;(
        <span class="hljs-string">"localStorageData"</span>,
        dataInfo);
}
</code></pre>
      
    <p class="normal">The preceding code injects the <code class="inlineCode">LocalStorageService</code> into the component and defines the <code class="inlineCode">SaveToLocalStorageAsync</code> method. The <code class="inlineCode">SaveToLocalStorageAsync</code> method uses <strong class="screenText">localStorageData</strong> as the key when saving the data to <code class="inlineCode">localStorage</code>.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the<a id="_idIndexMarker403"></a> application without debugging.</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_05_09.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 5.9: Local Storage Service test page</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="10">Enter the word <code class="inlineCode">Test</code> into the <strong class="screenText">localStorageData</strong> textbox.</li>
      <li class="numberedList">Click the <strong class="screenText">Save to Local Storage</strong> button.</li>
      <li class="numberedList">Press <em class="keystroke">F12</em> to open the browser’s developer tools.</li>
      <li class="numberedList">Select the <strong class="screenText">Application</strong> tab.</li>
      <li class="numberedList">Open <code class="inlineCode">Local Storage</code>.</li>
      <li class="numberedList">Enter a different word into the <strong class="screenText">localStorageData</strong> textbox.</li>
      <li class="numberedList">Click the <strong class="screenText">Save to Local Storage</strong> button.</li>
      <li class="numberedList">Verify that the application’s local storage has been updated.</li>
      <li class="numberedList">Close the browser.</li>
    </ol>
    <p class="normal">We have used the Web Storage API to save data to the application’s local storage. Next, we need to learn how to read from the application’s local storage. Since we will be displaying the data in a JavaScript<a id="_idIndexMarker404"></a> alert box, we need to add some JavaScript code to call the alert function.</p>
    <h2 id="_idParaDest-171" class="heading-2">Adding a collocated JavaScript file</h2>
    <p class="normal">We need to add a <a id="_idIndexMarker405"></a>collocated JavaScript file to contain the JavaScript code that will call the alert function. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Right-click the <strong class="screenText">Pages</strong> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Item</strong> option from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">javascript</code> in the <strong class="screenText">Search</strong> box.</li>
      <li class="numberedList">Select <strong class="screenText">JavaScript File</strong>.</li>
      <li class="numberedList">Name the JavaScript file <code class="inlineCode">Index.razor.js</code>.</li>
      <li class="numberedList">Add the following JavaScript to the <code class="inlineCode">Index.razor.js</code> file:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title">showLocalStorage</span>(<span class="hljs-params">data</span>) {
    <span class="hljs-title">alert</span>(data);
}
</code></pre>
      
    <p class="normal">The preceding code exports the <code class="inlineCode">showLocalStorage</code> function that opens an alert box, containing the text that is specified by the <code class="inlineCode">data</code> parameter.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Open the <code class="inlineCode">Pages/Index.razor.cs</code> file.</li>
      <li class="numberedList">Inject an instance of <code class="inlineCode">IJSRuntime</code> into the <code class="inlineCode">Index</code> component by adding the following code:
        <pre class="programlisting code"><code class="hljs-code">[<span class="hljs-meta">Inject</span>]
IJSRuntime js { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      </li>
      <li class="numberedList">Add the following property:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span> IJSObjectReference? module;
</code></pre>
      </li>
      <li class="numberedList">Add the <code class="inlineCode">OnAfterRenderAsync</code> method:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">OnAfterRenderAsync</span><span class="hljs-function">(</span><span class="hljs-built_in">bool</span><span class="hljs-params"> firstRender</span><span class="hljs-function">)</span>
{
    <span class="hljs-keyword">if</span> (firstRender)
    {
        module = <span class="hljs-keyword">await</span> js.InvokeAsync&lt;IJSObjectReference&gt;
                (<span class="hljs-string">"import"</span>, <span class="hljs-string">"./Pages/Index.razor.js"</span>);
    }
}
</code></pre>
      </li>
    </ol>
    <p class="normal">The JavaScript functions<a id="_idIndexMarker406"></a> that are in the <code class="inlineCode">Pages/Index.razor.js</code> file can now be invoked from the <code class="inlineCode">Index</code> component.</p>
    <h2 id="_idParaDest-172" class="heading-2">Reading from local storage</h2>
    <p class="normal">We need to test reading from<a id="_idIndexMarker407"></a> the application’s local storage using our local storage service. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">Pages/Index.razor</code> file.</li>
      <li class="numberedList">Add the following button beneath the existing button:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"ReadFromLocalStorageAsync"</span><span class="hljs-tag">&gt;</span>
    Read from Local Storage
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
</code></pre>
      
    <p class="normal">The preceding markup adds a button that calls the <code class="inlineCode">ReadFromLocalStorageAsync</code> method.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="3">Open the Pages/Index.razor.cs file.</li>
      <li class="numberedList">Add the <code class="inlineCode">ReadFromLocalStorageAsync</code> method:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">ReadFromLocalStorageAsync</span><span class="hljs-function">()</span>
{
    <span class="hljs-keyword">if</span> (module <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>)
    {
        DataInfo? savedData = 
            <span class="hljs-keyword">await</span> localStorage!.GetItemAsync
                &lt;DataInfo&gt;(<span class="hljs-string">"localStorageData"</span>);
        <span class="hljs-built_in">string</span> result = 
            <span class="hljs-string">$"localStorageData = </span><span class="hljs-subst">{savedData!.Value}</span><span class="hljs-string">"</span>;
        <span class="hljs-keyword">await</span> module.InvokeVoidAsync
            (<span class="hljs-string">"showLocalStorage"</span>, result);
    }
}
</code></pre>
      
    <p class="normal">The <code class="inlineCode">ReadFromLocalStorageAsync</code> method uses the <code class="inlineCode">localStorageData</code> key when accessing the application’s local storage.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Click the <strong class="screenText">Read from Local Storage</strong> button.</li>
      <li class="numberedList">Verify that the contents of the alert box match the contents of the application’s local storage.</li>
    </ol>
    <p class="normal">The <code class="inlineCode">ReadFromLocalStorage</code> method<a id="_idIndexMarker408"></a> invoked the <code class="inlineCode">showLocalStorage</code> function in the collocated JavaScript file. We have now completed the testing of our local storage service.</p>
    <h1 id="_idParaDest-173" class="heading-1">Summary</h1>
    <p class="normal">You should now be able to create a local storage service by using JS interop to invoke JavaScript functions from your Blazor WebAssembly application.</p>
    <p class="normal">In this chapter, we explained why you may still need to use JavaScript and how to use the <code class="inlineCode">IJSRuntime</code> abstraction to invoke JavaScript functions from .NET, both asynchronously and synchronously. Conversely, we explained how to invoke .NET methods from JavaScript functions. Finally, we explained how to store data in the browser by using the application’s local storage.</p>
    <p class="normal">After that, we used the <code class="inlineCode">Blazor WebAssembly App Empty</code> project template to create a new project. We added a couple of JavaScript functions to read and write the application’s local storage. Then, we added a class to invoke those JavaScript functions. In the last part of the chapter, we tested our local storage service by adding a collocated JavaScript file that opened a JavaScript alert box.</p>
    <p class="normal">One of the biggest benefits of using Blazor WebAssembly is that all the code runs on the browser. This means that a web app built using Blazor WebAssembly can run offline. In the next chapter, we will leverage this advantage to create a progressive web app.</p>
    <h1 id="_idParaDest-174" class="heading-1">Questions</h1>
    <p class="normal">The following questions are provided for your consideration:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Can <code class="inlineCode">IJSRuntime</code> be used to render a UI?</li>
      <li class="numberedList">How would you add our local storage service to a Razor class library?</li>
      <li class="numberedList">What are the benefits of using a collocated JavaScript file?</li>
      <li class="numberedList">Do you think that you will still use JavaScript? If so, what will you use it for?</li>
      <li class="numberedList">In what scenarios do you need to invoke JavaScript asynchronously rather than synchronously?</li>
    </ol>
    <h1 id="_idParaDest-175" class="heading-1">Further reading</h1>
    <p class="normal">The following resources provide more information regarding the topics covered in this chapter:</p>
    <ul>
      <li class="bulletList">For more information on using JavaScript, refer to <a href="https://www.w3schools.com/js"><span class="url">https://www.w3schools.com/js</span></a>.</li>
      <li class="bulletList">For more detailed information on JavaScript, refer to <a href="https://developer.mozilla.org/en-US/docs/Web/javascript"><span class="url">https://developer.mozilla.org/en-US/docs/Web/javascript</span></a>.</li>
      <li class="bulletList">For the JavaScript reference, refer to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference"><span class="url">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference</span></a>.</li>
      <li class="bulletList">For more information on <code class="inlineCode">localStorage</code>, refer to <a href="https://www.w3.org/TR/webstorage/#the-localstorage-attribute"><span class="url">https://www.w3.org/TR/webstorage/#the-localstorage-attribute</span></a>.</li>
      <li class="bulletList">For more information on Microsoft Edge (Chromium) Developer Tools, refer to <a href="https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium"><span class="url">https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium</span></a>.</li>
    </ul>
  </div>
</body>
</html>