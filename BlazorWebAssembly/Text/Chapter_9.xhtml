<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>Chapter_9</title>
  <link href="../Styles/syntax-highlighting.css" rel="stylesheet" type="text/css"/>
  <link href="../Styles/epub.css" rel="stylesheet" type="text/css"/>
</head>

<body id="Chapter_9" lang="en-US" xml:lang="en-US">
  <div id="_idContainer256" class="Basic-Text-Frame">
    <h1 class="chapterNumber">9</h1>
    <h1 id="_idParaDest-266" class="chapterTitle">Uploading and Reading an Excel File</h1>
    <p class="normal">There are many different scenarios that require a web app to allow users to upload local files. Also, there are just as many different types of files that a user may need to upload.</p>
    <p class="normal">In this chapter, we will learn how to upload different types of files by using the <strong class="keyWord">InputFile</strong> component. We will learn how to upload image files and how to resize the images that are uploaded. We will also learn how to perform virtualization by using the <strong class="keyWord">Virtualize</strong> component to only render the visible data. Finally, we will learn how to read a Microsoft Excel file by using the <strong class="keyWord">Open XML SDK</strong>.</p>
    <p class="normal">The project that we create in this chapter will be an Excel reader that will allow us to upload an Excel file and view its contents in a table, using virtualization.</p>
    <blockquote class="packt_quote">
      <p class="quote">Decipher the parts</p>
      <p class="quote">to read an Excel file –</p>
      <p class="quote">not complicated!</p>
    </blockquote>
    <p class="normal">In this chapter, we will cover the following topics:</p>
    <ul>
      <li class="bulletList">Uploading files</li>
      <li class="bulletList">Using virtualization</li>
      <li class="bulletList">Reading Excel files</li>
      <li class="bulletList">Creating the Excel reader project</li>
    </ul>
    <h1 id="_idParaDest-267" class="heading-1">Technical requirements</h1>
    <p class="normal">To complete this project, you need to have Visual Studio 2022 installed on your PC. For instructions on how to install the free Community Edition of Visual Studio 2022, refer to <em class="chapterRef">Chapter 1</em>, <em class="italic">Introduction to Blazor WebAssembly</em>.</p>
    <p class="normal">The source code for this chapter is available in the following GitHub repository: <a href="https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter09"><span class="url">https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter09</span></a>.</p>
    <p class="normal">The Code in Action video is available here: <a href="https://packt.link/Ch9"><span class="url">https://packt.link/Ch9</span></a>.</p>
    <h1 id="_idParaDest-268" class="heading-1">Uploading files</h1>
    <p class="normal">The <code class="inlineCode">InputFile</code> component is a built-in Blazor component that is used to upload files into a Blazor app. It <a id="_idIndexMarker635"></a>renders an HTML <code class="inlineCode">input</code> element of type <code class="inlineCode">file</code> and supplies a stream for the contents of the file. It is in the <code class="inlineCode">Microsoft.AspNetCore.Components.Forms</code> namespace.</p>
    <p class="normal">The <code class="inlineCode">OnChange</code> event of the <code class="inlineCode">InputFile</code> component is used to set the callback that gets invoked when a file is selected. This is an example of an <code class="inlineCode">InputFile</code> component that invokes the <code class="inlineCode">OnChangeHandler</code> method when a file is selected:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">InputFile</span><span class="hljs-tag"> </span><span class="hljs-attr">OnChange</span><span class="hljs-tag">=</span><span class="hljs-string">"OnChangeHandler"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">           </span><span class="hljs-attr">accept</span><span class="hljs-tag">=</span><span class="hljs-string">"image/png, image/jpeg"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
    <p class="normal">This is the resulting HTML markup from the preceding example:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">input</span><span class="hljs-tag"> </span><span class="hljs-attr">accept</span><span class="hljs-tag">=</span><span class="hljs-string">"image/png, image/jpeg"</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"file"</span><span class="hljs-tag"> </span><span class="hljs-attr">_bl_2</span><span class="hljs-tag">=</span><span class="hljs-string">""</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">In the preceding HTML markup, the <code class="inlineCode">_bl_2</code> attribute is used for Blazor’s internal processing, but everything else is a typical <code class="inlineCode">input</code> element. The <code class="inlineCode">accept</code> attribute is used to filter the types of files that are displayed in the <strong class="screenText">Select File</strong> dialog.</p>
    <p class="normal">The following screenshot shows how the preceding markup is rendered:</p>
    <figure class="mediaobject"><img src="../Images/B18471_09_01.png" alt=""/></figure>
    <p class="packt_figref">Figure 9.1: Rendered InputFile component</p>
    <p class="normal">When the <strong class="screenText">Choose File</strong> button of the <code class="inlineCode">InputFile</code> component is clicked, the <strong class="screenText">Select File</strong> dialog opens to allow the user to select a file. This is a screenshot of the <strong class="screenText">Select File</strong> dialog:</p>
    <figure class="mediaobject"><img src="../Images/B18471_09_02.png" alt="Graphical user interface, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 9.2: Select File dialog</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Although we have indicated that only files of type <code class="inlineCode">image/png</code> and <code class="inlineCode">image/jpg</code> should be accepted, the <strong class="screenText">Select File</strong> dialog allows the user to select <strong class="screenText">All files (*.*)</strong> via the file type selector. Therefore, there is never any guarantee concerning the type of file that the user has selected.</p>
    </div>
    <p class="normal">The <code class="inlineCode">InputFileChangeEventArgs</code> class is used to supply information about the <code class="inlineCode">OnChange</code> event being raised. The <a id="_idIndexMarker636"></a>following code sets the <code class="inlineCode">selectedFile</code> field to the value of the <code class="inlineCode">File</code> property of the <code class="inlineCode">InputFileChangeEventArgs</code> object, provided to the <code class="inlineCode">OnChangeHandler</code> method:</p>
    <pre class="programlisting code"><code class="hljs-code">IBrowserFile? selectedFile;
<span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">OnChangeHandler</span><span class="hljs-function">(</span><span class="hljs-params">InputFileChangeEventArgs e</span><span class="hljs-function">)</span>
{
    selectedFile = e.File;
}
</code></pre>
    <p class="normal">The <code class="inlineCode">File</code> property represents the uploaded file and is of type <code class="inlineCode">IBrowserFile</code>. </p>
    <p class="normal">These are <a id="_idIndexMarker637"></a>the properties of the <code class="inlineCode">IBrowserFile</code> interface:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">ContentType</code> – the MIME type of the file</li>
      <li class="bulletList"><code class="inlineCode">LastModified</code> – the last modified date of the file</li>
      <li class="bulletList"><code class="inlineCode">Name</code> – the name of the file</li>
      <li class="bulletList"><code class="inlineCode">Size</code> – the size of the file in bytes</li>
    </ul>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">You should never trust a file that is uploaded from the internet. You should treat it as a potential security risk to your app, server, and network. The <code class="inlineCode">ContentType</code>, <code class="inlineCode">LastModified</code>, <code class="inlineCode">Name</code>, and <code class="inlineCode">Size</code> properties can all be manipulated to cause your system harm and cannot be trusted.</p>
    </div>
    <p class="normal">The <code class="inlineCode">IBrowserFile</code> interface only <a id="_idIndexMarker638"></a>has one method. It is the <code class="inlineCode">OpenReadStream</code> method that is used to read the uploaded file. By default, the maximum size of the stream is 500 KB. However, the <code class="inlineCode">maxAllowedSize</code> parameter can be used to increase the maximum size of the stream. In the following example, the maximum size of the stream is set to the value of <code class="inlineCode">MAXFILESIZE</code>:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">var</span> stream = <span class="hljs-keyword">await</span> file.OpenReadStream(MAXFILESIZE);
</code></pre>
    <h2 id="_idParaDest-269" class="heading-2">Resizing images</h2>
    <p class="normal">Images can be <a id="_idIndexMarker639"></a>quite large. Sometimes we need to restrict the size of images that are allowed to be uploaded into an application. In those cases, we can use the <code class="inlineCode">RequestImageFileAsync</code> method to resize the image. These are the parameters <a id="_idIndexMarker640"></a>of the <code class="inlineCode">RequestImageFileAsync</code> method:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">Format</code> – the format of the new image</li>
      <li class="bulletList"><code class="inlineCode">MaxWidth</code> – the maximum width of the new image</li>
      <li class="bulletList"><code class="inlineCode">MaxHeight</code> – the maximum <a id="_idIndexMarker641"></a>height of the new image</li>
    </ul>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">The <code class="inlineCode">RequestImageFileAsync</code> method does not verify that the image is a valid one. Therefore, any <a id="_idIndexMarker642"></a>results should be treated as untrustworthy.</p>
    </div>
    <p class="normal">When using the <code class="inlineCode">RequestImageFileAsync</code> method, the image is resized using the provided dimensions <a id="_idIndexMarker643"></a>while preserving the aspect ratio of the original image. The following <code class="inlineCode">UploadImage</code> component resizes the uploaded image:</p>
    <p class="normal"><strong class="keyWord">UploadImage.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@page <span class="hljs-string">"/uploadImage"</span>
@using Microsoft.AspNetCore.Components.Forms
&lt;PageTitle&gt;Upload Image&lt;/PageTitle&gt;
&lt;h1&gt;Upload Image&lt;/h1&gt;
&lt;InputFile OnChange=<span class="hljs-string">"OnChangeHandler"</span> 
    accept=<span class="hljs-string">"image/png, image/jpeg"</span> /&gt;
@if (@image != <span class="hljs-literal">null</span>)
{
    &lt;p&gt;Old file size: @uploadedFile!.Size.ToString(<span class="hljs-string">"N0"</span>) bytes&lt;/p&gt;
    &lt;p&gt;New file size: @resizedFile!.Size.ToString(<span class="hljs-string">"N0"</span>) bytes&lt;/p&gt;
    &lt;img src=<span class="hljs-string">"data:@uploadedFile.ContentType;base64,@image"</span> /&gt;
}
@code {
    IBrowserFile? uploadedFile;
    IBrowserFile? resizedFile;
    <span class="hljs-built_in">string</span>? image;
    <span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">OnChangeHandler</span><span class="hljs-function">(</span><span class="hljs-params">InputFileChangeEventArgs e</span><span class="hljs-function">)</span>
    {
        uploadedFile = e.File;
        resizedFile = <span class="hljs-keyword">await</span> uploadedFile.RequestImageFileAsync(
               uploadedFile.ContentType, 
               <span class="hljs-number">100</span>, 
               <span class="hljs-number">100</span>
        );
        <span class="hljs-keyword">var</span> buffer = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[resizedFile.Size]; 
        <span class="hljs-keyword">var</span> stream = <span class="hljs-keyword">await</span> resizedFile.OpenReadStream()
                                      .ReadAsync(buffer);
        image = Convert.ToBase64String(buffer);
    }
}
</code></pre>
    <p class="normal">The preceding code uses the <code class="inlineCode">RequestImageFileAsync</code> method to resize the image to 100 x 100 pixels. It uses the <code class="inlineCode">OpenReadStream</code> method to read the file, which is then encoded into a <code class="inlineCode">Base64</code> string. Finally, the image’s original size, the resized image’s new size, and the resized image itself <a id="_idIndexMarker644"></a>are all rendered when the value of the <code class="inlineCode">image</code> property is no longer <code class="inlineCode">null</code>.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">Although our example reads the file directly into memory, we recommend that you copy the stream directly into a file on disk or upload the file to an external service, such as Azure Blob Storage.</p>
    </div>
    <p class="normal">This is a screenshot that uses the <strong class="screenText">Upload Image</strong> page to upload a very large photo, taken on a trip we took to St John, USVI:</p>
    <figure class="mediaobject"><img src="../Images/B18471_09_03.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 9.3: Upload Image results</p>
    <p class="normal">In the preceding <a id="_idIndexMarker645"></a>example, we were able to reduce the size of the file from 6,413,880 bytes to 4,719 bytes.</p>
    <h2 id="_idParaDest-270" class="heading-2">Handling multiple files</h2>
    <p class="normal">By default, the <code class="inlineCode">InputFile</code> component only allows for a single file to be selected. However, the <code class="inlineCode">InputFile</code> component <a id="_idIndexMarker646"></a>can be used to upload multiple files by using the <code class="inlineCode">multiple</code> attribute, as shown in the following example:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">InputFile</span><span class="hljs-tag"> </span><span class="hljs-attr">OnChange</span><span class="hljs-tag">=</span><span class="hljs-string">"OnChange"</span><span class="hljs-tag"> </span><span class="hljs-attr">multiple</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
    <p class="normal">When using the <code class="inlineCode">multiple</code> attribute, the <code class="inlineCode">FileCount</code> property of <code class="inlineCode">InputFileChangeEventArgs</code> is used to determine the number of files that have been uploaded. When allowing for the upload of multiple files, instead of using the <code class="inlineCode">File</code> property to access the files, we use the <code class="inlineCode">GetMultipleFiles</code> method of <code class="inlineCode">InputFileChangeEventArgs</code> to loop through the list of files that have been uploaded.</p>
    <p class="normal">In the following example, the <code class="inlineCode">GetMultipleFiles</code> method is used to return the list of files that were selected. The list of files is then looped through using a <code class="inlineCode">foreach</code> loop:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">OnChange</span><span class="hljs-function">(</span><span class="hljs-params">InputFileChangeEventArgs e</span><span class="hljs-function">)</span>
{
   <span class="hljs-keyword">var</span> files = e.GetMultipleFiles(); 
   <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> file <span class="hljs-keyword">in</span> files)
   {
   <span class="hljs-comment">// do something</span>
   }
}
</code></pre>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">You cannot add files to the list of files that have been selected. Each time <code class="inlineCode">InputFile</code> is used, the previous list of files is replaced by the new list of files.</p>
    </div>
    <p class="normal">The <code class="inlineCode">InputFile</code> component can be used to upload one or more files at a time to a Blazor WebAssembly app by using the <code class="inlineCode">multiple</code> attribute.</p>
    <p class="normal">The <code class="inlineCode">InputFile</code> component can be used to upload many different types of files, such as Excel files and image <a id="_idIndexMarker647"></a>files. By using the <code class="inlineCode">RequestImageFileAsync</code> method, we can resize the images that are uploaded. We can use the <code class="inlineCode">multiple</code> attribute to allow users to upload multiple files.</p>
    <h1 id="_idParaDest-271" class="heading-1">Using virtualization</h1>
    <p class="normal">There are times when we need to work with a large collection of items. In those cases, it is not efficient to render each item. It is much more efficient to only render a subset of the items. This technique <a id="_idIndexMarker648"></a>is called <strong class="keyWord">virtualization</strong>.</p>
    <p class="normal">The built-in <code class="inlineCode">Virtualize</code> component is used to render the visible items of a collection. Specifically, it is used when we are using a loop to render a collection of items and using scrolling to limit the <a id="_idIndexMarker649"></a>number of items visible at any given moment. The <code class="inlineCode">Virtualize</code> component calculates the list of visible items and only renders those items. Since it does not render items that are invisible, it is more performant than using a method that renders every item in the collection. It can be found in the <code class="inlineCode">Microsoft.AspNetCore.Components.Web.Virtualization</code> namespace.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">When using the <code class="inlineCode">Virtualize</code> component, all the items must be the same height in pixels.</p>
    </div>
    <p class="normal">The <code class="inlineCode">Virtualize&lt;TItem&gt;</code> class includes the following properties:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">ItemContent</code> – the item <a id="_idIndexMarker650"></a>template. It is only required when using the <code class="inlineCode">Placeholder</code> property.</li>
      <li class="bulletList"><code class="inlineCode">Items</code> – the collection of items. This property cannot be used in conjunction with the <code class="inlineCode">ItemsProvider</code> method.</li>
      <li class="bulletList"><code class="inlineCode">ItemSize</code> – the height of each item in pixels. The default is 50 pixels.</li>
      <li class="bulletList"><code class="inlineCode">ItemsProvider</code> – the function that asynchronously retrieves the collection of items. This property cannot be used in conjunction with the <code class="inlineCode">Items</code> method.</li>
      <li class="bulletList"><code class="inlineCode">OverscanCount</code> – the number of items that should be rendered before and after the visible region. When scrolling, this will help to reduce the amount of rendering. The default is 3.</li>
      <li class="bulletList"><code class="inlineCode">Placeholder</code> – the content that is rendered while the component is waiting for the items to be provided by <code class="inlineCode">ItemsProvider</code>. This property cannot be used in conjunction with the <code class="inlineCode">Items</code> method.</li>
      <li class="bulletList"><code class="inlineCode">SpacerElement</code> – the type of element used to display each item. The default is <code class="inlineCode">div</code>.</li>
    </ul>
    <p class="normal">Near our home, there is a weather station that continuously records the current temperature and <a id="_idIndexMarker651"></a>humidity. There are thousands of data points collected every day.</p>
    <p class="normal">This is the <code class="inlineCode">Weather</code> class used to collect the data from the weather station:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Weather</span>
{
    <span class="hljs-keyword">public</span> DateTime Date { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Temperature { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Humidity { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
}
</code></pre>
    <p class="normal">The following code will display each of the data points using a <code class="inlineCode">foreach</code> loop:</p>
    <pre class="programlisting code"><code class="hljs-code">@using Microsoft.AspNetCore.Components.Web.Virtualization
<span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">style</span><span class="hljs-tag">=</span><span class="hljs-string">"height:200px;overflow-y:scroll"</span><span class="hljs-tag">&gt;</span>
    @foreach (Weather weather in weatherHistory)
    {
        <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
            @weather.Date.ToShortTimeString():
            Temp:@weather.Temperature
            Humidity:@weather.Humidity
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
    }
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">In the preceding code, although the <code class="inlineCode">foreach</code> loop is within a <code class="inlineCode">div</code> element that limits the number of rows that are displayed, the UI still needs to render all the rows before returning control to the <a id="_idIndexMarker652"></a>user. Since the collection of <code class="inlineCode">Weather</code> objects contains thousands of records, the user will experience some lag while waiting for the UI to render all the rows. We can use the <code class="inlineCode">Virtualize</code> component to only render the data that is being displayed.</p>
    <h2 id="_idParaDest-272" class="heading-2">Rendering Local Data</h2>
    <p class="normal">The following <a id="_idIndexMarker653"></a>code uses the <code class="inlineCode">Virtualize</code> component instead of a <code class="inlineCode">foreach</code> loop to render the data from memory:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">style</span><span class="hljs-tag">=</span><span class="hljs-string">"height:200px;overflow-y:scroll"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">Virtualize</span><span class="hljs-tag"> </span><span class="hljs-attr">Items</span><span class="hljs-tag">=</span><span class="hljs-string">"@weatherHistory"</span><span class="hljs-tag"> </span><span class="hljs-attr">Context</span><span class="hljs-tag">=</span><span class="hljs-string">"weather"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
            @weather.Date.ToShortTimeString():
            Temp:@weather.Temperature
            Humidity:@weather.Humidity
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">Virtualize</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">The preceding code will allow the page to load faster because only the rows that are visible within the <code class="inlineCode">div</code> element are rendered. The <code class="inlineCode">Virtualize</code> component calculates the number of items that can fit inside the container and only renders those items. As the user scrolls through the items, the <code class="inlineCode">Virtualize</code> component determines which items need to be rendered and renders them.</p>
    <h2 id="_idParaDest-273" class="heading-2">Rendering Remote Data</h2>
    <p class="normal">The following <a id="_idIndexMarker654"></a>code uses the <code class="inlineCode">ItemsProvider</code> method to fetch the list of items to be rendered from a remote data source:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">style</span><span class="hljs-tag">=</span><span class="hljs-string">"height:200px;overflow-y:scroll"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">Virtualize</span><span class="hljs-tag"> </span><span class="hljs-attr">ItemsProvider</span><span class="hljs-tag">=</span><span class="hljs-string">"@LoadWeather"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">                </span><span class="hljs-attr">Context</span><span class="hljs-tag">=</span><span class="hljs-string">"weather"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">                </span><span class="hljs-attr">ItemSize</span><span class="hljs-tag">=</span><span class="hljs-string">"10"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">                </span><span class="hljs-attr">OverscanCount</span><span class="hljs-tag">=</span><span class="hljs-string">"2"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">ItemContent</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
                @weather.Date.ToShortTimeString():
                Temp:@weather.Temperature
                Humidity:@weather.Humidity
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">ItemContent</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">Placeholder</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;</span>Loading  Weather...<span class="hljs-tag">&lt;/</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">Placeholder</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">Virtualize</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">In the preceding example, the <code class="inlineCode">LoadWeather</code> method is invoked when the <code class="inlineCode">Virtualize</code> component needs to update the list of <code class="inlineCode">Weather</code> objects that are being rendered.</p>
    <p class="normal">This is a simple implementation of the <code class="inlineCode">LoadWeather</code> method:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> </span><span class="hljs-title">ValueTask</span><span class="hljs-function">&lt;</span><span class="hljs-title">ItemsProviderResult</span><span class="hljs-function">&lt;</span><span class="hljs-title">Weather</span><span class="hljs-function">&gt;&gt; </span>
<span class="hljs-function">     </span><span class="hljs-title">LoadWeather</span><span class="hljs-function">(</span><span class="hljs-params">ItemsProviderRequest request</span><span class="hljs-function">)</span>
{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ItemsProviderResult&lt;Weather&gt;(
        <span class="hljs-keyword">await</span> FetchWeather(request.StartIndex, request.Count), 
        totalCount);
} 
<span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> Task&lt;IEnumerable&lt;Weather&gt;&gt; 
    FetchWeather(<span class="hljs-built_in">int</span> start, <span class="hljs-built_in">int</span> count)
{
    <span class="hljs-comment">// call a service</span>
}
</code></pre>
    <p class="normal">In the preceding code, the <code class="inlineCode">LoadWeather</code> method takes <code class="inlineCode">ItemsProviderRequest</code> and returns <code class="inlineCode">ItemsProviderResult</code>. The important thing to note is that <code class="inlineCode">ItemsProviderRequest</code> includes both a <code class="inlineCode">StartIndex</code> property and a <code class="inlineCode">Count</code> property. <code class="inlineCode">StartIndex</code> is the start <a id="_idIndexMarker655"></a>index of the data requested and <code class="inlineCode">Count</code> is the number of items requested.</p>
    <p class="normal">In this chapter’s project, we will read the values from an Excel spreadsheet that is uploaded into our application. Therefore, we need to learn how to read from an Excel spreadsheet.</p>
    <h1 id="_idParaDest-274" class="heading-1">Reading Excel files</h1>
    <p class="normal">We can read and write to Microsoft Excel files using the <code class="inlineCode">Open XML SDK</code>. It provides the tools for us to <a id="_idIndexMarker656"></a>work with not only Excel files but also Word and PowerPoint files. To use the <code class="inlineCode">Open XML SDK</code>, we need to add the <code class="inlineCode">DocumentFormat.OpenXml NuGet</code> package to our project.</p>
    <p class="normal">Modern Excel files with the XLSX file extension are made up of a compressed collection of XML files. To view the individual files, change the file extension from XLSX to ZIP and view the files using a <code class="inlineCode">.zip</code> viewer. You can also extract the files.</p>
    <p class="normal">When using the <code class="inlineCode">Open XML SDK</code>, the Excel document is represented with the <code class="inlineCode">SpreadsheetDocument</code> class. This is the hierarchy of the elements in the class:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">workbook</code> – the root element of the document</li>
      <li class="bulletList"><code class="inlineCode">sheets</code> – the container for the sheets</li>
      <li class="bulletList"><code class="inlineCode">sheet</code> – the pointer to the sheet definition file</li>
      <li class="bulletList"><code class="inlineCode">worksheet</code> – the sheet definition that contains the sheet data</li>
      <li class="bulletList"><code class="inlineCode">sheetData</code> – the data</li>
      <li class="bulletList"><code class="inlineCode">row</code> – a row of data</li>
      <li class="bulletList"><code class="inlineCode">c</code> – a cell within a row of data</li>
      <li class="bulletList"><code class="inlineCode">v </code>– the value of a cell</li>
    </ul>
    <p class="normal">To demonstrate the format of an Excel file, we have created a sample Excel file titled <code class="inlineCode">Sample.xlsx</code>. The sample workbook includes two worksheets. The first worksheet is titled <strong class="screenText">Numbers</strong> and the second one is titled <strong class="screenText">Welcome</strong>. The <strong class="screenText">Numbers</strong> worksheet includes two rows of numbers, and the <strong class="screenText">Welcome</strong> worksheet includes the string <strong class="screenText">Hello World</strong> in cell A1.</p>
    <p class="normal">This is a screenshot of the <code class="inlineCode">Sample.xlsx</code> file:</p>
    <figure class="mediaobject"><img src="../Images/B18471_09_04.png" alt="Table

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 9.4: Sample.xlsx</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">You can download a copy of <code class="inlineCode">Sample.xlsx</code> from the GitHub repository.</p>
    </div>
    <p class="normal">If we change the <a id="_idIndexMarker657"></a>filename of <code class="inlineCode">Sample.xlsx</code> to <code class="inlineCode">Sample.zip</code> and extract all the files, this is the resulting file structure:</p>
    <figure class="mediaobject"><img src="../Images/B18471_09_05.png" alt="A picture containing text

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 9.5: File structure of Sample.zip</p>
    <p class="normal">If you are familiar with Microsoft Excel, the files under the <code class="inlineCode">xl</code> folder will look familiar to you. The <code class="inlineCode">xl</code> folder contains a <code class="inlineCode">workbook.xml</code> file and a <code class="inlineCode">worksheets</code> folder, with a file for each sheet.</p>
    <p class="normal">The <code class="inlineCode">workbook.xml</code> file lists <a id="_idIndexMarker658"></a>all the sheets in the workbook. The following markup from the <code class="inlineCode">workbook.xml</code> file shows the contents of the <code class="inlineCode">sheets</code> element:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">sheets</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">sheet</span><span class="hljs-tag"> </span><span class="hljs-attr">name</span><span class="hljs-tag">=</span><span class="hljs-string">"Numbers"</span><span class="hljs-tag"> </span><span class="hljs-attr">sheetId</span><span class="hljs-tag">=</span><span class="hljs-string">"1"</span><span class="hljs-tag"> </span><span class="hljs-attr">r:id</span><span class="hljs-tag">=</span><span class="hljs-string">"rId1"</span><span class="hljs-tag">/&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">sheet</span><span class="hljs-tag"> </span><span class="hljs-attr">name</span><span class="hljs-tag">=</span><span class="hljs-string">"Welcome"</span><span class="hljs-tag"> </span><span class="hljs-attr">sheetId</span><span class="hljs-tag">=</span><span class="hljs-string">"2"</span><span class="hljs-tag"> </span><span class="hljs-attr">r:id</span><span class="hljs-tag">=</span><span class="hljs-string">"rId2"</span><span class="hljs-tag">/&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">sheets</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">This is the code to loop through all the sheets in the given <code class="inlineCode">SpreadsheetDocument</code>:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> List&lt;</span><span class="hljs-built_in">string</span><span class="hljs-function">&gt; </span><span class="hljs-title">ReadSheetList</span><span class="hljs-function">(</span><span class="hljs-params">SpreadsheetDocument doc</span><span class="hljs-function">)</span>
{
    List&lt;<span class="hljs-built_in">string</span>&gt; mySheets = <span class="hljs-keyword">new</span>();
    WorkbookPart wbPart = doc.WorkbookPart;
    Sheets sheets = wbPart.Workbook.Sheets;
    <span class="hljs-keyword">foreach</span> (Sheet item <span class="hljs-keyword">in</span> sheets)
    {
        mySheets.Add(item.Name);
    }
    <span class="hljs-keyword">return</span> mySheets;
}
</code></pre>
    <p class="normal">The <code class="inlineCode">worksheets</code> folder contains one file that corresponds to each of the sheets identified in the <code class="inlineCode">sheets</code> element of the <code class="inlineCode">workbook.xml</code> file. In our example, they are named <code class="inlineCode">sheet1.xml</code> and <code class="inlineCode">sheet2.xml</code>. The following markup from the <code class="inlineCode">sheets1.xml</code> file shows the contents of the <code class="inlineCode">sheetData</code> element for the <code class="inlineCode">Numbers</code> worksheet:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">sheetData</span><span class="hljs-tag">&gt;</span>
   <span class="hljs-tag">&lt;</span><span class="hljs-name">row</span><span class="hljs-tag"> </span><span class="hljs-attr">r</span><span class="hljs-tag">=</span><span class="hljs-string">"1"</span><span class="hljs-tag"> </span><span class="hljs-attr">spans</span><span class="hljs-tag">=</span><span class="hljs-string">"1:3"</span><span class="hljs-tag"> </span><span class="hljs-attr">x14ac:dyDescent</span><span class="hljs-tag">=</span><span class="hljs-string">"0.25"</span><span class="hljs-tag">&gt;</span>
      <span class="hljs-tag">&lt;</span><span class="hljs-name">c</span><span class="hljs-tag"> </span><span class="hljs-attr">r</span><span class="hljs-tag">=</span><span class="hljs-string">"A1"</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;</span>1<span class="hljs-tag">&lt;/</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">c</span><span class="hljs-tag">&gt;</span>
      <span class="hljs-tag">&lt;</span><span class="hljs-name">c</span><span class="hljs-tag"> </span><span class="hljs-attr">r</span><span class="hljs-tag">=</span><span class="hljs-string">"B1"</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;</span>2<span class="hljs-tag">&lt;/</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">c</span><span class="hljs-tag">&gt;</span>
      <span class="hljs-tag">&lt;</span><span class="hljs-name">c</span><span class="hljs-tag"> </span><span class="hljs-attr">r</span><span class="hljs-tag">=</span><span class="hljs-string">"C1"</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;</span>3<span class="hljs-tag">&lt;/</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">c</span><span class="hljs-tag">&gt;</span>
   <span class="hljs-tag">&lt;/</span><span class="hljs-name">row</span><span class="hljs-tag">&gt;</span>
   <span class="hljs-tag">&lt;</span><span class="hljs-name">row</span><span class="hljs-tag"> </span><span class="hljs-attr">r</span><span class="hljs-tag">=</span><span class="hljs-string">"2"</span><span class="hljs-tag"> </span><span class="hljs-attr">spans</span><span class="hljs-tag">=</span><span class="hljs-string">"1:3"</span><span class="hljs-tag"> </span><span class="hljs-attr">x14ac:dyDescent</span><span class="hljs-tag">=</span><span class="hljs-string">"0.25"</span><span class="hljs-tag">&gt;</span>
      <span class="hljs-tag">&lt;</span><span class="hljs-name">c</span><span class="hljs-tag"> </span><span class="hljs-attr">r</span><span class="hljs-tag">=</span><span class="hljs-string">"A2"</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;</span>4<span class="hljs-tag">&lt;/</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">c</span><span class="hljs-tag">&gt;</span>
      <span class="hljs-tag">&lt;</span><span class="hljs-name">c</span><span class="hljs-tag"> </span><span class="hljs-attr">r</span><span class="hljs-tag">=</span><span class="hljs-string">"B2"</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;</span>5<span class="hljs-tag">&lt;/</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">c</span><span class="hljs-tag">&gt;</span>
      <span class="hljs-tag">&lt;</span><span class="hljs-name">c</span><span class="hljs-tag"> </span><span class="hljs-attr">r</span><span class="hljs-tag">=</span><span class="hljs-string">"C2"</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;</span>6<span class="hljs-tag">&lt;/</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">c</span><span class="hljs-tag">&gt;</span>
   <span class="hljs-tag">&lt;/</span><span class="hljs-name">row</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">sheetData</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">As you can see, <code class="inlineCode">sheetData</code> is made up of a collection of rows. Each row has several cells, and each <a id="_idIndexMarker659"></a>cell has a value.</p>
    <p class="normal">The following markup from the <code class="inlineCode">sheets2.xml</code> file shows the contents of the <code class="inlineCode">sheetData</code> element for the <code class="inlineCode">Welcome</code> worksheet:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">sheetData</span><span class="hljs-tag">&gt;</span>
   <span class="hljs-tag">&lt;</span><span class="hljs-name">row</span><span class="hljs-tag"> </span><span class="hljs-attr">r</span><span class="hljs-tag">=</span><span class="hljs-string">"1"</span><span class="hljs-tag"> </span><span class="hljs-attr">spans</span><span class="hljs-tag">=</span><span class="hljs-string">"1:1"</span><span class="hljs-tag"> </span><span class="hljs-attr">x14ac:dyDescent</span><span class="hljs-tag">=</span><span class="hljs-string">"0.25"</span><span class="hljs-tag">&gt;</span>
      <span class="hljs-tag">&lt;</span><span class="hljs-name">c</span><span class="hljs-tag"> </span><span class="hljs-attr">r</span><span class="hljs-tag">=</span><span class="hljs-string">"A1"</span><span class="hljs-tag"> </span><span class="hljs-attr">t</span><span class="hljs-tag">=</span><span class="hljs-string">"s"</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;</span>0<span class="hljs-tag">&lt;/</span><span class="hljs-name">v</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">c</span><span class="hljs-tag">&gt;</span>
   <span class="hljs-tag">&lt;/</span><span class="hljs-name">row</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">sheetData</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">We are expecting the value of the A1 cell to be <strong class="screenText">Hello World</strong>. However, it has the value of <code class="inlineCode">0</code> (zero) instead. The reason for this is that all the strings are stored in the <code class="inlineCode">sharedStrings.xml</code> file, and only the index to the location of the string within the <code class="inlineCode">sharedStrings.xml</code> file is included in <code class="inlineCode">sheetData</code>. Each unique string is only included once in the <code class="inlineCode">sharedStrings.xml</code> file.</p>
    <p class="normal">This is the data from the <code class="inlineCode">sharedStrings.xml</code> file:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">sst</span><span class="hljs-tag"> </span><span class="hljs-attr">count</span><span class="hljs-tag">=</span><span class="hljs-string">"1"</span><span class="hljs-tag"> </span><span class="hljs-attr">uniqueCount</span><span class="hljs-tag">=</span><span class="hljs-string">"1"</span><span class="hljs-tag">&gt;</span>
   <span class="hljs-tag">&lt;</span><span class="hljs-name">si</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">t</span><span class="hljs-tag">&gt;</span>Helllo World<span class="hljs-tag">&lt;/</span><span class="hljs-name">t</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">si</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">sst</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">The following code <a id="_idIndexMarker660"></a>loops through each of the sheets in <code class="inlineCode">SpreadsheetDocument</code> and returns the value of the first cell in the first row of each sheet:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> List&lt;</span><span class="hljs-built_in">string</span><span class="hljs-function">&gt; </span><span class="hljs-title">ReadFirstCell</span><span class="hljs-function">(</span><span class="hljs-params">SpreadsheetDocument doc</span><span class="hljs-function">)</span>
{
    List&lt;<span class="hljs-built_in">string</span>&gt; A1Value = <span class="hljs-keyword">new</span>();
    WorkbookPart wbPart = doc.WorkbookPart;
    <span class="hljs-keyword">var</span> stringTable = wbPart
        .GetPartsOfType&lt;SharedStringTablePart&gt;()
        .FirstOrDefault();
    Sheets sheets = wbPart.Workbook.Sheets;
    <span class="hljs-keyword">foreach</span> (Sheet item <span class="hljs-keyword">in</span> sheets)
    {
        WorksheetPart wsPart = 
            (WorksheetPart)(wbPart.GetPartById(item.Id));
        SheetData sheetData = wsPart
            .Worksheet.Elements&lt;SheetData&gt;().First();
        Row row = sheetData.Elements&lt;Row&gt;().First();
        Cell cell = row.Elements&lt;Cell&gt;().First();
        <span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span> = cell.CellValue.Text;
        <span class="hljs-keyword">if</span> (cell.DataType != <span class="hljs-literal">null</span>)
        {
            <span class="hljs-keyword">if</span> (cell.DataType.Value == CellValues.SharedString)
            {
                <span class="hljs-keyword">value</span> = stringTable
                    .SharedStringTable
                    .ElementAt(<span class="hljs-built_in">int</span>.Parse(<span class="hljs-keyword">value</span>)).InnerText;
            }
        }
        A1Value.Add(<span class="hljs-keyword">value</span>);
    }
    <span class="hljs-keyword">return</span> A1Value;
}
</code></pre>
    <p class="normal">You have learned how to read an Excel file by using the <code class="inlineCode">Open XML SDK</code>. The <code class="inlineCode">Open XML SDK</code> is very powerful. It can be used not only to read Excel files but also to both create new Excel files and <a id="_idIndexMarker661"></a>update existing ones. It can also be used to create, read, and update both Word and PowerPoint files.</p>
    <p class="normal">Now, let’s get a quick overview of the project that we are going to build in this chapter.</p>
    <h1 id="_idParaDest-275" class="heading-1">Creating the Excel reader project</h1>
    <p class="normal">The Blazor WebAssembly application that we are going to build in this chapter is an Excel file reader. We <a id="_idIndexMarker662"></a>will use the <code class="inlineCode">InputFile</code> component to upload an Excel file. Then, we will use the <code class="inlineCode">Open XML SDK</code> to loop through the rows of one of the worksheets in the Excel file. Finally, we will use the <code class="inlineCode">Virtualize</code> component to render the data from the Excel file in an HTML table.</p>
    <p class="normal">The following is a screenshot of the completed application:</p>
    <figure class="mediaobject"><img src="../Images/B18471_09_06.png" alt="Table

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 9.6: Excel reader app</p>
    <p class="normal">The build <a id="_idIndexMarker663"></a>time for this project is approximately 45 minutes.</p>
    <h2 id="_idParaDest-276" class="heading-2">Project overview</h2>
    <p class="normal">The <code class="inlineCode">ExcelReader</code> project will be created by using Microsoft’s <strong class="keyWord">Blazor WebAssembly App Empty</strong> project template to <a id="_idIndexMarker664"></a>create an empty Blazor WebAssembly project. First, we will add the <code class="inlineCode">Open XML SDK</code> to the project. Then, we will add a model to capture the information that we are reading from the Excel file. We will use an <code class="inlineCode">InputFile</code> component to upload the Excel file. We will use the <code class="inlineCode">Open XML SDK</code> to read the Excel file. Finally, we will use the <code class="inlineCode">Virtualize</code> component to display the data from the Excel file.</p>
    <h2 id="_idParaDest-277" class="heading-2">Create the Excel reader project</h2>
    <p class="normal">We need to <a id="_idIndexMarker665"></a>create a new Blazor WebAssembly app. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open Visual Studio 2022.</li>
      <li class="numberedList">Click the <strong class="screenText">Create a new project</strong> button.</li>
      <li class="numberedList">Press <em class="keystroke">Alt</em>+<em class="keystroke">S</em> to enter the <strong class="screenText">search for templates</strong> textbox.</li>
      <li class="numberedList">Enter <code class="inlineCode">Blazor</code> and press the <em class="keystroke">Enter</em> key.
    <p class="normal">The following screenshot shows the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template:</p>
    <figure class="mediaobject"><img src="../Images/B18471_09_07.png" alt="Graphical user interface, text, application, chat or text message

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 9.7: Blazor WebAssembly App Empty project template</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Select the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template and click the <strong class="screenText">Next</strong> button.</li>
      <li class="numberedList">Enter <code class="inlineCode">ExcelReader</code> in the <strong class="screenText">Project name</strong> textbox and click the <strong class="screenText">Next</strong> button.
    <p class="normal">This is a <a id="_idIndexMarker666"></a>screenshot of the dialog used to configure our new project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_09_08.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 9.8: Configure your new project dialog</p>
    <div class="packt_tip">
      <p class="normal">TIP</p>
      <p class="normal">In the preceding example, we placed the <code class="inlineCode">ExcelReader</code> project into the <code class="inlineCode">E:/Blazor</code> folder. However, the location of this project is not important.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Select <strong class="screenText">.NET 7.0</strong> as the version of the <strong class="screenText">Framework</strong> to use.</li>
      <li class="numberedList">Check the <strong class="screenText">Configure for HTTPS</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">ASP.NET Core Hosted</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">Progressive Web Application</strong> checkbox.
    <p class="normal">This is a screenshot of the dialog used to collect additional information about our new project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_09_09.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 9.9: Additional information dialog</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="11">Click the <strong class="screenText">Create</strong> button.</li>
    </ol>
    <p class="normal">We have created <a id="_idIndexMarker667"></a>an empty <code class="inlineCode">ExcelReader</code> Blazor WebAssembly project. We will use the <code class="inlineCode">Open XML SDK</code> to read the Microsoft Excel file.</p>
    <h2 id="_idParaDest-278" class="heading-2">Install the Open XML SDK</h2>
    <p class="normal">We need <a id="_idIndexMarker668"></a>to install the <code class="inlineCode">Open XML SDK</code> into our web app. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Select <strong class="screenText">Tools</strong>, <strong class="screenText">NuGet Package Manager</strong>, <strong class="screenText">Package Manager Console</strong> from the Visual Studio menu to open the <strong class="screenText">Package Manager Console</strong>.</li>
      <li class="numberedList">Enter the following command:
        <pre class="programlisting con"><code class="hljs-con">Install-Package DocumentFormat.OpenXml
</code></pre>
      </li>
      <li class="numberedList">Press the <em class="keystroke">Enter</em> key.</li>
    </ol>
    <p class="normal">The <code class="inlineCode">Open XML SDK</code> is now installed.</p>
    <p class="normal">Now we need to <a id="_idIndexMarker669"></a>add a class to contain the information that we will read from the Excel file.</p>
    <h2 id="_idParaDest-279" class="heading-2">Add the Medals class</h2>
    <p class="normal">The Excel file that we will upload will include a count of medals that were awarded to each country in <a id="_idIndexMarker670"></a>each of the summer Olympic Games since 1896. We need to add a <code class="inlineCode">Medals</code> class to collect that information. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <strong class="screenText">ExcelReader</strong> project and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Folder</strong> option from the menu.</li>
      <li class="numberedList">Name the new folder <code class="inlineCode">Models</code>.</li>
      <li class="numberedList">Right-click the <strong class="screenText">Models</strong> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Class</strong> option from the menu.</li>
      <li class="numberedList">Name the new class <code class="inlineCode">Medals</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Add the following properties to the <code class="inlineCode">Medals</code> class:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Year { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? Country { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Gold { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Silver { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Bronze { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      </li>
    </ol>
    <p class="normal">We have added the <code class="inlineCode">Medals</code> class to capture the data from the Excel file. Next, we need to add the ability to upload the Excel file that we want to read.</p>
    <h2 id="_idParaDest-280" class="heading-2">Upload the Excel file</h2>
    <p class="normal">We will use the <code class="inlineCode">InputFile</code> component <a id="_idIndexMarker671"></a>to both select and upload the Excel file. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">Pages/Index.razor</code> file.</li>
      <li class="numberedList">Remove the <code class="inlineCode">h1</code> element.</li>
      <li class="numberedList">Add the following <code class="inlineCode">using</code> statement:
        <pre class="programlisting code"><code class="hljs-code">@using Microsoft.AspNetCore.Components.Forms;
</code></pre>
      </li>
      <li class="numberedList">Add the following markup:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>Excel Reader<span class="hljs-tag">&lt;/</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">InputFile</span><span class="hljs-tag"> </span><span class="hljs-attr">OnChange</span><span class="hljs-tag">=</span><span class="hljs-string">"@SelectFile"</span><span class="hljs-tag"> </span><span class="hljs-attr">accept</span><span class="hljs-tag">=</span><span class="hljs-string">".xlsx"</span><span class="hljs-tag"> /&gt;</span>
@if (file != null)
{
    if (errorMessage == null)
    {
        <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>File Name: @file.Name<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
               File Size: @file.Size.ToString("N0") bytes
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>Content type: @file.ContentType<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"button"</span><span class="hljs-tag">&gt;</span>Read file<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
    }
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>@errorMessage<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
}
@code {
}
</code></pre>
      
    <p class="normal">The preceding <a id="_idIndexMarker672"></a>markup includes an <code class="inlineCode">InputFile</code> component and an <code class="inlineCode">if</code> statement. If <code class="inlineCode">file</code> is not null, the file’s name, size, and content type are displayed.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Add the following code to the code block:
        <pre class="programlisting code"><code class="hljs-code">IBrowserFile? file;
<span class="hljs-built_in">int</span> MAXFILESIZE = <span class="hljs-number">50000</span>;
<span class="hljs-built_in">string</span>? errorMessage;
<span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">SelectFile</span><span class="hljs-function">(</span><span class="hljs-params">InputFileChangeEventArgs e</span><span class="hljs-function">)</span>
{
    file = e.File;
    errorMessage = <span class="hljs-literal">null</span>;
    <span class="hljs-keyword">if</span> ((file.Size &gt;= MAXFILESIZE) ||
    (file.ContentType != <span class="hljs-string">"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"</span>))
    {
        errorMessage = <span class="hljs-string">"Invalid file"</span>;
    }
}
</code></pre>
      
    <p class="normal">The preceding code checks the size and content type of the file and displays an error message if they are invalid. It is a good practice to always set a maximum file size <a id="_idIndexMarker673"></a>since the larger the file, the more resources are required to process it.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Click the <strong class="screenText">Choose file</strong> button.</li>
      <li class="numberedList">Select the <code class="inlineCode">SummerOlympics.xlsx</code> file and click the <strong class="screenText">Open</strong> button.
    <p class="normal">The following screenshot shows the results:</p>
    <figure class="mediaobject"><img src="../Images/B18471_09_10.png" alt="Graphical user interface, text

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 9.10: Select SummerOlympics.xlsx</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">You must download the <code class="inlineCode">SummerOlympics.xlsx</code> file from the GitHub repository. It includes two worksheets: <code class="inlineCode">olympic_hosts</code> and <code class="inlineCode">olympic_medals</code>. We will be working with the <code class="inlineCode">olympic_medals</code> worksheet. It includes the medal count by country and year for the summer Olympics.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Click the <strong class="screenText">Read file</strong> button.</li>
      <li class="numberedList">Verify that nothing happens.</li>
    </ol>
    <p class="normal">We have <a id="_idIndexMarker674"></a>successfully uploaded the Excel file, but when we click the <strong class="screenText">Read file</strong> button, nothing happens. Now we need to write the code to read the data from the Excel file.</p>
    <h2 id="_idParaDest-281" class="heading-2">Read the Excel file</h2>
    <p class="normal">We will <a id="_idIndexMarker675"></a>use the <code class="inlineCode">SpreadsheetDocument</code> class to read the data from the Excel file. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Open the <code class="inlineCode">Pages\Index.razor</code> file.</li>
      <li class="numberedList">Add the following <code class="inlineCode">using</code> statements:
        <pre class="programlisting code"><code class="hljs-code">@using DocumentFormat.OpenXml;
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Spreadsheet;
</code></pre>
      </li>
      <li class="numberedList">Add the following fields to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-built_in">bool</span> loaded;
<span class="hljs-built_in">int</span> rowCount;
</code></pre>
     
    <p class="normal">The <code class="inlineCode">loaded</code> field will be used to toggle the markup used to display the data, and the <code class="inlineCode">rowCount</code> field will be used to hold the number of rows in the Excel file.</p> </li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Add the following <code class="inlineCode">ReadFile</code> method to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">ReadFile</span><span class="hljs-function">()</span>
{
    <span class="hljs-keyword">try</span>
    {
        <span class="hljs-keyword">var</span> stream = <span class="hljs-keyword">new</span> MemoryStream();
        <span class="hljs-keyword">await</span> file.OpenReadStream(MAXFILESIZE)
                  .CopyToAsync(stream);
        SpreadsheetDocument doc = 
             SpreadsheetDocument.Open(stream, <span class="hljs-literal">false</span>);
        WorkbookPart wbPart = doc.WorkbookPart;
        <span class="hljs-keyword">var</span> sheet = wbPart.Workbook
             .Descendants&lt;Sheet&gt;()
             .Where(s =&gt; s.Name == <span class="hljs-string">"olympic_medals"</span>)
             .FirstOrDefault();
        WorksheetPart wsPart = 
             (WorksheetPart)(wbPart.GetPartById(sheet.Id));
        SheetData sheetData =
            wsPart.Worksheet.Elements&lt;SheetData&gt;().First();
        rowCount = sheetData.Elements&lt;Row&gt;().Count();
        loaded = <span class="hljs-literal">true</span>;
    }
    <span class="hljs-keyword">catch</span> (Exception)
    {
        errorMessage = <span class="hljs-string">"Invalid Excel file"</span>;
    }
}
</code></pre>
      
    <p class="normal">The preceding code sets the value of <code class="inlineCode">rowCount</code> to the number of rows in the <code class="inlineCode">olympic_medals</code> worksheet.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Update <a id="_idIndexMarker676"></a>the <code class="inlineCode">Read file</code> button to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"button"</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"ReadFile"</span><span class="hljs-tag">&gt;</span>
    Read file
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
</code></pre>
      
    <p class="normal">When the <strong class="screenText">Read file </strong>button is clicked, the <code class="inlineCode">ReadFile</code> method will be invoked.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Add the following <code class="inlineCode">if</code> statement after the <code class="inlineCode">Read file</code> button:
        <pre class="programlisting code"><code class="hljs-code">if (!loaded)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;</span>Loading...<span class="hljs-tag">&lt;/</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
}
else
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>Rows: @rowCount<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
}
</code></pre>
     
    <p class="normal">The preceding code will display <code class="inlineCode">rowCount</code> after the file has been loaded.</p> </li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Click the <strong class="screenText">Choose file</strong> button.</li>
      <li class="numberedList">Select the <code class="inlineCode">SummerOlympics.xlsx</code> file and click the <strong class="screenText">Open</strong> button.</li>
      <li class="numberedList">Click the <strong class="screenText">Read file</strong> button.</li>
      <li class="numberedList">Verify that the correct number of rows is displayed.</li>
    </ol>
    <p class="normal">We have read the <a id="_idIndexMarker677"></a>number of rows in the <code class="inlineCode">olympic_medals</code> worksheet in the <code class="inlineCode">SummerOlympics.xlsx</code> file. Next, we will populate a collection of medals by looping through each of the rows in the worksheet.</p>
    <h2 id="_idParaDest-282" class="heading-2">Populate the medals collection</h2>
    <p class="normal">We need to loop <a id="_idIndexMarker678"></a>through all the rows to populate the collection of medals. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Open the <code class="inlineCode">Pages\Index.razor</code> file.</li>
      <li class="numberedList">Add the following <code class="inlineCode">using</code> statements:
        <pre class="programlisting code"><code class="hljs-code">@using ExcelReader.Models;
@using System.Collections.ObjectModel;
</code></pre>
      </li>
      <li class="numberedList">Add the following field to the code block:
        <pre class="programlisting code"><code class="hljs-code">Collection<span class="hljs-tag">&lt;</span><span class="hljs-name">Medals</span><span class="hljs-tag">&gt;</span> allMedals = new();
</code></pre>
      
    <p class="normal">The <code class="inlineCode">allMedals</code> field will be used to hold the data that is read from the Excel file.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">After the code that set <code class="inlineCode">rowCount</code>, add the following code in the <code class="inlineCode">ReadFile</code> method:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">var</span> stringTable = wbPart
    .GetPartsOfType&lt;SharedStringTablePart&gt;()
    .FirstOrDefault();
<span class="hljs-keyword">foreach</span> (Row r <span class="hljs-keyword">in</span> sheetData.Elements&lt;Row&gt;())
{
    <span class="hljs-keyword">if</span> (r.RowIndex! == <span class="hljs-number">1</span>)
    {
        <span class="hljs-keyword">continue</span>;
    };
    <span class="hljs-built_in">int</span> col = <span class="hljs-number">1</span>;
    <span class="hljs-keyword">var</span> medals = <span class="hljs-keyword">new</span> Medals();
    <span class="hljs-keyword">foreach</span> (Cell c <span class="hljs-keyword">in</span> r.Elements&lt;Cell&gt;())
    {
        <span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span> = c.InnerText;
        <span class="hljs-keyword">if</span> (c.DataType != <span class="hljs-literal">null</span>)
        {
            <span class="hljs-keyword">if</span> (c.DataType.Value == 
                CellValues.SharedString)
            {
                <span class="hljs-keyword">value</span> = stringTable.SharedStringTable
                    .ElementAt(<span class="hljs-built_in">int</span>.Parse(<span class="hljs-keyword">value</span>))
                    .InnerText;
            }
        }
        <span class="hljs-keyword">switch</span> (col)
        {
            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:
                medals.Year = <span class="hljs-built_in">int</span>.Parse(<span class="hljs-keyword">value</span>);
                <span class="hljs-keyword">break</span>;
            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:
                medals.Country = <span class="hljs-keyword">value</span>;
                <span class="hljs-keyword">break</span>;
            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:
                medals.Gold = <span class="hljs-built_in">int</span>.Parse(<span class="hljs-keyword">value</span>);
                <span class="hljs-keyword">break</span>;
            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:
                medals.Silver = <span class="hljs-built_in">int</span>.Parse(<span class="hljs-keyword">value</span>);
                <span class="hljs-keyword">break</span>;
            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:
                medals.Bronze = <span class="hljs-built_in">int</span>.Parse(<span class="hljs-keyword">value</span>);
                <span class="hljs-keyword">break</span>;
            <span class="hljs-literal">default</span>:
                <span class="hljs-keyword">break</span>;
        }
        col = col + <span class="hljs-number">1</span>;
    }
    allMedals.Add(medals);
}
</code></pre>
      
    <p class="normal">The first thing that the preceding code does is load <code class="inlineCode">stringTable</code>. Then, it determines the <code class="inlineCode">value</code> of the cell and updates the appropriate property of the <code class="inlineCode">Medals</code> object, based on the column that is being read. If the cell is of type <code class="inlineCode">SharedString</code>, it determines its value by using <code class="inlineCode">stringTable</code>.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start <a id="_idIndexMarker679"></a>the application without debugging.</li>
      <li class="numberedList">Click the <strong class="screenText">Choose file</strong> button.</li>
      <li class="numberedList">Select the <code class="inlineCode">SummerOlympics.xlsx</code> file and click the <strong class="screenText">Open</strong> button.</li>
      <li class="numberedList">Click the <strong class="screenText">Read file</strong> button.</li>
      <li class="numberedList">Verify that the correct number of rows is still displayed.</li>
    </ol>
    <p class="normal">We are reading all the rows into the collection of medals, but we are not rendering them. Next, we need to render them to the screen.</p>
    <h2 id="_idParaDest-283" class="heading-2">Render the Medals collection</h2>
    <p class="normal">We need to <a id="_idIndexMarker680"></a>add the <code class="inlineCode">Virtualize</code> component to the <code class="inlineCode">Home</code> page to render the data. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">Pages\Index.razor</code> file.</li>
      <li class="numberedList">Add the following <code class="inlineCode">using</code> statement:
        <pre class="programlisting code"><code class="hljs-code">@using Microsoft.AspNetCore.Components.Web.Virtualization
</code></pre>
      </li>
      <li class="numberedList">Add the following markup below the <code class="inlineCode">p</code> element that is displaying <code class="inlineCode">rowCount</code>:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">style</span><span class="hljs-tag">=</span><span class="hljs-string">"height:200px;overflow-y:scroll"</span><span class="hljs-tag"> </span><span class="hljs-attr">tabindex</span><span class="hljs-tag">=</span><span class="hljs-string">"-1"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">table</span><span class="hljs-tag"> </span><span class="hljs-attr">width</span><span class="hljs-tag">=</span><span class="hljs-string">"450"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">thead</span><span class="hljs-tag"> </span><span class="hljs-attr">style</span><span class="hljs-tag">=</span><span class="hljs-string">"position: sticky; top: 0; background-color: silver"</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">tr</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>Year<span class="hljs-tag">&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag"> </span><span class="hljs-attr">width</span><span class="hljs-tag">=</span><span class="hljs-string">"255"</span><span class="hljs-tag">&gt;</span>Country<span class="hljs-tag">&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>Gold<span class="hljs-tag">&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>Silver<span class="hljs-tag">&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>Bronze<span class="hljs-tag">&lt;/</span><span class="hljs-name">th</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">tr</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">thead</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">tbody</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">Virtualize</span><span class="hljs-tag"> </span><span class="hljs-attr">Items</span><span class="hljs-tag">=</span><span class="hljs-string">"@allMedals"</span><span class="hljs-tag">  </span>
<span class="hljs-tag">                        </span><span class="hljs-attr">SpacerElement</span><span class="hljs-tag">=</span><span class="hljs-string">"tr"</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">tr</span><span class="hljs-tag">&gt;</span>
                    <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag"> </span><span class="hljs-attr">align</span><span class="hljs-tag">=</span><span class="hljs-string">"center"</span><span class="hljs-tag">&gt;</span>@context.Year<span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
                    <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>@context.Country<span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
                    <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag"> </span><span class="hljs-attr">align</span><span class="hljs-tag">=</span><span class="hljs-string">"center"</span><span class="hljs-tag">&gt;</span>@context.Gold<span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
                    <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag"> </span><span class="hljs-attr">align</span><span class="hljs-tag">=</span><span class="hljs-string">"center"</span><span class="hljs-tag">&gt;</span> 
                        @context.Silver
                    <span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
                    <span class="hljs-tag">&lt;</span><span class="hljs-name">td</span><span class="hljs-tag"> </span><span class="hljs-attr">align</span><span class="hljs-tag">=</span><span class="hljs-string">"center"</span><span class="hljs-tag">&gt;</span> 
                        @context.Bronze
                    <span class="hljs-tag">&lt;/</span><span class="hljs-name">td</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;/</span><span class="hljs-name">tr</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">Virtualize</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">tbody</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">table</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
     
    <p class="normal">The preceding markup uses the <code class="inlineCode">Virtualize</code> component to display each of the objects in the collection.</p> </li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="4">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Click the <strong class="screenText">Choose file</strong> button.</li>
      <li class="numberedList">Select the <code class="inlineCode">SummerOlympics.xlsx</code> file and click the <strong class="screenText">Open</strong> button.</li>
      <li class="numberedList">Click the <strong class="screenText">Read file</strong> button.</li>
      <li class="numberedList">Scroll through the list of items.</li>
    </ol>
    <p class="normal">We have added <a id="_idIndexMarker681"></a>the ability to display all the items from a collection, using the <code class="inlineCode">Virtualize</code> component.</p>
    <h1 id="_idParaDest-284" class="heading-1">Summary</h1>
    <p class="normal">You should now be able to upload files into your Blazor WebAssembly app. You should be able to use virtualization to render your pages faster when you are working with a large dataset. Finally, you should be comfortable with working with Microsoft Excel files.</p>
    <p class="normal">In this chapter, we explained how to upload files and how to resize image files. We explained how to use virtualization. Finally, we introduced the <code class="inlineCode">Open XML SDK</code> and explained how to use it to read Excel files. </p>
    <p class="normal">After that, we used the <strong class="keyWord">Blazor WebAssembly App Empty</strong> project template to create a new project and added the <code class="inlineCode">Open XML SDK</code> to the project. Next, we added an <code class="inlineCode">InputFile</code> component to upload an Excel file to the app. We used the <code class="inlineCode">Open XML SDK</code> to read the number of rows in a particular worksheet. Then, we looped through all the rows in the selected worksheet and stored their values in a collection. Finally, we used the <code class="inlineCode">Virtualize</code> component to display all the items in the collection.</p>
    <p class="normal">Now that you know how to upload files to your web app, your users can provide data to your application in a variety of different formats. In this project, we used an Excel file, but you can easily extrapolate what you have learned to use other types of files.</p>
    <p class="normal">In the next chapter, we will use SQL Server to build a task manager using the ASP.NET Web API.</p>
    <h1 id="_idParaDest-285" class="heading-1">Questions</h1>
    <p class="normal">The following questions are provided for your consideration:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">The <code class="inlineCode">SummerOlypics.xlsx</code> file contains two worksheets. How can you join the data from the two worksheets before displaying it?</li>
      <li class="numberedList">What are some of the benefits of resizing an image?</li>
      <li class="numberedList">Is it a good practice to always include <code class="inlineCode">Placeholder</code> when using the <code class="inlineCode">Virtualize</code> component?</li>
      <li class="numberedList">Can the <code class="inlineCode">Open XML SDK</code> be used to create a new Excel file?</li>
      <li class="numberedList">How can you avoid reading an entire file into memory when using the <code class="inlineCode">InputFile</code> component?</li>
    </ol>
    <h1 id="_idParaDest-286" class="heading-1">Further reading</h1>
    <p class="normal">The following resources provide more information concerning the topics covered in this chapter:</p>
    <ul>
      <li class="bulletList">For more information on security best practices when uploading files, refer to <a href="https://learn.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads"><span class="url">https://learn.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads</span></a>.</li>
      <li class="bulletList">For the <code class="inlineCode">Virtualize</code> component source code in GitHub, refer to <a href="https://github.com/dotnet/aspnetcore/blob/main/src/Components/Web/src/Virtualization/Virtualize.cs"><span class="url">https://github.com/dotnet/aspnetcore/blob/main/src/Components/Web/src/Virtualization/Virtualize.cs</span></a>.</li>
      <li class="bulletList">For more information on the <code class="inlineCode">Open XML SDK</code>, refer to <a href="https://learn.microsoft.com/en-us/office/open-xml/open-xml-sdk"><span class="url">https://learn.microsoft.com/en-us/office/open-xml/open-xml-sdk</span></a>.</li>
      <li class="bulletList">For more information on the Open XML specification, refer to <a href="https://www.ecma-international.org/publications-and-standards/standards/ecma-376/"><span class="url">https://www.ecma-international.org/publications-and-standards/standards/ecma-376/</span></a>.</li>
    </ul>
  </div>
</body>
</html>