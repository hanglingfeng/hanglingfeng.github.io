<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>Chapter_11</title>
  <link href="../Styles/syntax-highlighting.css" rel="stylesheet" type="text/css"/>
  <link href="../Styles/epub.css" rel="stylesheet" type="text/css"/>
</head>

<body id="Chapter_11" lang="en-US" xml:lang="en-US">
  <div id="_idContainer312" class="Basic-Text-Frame">
    <h1 class="chapterNumber">11</h1>
    <h1 id="_idParaDest-313" class="chapterTitle">Building a Task Manager Using ASP.NET Web API</h1>
    <p class="normal">Most websites are not islands standing alone. They need a server. They rely on a server for both data access and security, among other services.</p>
    <p class="normal">In this chapter, we will learn how to create a hosted Blazor WebAssembly app. We will learn how to use the <strong class="keyWord">HttpClient</strong> service to call web APIs, and we will also learn how to use <strong class="keyWord">JSON helper methods</strong> to make requests to a web API to read, add, edit, and delete data.</p>
    <p class="normal">The project that we create in this chapter will be a <strong class="keyWord">task manager</strong>. We will use a multi-project architecture to separate the Blazor WebAssembly app from the ASP.NET Web API endpoints. The hosted Blazor WebAssembly app will use JSON helper methods to read, add, edit, and delete tasks that are stored in a SQL Server database. An ASP.NET core project will host the Blazor WebAssembly app and provide the ASP.NET Web API endpoints. A third project will be used to define the classes that are shared by the other two projects.</p>
    <blockquote class="packt_quote">
      <p class="quote">Islands stand alone.</p>
      <p class="quote">Most websites are not islands - </p>
      <p class="quote">they need a server.</p>
    </blockquote>
    <p class="normal">In this chapter, we will cover the following topics:</p>
    <ul>
      <li class="bulletList">Understanding hosted applications</li>
      <li class="bulletList">Using the <code class="inlineCode">HttpClient</code> service</li>
      <li class="bulletList">Using JSON helper methods</li>
      <li class="bulletList">Creating the task manager project</li>
    </ul>
    <h1 id="_idParaDest-314" class="heading-1">Technical requirements</h1>
    <p class="normal">To complete this project, you need to have Visual Studio 2022 installed on your PC. For instructions on how to install the free Community Edition of Visual Studio 2022, refer to <em class="chapterRef">Chapter 1</em>, <em class="italic">Introduction to Blazor WebAssembly</em>. You will also need access to a version of SQL Server. For instructions on how to install the free edition of SQL Server 2022, refer to <em class="chapterRef">Chapter 1</em>, <em class="italic">Introduction to Blazor WebAssembly</em>.</p>
    <p class="normal">The source code for this chapter is available in the following GitHub repository: <a href="https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter11"><span class="url">https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter11</span></a>.</p>
    <p class="normal">The Code in Action video is available here: <a href="https://packt.link/Ch11"><span class="url">https://packt.link/Ch11</span></a>.</p>
    <h1 id="_idParaDest-315" class="heading-1">Understanding hosted applications</h1>
    <p class="normal">When we create <a id="_idIndexMarker771"></a>a new Blazor WebAssembly project by using Microsoft’s <strong class="screenText">Blazor WebAssembly App Empty</strong> project template, we have the option to create a hosted Blazor WebAssembly app by checking the <strong class="screenText">ASP.NET Core Hosted</strong> checkbox.</p>
    <p class="normal">The following screenshot highlights the <strong class="screenText">ASP.NET Core Hosted</strong> checkbox:</p>
    <figure class="mediaobject"><img src="../Images/B18471_11_01.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.1: Blazor WebAssembly App Empty project template</p>
    <p class="normal">The hosted Blazor WebAssembly app, created by the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template, includes <a id="_idIndexMarker772"></a>the following three projects:</p>
    <ul>
      <li class="bulletList">Client project</li>
      <li class="bulletList">Server project</li>
      <li class="bulletList">Shared project</li>
    </ul>
    <h2 id="_idParaDest-316" class="heading-2">Client project</h2>
    <p class="normal">The client project <a id="_idIndexMarker773"></a>is a client-side Blazor WebAssembly project. It is <a id="_idIndexMarker774"></a>almost identical to the standalone Blazor WebAssembly app we created in <em class="chapterRef">Chapter 2</em>, <em class="italic">Building Your First Blazor WebAssembly Application</em>. The only big difference is in how the data is accessed. In the client project, the sample data is accessed from the server project using Web API endpoints instead of a static file. Since the server project is both hosting the client project and serving <a id="_idIndexMarker775"></a>the data via ASP.NET Web API, it won’t have <a id="_idIndexMarker776"></a>any CORS problems.</p>
    <h2 id="_idParaDest-317" class="heading-2">Server project</h2>
    <p class="normal">The server project is an ASP.NET Core project. This project is responsible for serving the client <a id="_idIndexMarker777"></a>application. In addition to hosting the client app, the server project provides <a id="_idIndexMarker778"></a>the Web API endpoints.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">In this scenario, since the ASP.NET Core project is serving the Blazor WebAssembly app, it must be set as the startup project in the solution.</p>
    </div>
    <h2 id="_idParaDest-318" class="heading-2">Shared project</h2>
    <p class="normal">The shared project is also an ASP.NET Core project. It contains application logic that is shared between the <a id="_idIndexMarker779"></a>other two projects. In the past, we had to write <a id="_idIndexMarker780"></a>validation code on both the client and the server. We had to write JavaScript validation code for the client and C# validation code for the server. Not surprisingly, sometimes the two validation models did not match. The shared project solves that problem since all the validation code is maintained in a single location using a single language.</p>
    <p class="normal">By using a multi-project solution, we can create a more robust application. The shared project defines the classes, and the client project uses the <code class="inlineCode">HttpClient</code> service to make requests for data from the server project.</p>
    <h1 id="_idParaDest-319" class="heading-1">Using the HttpClient service</h1>
    <p class="normal">HTTP is not just for <a id="_idIndexMarker781"></a>serving web pages – it can also be used for serving data. These are the HTTP methods that we will be using in this chapter:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">GET</code>: This method is <a id="_idIndexMarker782"></a>used to request one or more resources.</li>
      <li class="bulletList"><code class="inlineCode">POST</code>: This method is used to create a new resource.</li>
      <li class="bulletList"><code class="inlineCode">PUT</code>: This method is used to update the specified resource.</li>
      <li class="bulletList"><code class="inlineCode">DELETE</code>: This method is used to delete the specified resource.</li>
    </ul>
    <p class="normal">The <code class="inlineCode">HttpClient</code> service is a preconfigured service for making HTTP requests from a Blazor WebAssembly <a id="_idIndexMarker783"></a>app to a server. It is configured in the <code class="inlineCode">Client/Program.cs</code> file. The following code is used to configure it:</p>
    <pre class="programlisting code"><code class="hljs-code">builder.Services.AddScoped(sp =&gt; <span class="hljs-keyword">new</span> HttpClient { 
    BaseAddress = <span class="hljs-keyword">new</span> Uri(builder.HostEnvironment.BaseAddress) });
</code></pre>
    <p class="normal">The <code class="inlineCode">HttpClient</code> service is added to a page using <strong class="keyWord">dependency injection</strong> (<strong class="keyWord">DI</strong>). To use the <code class="inlineCode">HttpClient</code> service in a <a id="_idIndexMarker784"></a>component, you must inject it by either using the <code class="inlineCode">@inject</code> directive or the <code class="inlineCode">Inject</code> attribute. For more information on DI, see <em class="chapterRef">Chapter 7</em>, <em class="italic">Building a Shopping Cart Using Application State</em>.</p>
    <p class="normal">The following code demonstrates the two different ways to inject the <code class="inlineCode">HttpClient</code> service into a component:</p>
    <pre class="programlisting code"><code class="hljs-code">@inject HttpClient Http[Inject]
<span class="hljs-keyword">public</span> HttpClient Http { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
    <p class="normal">The first example is used in <code class="inlineCode">.razor</code> files while the second example is used in <code class="inlineCode">.razor.cs</code> files. After we have injected the <code class="inlineCode">HttpClient</code> service into a component, we can use the JSON helper methods to send requests to a Web API.</p>
    <h1 id="_idParaDest-320" class="heading-1">Using JSON helper methods</h1>
    <p class="normal">There are three JSON helper methods. There is one for reading data, one for adding data, and one <a id="_idIndexMarker785"></a>for updating data. Since there is not one for deleting data, we will use the <code class="inlineCode">HttpClient.DeleteAsync</code> method to delete data.</p>
    <p class="normal">The following <a id="_idIndexMarker786"></a>table shows the relationship between the JSON helper methods and the HTTP methods:</p>
    <table id="table001-2" class="table-container">
      <tbody>
        <tr>
          <td class="table-cell">
            <p class="normal">JSON Helper Method</p>
          </td>
          <td class="table-cell">
            <p class="normal">HTTP Method</p>
          </td>
          <td class="table-cell">
            <p class="normal">Action</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">GetFromJsonAsync</code></p>
          </td>
          <td class="table-cell">
            <p class="normal">GET</p>
          </td>
          <td class="table-cell">
            <p class="normal">Read</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">PostAsJsonAsync</code></p>
          </td>
          <td class="table-cell">
            <p class="normal">POST</p>
          </td>
          <td class="table-cell">
            <p class="normal">Create</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">PutAsJsonAsync</code></p>
          </td>
          <td class="table-cell">
            <p class="normal">PUT</p>
          </td>
          <td class="table-cell">
            <p class="normal">Update</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">HttpClient.DeleteAsync</code></p>
          </td>
          <td class="table-cell">
            <p class="normal">DELETE</p>
          </td>
          <td class="table-cell">
            <p class="normal">Delete</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p class="packt_figref">Table 11.1: Relationship between the HTTP methods and the JSON helper methods</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">You can also use the <code class="inlineCode">HttpClient</code> service and JSON helper methods to call external web API endpoints. By way of an example, see <em class="chapterRef">Chapter 6</em>, <em class="italic">Building a Weather App as a Progressive Web App (PWA)</em>.</p>
    </div>
    <p class="normal">In the following <a id="_idIndexMarker787"></a>code examples, we will be referring to the <code class="inlineCode">TaskItem</code> class. This is the <code class="inlineCode">TaskItem</code> class:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TaskItem</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> TaskItemId { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? TaskName { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> IsComplete { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
}
</code></pre>
    <h2 id="_idParaDest-321" class="heading-2">GetFromJsonAsync</h2>
    <p class="normal">The <code class="inlineCode">GetFromJsonAsync</code> method is<a id="_idIndexMarker788"></a> used to read data. It does <a id="_idIndexMarker789"></a>the following:</p>
    <ul>
      <li class="bulletList">Sends an <code class="inlineCode">HTTP GET</code> request to the indicated URI.</li>
      <li class="bulletList">Deserializes the JSON response body to create the indicated object.</li>
    </ul>
    <p class="normal">The following code uses the <code class="inlineCode">GetFromJsonAsync</code> method to return a collection of <code class="inlineCode">TaskItem</code> objects:</p>
    <pre class="programlisting code"><code class="hljs-code">IList&lt;TaskItem&gt;? tasks;
<span class="hljs-built_in">string</span> requestUri = <span class="hljs-string">"api/TaskItems"</span>;
            
tasks = <span class="hljs-keyword">await</span> Http.GetFromJsonAsync&lt;IList&lt;TaskItem&gt;&gt;(requestUri);
</code></pre>
    <p class="normal">In the preceding code, the type of object returned by the <code class="inlineCode">GetFromJsonAsync</code> method is <code class="inlineCode">IList&lt;TaskItem&gt;.</code> </p>
    <p class="normal">We can also use the <code class="inlineCode">GetFromJsonAsync</code> method to get an individual object. The following code uses the <code class="inlineCode">GetFromJsonAsync</code> method to return a single <code class="inlineCode">TaskItem</code> object where <code class="inlineCode">id</code> is the unique identifier of the object:</p>
    <pre class="programlisting code"><code class="hljs-code">TaskItem? task;
<span class="hljs-built_in">string</span> requestUri = <span class="hljs-string">"api/TaskItems/{id}"</span>;
task = <span class="hljs-keyword">await</span> Http.GetFromJsonAsync&lt;TaskItem&gt;(requestUri);
</code></pre>
    <p class="normal">In the preceding <a id="_idIndexMarker790"></a>code, the type of object returned by the <code class="inlineCode">GetFromJsonAsync</code> method <a id="_idIndexMarker791"></a>is <code class="inlineCode">TaskItem</code>.</p>
    <h2 id="_idParaDest-322" class="heading-2">PostAsJsonAsync</h2>
    <p class="normal">The <code class="inlineCode">PostAsJsonAsync</code> method is <a id="_idIndexMarker792"></a>used to add data. It does <a id="_idIndexMarker793"></a>the following:</p>
    <ul>
      <li class="bulletList">Sends an <code class="inlineCode">HTTP POST</code> request to the indicated URI. The request includes the JSON-encoded content used to create the new data.</li>
      <li class="bulletList">Returns an <code class="inlineCode">HttpResponseMessage</code> instance that includes both a status code and data.</li>
    </ul>
    <p class="normal">The following code creates a new <code class="inlineCode">TaskItem</code> object by using the <code class="inlineCode">PostAsJsonAsync</code> method:</p>
    <pre class="programlisting code"><code class="hljs-code">TaskItem newTaskItem = <span class="hljs-keyword">new</span>() { TaskName = <span class="hljs-string">"Buy Milk"</span>};
<span class="hljs-built_in">string</span> requestUri = <span class="hljs-string">"api/TaskItems"</span>;
<span class="hljs-keyword">var</span> response = 
    <span class="hljs-keyword">await</span> Http.PostAsJsonAsync(requestUri, newTaskItem);
<span class="hljs-keyword">if</span> (response.IsSuccessStatusCode)
{
    <span class="hljs-keyword">var</span> task = 
        <span class="hljs-keyword">await</span> response.Content.ReadFromJsonAsync&lt;TaskItem&gt;();
}
<span class="hljs-keyword">else</span>
{
    <span class="hljs-comment">// handle error</span>
};
</code></pre>
    <p class="normal">In the preceding <a id="_idIndexMarker794"></a>code, the new <code class="inlineCode">TaskItem</code> is deserialized from <a id="_idIndexMarker795"></a>the response using the <code class="inlineCode">ReadFromJsonAsync</code> method if the HTTP response returns a success status code.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">The <code class="inlineCode">ReadFromJsonAsync</code> method returns deserialized content. It is included in the <code class="inlineCode">System.Text.Json</code> library <a id="_idIndexMarker796"></a>provided by Microsoft. The <code class="inlineCode">System.Text.Json</code> library includes high-performance, low-allocating methods for serializing and deserializing JSON text to and from objects.</p>
    </div>
    <h2 id="_idParaDest-323" class="heading-2">PutAsJsonAsync</h2>
    <p class="normal">The <code class="inlineCode">PutAsJsonAsync</code> method is <a id="_idIndexMarker797"></a>used to update data. It does <a id="_idIndexMarker798"></a>the following:</p>
    <ul>
      <li class="bulletList">Sends an <code class="inlineCode">HTTP PUT</code> request to the indicated URI. The request includes the JSON-encoded content used to update the data.</li>
      <li class="bulletList">Returns an <code class="inlineCode">HttpResponseMessage</code> instance that includes both a status code and data.</li>
    </ul>
    <p class="normal">The following code updates an existing <code class="inlineCode">TaskItem</code> object by using the <code class="inlineCode">PutAsJsonAsync</code> method:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-built_in">string</span> requestUri = <span class="hljs-string">$"api/TaskItems/</span><span class="hljs-subst">{updatedTaskItem.TaskItemId}</span><span class="hljs-string">"</span>;
<span class="hljs-keyword">var</span> response = 
    <span class="hljs-keyword">await</span> Http.PutAsJsonAsync&lt;TaskItem&gt;
        (requestUri, updatedTaskItem);
<span class="hljs-keyword">if</span> (response.IsSuccessStatusCode)
{
    <span class="hljs-keyword">var</span> task = 
        <span class="hljs-keyword">await</span> response.Content.ReadFromJsonAsync&lt;TaskItem&gt;();
}
<span class="hljs-keyword">else</span>
{
    <span class="hljs-comment">// handle error</span>
};
</code></pre>
    <p class="normal">In the preceding code, the updated <code class="inlineCode">TaskItem</code> is deserialized from the response using the <code class="inlineCode">ReadFromJsonAsync</code> method if the HTTP response returns a success status code.</p>
    <h2 id="_idParaDest-324" class="heading-2">HttpClient.DeleteAsync</h2>
    <p class="normal">The <code class="inlineCode">HttpClient.DeleteAsync</code> method is <a id="_idIndexMarker799"></a>used to delete data. It <a id="_idIndexMarker800"></a>does the following:</p>
    <ul>
      <li class="bulletList">Sends an <code class="inlineCode">HTTP DELETE </code>request to the indicated URI.</li>
      <li class="bulletList">Returns an <code class="inlineCode">HttpResponseMessage</code> instance that includes both a status code and data.</li>
    </ul>
    <p class="normal">The following code deletes an existing <code class="inlineCode">TaskItem</code> object by using the <code class="inlineCode">Http.DeleteAsync</code> method:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-built_in">string</span> requestUri = <span class="hljs-string">$"api/TaskItems/</span><span class="hljs-subst">{taskItem.TaskItemId}</span><span class="hljs-string">"</span>;
<span class="hljs-keyword">var</span> response = <span class="hljs-keyword">await</span> Http.DeleteAsync(requestUri);
<span class="hljs-keyword">if</span> (!response.IsSuccessStatusCode)
{
    <span class="hljs-comment">// handle error</span>
};
</code></pre>
    <p class="normal">In the preceding code, the <code class="inlineCode">TaskItem</code> with the indicated <code class="inlineCode">TaskItemId</code> is deleted.</p>
    <p class="normal">The JSON helper methods make it easy to consume web APIs. We use them to read, create, and update <a id="_idIndexMarker801"></a>data. We use <code class="inlineCode">HttpClient.DeleteAsync</code> to <a id="_idIndexMarker802"></a>delete data.</p>
    <p class="normal">Now, let’s get a quick overview of the project that we are going to build in this chapter.</p>
    <h1 id="_idParaDest-325" class="heading-1">Creating the TaskManager project</h1>
    <p class="normal">In this chapter, we will <a id="_idIndexMarker803"></a>build a hosted Blazor WebAssembly app to manage tasks. We will be able to view, add, edit, and delete tasks. The tasks will be stored in a SQL Server database.</p>
    <p class="normal">This is a screenshot of the completed application:</p>
    <figure class="mediaobject"><img src="../Images/B18471_11_02.png" alt="Chart

Description automatically generated with medium confidence"/></figure>
    <p class="packt_figref">Figure 11.2: TaskManager project</p>
    <p class="normal">The build <a id="_idIndexMarker804"></a>time for this project is approximately 60 minutes.</p>
    <h2 id="_idParaDest-326" class="heading-2">Project overview</h2>
    <p class="normal">The <code class="inlineCode">TaskManager</code> project will be created by using Microsoft’s <strong class="keyWord">Blazor WebAssembly App Empty</strong> project template <a id="_idIndexMarker805"></a>to create a hosted Blazor WebAssembly project. First, we will add both a <code class="inlineCode">TaskItem</code> class and a <code class="inlineCode">TaskItemsController</code> class. Next, we will use <code class="inlineCode">Entity Framework</code> migrations to create a database in SQL Server. We will add <code class="inlineCode">Bootstrap</code> and <code class="inlineCode">Bootstrap icons</code> to our project to style our UI. Finally, we will demonstrate how to read data, update data, delete data, and add data using the <code class="inlineCode">HttpClient</code> service.</p>
    <h2 id="_idParaDest-327" class="heading-2">Create the TaskManager project</h2>
    <p class="normal">We need <a id="_idIndexMarker806"></a>to create a new hosted Blazor WebAssembly app. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open Visual Studio 2022.</li>
      <li class="numberedList">Click the <strong class="screenText">Create a new project</strong> button.</li>
      <li class="numberedList">Press <em class="keystroke">Alt</em>+<em class="keystroke">S</em> to enter the <strong class="screenText">Search for templates</strong> textbox.</li>
      <li class="numberedList">Enter <code class="inlineCode">Blazor</code> and press the <em class="keystroke">Enter</em> key.
    <p class="normal">The following screenshot shows the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template:</p>
    <figure class="mediaobject"><img src="../Images/B18471_11_03.png" alt="Graphical user interface, text, application, chat or text message

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.3: Blazor WebAssembly App Empty project template</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Select the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template and click the <strong class="screenText">Next</strong> button.</li>
      <li class="numberedList">Enter <code class="inlineCode">TaskManager</code> in the <strong class="screenText">Project name</strong> textbox and click the <strong class="screenText">Next</strong> button.
    <p class="normal">This is a <a id="_idIndexMarker807"></a>screenshot of the dialog used to configure our new project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_11_04.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.4: Configure your new project dialog</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">In the preceding example, we placed the <code class="inlineCode">TaskManager</code> project into the <code class="inlineCode">E:/Blazor</code> folder. However, the location of this project is not important.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Select <strong class="screenText">.NET 7.0</strong> as the version of the <code class="inlineCode">Framework</code> to use.</li>
      <li class="numberedList">Check the <strong class="screenText">Configure for HTTPS</strong> checkbox.</li>
      <li class="numberedList">Check the <strong class="screenText">ASP.NET Core Hosted</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">Progressive Web Application</strong> checkbox.
    <p class="normal">This is a <a id="_idIndexMarker808"></a>screenshot of the dialog used to collect additional information about our new project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_11_05.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.5: Additional information dialog</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="11">Click the <strong class="screenText">Create</strong> button.
    <p class="normal">We have created a hosted <strong class="screenText">TaskManager</strong> Blazor WebAssembly project. </p>
    <p class="normal">The <strong class="screenText">TaskManager</strong> solution comprises three different projects. The following <a id="_idIndexMarker809"></a>screenshot of Visual Studio’s <strong class="screenText">Solution Explorer</strong> shows the three projects that are in the solution:</p>
    <figure class="mediaobject"><img src="../Images/B18471_11_06.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.6: Solution Explorer</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="12">Right-click the <strong class="screenText">TaskManager.Server</strong> project and select the <strong class="screenText">Set as Startup Project </strong>option from the menu.</li>
    </ol>
    <p class="normal">We have created the <strong class="screenText">TaskManager</strong> solution and set the <strong class="screenText">TaskManager.Server</strong> project as the startup project. Now we need to add a shared class to the <strong class="screenText">TaskManager.Shared</strong> project.</p>
    <h2 id="_idParaDest-328" class="heading-2">Adding the TaskItem class</h2>
    <p class="normal">We need <a id="_idIndexMarker810"></a>to add the <code class="inlineCode">TaskItem</code> class. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <strong class="screenText">TaskManager.Shared</strong> project and select the <strong class="screenText">Add</strong>, <strong class="screenText">Class</strong> option from the menu.</li>
      <li class="numberedList">Name the new class <code class="inlineCode">TaskItem</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Make the class public by adding the <code class="inlineCode">public</code> modifier:
        <pre class="programlisting code"><code class="hljs-code"><span class="code-highlight"><strong class="hljs-keyword-slc">public</strong></span> <span class="hljs-keyword">class</span> <span class="hljs-title">TaskItem</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following properties to the <code class="inlineCode">TaskItem</code> class:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> TaskItemId { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? TaskName { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> IsComplete { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      </li>
      <li class="numberedList">From the <strong class="screenText">Build</strong> menu, select the <strong class="screenText">Build Solution</strong> option.</li>
    </ol>
    <p class="normal">We have added <a id="_idIndexMarker811"></a>the <code class="inlineCode">TaskItem</code> class. Next, we need to add an <code class="inlineCode">API controller</code> for the <code class="inlineCode">TaskItem</code> class. The <code class="inlineCode">API Controller</code> will handle incoming HTTP requests from the Blazor WebAssembly client and will send responses back to it.</p>
    <h2 id="_idParaDest-329" class="heading-2">Adding the TaskItem API controller</h2>
    <p class="normal">We need <a id="_idIndexMarker812"></a>to add a <code class="inlineCode">TaskItemsController</code> class. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <strong class="screenText">TaskManager.Server</strong> project and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Folder</strong> option from the menu.</li>
      <li class="numberedList">Name the new folder <code class="inlineCode">Controllers</code>.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">TaskManager.Server.Contollers</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Controller</strong> option from the menu.</li>
      <li class="numberedList">Select the <strong class="screenText">API Controller with actions, using Entity Framework</strong> option:</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_11_07.png" alt="Graphical user interface, application, Teams

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.7: Add New Scaffolded Item dialog</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Set <strong class="screenText">Model class</strong> to <strong class="screenText">TaskItem (TaskManager.Shared)</strong>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add data context</strong> button to open the <strong class="screenText">Add Data Context</strong> dialog:</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_11_08.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.8: Add API Controller with actions, using Entity Framework dialog</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Click the <strong class="screenText">Add</strong> button <a id="_idIndexMarker813"></a>to accept the default values.</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_11_09.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.9: Add Data Context dialog</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Click the <strong class="screenText">Add</strong> button on the <strong class="screenText">Add API Controller with actions, using Entity Framework</strong> dialog.</li>
    </ol>
    <p class="normal">We have <a id="_idIndexMarker814"></a>created the <code class="inlineCode">TaskItemsController</code> class. Now we need to set up SQL Server.</p>
    <h2 id="_idParaDest-330" class="heading-2">Setting up SQL Server</h2>
    <p class="normal">We need to <a id="_idIndexMarker815"></a>create a new database on SQL Server and add a table to contain the tasks. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">TaskManager.Server/appsettings.json</code> file.</li>
      <li class="numberedList">Update the connection string to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-attr">"ConnectionStrings"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"TaskManagerServerContext"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Server={Server name}; Database=TaskManager; Trusted_Connection=True; Encrypt=False;"</span>
<span class="hljs-punctuation">}</span>
</code></pre>
      </li>
      <li class="numberedList">Replace the <code class="inlineCode">{Server name}</code> placeholder with the name of your SQL Server.</li>
    </ol>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Although we are using SQL Server 2022 Express, it does not matter what version of SQL Server you use for this project.</p>
    </div>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="4">From the <strong class="screenText">Tools</strong> menu, select the <strong class="screenText">NuGet Package Manager</strong>, <strong class="screenText">Package Manager Console</strong> option.</li>
      <li class="numberedList">In <strong class="screenText">Package Manager Console</strong>, use the drop-down list to change <strong class="screenText">Default project</strong> to <strong class="screenText">TaskManager.Server</strong>.</li>
      <li class="numberedList">Execute the following commands in <strong class="screenText">Package Manager Console</strong>:
        <pre class="programlisting con"><code class="hljs-con">Add-Migration Init
Update-Database
</code></pre>
      
    <p class="normal">The preceding commands use <code class="inlineCode">Entity Framework</code> migrations to update SQL Server.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">From the <strong class="screenText">View</strong> menu, select <strong class="screenText">SQL Server Object Explorer</strong>.</li>
      <li class="numberedList">If you do not see the SQL Server instance that you are using for this project, click the <strong class="screenText">Add SQL Server</strong> button to connect it:</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_11_10.png" alt="Graphical user interface, application, website

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.10: SQL Server Object Explorer</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Navigate to the <strong class="screenText">TaskManager</strong> database.
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">If you do not see the <strong class="screenText">TaskManager</strong> database under <strong class="screenText">Databases</strong>, right-click <strong class="screenText">Databases</strong> and select the <strong class="screenText">Refresh</strong> option.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="10">Navigate <a id="_idIndexMarker816"></a>to <strong class="screenText">TaskManager</strong>, <strong class="screenText">Tables</strong>, <strong class="screenText">dbo.TaskItem</strong>:</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_11_11.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.11: TaskManager database</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="11">Right-click <strong class="screenText">dbo.TaskItem</strong> and select the <strong class="screenText">View Data</strong> option.</li>
      <li class="numberedList">Enter a couple of tasks by completing the <strong class="screenText">TaskName</strong> field and setting the <strong class="screenText">IsComplete</strong> field to <strong class="screenText">False</strong>:</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_11_12.png" alt="Table

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.12: Sample data</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="13">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start <a id="_idIndexMarker817"></a>the application without debugging.</li>
      <li class="numberedList">Add <code class="inlineCode">/api/taskitems</code> to the address bar and press <em class="keystroke">Enter</em>.
    <p class="normal">The following screenshot shows the JSON that is returned by <code class="inlineCode">TaskItemsController</code>:</p>
    <figure class="mediaobject"><img src="../Images/B18471_11_13.png" alt="Graphical user interface, text

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.13: JSON returned by the TaskItem API controller</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="15">Close the browser.</li>
    </ol>
    <p class="normal">We have <a id="_idIndexMarker818"></a>demonstrated that <code class="inlineCode">TaskItemsController</code> works. Now we can start working on the <code class="inlineCode">TaskManager.Client</code> project. We will use <code class="inlineCode">Bootstrap</code> to style our UI and <code class="inlineCode">Bootstrap icons</code> to provide the trashcan image on the delete button.</p>
    <h2 id="_idParaDest-331" class="heading-2">Install Bootstrap</h2>
    <p class="normal">We need <a id="_idIndexMarker819"></a>to install <code class="inlineCode">Bootstrap</code> and <code class="inlineCode">Bootstrap icons</code> in our web app. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">Alt</em>+<em class="keystroke">L</em> to view <strong class="screenText">Solution Explorer</strong>.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">TaskManager.Client/wwwroot/css</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Client-Side Library</strong> option from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">bootstrap</code> into the <strong class="screenText">Library</strong> search textbox and press the <em class="keystroke">Enter</em> key.</li>
      <li class="numberedList">Select <strong class="screenText">Choose specific files</strong>.</li>
      <li class="numberedList">Select only the <strong class="screenText">css</strong> files, as shown in the following screenshot:
    <figure class="mediaobject"><img src="../Images/B18471_11_14.png" alt="Graphical user interface, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.14: Add Client-Side Library dialog</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">Although the preceding screenshot has version 5.2.3 of Bootstrap selected, you can use any version of Bootstrap 5 to complete this project.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Click <a id="_idIndexMarker820"></a>the <strong class="screenText">Install</strong> button.
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">After you install <code class="inlineCode">Bootstrap</code>, a new folder will be added to the <code class="inlineCode">wwwroot/css</code> folder. This new folder contains all the CSS files needed for <code class="inlineCode">Bootstrap</code>. We will only be using the <code class="inlineCode">bootstrap.min.css</code> file in this project. </p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Open the <code class="inlineCode">TaskManager.Client/wwwroot/index.html</code> file.</li>
      <li class="numberedList">Add the following markup to the <code class="inlineCode">head</code> element before the link to the <code class="inlineCode">css/app.css</code> stylesheet:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">link</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"css/bootstrap/css/bootstrap.min.css"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">        </span><span class="hljs-attr">rel</span><span class="hljs-tag">=</span><span class="hljs-string">"stylesheet"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Right-click <a id="_idIndexMarker821"></a>the <code class="inlineCode">TaskManager.Client/wwwroot/css</code> folder and select the <strong class="screenText">Add, Client-Side Library</strong> option from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">bootstrap-icons</code> into the <strong class="screenText">Library</strong> search textbox and press the <em class="keystroke">Enter</em> key.</li>
      <li class="numberedList">Select <strong class="screenText">Choose specific files</strong>.</li>
      <li class="numberedList">Select only the <strong class="screenText">font</strong> files as shown in the following screenshot:</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_11_15.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.15: Add Client-Side Library dialog</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="14">Open the <code class="inlineCode">TaskManager.Client/wwwroot/index.html</code> file.</li>
      <li class="numberedList">Add the following markup to the <code class="inlineCode">head</code> element before the link to the <code class="inlineCode">css/app.css</code> stylesheet:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">link</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"css/bootstrap-icons/font/bootstrap-icons.css"</span>
<span class="hljs-tag">      </span><span class="hljs-attr">rel</span><span class="hljs-tag">=</span><span class="hljs-string">"stylesheet"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
    </ol>
    <p class="normal">We have <a id="_idIndexMarker822"></a>installed both <code class="inlineCode">Bootstrap </code>and<code class="inlineCode"> Boostrap icons</code>. Now we will update the <strong class="screenText">Home</strong> page to display the tasks that are stored in SQL Server.</p>
    <h2 id="_idParaDest-332" class="heading-2">Displaying the tasks</h2>
    <p class="normal">We need to <a id="_idIndexMarker823"></a>fetch the list of tasks and display them to the user. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">TaskManager.Client.Pages</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Class</strong> option from the menu.</li>
      <li class="numberedList">Name the new class <code class="inlineCode">Index.razor.cs</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Add the <code class="inlineCode">partial</code> modifier to the class:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <span class="code-highlight"><strong class="hljs-keyword-slc">partial</strong></span> <span class="hljs-keyword">class</span> <span class="hljs-title">Index</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following <code class="inlineCode">using</code> statement:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">using</span> Microsoft.AspNetCore.Components;
</code></pre>
      </li>
      <li class="numberedList">Add the following property to the <code class="inlineCode">Index</code> class:
        <pre class="programlisting code"><code class="hljs-code">[<span class="hljs-meta">Inject</span>] <span class="hljs-keyword">public</span> HttpClient Http { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      
    <p class="normal">The preceding code injects the <code class="inlineCode">HttpClient</code> service into the component.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Add the following code to the <code class="inlineCode">Index</code> class:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span> IList&lt;TaskItem&gt;? tasks;
<span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span>? error;
<span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">OnInitializedAsync</span><span class="hljs-function">()</span>
{
    <span class="hljs-keyword">try</span>
    {
        <span class="hljs-built_in">string</span> requestUri = <span class="hljs-string">"api/TaskItems"</span>;
        tasks =
            <span class="hljs-keyword">await</span> Http.GetFromJsonAsync&lt;IList&lt;TaskItem&gt;&gt;
            (requestUri);
    }
    <span class="hljs-keyword">catch</span> (Exception)
    {
        error = <span class="hljs-string">"Error Encountered"</span>;
    };
}
</code></pre>
      
    <p class="normal">The preceding code uses the <code class="inlineCode">GetFromJsonAsync</code> method to return the collection of <code class="inlineCode">TaskItem</code> objects.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Verify that <a id="_idIndexMarker824"></a>Visual Studio has automatically added the following <code class="inlineCode">using</code> statements:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">using</span> System.Net.Http.Json;
<span class="hljs-keyword">using</span> TaskManager.Shared;
</code></pre>
      </li>
      <li class="numberedList">Open the <code class="inlineCode">TaskManager.Client.Pages/Index.razor</code> page.</li>
      <li class="numberedList">Remove the <code class="inlineCode">h1</code> element.</li>
      <li class="numberedList">Add the following <code class="inlineCode">@if</code> statement:
        <pre class="programlisting code"><code class="hljs-code">@if (tasks == null)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;&lt;</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;</span>Loading...<span class="hljs-tag">&lt;/</span><span class="hljs-name">em</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
}
else
{
    @foreach (var taskItem in tasks)
    {
    }
}
</code></pre>
      
    <p class="normal">The preceding markup displays the loading message if the value of <code class="inlineCode">tasks</code> is <code class="inlineCode">null</code>. Otherwise, it loops through the collection of <code class="inlineCode">TaskItem</code> objects in <code class="inlineCode">tasks</code>.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="12">Add the following markup to the <code class="inlineCode">@foreach</code> loop:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"d-flex col-md-6 mx-auto border-bottom"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">    @</span><span class="hljs-attr">key</span><span class="hljs-tag">=</span><span class="hljs-string">"taskItem"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"p-2 flex-fill"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">input</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"checkbox"</span>
<span class="hljs-tag">            </span><span class="hljs-attr">checked</span><span class="hljs-tag">=</span><span class="hljs-string">"@taskItem.IsComplete"</span><span class="hljs-tag"> /&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">span</span><span class="hljs-tag">&gt;</span>
            @taskItem.TaskName
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">span</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"p-1"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"button"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">                </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"btn btn-outline-danger btn-sm"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">                </span><span class="hljs-attr">title</span><span class="hljs-tag">=</span><span class="hljs-string">"Delete task"</span><span class="hljs-tag">&gt;</span> 
            <span class="hljs-tag">&lt;</span><span class="hljs-name">span</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"bi bi-trash"</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">span</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      
    <p class="normal">The preceding <a id="_idIndexMarker825"></a>markup displays a checkbox, the <code class="inlineCode">TaskName</code> field, and a delete button for each <code class="inlineCode">TaskItem</code> class.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="13">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.
    <p class="normal">The following is a screenshot of the <strong class="screenText">Home</strong> page:</p>
    <figure class="mediaobject"><img src="../Images/B18471_11_16.png" alt="Graphical user interface, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 11.16: List of tasks</p></li>
    </ol>
    <p class="normal">We have added a list of tasks to the <strong class="screenText">Home</strong> page, but nothing happens when we click either the checkbox or the <strong class="screenText">delete</strong> button. Next, we need to allow the user to mark a task as complete.</p>
    <h2 id="_idParaDest-333" class="heading-2">Completing the tasks</h2>
    <p class="normal">We will allow <a id="_idIndexMarker826"></a>the user to mark a task as complete by clicking the checkbox next to the name of the task. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">TaskManager.Client</code>/<code class="inlineCode">Pages</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Item</strong> option from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">css</code> in the <strong class="screenText">Search</strong> box.</li>
      <li class="numberedList">Select <strong class="screenText">Style Sheet</strong>.</li>
      <li class="numberedList">Name the file <code class="inlineCode">Index.razor.css</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Replace the default text with the following style:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-selector-class">.completed-task</span> {
    <span class="hljs-attribute">text-decoration</span>: line-through;
}
</code></pre>
      
    <p class="normal">The preceding style will render a line through the tasks that are in the <code class="inlineCode">completed-task</code> class.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Open <a id="_idIndexMarker827"></a>the <code class="inlineCode">TaskManager.Client/wwwroot/index.html</code> file.</li>
      <li class="numberedList">Uncomment the following link element:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">link</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"TaskManager.Client.styles.css"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">      </span><span class="hljs-attr">rel</span><span class="hljs-tag">=</span><span class="hljs-string">"stylesheet"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Open the <code class="inlineCode">Index.razor</code> file.</li>
      <li class="numberedList">Update the <code class="inlineCode">span</code> element used to display the task’s name to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">span</span><span class="hljs-tag"> </span>
<span class="hljs-tag">   </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"@((taskItem.IsComplete? "</span><span class="hljs-attr">completed-task</span><span class="hljs-tag">" </span><span class="hljs-attr">:</span><span class="hljs-tag"> ""))"&gt;</span>
   @taskItem.TaskName
<span class="hljs-tag">&lt;/</span><span class="hljs-name">span</span><span class="hljs-tag">&gt;</span>
</code></pre>
     
    <p class="normal">The preceding markup will set the class of the <code class="inlineCode">span</code> element to <code class="inlineCode">completed-task</code> when the task is completed by checking the checkbox associated with the task.</p> </li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="12">Add the following markup to the <code class="inlineCode">input</code> element of type checkbox:
        <pre class="programlisting code"><code class="hljs-code">@onchange=<span class="hljs-string">"@(()=&gt;CheckboxChecked(taskItem))"</span>
</code></pre>
      </li>
      <li class="numberedList">Open the <code class="inlineCode">TaskManager.Client.Pages/Index.razor.cs</code> file.</li>
      <li class="numberedList">Add the following <code class="inlineCode">CheckboxChecked</code> method:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">CheckboxChecked</span><span class="hljs-function">(</span><span class="hljs-params">TaskItem task</span><span class="hljs-function">)</span>
{
    task.IsComplete = !task.IsComplete;
    <span class="hljs-built_in">string</span> requestUri = <span class="hljs-string">$"api/TaskItems/</span><span class="hljs-subst">{task.TaskItemId}</span><span class="hljs-string">"</span>;
    <span class="hljs-keyword">var</span> response =
        <span class="hljs-keyword">await</span> Http.PutAsJsonAsync&lt;TaskItem&gt;
        (requestUri, task);
    <span class="hljs-keyword">if</span> (!response.IsSuccessStatusCode)
    {
        error = response.ReasonPhrase;
    };
}
</code></pre>
     
    <p class="normal">The preceding code uses the <code class="inlineCode">PutAsJsonAsync</code> method to update the indicated <code class="inlineCode">TaskItem</code> class.</p> </li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="15">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Mark <a id="_idIndexMarker828"></a>one of the tasks as complete by clicking the checkbox next to it.
    <p class="normal">The following screenshot shows a task that has been completed:</p>
    <figure class="mediaobject"><img src="../Images/B18471_11_17.png" alt="Graphical user interface, application

Description automatically generated with medium confidence"/></figure>
    <p class="packt_figref">Figure 11.17: Completed task</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="17">Return to Visual Studio.</li>
      <li class="numberedList">Select the <strong class="screenText">dbo.TaskItem [Data]</strong> tab.</li>
      <li class="numberedList">Click <em class="keystroke">Shift</em>+<em class="keystroke">Alt</em>+<em class="keystroke">R</em> to refresh the data.</li>
      <li class="numberedList">Verify that the <strong class="screenText">IsComplete</strong> field has been updated to <strong class="screenText">True</strong> for the <code class="inlineCode">TaskItem</code> that you marked as complete.</li>
    </ol>
    <p class="normal">When a user checks the checkbox next to a task, the UI is updated, and the SQL Server database is updated. Next, we need to add the ability to delete tasks.</p>
    <h2 id="_idParaDest-334" class="heading-2">Deleting tasks</h2>
    <p class="normal">We need to <a id="_idIndexMarker829"></a>allow users to delete tasks. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">Index.razor</code> file.</li>
      <li class="numberedList">Update the <code class="inlineCode">button</code> element to the following by adding the highlighted code:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">button </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"button"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">        </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"btn btn-outline-danger btn-sm"</span>
<span class="hljs-tag">        </span><span class="hljs-attr">title</span><span class="hljs-tag">=</span><span class="hljs-string">"Delete task"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">        </span><span class="code-highlight"><strong class="hljs-tag-slc">@</strong><strong class="hljs-attr-slc">onclick</strong><strong class="hljs-tag-slc">=</strong><strong class="hljs-string-slc">"@(()=&gt;DeleteTask(taskItem))"</strong><strong class="hljs-tag-slc">&gt;</strong></span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">span</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"bi bi-trash"</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">span</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Open the <code class="inlineCode">TaskManager.Client.Pages/Index.razor.cs</code> file.</li>
      <li class="numberedList">Add the following <code class="inlineCode">DeleteTask</code> method:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">DeleteTask</span><span class="hljs-function">(</span><span class="hljs-params">TaskItem taskItem</span><span class="hljs-function">)</span>
{
    tasks!.Remove(taskItem);
    StateHasChanged();
    <span class="hljs-built_in">string</span> requestUri = 
        <span class="hljs-string">$"api/TaskItems/</span><span class="hljs-subst">{taskItem.TaskItemId}</span><span class="hljs-string">"</span>;
    <span class="hljs-keyword">var</span> response = <span class="hljs-keyword">await</span> Http.DeleteAsync(requestUri);
    <span class="hljs-keyword">if</span> (!response.IsSuccessStatusCode)
    {
        error = response.ReasonPhrase;
    };
}
</code></pre>
      
    <p class="normal">The preceding code uses the <code class="inlineCode">Http.DeleteAsync</code> method to delete the indicated <code class="inlineCode">TaskItem</code> class.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Click the button with the garbage can icon to delete one of the tasks.</li>
      <li class="numberedList">Return to Visual Studio.</li>
      <li class="numberedList">Select the <strong class="screenText">dbo.TaskItem [Data]</strong> tab.</li>
      <li class="numberedList">Click <em class="keystroke">Shift</em>+<em class="keystroke">Alt</em>+<em class="keystroke">R</em> to refresh the data.</li>
      <li class="numberedList">Verify that the <code class="inlineCode">TaskItem</code> has been deleted.</li>
    </ol>
    <p class="normal">We have added the ability to delete tasks. Now we need to add the ability to add new tasks.</p>
    <h2 id="_idParaDest-335" class="heading-2">Adding new tasks</h2>
    <p class="normal">We need to <a id="_idIndexMarker830"></a>provide a way for users to add new tasks. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">Index.razor</code> file.</li>
      <li class="numberedList">Add the following markup before the <code class="inlineCode">@foreach</code> loop:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"d-flex col-md-6 mx-auto py-2"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">input</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"text"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">           </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"form-control m-1"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">           </span><span class="hljs-attr">placeholder</span><span class="hljs-tag">=</span><span class="hljs-string">"Enter Task"</span><span class="hljs-tag"> @</span><span class="hljs-attr">bind</span><span class="hljs-tag">=</span><span class="hljs-string">"newTask"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"button"</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"btn btn-success"</span>
<span class="hljs-tag">        @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"AddTask"</span><span class="hljs-tag">&gt;</span>
        Add
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Open the <code class="inlineCode">TaskManager.Client.Pages/Index.razor.cs</code> file.</li>
      <li class="numberedList">Add the following field:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span>? newTask;
</code></pre>
      </li>
      <li class="numberedList">Add the following <code class="inlineCode">AddTask</code> method:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">AddTask</span><span class="hljs-function">()</span>
{
    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrWhiteSpace(newTask))
    {
        TaskItem newTaskItem = <span class="hljs-keyword">new</span> TaskItem
        {
            TaskName = newTask,
            IsComplete = <span class="hljs-literal">false</span>
        };
        tasks!.Add(newTaskItem);
        <span class="hljs-built_in">string</span> requestUri = <span class="hljs-string">"api/TaskItems"</span>;
        <span class="hljs-keyword">var</span> response =
            <span class="hljs-keyword">await</span> Http.PostAsJsonAsync
            (requestUri, newTaskItem);
        <span class="hljs-keyword">if</span> (response.IsSuccessStatusCode)
        {
            newTask = <span class="hljs-built_in">string</span>.Empty;
        }
        <span class="hljs-keyword">else</span>
        {
            error = response.ReasonPhrase;
        };
    };
}
</code></pre>
      
    <p class="normal">The preceding code uses the <code class="inlineCode">PostAsJsonAsync</code> method to create a new <code class="inlineCode">TaskItem</code> class. </p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Add <a id="_idIndexMarker831"></a>a few new tasks.</li>
      <li class="numberedList">Return to Visual Studio.</li>
      <li class="numberedList">Select the <strong class="screenText">dbo.TaskItem [Data]</strong> tab.</li>
      <li class="numberedList">Click <em class="keystroke">Shift</em>+<em class="keystroke">Alt</em>+<em class="keystroke">R</em> to refresh the data.</li>
      <li class="numberedList">Verify that the new tasks have been added to the SQL Server database.</li>
    </ol>
    <p class="normal">We have added the ability for users to add new tasks.</p>
    <h1 id="_idParaDest-336" class="heading-1">Summary</h1>
    <p class="normal">You should now be able to create a hosted Blazor WebAssembly app that uses ASP.NET Web API to update data in a SQL Server database.</p>
    <p class="normal">In this chapter, we introduced hosted Blazor WebAssembly apps, the <code class="inlineCode">HttpClient</code> service, and the JSON helper methods used to read, create, and update data. We also demonstrated how to delete data using the <code class="inlineCode">HttpClient.DeleteAsync</code> method.</p>
    <p class="normal">After that, we used Microsoft’s <strong class="keyWord">Blazor WebAssembly App Empty</strong> project template to create a hosted Blazor WebAssembly app. We added a <code class="inlineCode">TaskItem</code> class to the <code class="inlineCode">TaskManager.Shared</code> project and a <code class="inlineCode">TaskItem API controller</code> to the <code class="inlineCode">TaskManager.Server</code> project. Next, we configured SQL Server by updating the connection string to the database and using <code class="inlineCode">Entity Framework</code> migrations. To enhance the UI, we added <code class="inlineCode">Bootstrap</code> and <code class="inlineCode">Bootstrap icons</code>. Finally, we used the <code class="inlineCode">HttpClient</code> service to read the list of tasks, update a task, delete a task, and add new tasks.</p>
    <p class="normal">We can apply our new skills to create a hosted Blazor WebAssembly app that is part of a multi-project solution and use ASP.NET Web API to read, create, update, and delete data.</p>
    <p class="normal">In the next chapter, we will build an expense tracker using the <code class="inlineCode">EditForm</code> component.</p>
    <h1 id="_idParaDest-337" class="heading-1">Questions</h1>
    <p class="normal">The following questions are provided for your consideration:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">What are the benefits of using a hosted Blazor WebAssembly project versus a standalone Blazor WebAssembly project?</li>
      <li class="numberedList">What is the difference between HTTP GET, HTTP POST, and HTTP PUT?</li>
      <li class="numberedList">In our project, how would we obtain the <code class="inlineCode">TaskItemId</code> of a <code class="inlineCode">TaskItem</code> that was created using the <code class="inlineCode">PostAsJsonAsync</code> method?</li>
      <li class="numberedList">Can you add, edit, and delete data in a SQL Server database directly from Visual Studio?</li>
    </ol>
    <h1 id="_idParaDest-338" class="heading-1">Further reading</h1>
    <p class="normal">The following resources provide more information concerning the topics covered in this chapter:</p>
    <ul>
      <li class="bulletList">For more information on the <code class="inlineCode">HttpClient</code> class, refer to <a href="https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient"><span class="url">https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient</span></a>.</li>
      <li class="bulletList">For more information on calling a web API from Blazor WebAssembly, refer to <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api"><span class="url">https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api</span></a>.</li>
      <li class="bulletList">For more information on the extension methods that perform serialization and deserialization using <code class="inlineCode">System.Text.Json</code>, refer to <a href="https://learn.microsoft.com/en-us/dotnet/api/system.text.json"><span class="url">https://learn.microsoft.com/en-us/dotnet/api/system.text.json</span></a>.</li>
      <li class="bulletList">For more information on <code class="inlineCode">Entity Framework</code>, refer to <a href="https://learn.microsoft.com/en-us/ef"><span class="url">https://learn.microsoft.com/en-us/ef</span></a>.</li>
      <li class="bulletList">For more information on <code class="inlineCode">Bootstrap</code>, refer to <a href="https://getbootstrap.com"><span class="url">https://getbootstrap.com</span></a>.</li>
    </ul>
  </div>
</body>
</html>