<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>Chapter_3</title>
  <link href="../Styles/syntax-highlighting.css" rel="stylesheet" type="text/css"/>
  <link href="../Styles/epub.css" rel="stylesheet" type="text/css"/>
</head>

<body id="Chapter_3" lang="en-US" xml:lang="en-US">
  <div id="_idContainer112" class="Basic-Text-Frame">
    <h1 class="chapterNumber">3</h1>
    <h1 id="_idParaDest-101" class="chapterTitle">Debugging and Deploying a Blazor WebAssembly App</h1>
    <p class="normal">Debugging is not always fun, but it is an important aspect of software development. When debugging a Blazor WebAssembly app, Microsoft Visual Studio provides most of the functionality we need. However, since apps built with Blazor WebAssembly run on the client, we also need to learn how to use the browser’s <strong class="keyWord">developer tools</strong> (<strong class="keyWord">DevTools</strong>) to debug the app. After we finish debugging a Blazor WebAssembly app, we can use Microsoft Visual Studio to deploy it.</p>
    <p class="normal">In this chapter, we will create a simple game that we will use to practice both debugging and deploying a Blazor WebAssembly app. We will debug the app using both Visual Studio and <code class="inlineCode">DevTools</code>. We will learn how to log errors using the ILogger interface and we will examine different ways to handle exceptions. After we have completed<a id="_idIndexMarker218"></a> the debugging, we will apply <strong class="keyWord">ahead-of-time</strong> (<strong class="keyWord">AOT</strong>) compilation to the app before deploying it to Microsoft Azure.</p>
    <blockquote class="packt_quote">
      <p class="quote">Shift+Alt+D</p>
      <p class="quote">debugging in the browser.</p>
      <p class="quote">Knowledge is power!</p>
    </blockquote>
    <p class="normal">In this chapter, we will cover the following topics:</p>
    <ul>
      <li class="bulletList">Debugging a Blazor WebAssembly app</li>
      <li class="bulletList">Understanding logging </li>
      <li class="bulletList">Handling exceptions</li>
      <li class="bulletList">Using <strong class="keyWord">ahead-of-time</strong> (<strong class="keyWord">AOT</strong>) compilation</li>
      <li class="bulletList">Deploying a Blazor WebAssembly app to Microsoft Azure</li>
      <li class="bulletList">Creating the “guess the number” project</li>
    </ul>
    <h1 id="_idParaDest-102" class="heading-1">Technical requirements</h1>
    <p class="normal">To complete this project, you need to have Microsoft Visual Studio 2022 installed on your PC. For instructions on how to install the free community edition of Microsoft Visual Studio 2022, refer to <em class="chapterRef">Chapter 1</em>, <em class="italic">Introduction to Blazor WebAssembly</em>. Since we will be deploying this project to Microsoft Azure, you will need an account on Microsoft Azure. If you do not have an account on Microsoft Azure, refer to <em class="chapterRef">Chapter 1</em>, <em class="italic">Introduction to Blazor WebAssembly</em>, to create a free account.</p>
    <p class="normal">The source code for this chapter is available in the following GitHub repository: <a href="https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter03"><span class="url">https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter03</span></a>.</p>
    <p class="normal">The Code in Action video is available here: <a href="https://packt.link/Ch3"><span class="url">https://packt.link/Ch3</span></a>.</p>
    <h1 id="_idParaDest-103" class="heading-1">Debugging a Blazor WebAssembly.app</h1>
    <p class="normal">Debugging is an important<a id="_idIndexMarker219"></a> and useful skill. You can debug a Blazor WebAssembly app by using the debugging tools within Visual Studio or by using <code class="inlineCode">DevTools</code>. To debug on the browser, you must use one of the following browsers:</p>
    <ul>
      <li class="bulletList">Microsoft Edge (version 80 or later)</li>
      <li class="bulletList">Google Chrome (version 70 or later)</li>
    </ul>
    <p class="normal">All the usual debugging scenarios are supported by both Visual Studio and <code class="inlineCode">DevTools</code>:</p>
    <ul>
      <li class="bulletList">Setting and removing breakpoints.</li>
      <li class="bulletList">Pressing <em class="keystroke">F10 </em>to single-step through the code.</li>
      <li class="bulletList">Pressing <em class="keystroke">F11</em> to step into the next function.</li>
      <li class="bulletList">Pressing <em class="keystroke">F5</em> in Visual Studio and <em class="keystroke">F8</em> in the browser to resume code execution.</li>
      <li class="bulletList">Viewing the value of local variables in the <code class="inlineCode">Locals</code> display.</li>
      <li class="bulletList">Viewing the <code class="inlineCode">Call Stack</code>.</li>
      <li class="bulletList">Setting <code class="inlineCode">Watch</code> values.</li>
    </ul>
    <p class="normal">The following scenarios are not currently supported. But, since Microsoft is continuing to make large improvements<a id="_idIndexMarker220"></a> to the debugging process, they will be supported in the future:</p>
    <ul>
      <li class="bulletList">Breaking on unhandled exceptions.</li>
      <li class="bulletList">Hitting the breakpoints during startup.</li>
    </ul>
    <p class="normal">First, we will look at debugging in Visual Studio.</p>
    <h1 id="_idParaDest-104" class="heading-1">Debugging in Visual Studio</h1>
    <p class="normal">If you have any experience<a id="_idIndexMarker221"></a> with using Visual Studio, you probably have used the debugging tools. To start debugging, select <strong class="screenText">Debug</strong>, <strong class="screenText">Start Debugging</strong> from the Visual Studio menu, or press <em class="keystroke">F5</em>.</p>
    <p class="normal">Once you have started debugging, you can use any of the scenarios listed above to debug the code. For example, to set a breakpoint on a line of code, simply click in the margin to the left of the line code.</p>
    <p class="normal">The following screenshot shows a breakpoint that has been set on line 36:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_01.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.1: Breakpoint in Visual Studio</p>
    <p class="normal">Debugging in Visual Studio is as easy as pressing <em class="keystroke">F5</em>. Debugging in the browser requires a bit more effort.</p>
    <h2 id="_idParaDest-105" class="heading-2">Debugging in the browser</h2>
    <p class="normal">Debugging a Blazor WebAssembly app on the browser takes a few steps. The following image shows the steps required <a id="_idIndexMarker222"></a>to start debugging an app in the browser:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_02.png" alt=""/></figure>
    <p class="packt_figref">Figure 3.2: Enabling debugging in the browser</p>
    <p class="normal">These are the steps to enable debugging in the browser:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Press <em class="keystroke">Shift</em>+<em class="keystroke">Alt</em>+<em class="keystroke">D</em> to start debugging.
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">To successfully start debugging, make sure that your application has focus before pressing <em class="keystroke">Shift</em>+<em class="keystroke">Alt</em>+<em class="keystroke">D</em>.</p>
    </div>
    <p class="normal">Since your browser is not yet running with remote debugging enabled, after you press <em class="keystroke">Shift</em>+<em class="keystroke">Alt</em>+<em class="keystroke">D</em>, you will receive the following warning:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_03.png" alt="Text

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.3: Unable to find debuggable browser tab warning</p>
    <p class="normal">The<strong class="screenText"> Unable to find debuggable browser tab</strong> warning gives instructions on how to proceed for both Google Chrome and Microsoft Edge. Since we are using Microsoft Edge for these screenshots, we have highlighted the instructions for Microsoft Edge in the preceding image.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="3">To enable debugging<a id="_idIndexMarker223"></a> in the browser, we need to copy the provided text from the<strong class="screenText"> Unable to find debuggable browser tab </strong>warning to the Windows run command dialog box. Press <em class="keystroke">Win</em>+<em class="keystroke">R</em> to open the run command dialog box, paste the text, and press <em class="keystroke">Enter</em>.
    <p class="normal">This process will launch another browser window that has debugging enabled. If you are asked to sync your devices, you can select <strong class="screenText">No</strong>.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="4">Close the previous browser window.
    <p class="normal">This step is not required. We have included it because it can be confusing to have multiple browsers open.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Press <em class="keystroke">Shift</em>+<em class="keystroke">Alt</em>+<em class="keystroke">D</em>.
    <p class="normal">We have enabled debugging on the browser.</p>
    <p class="normal">There are now two tabs open in the browser. The first tab is running the app and the second tab is running <code class="inlineCode">DevTools</code>:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_04.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.4: Browser with debugging enabled</p>
    <p class="normal">The preceding image<a id="_idIndexMarker224"></a> shows the <code class="inlineCode">DevTools</code> tab. The area on the left is inactive. It is used to display the screen contents from the other tab. The <strong class="screenText">Console</strong> tab in <code class="inlineCode">DevTools</code> is selected. However, the <strong class="screenText">Sources</strong> tab is the one that we will use for debugging.</p>
    <p class="normal">Once we have started debugging, we can use any of the scenarios listed above to debug the code. For example, to set a breakpoint on a line of code, we simply click in the margin to the left of the line code.</p>
    <p class="normal">The following screenshot shows a breakpoint that has been set on line 36:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_05.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.5: Source tab of DevTools</p></li>
    </ol>
    <p class="normal">It is possible to debug a Blazor WebAssembly app using Visual Studio or directly in the browser. Enabling debugging<a id="_idIndexMarker225"></a> in the browser takes a little more effort, but offers the same robust features as found in Visual Studio.</p>
    <p class="normal">By efficiently using logging, debugging can be more efficient. Next, we will learn how to use logging in a Blazor WebAssembly app.</p>
    <h1 id="_idParaDest-106" class="heading-1">Understanding logging</h1>
    <p class="normal">Logging<a id="_idIndexMarker226"></a> is an essential tool for troubleshooting<a id="_idIndexMarker227"></a> any application. It helps to identify and solve problems. Logging is enabled by default in the Blazor WebAssembly project templates provided by Microsoft. However, the only logging provider that is enabled is the <strong class="screenText">Console</strong> provider.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">The <strong class="screenText">Console</strong> provider does not store the logs, it only displays them. If you need to retain your logs, you will need to use a different provider.</p>
    </div>
    <p class="normal">The following code sample does the following:</p>
    <ul>
      <li class="bulletList">Injects an <code class="inlineCode">ILogger&lt;Counter&gt;</code> object into the page. It uses the fully qualified name of the class type as the log category. The log category is included with each log message that is created by that instance of <code class="inlineCode">ILogger</code>.</li>
      <li class="bulletList">Calls <code class="inlineCode">LogInformation</code> to log the indicated string at the <code class="inlineCode">Information</code> log level.</li>
    </ul>
    <p class="normal">The following code writes to the log<a id="_idIndexMarker228"></a> each time the button<a id="_idIndexMarker229"></a> is clicked:</p>
    <p class="normal"><strong class="keyWord">Counter.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@page "/counter"
<span class="code-highlight"><strong class="hljs-slc">@inject ILogger&lt;Counter&gt; logger;</strong></span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>Counter<span class="hljs-tag">&lt;/</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Counter<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag"> </span><span class="hljs-attr">role</span><span class="hljs-tag">=</span><span class="hljs-string">"status"</span><span class="hljs-tag">&gt;</span>Current count: @currentCount<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"btn btn-primary"</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"IncrementCount"</span><span class="hljs-tag">&gt;</span>
    Click me
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
@code {
    private int currentCount = 0;
    private void IncrementCount()
    {
        <span class="code-highlight"><strong class="hljs-slc">logger.LogInformation("Button Clicked!");</strong></span>
        currentCount++;
    }
}
</code></pre>
    <p class="normal">The following screenshot of the <strong class="screenText">Console</strong> tab within <code class="inlineCode">DevTools</code> shows the results of clicking the <strong class="screenText">Click me</strong> button:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_06.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.6: Logging example</p>
    <h2 id="_idParaDest-107" class="heading-2">Understanding log levels</h2>
    <p class="normal">Whenever we log<a id="_idIndexMarker230"></a> an item to the logger, we must provide the log level. The log level indicates the severity of the message.</p>
    <p class="normal">The following table lists the log level values from the lowest to the highest level of severity:</p>
    <table id="table001-1" class="table-container">
      <tbody>
        <tr>
          <td class="table-cell">
            <p class="normal">Log Level</p>
          </td>
          <td class="table-cell">
            <p class="normal">Method</p>
          </td>
          <td class="table-cell">
            <p class="normal">Description</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Trace</p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">LogTrace</code></p>
          </td>
          <td class="table-cell">
            <p class="normal">These messages are extremely detailed and may contain sensitive data. They are disabled by default and should never be enabled in production. </p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Debug</p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">LogDebug</code></p>
          </td>
          <td class="table-cell">
            <p class="normal">These messages are used only during debugging and development.</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Information</p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">LogInformation</code></p>
          </td>
          <td class="table-cell">
            <p class="normal">These messages track the general flow of the application. </p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Warning</p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">LogWarning</code></p>
          </td>
          <td class="table-cell">
            <p class="normal">These messages are for unexpected or abnormal events. </p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Error</p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">LogError</code></p>
          </td>
          <td class="table-cell">
            <p class="normal">These messages are for errors in the current operation, such as a failed save.</p>
          </td>
        </tr>
        <tr>
          <td class="table-cell">
            <p class="normal">Critical</p>
          </td>
          <td class="table-cell">
            <p class="normal"><code class="inlineCode">LogCritical</code></p>
          </td>
          <td class="table-cell">
            <p class="normal">These messages are for critical errors that cause the entire application to fail.</p>
          </td>
        </tr>
      </tbody>
    </table>
    <p class="packt_figref">Table 3.1: Log levels</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">You should use <code class="inlineCode">ILogger</code> rather than <code class="inlineCode">System.Console.WriteLine</code> or <code class="inlineCode">System.Diagnostics.Debug.WriteLine</code> since those methods only allow you to send text to the console and they do not include the name of the class that originated the message. Also, they must be either removed or hidden before the app is deployed.</p>
    </div>
    <p class="normal">When using logging, try to log<a id="_idIndexMarker231"></a> using the appropriate log level and try to make your messages as short as possible without rendering them meaningless. Use a consistent format for your messages so that they can be easily filtered. Finally, avoid logging redundant or irrelevant information because logging is not free; it consumes some resources.</p>
    <p class="normal">You can adjust the minimum log level as necessary.</p>
    <p class="normal">The following <code class="inlineCode">Logging</code> component demonstrates how to use each of the various log levels:</p>
    <p class="normal"><strong class="keyWord">Logging.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@page "/logging"
@inject ILogger<span class="hljs-tag">&lt;</span><span class="hljs-name">Logging</span><span class="hljs-tag">&gt;</span> logger;
<span class="hljs-tag">&lt;</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>Logging<span class="hljs-tag">&lt;/</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Logging<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"btn btn-primary"</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"DemoLogging"</span><span class="hljs-tag">&gt;</span>
    Click me
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
@code {
    private void DemoLogging()
    {
        logger.LogTrace("Logger: Trace");
        logger.LogDebug("Logger: Debug");
        logger.LogInformation("Logger: Information");
        logger.LogWarning("Logger: Warning");
        logger.LogError("Logger: Error");
        logger.LogCritical("Logger: Critical");
        logger.Log(LogLevel.None, "Logger: None");
    }
}
</code></pre>
    <p class="normal">The following screenshot shows how each of the different log levels is rendered<a id="_idIndexMarker232"></a> in <code class="inlineCode">DevTools</code>. </p>
    <figure class="mediaobject"><img src="../Images/B18471_03_07.png" alt="Text

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.7: Log levels</p>
    <h2 id="_idParaDest-108" class="heading-2">Setting the minimum log level</h2>
    <p class="normal">By default, the project<a id="_idIndexMarker233"></a> is configured to display all the logged items with a minimum log level of <code class="inlineCode">Information</code>. You can adjust this setting by completing the following steps:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">From the <strong class="screenText">Tools</strong> menu, select <strong class="screenText">NuGet Package Manager</strong>, <strong class="screenText">Package Manager Console</strong> to open the <strong class="screenText">Package Manager Console</strong>.</li>
      <li class="numberedList">Enter the following text into the <strong class="screenText">Package Manager Console</strong> and press the <em class="keystroke">Enter</em> key:
        <pre class="programlisting code"><code class="hljs-code">Install-Package Microsoft.Extensions.Logging.Configuration
</code></pre>
     
    <p class="normal">The preceding code will add the <strong class="keyWord">Microsoft.Extenstions.Logging.Configuration</strong> NuGet package to the project.</p> </li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="3">Right-click the <code class="inlineCode">wwwroot</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Item</strong> option from the menu.</li>
      <li class="numberedList">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">E</em> to enter the <strong class="screenText">Search</strong> textbox.</li>
      <li class="numberedList">Enter <code class="inlineCode">app settings file</code> in the <strong class="screenText">Search</strong> textbox.</li>
      <li class="numberedList">Enter <code class="inlineCode">appsettings.json</code> in the <strong class="screenText">Name</strong> textbox and click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Replace the default JSON with the following JSON:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"Logging"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"LogLevel"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">"Default"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Information"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">"Microsoft.AspNetCore"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Debug"</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following line to the <code class="inlineCode">Main</code> method of the <code class="inlineCode">Client/Program.cs</code> file:
        <pre class="programlisting code"><code class="hljs-code">builder.Logging.AddConfiguration(
    builder.Configuration.GetSection(<span class="hljs-string">"Logging"</span>)); 
</code></pre>
      </li>
    </ol>
    <p class="normal">The proceeding code will configure the browser to only log items that have a log level of at least <code class="inlineCode">Debug</code>.</p>
    <p class="normal">Logging is an essential tool<a id="_idIndexMarker234"></a> for understanding the flow of a Blazor WebAssembly app. There are different log levels depending on the type of message. The minimum log level displayed can be adjusted with an <code class="inlineCode">appsetting.json</code> file.</p>
    <p class="normal">Now let’s look at some different ways to handle exceptions.</p>
    <h1 id="_idParaDest-109" class="heading-1">Handling exceptions</h1>
    <p class="normal">As part of the template, when<a id="_idIndexMarker235"></a> an unhandled exception occurs in a Blazor WebAssembly app, a yellow bar is displayed at the bottom of the screen:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_08.png" alt="Graphical user interface, text, application, chat or text message

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.8: Sample unhandled exception</p>
    <p class="normal">You can modify the text and style<a id="_idIndexMarker236"></a> of the error message that is displayed by modifying the <code class="inlineCode">index.html</code> file. The UI for the yellow bar is defined in the <code class="inlineCode">wwwroot/index.html</code> file:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">id</span><span class="hljs-tag">=</span><span class="hljs-string">"blazor-error-ui"</span><span class="hljs-tag">&gt;</span>
    An unhandled error has occurred.
    <span class="hljs-tag">&lt;</span><span class="hljs-name">a</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">""</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"reload"</span><span class="hljs-tag">&gt;</span>Reload<span class="hljs-tag">&lt;/</span><span class="hljs-name">a</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">a</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"dismiss"</span><span class="hljs-tag">&gt;</span>X<span class="hljs-tag">&lt;/</span><span class="hljs-name">a</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">You can modify the style of the error message that is displayed in the <code class="inlineCode">wwwroot/css/app.css</code> file.</p>
    </div>
    <p class="normal">In the preceding screenshot, clicking the <strong class="screenText">Throw Exception</strong> button throws an unhandled exception. This is the code for the <code class="inlineCode">ThrowException</code> component that we used to create the <strong class="screenText">Throw Exception</strong> button in the preceding screenshot:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"btn btn-primary"</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"NewException"</span><span class="hljs-tag">&gt;</span>
    Throw Exception
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
@code {
    private void NewException()
    {
        throw new Exception("This is a sample error!");
    }
}
</code></pre>
    <p class="normal">To view the exception, we need to open <code class="inlineCode">DevTools</code> by pressing <em class="keystroke">F12</em> and selecting the <strong class="screenText">Console</strong> tab. By default, unhandled exceptions are logged to the <strong class="screenText">Console</strong>. The following screenshot shows the <strong class="screenText">Console</strong> tab:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_09.png" alt="Text

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.9: Sample critical log</p>
    <p class="normal">In a perfect world, there are not any unhandled<a id="_idIndexMarker237"></a> exceptions. In our world, there are error boundaries and custom error components.</p>
    <h2 id="_idParaDest-110" class="heading-2">Setting error boundaries</h2>
    <p class="normal">Error boundaries<a id="_idIndexMarker238"></a> can be used<a id="_idIndexMarker239"></a> to handle exceptions. The <strong class="keyWord">ErrorBoundary</strong> component<a id="_idIndexMarker240"></a> is a built-in component used to handle unhandled<a id="_idIndexMarker241"></a> errors at the UI level. It includes a <strong class="keyWord">ChildContent</strong> property that renders<a id="_idIndexMarker242"></a> when an error has not occurred and an <strong class="keyWord">ErrorContent</strong> property that renders when an error has occurred. The <code class="inlineCode">ErrorBoundary</code> component can be wrapped around any other component.</p>
    <p class="normal">The following code wraps an <code class="inlineCode">ErrorBoundary</code> component around the <code class="inlineCode">ThrowException</code> component:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">ErrorBoundary</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">ChildContent</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">ThrowException</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">ChildContent</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">ErrorBoundary</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">When the <strong class="screenText">Throw Exception</strong> button is pressed, the following information will be displayed:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_10.png" alt="Graphical user interface

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.10: Default ErrorBoundary UI</p>
    <p class="normal">The default UI for the <code class="inlineCode">ErrorBoundary</code> component<a id="_idIndexMarker243"></a> is defined in the <code class="inlineCode">wwwroot/css/app.css</code> file. The default<a id="_idIndexMarker244"></a> message is very generic. We can add our own custom error message by using the <code class="inlineCode">ErrorContent</code> property of the <code class="inlineCode">ErrorBoundary</code> component. This is the updated <code class="inlineCode">ErrorBoundary</code> component that includes the <code class="inlineCode">ErrorContent</code> property:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">ErrorBoundary</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">ChildContent</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">ThrowException</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">ChildContent</span><span class="hljs-tag">&gt;</span>
<code style="font-weight: bold;" class="codeHighlighted">    </code><span class="code-highlight"><strong class="hljs-tag-slc">&lt;</strong><strong class="hljs-name-slc">ErrorContent</strong><strong class="hljs-tag-slc">&gt;</strong></span>
<code style="font-weight: bold;" class="codeHighlighted">        </code><span class="code-highlight"><strong class="hljs-tag-slc">&lt;</strong><strong class="hljs-name-slc">h3</strong><strong class="hljs-tag-slc">&gt;</strong><strong class="hljs-slc">The Throw Exception button caused this error!</strong><strong class="hljs-tag-slc">&lt;</strong><strong class="hljs-slc">/</strong><strong class="hljs-name-slc">h3</strong><strong class="hljs-tag-slc">&gt;</strong></span>
<code style="font-weight: bold;" class="codeHighlighted">    </code><span class="code-highlight"><strong class="hljs-tag-slc">&lt;</strong><strong class="hljs-slc">/</strong><strong class="hljs-name-slc">ErrorContent</strong><strong class="hljs-tag-slc">&gt;</strong></span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">ErrorBoundary</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">The following screenshot shows the result of the custom <code class="inlineCode">ErrorContent</code>:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_11.png" alt="Graphical user interface, application, Word

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.11: Custom ErrorContent</p>
    <p class="normal">The <code class="inlineCode">ErrorBoundary</code> component only handles errors on the UI level. It allows the developer to catch the error<a id="_idIndexMarker245"></a> at a single point in the UI. To handle the errors<a id="_idIndexMarker246"></a> programmatically, we need to create a custom error component.</p>
    <h2 id="_idParaDest-111" class="heading-2">Creating a custom error component</h2>
    <p class="normal">A custom error component<a id="_idIndexMarker247"></a> can be passed to each child<a id="_idIndexMarker248"></a> component. The following <code class="inlineCode">ErrorHandler</code> component writes to the log when an error is encountered:</p>
    <p class="normal"><strong class="keyWord">ErrorHandler.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@inject ILogger<span class="hljs-tag">&lt;</span><span class="hljs-name">ErrorHandler</span><span class="hljs-tag">&gt;</span> Logger
<span class="hljs-tag">&lt;</span><span class="hljs-name">CascadingValue</span><span class="hljs-tag"> </span><span class="hljs-attr">Value</span><span class="hljs-tag">=</span><span class="hljs-string">"this"</span><span class="hljs-tag">&gt;</span>
    @ChildContent
<span class="hljs-tag">&lt;/</span><span class="hljs-name">CascadingValue</span><span class="hljs-tag">&gt;</span>
@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    public void ProcessError(Exception ex)
    {
        Logger.LogError("Message: {Message}", ex.Message);
    }
}
</code></pre>
    <p class="normal">The <code class="inlineCode">ErrorHandler</code> needs to be added as a <code class="inlineCode">CascadingParameter</code> into the component that will use it. This is the <code class="inlineCode">ThrownExceptionHandled</code> component:</p>
    <p class="normal"><strong class="keyWord">ThrownExceptionHandled.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"btn btn-primary"</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"NewException"</span><span class="hljs-tag">&gt;</span>
    Throw Exception
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
@code {
    [CascadingParameter]
    public ErrorHandler? Error { get; set; }
    private void NewException()
    {
        try
        {
            throw new Exception("This is a sample error!");
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex);
        }     
    }
}
</code></pre>
    <p class="normal">When the <code class="inlineCode">ThrownExceptionHandled</code> component<a id="_idIndexMarker249"></a> is wrapped in the <code class="inlineCode">ErrorHandler</code> component, all the unhandled<a id="_idIndexMarker250"></a> errors are logged to the <strong class="screenText">Console</strong>:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">ErrorHandler</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">ThrowExceptionHandled</span><span class="hljs-tag"> /&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">ErrorHandler</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">The following screenshot shows how the error is rendered to the <strong class="screenText">Console</strong>:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_12.png" alt="Graphical user interface, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.12: Handled error</p>
    <p class="normal">The Blazor WebAssembly project templates provided by Microsoft render a generic yellow bar at the bottom of the page when an unhandled exception is encountered. We can use an <code class="inlineCode">ErrorBoundary</code> component<a id="_idIndexMarker251"></a> to customize the UI. Even better, we<a id="_idIndexMarker252"></a> can create a custom error component for more control over how errors are handled.</p>
    <p class="normal">Now that we know how to handle errors, let’s learn how to prepare our application for deployment.</p>
    <h1 id="_idParaDest-112" class="heading-1">Using ahead-of-time (AOT) compilation</h1>
    <p class="normal">By default, Blazor WebAssembly<a id="_idIndexMarker253"></a> apps use a .NET <strong class="keyWord">Intermediate Language</strong> (<strong class="keyWord">IL</strong>) interpreter when running<a id="_idIndexMarker254"></a> on the browser. <strong class="keyWord">Ahead-of-time</strong> (<strong class="keyWord">AOT</strong>) compilation allows you to compile your .NET code into WebAssembly before deployment. Since compiled code is more performant than interpreted code, your app will run faster. The only downside to using AOT is that the app may be larger and, therefore, will take more time to load during application startup.</p>
    <p class="normal">These are the steps to enable AOT:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the project in the <strong class="screenText">Solution Explorer</strong> and select <strong class="screenText">Properties</strong> from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">AOT</code> in the <strong class="screenText">Search properties</strong> textbox.</li>
      <li class="numberedList">Check the <strong class="screenText">Use ahead-of-time (AOT) compilation on publish</strong> checkbox.</li>
    </ol>
    <p class="normal">Once AOT is enabled, AOT compilation will occur every time the project is published. It takes much longer to publish an app using AOT compilation, but it can make the Blazor WebAssembly app run much faster. This is especially true for CPU-intensive apps.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">You must have <code class="inlineCode">wasm-tools</code> installed to use AOT. To install <code class="inlineCode">wasm-tools</code>, run the following command<a id="_idIndexMarker255"></a> and restart Visual Studio:</p>
      <p class="normal"><code class="inlineCode">dotnet workload install wasm-tools</code></p>
    </div>
    <p class="normal">Now we are ready to deploy the Blazor WebAssembly app.</p>
    <h1 id="_idParaDest-113" class="heading-1">Deploying a Blazor WebAssembly app to Microsoft Azure</h1>
    <p class="normal">Deploying a Blazor WebAssembly<a id="_idIndexMarker256"></a> app using Visual Studio<a id="_idIndexMarker257"></a> is quite simple. There is an easy-to-follow wizard that is included in Visual Studio. These are the steps for deploying a Blazor WebAssembly app to Microsoft Azure using Visual Studio 2022:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the project and select <strong class="screenText">Publish</strong> from the menu.
    <p class="normal">This is the first page of the <strong class="screenText">Publish</strong> wizard:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_13.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.13: First page of Publish wizard</p>
    <p class="normal">As you can see, there are many options provided. For this project, we will be publishing the application to the Microsoft cloud.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="2">Select <strong class="screenText">Azure</strong> and click<a id="_idIndexMarker258"></a> the <strong class="screenText">Next</strong> button.
    <p class="normal">This is the second<a id="_idIndexMarker259"></a> page of the <strong class="screenText">Publish</strong> wizard:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_14.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.14: Second page of Publish wizard</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="3">Select <strong class="screenText">Azure App Service (Windows)</strong> and click the <strong class="screenText">Next</strong> button.
    <p class="normal">This is the last page of the <strong class="screenText">Publish</strong> wizard. This page is used to select the <strong class="screenText">Azure App Service</strong> to use for the application. You can also use this page to create an <strong class="screenText">Azure App Service</strong>.</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_15.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.15: Last page of Publish wizard</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="4">Create<a id="_idIndexMarker260"></a> an <strong class="screenText">Azure App Service</strong> if you do not have<a id="_idIndexMarker261"></a> one.
    <p class="normal">This is a screenshot of the <strong class="screenText">Create New App Service</strong> dialog:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_16.png" alt="Graphical user interface, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.16: Create New App Service dialog</p>
    <p class="normal">If you do not already<a id="_idIndexMarker262"></a> have a Hosting Plan, we recommend<a id="_idIndexMarker263"></a> that you create a <strong class="screenText">Free</strong> hosting plan for this project. The following screenshot shows the <strong class="screenText">Create New Hosting Plan</strong> dialog with the <strong class="screenText">Free</strong> option selected:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_17.png" alt="Graphical user interface, application, table

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.17: Create New Hosting Plan dialog </p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Click the <strong class="screenText">Finish</strong> button.</li>
      <li class="numberedList">Click the <strong class="screenText">Close</strong> button.
    <p class="normal">The application<a id="_idIndexMarker264"></a> is now ready<a id="_idIndexMarker265"></a> to be published.</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_18.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.18: Publish dialog</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Click the <strong class="screenText">Publish</strong> button and wait.</li>
    </ol>
    <p class="normal">The browser will automatically<a id="_idIndexMarker266"></a> open once the app<a id="_idIndexMarker267"></a> is published.</p>
    <p class="normal">Deploying a Blazor WebAssembly app to Microsoft Azure is as simple as following the steps in a wizard.</p>
    <h1 id="_idParaDest-114" class="heading-1">Creating the “guess the number” project</h1>
    <p class="normal">In this section, we will build<a id="_idIndexMarker268"></a> a simple number-guessing game. The game will allow for multiple guesses and will alert us when we win.</p>
    <p class="normal">This is a screenshot of the completed application:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_19.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.19: Guess the Number game</p>
    <p class="normal">The build time for this project<a id="_idIndexMarker269"></a> is approximately 60 minutes.</p>
    <h2 id="_idParaDest-115" class="heading-2">Project overview</h2>
    <p class="normal">The <code class="inlineCode">GuessTheNumber</code> project will be created<a id="_idIndexMarker270"></a> by using Microsoft’s <strong class="keyWord">Blazor WebAssembly App Empty</strong> project template to create<a id="_idIndexMarker271"></a> an empty Blazor WebAssembly project. First, we will add the components needed for the project. Then, we will add logging. We will debug the app in both Visual Studio and the browser. We will add an <code class="inlineCode">ErrorBoundary</code> component. Finally, we will deploy the project to Microsoft Azure.</p>
    <h2 id="_idParaDest-116" class="heading-2">Getting started with the project</h2>
    <p class="normal">We need to create<a id="_idIndexMarker272"></a> a new Blazor WebAssembly app. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open Visual Studio 2022.</li>
      <li class="numberedList">Click the <strong class="screenText">Create a new project</strong> button.</li>
      <li class="numberedList">Press <em class="keystroke">Alt</em>+<em class="keystroke">S</em> to enter the <strong class="screenText">Search for templates</strong> textbox.</li>
      <li class="numberedList">Enter <code class="inlineCode">Blazor</code> and press the <em class="keystroke">Enter</em> key.
    <p class="normal">The following screenshot shows the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template.</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_20.png" alt="Graphical user interface, text, application, chat or text message

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.20: Blazor WebAssembly App Empty project template</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Select the <strong class="screenText">Blazor WebAssembly App Empty</strong><code class="inlineCode"> </code>project template and click the <strong class="screenText">Next</strong> button.</li>
      <li class="numberedList">Enter <code class="inlineCode">GuessTheNumber</code> in the <strong class="screenText">Project name</strong> textbox and click the <strong class="screenText">Next</strong> button.
    <p class="normal">This is a screenshot of the dialog used to configure our new project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_21.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.21: Configure your new project dialog</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">In the preceding example, we placed the <code class="inlineCode">GuessTheNumber</code> project into the <code class="inlineCode">E:\Blazor </code>folder. However, the location of this project is not important.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Select <strong class="screenText">.NET 7.0</strong> as the version<a id="_idIndexMarker273"></a> of the <strong class="screenText">Framework</strong> to use.</li>
      <li class="numberedList">Check the <strong class="screenText">Configure for HTTPS</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">ASP.NET Core Hosted</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">Progressive Web Application</strong> checkbox.
    <p class="normal">This is a screenshot of the <strong class="screenText">Additional information</strong> dialog:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_22.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.22: Additional information dialog</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="11">Click the <strong class="screenText">Create</strong> button.</li>
    </ol>
    <p class="normal">We have created<a id="_idIndexMarker274"></a> the <code class="inlineCode">GuessTheNumber</code> Blazor WebAssembly project. Now we need to add a component.</p>
    <h2 id="_idParaDest-117" class="heading-2">Adding a Game component</h2>
    <p class="normal">We need to add a <code class="inlineCode">Game</code> component<a id="_idIndexMarker275"></a> that includes a Razor page, a code-behind page, and a cascading style sheet. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">GuessTheNumber</code> project and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Folder</strong> option from the menu.</li>
      <li class="numberedList">Name the new folder <code class="inlineCode">Shared</code>.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">Shared</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Razor Component</strong> option from the menu.</li>
      <li class="numberedList">Name the new component <code class="inlineCode">Game</code>.</li>
      <li class="numberedList">Replace the default code in the <code class="inlineCode">Game</code> component with the following markup:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"game"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">strong</span><span class="hljs-tag">&gt;</span>Guess the Number<span class="hljs-tag">&lt;/</span><span class="hljs-name">strong</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"match-val"</span><span class="hljs-tag">&gt;</span>correct digit<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"match-pos"</span><span class="hljs-tag">&gt;</span>correct position<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>digits: @digitCount<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">hr</span><span class="hljs-tag"> /&gt;</span>
    @if (guesses == null)
    {
        <span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Loading...<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
    }
    else
    {
        <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"guesses"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    }
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      
    <p class="normal">The preceding code creates the framework for the game.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Enter the following<a id="_idIndexMarker276"></a> code in the <code class="inlineCode">guesses</code> div:
        <pre class="programlisting code"><code class="hljs-code">@foreach (var row in guesses)
{
    @for (int i = 0; i &lt; digitCount; i++)
    {
        <span class="hljs-tag">&lt;</span><span class="hljs-name">span</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"@row.Matches[i]"</span><span class="hljs-tag">&gt;</span>
            @row.Guess[i]
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">span</span><span class="hljs-tag">&gt;</span>
    }
    <span class="hljs-tag">&lt;</span><span class="hljs-name">br</span><span class="hljs-tag"> /&gt;</span>
}
</code></pre>
      
    <p class="normal">The preceding code loops through each of the <code class="inlineCode">guesses</code> to render them on the screen.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Enter the following code beneath the <code class="inlineCode">@foreach</code> statement:
        <pre class="programlisting code"><code class="hljs-code">@if (winner)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">span</span><span class="hljs-tag">&gt;</span>Winner!<span class="hljs-tag">&lt;/</span><span class="hljs-name">span</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"</span><span class="hljs-string">PlayAgain"</span><span class="hljs-tag">&gt;</span>Play Again<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
}
else
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">input</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"text"</span>
<span class="hljs-tag">        @</span><span class="hljs-attr">bind</span><span class="hljs-tag">=</span><span class="hljs-string">guess</span>
<span class="hljs-tag">        </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"guess"</span>
<span class="hljs-tag">        </span><span class="hljs-attr">inputmode</span><span class="hljs-tag">=</span><span class="hljs-string">"numeric"</span>
<span class="hljs-tag">        </span><span class="hljs-attr">size</span><span class="hljs-tag">=</span><span class="hljs-string">"@digitCount"</span>
<span class="hljs-tag">        </span><span class="hljs-attr">maxlength</span><span class="hljs-tag">=</span><span class="hljs-string">"@digitCount"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"GuessAnswer"</span><span class="hljs-tag">&gt;</span>Guess<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
}
</code></pre>
      </li>
    </ol>
    <p class="normal">The preceding code checks to see if the player is a winner. If they are a winner, it displays the <strong class="screenText">Play Again</strong> button. If they are not a winner, it provides them with an <code class="inlineCode">input</code> element for them to enter another guess.</p>
    <p class="normal">Now that we have added<a id="_idIndexMarker277"></a> the markup, we need to add the code.</p>
    <h2 id="_idParaDest-118" class="heading-2">Adding the code</h2>
    <p class="normal">We will add the code<a id="_idIndexMarker278"></a> for the project in a separate file. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">Shared</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Class</strong> option from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">Game.razor.cs</code> and click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Add the following <code class="inlineCode">using</code> statement to the top of the file:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">using</span> System.Text;
</code></pre>
      </li>
      <li class="numberedList">Add the <code class="inlineCode">partial</code> keyword to the <code class="inlineCode">Game</code> class:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <code style="font-weight: bold;" class="codeHighlighted">partial</code> <span class="hljs-keyword">class</span> <span class="hljs-title">Game</span>
{
}
</code></pre>
      </li>
      <li class="numberedList">Add the following code to the <code class="inlineCode">Game</code> class:
        <pre class="programlisting code"><code class="hljs-code">[<span class="hljs-meta">Parameter</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>? Digits { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> digitCount = <span class="hljs-number">4</span>;
<span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> answer = <span class="hljs-string">""</span>;
<span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> guess = <span class="hljs-string">""</span>;
<span class="hljs-keyword">private</span> List&lt;Row&gt; guesses = <span class="hljs-keyword">new</span>();
<span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> winner = <span class="hljs-literal">false</span>;
<span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">OnParametersSet</span><span class="hljs-function">()</span>{ }
<span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">CalculateAnswer</span><span class="hljs-function">()</span>{ }
<span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">GuessAnswer</span><span class="hljs-function">()</span>{ }
<span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">PlayAgain</span><span class="hljs-function">()</span>{ }
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Row</span>
{
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Guess { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>[] Matches { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
}
</code></pre>
      
    <p class="normal">The preceding code defines<a id="_idIndexMarker279"></a> the properties and methods we will use in the <code class="inlineCode">Game</code> component. It also defines the <code class="inlineCode">Row</code> class.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Add the following code to the <code class="inlineCode">OnParametersSet</code> method:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">if</span> (Digits.HasValue) { digitCount = (<span class="hljs-built_in">int</span>)Digits; };
CalculateAnswer();
</code></pre>
     
    <p class="normal">The preceding code sets the value of <code class="inlineCode">digitCount</code>. After it has determined the value of <code class="inlineCode">digitCount</code>, it calls the <code class="inlineCode">CalculateAnswer</code> method.</p> </li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Add the following code to the <code class="inlineCode">CalculateAnswer</code> method:
        <pre class="programlisting code"><code class="hljs-code">StringBuilder calculateAnswer = <span class="hljs-keyword">new</span> StringBuilder();
<span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; digitCount; i++)
{
    <span class="hljs-built_in">int</span> nextDigit = <span class="hljs-keyword">new</span> Random().Next(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);
    calculateAnswer.Append(nextDigit);
}
answer = calculateAnswer.ToString();
</code></pre>
      
    <p class="normal">The preceding code calculates the <code class="inlineCode">answer</code> based on the number of digits specified by <code class="inlineCode">digitCount</code>.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Add the following code<a id="_idIndexMarker280"></a> to the <code class="inlineCode">GuessAnswer</code> method:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">var</span> curGuess = <span class="hljs-keyword">new</span> Row()
{
    Guess = guess,
    Matches = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[digitCount]
};
<span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; digitCount; i++)
{
    <span class="hljs-keyword">if</span> (answer[i] == guess[i])
    {
        curGuess.Matches[i] = <span class="hljs-string">"match-pos"</span>;
    }
    <span class="hljs-keyword">else</span>
    {
        <span class="hljs-keyword">if</span> (answer.Contains(guess[i]))
        {
            curGuess.Matches[i] = <span class="hljs-string">"match-val"</span>;
        }
    }
}
guesses.Add(curGuess);
guess = <span class="hljs-string">""</span>;
<span class="hljs-keyword">if</span> (guess == answer) winner = <span class="hljs-literal">true</span>;
</code></pre>
      
    <p class="normal">The preceding code compares each digit in the answer with each digit in the guess. If the guess is equal to the answer, they are a winner.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Add the following code to the <code class="inlineCode">PlayAgain</code> method:
        <pre class="programlisting code"><code class="hljs-code">winner = <span class="hljs-literal">false</span>;
guesses = <span class="hljs-keyword">new</span>();
CalculateAnswer();
</code></pre>
      
    <p class="normal">The preceding code resets the game.</p></li>
    </ol>
    <p class="normal">We are almost done creating the <code class="inlineCode">Game</code> component. We just need to add some styling.</p>
    <h2 id="_idParaDest-119" class="heading-2">Adding a style sheet</h2>
    <p class="normal">We will add a style sheet<a id="_idIndexMarker281"></a> using CSS isolation. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">Shared</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Item</strong> option from the menu.</li>
      <li class="numberedList">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">E</em> to enter the <strong class="screenText">Search</strong> textbox.</li>
      <li class="numberedList">Enter <code class="inlineCode">css</code> in the <strong class="screenText">Search</strong> textbox.</li>
      <li class="numberedList">Enter <code class="inlineCode">Game.razor.css</code> in the <strong class="screenText">Name</strong> textbox and click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Enter the following styles:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-selector-class">.game</span> {
    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>;
    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">4rem</span>;
}
<span class="hljs-selector-tag">input</span>, <span class="hljs-selector-tag">button</span>, <span class="hljs-selector-class">.guesses</span> {
    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">4rem</span>;
    <span class="hljs-attribute">font-family</span>: Courier New, Courier, monospace
}
<span class="hljs-selector-class">.match-pos</span> {
    <span class="hljs-attribute">color</span>: green;
}
<span class="hljs-selector-class">.match-val</span> {
    <span class="hljs-attribute">color</span>: red
}
</code></pre>
     
    <p class="normal">The style sheet sets the font to a monospaced font for both the list of past guesses and the current guess. Also, the classes used to designate the color are defined.</p> </li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Open the <code class="inlineCode">wwwroot/index.html</code> file.</li>
      <li class="numberedList">Uncomment the link to the <code class="inlineCode">GuessTheNumber.styles.css</code> style sheet in the <code class="inlineCode">head</code> element:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">head</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">meta</span><span class="hljs-tag"> </span><span class="hljs-attr">charset</span><span class="hljs-tag">=</span><span class="hljs-string">"utf-8"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">base</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"/"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">link</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"css/app.css"</span><span class="hljs-tag"> </span><span class="hljs-attr">rel</span><span class="hljs-tag">=</span><span class="hljs-string">"stylesheet"</span><span class="hljs-tag"> /&gt;</span>
<code style="font-weight: bold;" class="codeHighlighted">    </code><span class="code-highlight"><strong class="hljs-tag-slc">&lt;</strong><strong class="hljs-name-slc">link</strong><strong class="hljs-slc"> </strong><strong class="hljs-attr-slc">href</strong><strong class="hljs-slc">=</strong><strong class="hljs-string-slc">"GuessTheNumber.styles.css"</strong></span><code style="font-weight: bold;" class="codeHighlighted"> </code>
<code style="font-weight: bold;" class="codeHighlighted">          </code><span class="code-highlight"><strong class="hljs-attr-slc">rel</strong><strong class="hljs-slc">=</strong><strong class="hljs-string-slc">"stylesheet"</strong><strong class="hljs-slc"> /</strong><strong class="hljs-tag-slc">&gt;</strong></span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">head</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
    </ol>
    <p class="normal">Let’s test the app by playing the game.</p>
    <h2 id="_idParaDest-120" class="heading-2">Setting up and playing the game</h2>
    <p class="normal">We need to add<a id="_idIndexMarker282"></a> the <code class="inlineCode">Game</code> component<a id="_idIndexMarker283"></a> to the <code class="inlineCode">Index</code> component to play the game. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">_Imports.razor</code> file.</li>
      <li class="numberedList">Add the following <code class="inlineCode">using</code> statement to the file:
        <pre class="programlisting code"><code class="hljs-code">@using GuessTheNumber.Shared
</code></pre>
      
    <p class="normal">By adding the preceding <code class="inlineCode">using</code> statement to the <code class="inlineCode">_Imports.razor</code> file, it is automatically imported into the other <code class="inlineCode">.razor</code> files within the same folder and its subfolders.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="3">Open the <code class="inlineCode">Pages/Index.razor</code> file.</li>
      <li class="numberedList">Replace the <code class="inlineCode">h1</code> element with the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>Guess the Number<span class="hljs-tag">&lt;/</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">Game</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Enter a 4-digit number and click the <strong class="screenText">Guess</strong> button.
    <p class="normal">If a digit is in the answer, it will appear in red. If the digit is in the answer and it is in the correct position, it will appear in green. The goal is to guess the answer.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Enter another 4-digit number and click the <strong class="screenText">Guess</strong> button.</li>
      <li class="numberedList">Try to win the game. </li>
    </ol>
    <p class="normal">It is impossible to win the game because there is a bug in our code. Let’s add some logging to try and find the issue.</p>
    <h2 id="_idParaDest-121" class="heading-2">Adding logging</h2>
    <p class="normal">We will add logging<a id="_idIndexMarker284"></a> to the application. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">Game.razor.cs</code> file.</li>
      <li class="numberedList">Add the following <code class="inlineCode">using</code> statement to the top of the file:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">using</span> System.Text.Json;
</code></pre>
      </li>
      <li class="numberedList">Add the following code to the top of the <code class="inlineCode">Game</code> class:
        <pre class="programlisting code"><code class="hljs-code">[<span class="hljs-meta">Inject</span>] ILogger&lt;Game&gt;? logger { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      
    <p class="normal">The preceding code injects an <code class="inlineCode">ILogger</code> object into the <code class="inlineCode">Game</code> component to create a logger.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="4">Add the following code to the end of the <code class="inlineCode">CalculateAnswer</code> method:
        <pre class="programlisting code"><code class="hljs-code">logger.LogInformation(<span class="hljs-string">$"The answer is </span><span class="hljs-subst">{answer}</span><span class="hljs-string">"</span>);
</code></pre>
      </li>
      <li class="numberedList">Add the following code to the end of the <code class="inlineCode">GuessAnswer</code> method:
        <pre class="programlisting code"><code class="hljs-code">logger.LogInformation(JsonSerializer.Serialize(guesses));
</code></pre>
      </li>
      <li class="numberedList">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Press <em class="keystroke">F12</em> to open <code class="inlineCode">DevTools</code>.</li>
      <li class="numberedList">Select the <strong class="screenText">Console</strong> tab.</li>
      <li class="numberedList">Enter a 4-digit number<a id="_idIndexMarker285"></a> and click the <strong class="screenText">Guess</strong> button.</li>
      <li class="numberedList">Enter another 4-digit number and click the <strong class="screenText">Guess</strong> button.
    <p class="normal">The following screenshot shows the messages that have been logged to the <strong class="screenText">Console</strong> tab:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_23.png" alt="Graphical user interface, text

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.23: Logged information</p></li>
    </ol>
    <p class="normal">By using logging, we can determine<a id="_idIndexMarker286"></a> that our guesses are being correctly evaluated. Let’s try debugging our code to find the issue.</p>
    <h2 id="_idParaDest-122" class="heading-2">Debugging in Visual Studio</h2>
    <p class="normal">First, we will debug<a id="_idIndexMarker287"></a> the Blazor WebAssembly app using Visual Studio. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">Game.razor.cs</code> file.</li>
      <li class="numberedList">Add a breakpoint to the first line of the <code class="inlineCode">GuessAnswer</code> method.</li>
      <li class="numberedList">Press <em class="keystroke">F5</em> to run the application with debugging.</li>
      <li class="numberedList">Enter a 4-digit number and click the <strong class="screenText">Guess</strong> button.</li>
      <li class="numberedList">Hover over <code class="inlineCode">curGuess</code> to view its contents.</li>
      <li class="numberedList">View the <strong class="screenText">Locals</strong> window.</li>
      <li class="numberedList">Set a <strong class="screenText">Watch</strong> on <code class="inlineCode">guess</code>.</li>
      <li class="numberedList">Press <em class="keystroke">F10</em> to step through the code. </li>
      <li class="numberedList">Verify that the code is working correctly.</li>
      <li class="numberedList">View the <strong class="screenText">Output</strong> window in Visual Studio to help understand the flow:</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_03_24.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.24: Output window in Visual Studio</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="11">The problem is that <code class="inlineCode">guess</code> is being set to an empty string before its value is compared to the answer.</li>
      <li class="numberedList">Move the following code to the end of the <code class="inlineCode">GuessAnswer</code> method:
        <pre class="programlisting code"><code class="hljs-code">guess = <span class="hljs-string">""</span>;
</code></pre>
      </li>
      <li class="numberedList">Press <em class="keystroke">F5</em> to run the application without debugging.</li>
      <li class="numberedList">Play the game until you win.
    <p class="normal">The following screenshot<a id="_idIndexMarker288"></a> shows a winning game:</p>
    <figure class="mediaobject"><img src="../Images/B18471_03_25.png" alt="Text, application

Description automatically generated with medium confidence"/></figure>
    <p class="packt_figref">Figure 3.25: Guess the Number – Winner</p></li>
    </ol>
    <p class="normal">When your guess<a id="_idIndexMarker289"></a> matches the answer, you win the game. Let’s make the game harder by varying the number of digits.</p>
    <h2 id="_idParaDest-123" class="heading-2">Updating the code</h2>
    <p class="normal">To make the game harder, we will allow<a id="_idIndexMarker290"></a> the player to decide how many digits they need to guess. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio 2022.</li>
      <li class="numberedList">Open the <code class="inlineCode">Game.razor</code> file.</li>
      <li class="numberedList">Replace <code class="inlineCode">@digitCount</code> with the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">input</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"number"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">    </span><span class="hljs-attr">value</span><span class="hljs-tag">=</span><span class="hljs-string">@digitCount</span><span class="hljs-tag"> </span>
<span class="hljs-tag">    </span><span class="hljs-attr">inputmode</span><span class="hljs-tag">=</span><span class="hljs-string">"numeric"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">    </span><span class="hljs-attr">min</span><span class="hljs-tag">=</span><span class="hljs-string">"1"</span><span class="hljs-tag"> </span><span class="hljs-attr">max</span><span class="hljs-tag">=</span><span class="hljs-string">"</span><span class="hljs-string">10"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">    @</span><span class="hljs-attr">onchange</span><span class="hljs-tag">=</span><span class="hljs-string">"RestartGame"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Open the <code class="inlineCode">Game.razor.cs</code> file.</li>
      <li class="numberedList">Add the following <code class="inlineCode">RestartGame</code> method:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">RestartGame</span><span class="hljs-function">(</span><span class="hljs-params">ChangeEventArgs e</span><span class="hljs-function">)</span> {
    digitCount = Convert.ToInt16(e.Value);
    PlayAgain();
}
</code></pre>
      
    <p class="normal">The preceding code resets the game every time the number of digits is changed.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Play the updated game.</li>
    </ol>
    <p class="normal">Now we will use the browser to debug our updates.</p>
    <h2 id="_idParaDest-124" class="heading-2">Debugging in the browser</h2>
    <p class="normal">We will debug the new code<a id="_idIndexMarker291"></a> in the browser. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Press <em class="keystroke">Shift</em>+<em class="keystroke">Alt</em>+<em class="keystroke">D</em>.</li>
      <li class="numberedList">Copy the indicated text into your clipboard that corresponds with the browser that you are using.</li>
      <li class="numberedList">Press <em class="keystroke">Win</em>+<em class="keystroke">R</em>, paste the text that you copied, and click the <strong class="screenText">OK</strong> button.</li>
      <li class="numberedList">Press <em class="keystroke">Shift</em>+<em class="keystroke">Alt</em>+<em class="keystroke">D</em>.
    <p class="normal">A second tab opens in the browser.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Click the <strong class="screenText">Sources</strong> tab and view<a id="_idIndexMarker292"></a> the files in the <code class="inlineCode">file://</code> node.</li>
      <li class="numberedList">Open the <code class="inlineCode">Shared</code> folder:</li>
    </ol>
    <figure class="mediaobject"><img src="../Images/B18471_03_26.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 3.26: Folders in the browser</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Add a breakpoint in the <code class="inlineCode">GuessAnswer</code> method.</li>
      <li class="numberedList">Return to the first tab.</li>
      <li class="numberedList">Change the number of digits to 5.</li>
      <li class="numberedList">Enter a 5-digit number and click the <strong class="screenText">Guess</strong> button.</li>
      <li class="numberedList">Return to the second tab.</li>
      <li class="numberedList">View the <code class="inlineCode">Scope</code>, <code class="inlineCode">Local</code> value of <code class="inlineCode">curGuess</code>.</li>
      <li class="numberedList">Press <em class="keystroke">F10</em> multiple times to step through the function call.</li>
      <li class="numberedList">Press <em class="keystroke">F8 </em>to resume script execution.</li>
      <li class="numberedList">Return to the first tab.</li>
      <li class="numberedList">Enter a 3-digit number and press the <strong class="screenText">Guess</strong> button.</li>
      <li class="numberedList">Press <em class="keystroke">F8 </em>to resume script execution.</li>
      <li class="numberedList">Click the <strong class="screenText">reload</strong> link at the bottom of the page.</li>
    </ol>
    <p class="normal">We encountered an unhandled error<a id="_idIndexMarker293"></a> when we entered a guess with fewer digits than the answer. Let’s address that issue by adding an <code class="inlineCode">ErrorBoundary</code> component.</p>
    <h2 id="_idParaDest-125" class="heading-2">Adding an ErrorBoundary component</h2>
    <p class="normal">We need to wrap the <code class="inlineCode">Game</code> component<a id="_idIndexMarker294"></a> in an <code class="inlineCode">ErrorBoundary</code> component. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Open the <code class="inlineCode">Index.razor</code> file.</li>
      <li class="numberedList">Replace the <code class="inlineCode">Game</code> element with the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">ErrorBoundary</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">ChildContent</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">Game</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">ChildContent</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">ErrorContent</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>You have entered an invalid guess!<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">ErrorContent</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">ErrorBoundary</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Enter a 3-digit number and press the <strong class="screenText">Guess</strong> button.</li>
      <li class="numberedList">Verify that the message defined by the <code class="inlineCode">ErrorContent</code> property is displayed.</li>
    </ol>
    <p class="normal">We have added an <code class="inlineCode">ErrorBoundary</code> component to update the UI when an unhandled exception is encountered. The <code class="inlineCode">ErrorContent</code> property is used to define the UI. Now that the application is tested, it’s time to deploy it.</p>
    <h2 id="_idParaDest-126" class="heading-2">Deploying the application to Microsoft Azure</h2>
    <p class="normal">We will enable AOT compilation and deploy<a id="_idIndexMarker295"></a> the app to Microsoft Azure. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">GuessTheNumber</code> project and select <strong class="screenText">Properties</strong> from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">AOT</code> in the <strong class="screenText">Search properties</strong> textbox.</li>
      <li class="numberedList">Check the <strong class="screenText">Use ahead-of-time (AOT) compilation on publish</strong> checkbox.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">GuessTheNumber</code> project and select the <strong class="screenText">Publish</strong> option from the menu.</li>
      <li class="numberedList">Select <strong class="screenText">Azure</strong> and click the <strong class="screenText">Next</strong> button.</li>
      <li class="numberedList">Select <strong class="screenText">Azure App Service (Windows)</strong> and click the <strong class="screenText">Next</strong> button.</li>
      <li class="numberedList">Select an existing Azure App Service or create a new one.</li>
      <li class="numberedList">Click the <strong class="screenText">Finish</strong> button.
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Be patient, it will take some time to deploy the app to Microsoft Azure.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Play the game.
    <p class="normal">We have deployed the <code class="inlineCode">Guess the Number</code> web app<a id="_idIndexMarker296"></a> to Microsoft Azure.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">After you have finished testing your application, don’t forget to remove the resources that you added to your Azure account.</p>
    </div></li>
    </ol>
    <h1 id="_idParaDest-127" class="heading-1">Summary</h1>
    <p class="normal">You should now be able to debug and deploy a Blazor WebAssembly app.</p>
    <p class="normal">In this chapter, we learned about debugging in both Visual Studio and <code class="inlineCode">DevTools</code>. We learned about the different levels of logging and how to write to the log. We learned how to handle exceptions. Finally, we learned how to use AOT compilation before deploying a Blazor WebAssembly app to Microsoft Azure.</p>
    <p class="normal">After that, we created a new project using the <strong class="keyWord">Blazor WebAssembly App Empty</strong> project template in Visual Studio. We added a simple <code class="inlineCode">Game</code> component. We added some logging to the app. We added a breakpoint to the app using both Visual Studio and <code class="inlineCode">DevTools</code>. We added an <code class="inlineCode">ErrorBoundary</code> component to capture the unhandled errors. Finally, we enabled AOT compilation and deployed the application to Microsoft Azure.</p>
    <p class="normal">In the next chapter, we will build a modal dialog using templated components.</p>
    <h1 id="_idParaDest-128" class="heading-1">Questions</h1>
    <p class="normal">The following questions are provided for your consideration:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">How would you rewrite the <code class="inlineCode">Guess the Number</code> game to use a custom error component?</li>
      <li class="numberedList">What types of applications benefit the most from AOT?</li>
      <li class="numberedList">What are the different log levels and when should you use each one?</li>
      <li class="numberedList">How do you debug a Blazor WebAssembly app in the browser?</li>
      <li class="numberedList">Can you deploy a Blazor WebAssembly app to Microsoft Azure for free?</li>
    </ol>
    <h1 id="_idParaDest-129" class="heading-1">Further reading</h1>
    <p class="normal">The following resources provide more information concerning the topics in this chapter:</p>
    <ul>
      <li class="bulletList">For more information on debugging C# code in Visual Studio, refer to <a href="https://learn.microsoft.com/en-us/visualstudio/get-started/csharp/tutorial-debugger"><span class="url">https://learn.microsoft.com/en-us/visualstudio/get-started/csharp/tutorial-debugger</span></a>.</li>
      <li class="bulletList">For more information on <code class="inlineCode">DevTools</code>, refer to <a href="https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/overview"><span class="url">https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/overview</span></a>.</li>
      <li class="bulletList">For more information on logging, refer to <a href="https://learn.microsoft.com/en-us/dotnet/core/extensions/logging"><span class="url">https://learn.microsoft.com/en-us/dotnet/core/extensions/logging</span></a>.</li>
      <li class="bulletList">For more information on Microsoft Azure, refer to <a href="https://azure.microsoft.com"><span class="url">https://azure.microsoft.com</span></a>.</li>
    </ul>
  </div>
</body>
</html>