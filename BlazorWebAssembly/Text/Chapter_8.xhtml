<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>Chapter_8</title>
  <link href="../Styles/syntax-highlighting.css" rel="stylesheet" type="text/css"/>
  <link href="../Styles/epub.css" rel="stylesheet" type="text/css"/>
</head>

<body id="Chapter_8" lang="en-US" xml:lang="en-US">
  <div id="_idContainer235" class="Basic-Text-Frame">
    <h1 class="chapterNumber">8</h1>
    <h1 id="_idParaDest-245" class="chapterTitle">Building a Kanban Board Using Events</h1>
    <p class="normal">As developers, we strive to make our applications as dynamic as possible. For that, we use <strong class="keyWord">events</strong>. Events are messages sent <a id="_idIndexMarker581"></a>by an object to indicate that an action has occurred. Razor components can handle many different types of events.</p>
    <p class="normal">In this chapter, we will learn how to handle different types of events in a Blazor WebAssembly app. We will learn how to use lambda expressions and how to prevent default actions. We will also learn how to use both <strong class="keyWord">arbitrary</strong> <strong class="keyWord">parameters </strong>and <strong class="keyWord">attribute splatting</strong> to simplify how we assign attributes to components.</p>
    <p class="normal">The project that we create in this chapter will be a Kanban board that uses the drag-and-drop API. Kanban boards visually depict work at various stages of a process. Our Kanban board will be comprised of three <code class="inlineCode">Dropzone</code> components, with each one representing a different stage. Finally, we will use arbitrary parameters and attribute splatting to create a component to add new tasks to our Kanban board.</p>
    <blockquote class="packt_quote">
      <p class="quote">Events need handling.</p>
      <p class="quote">Built-in event arguments</p>
      <p class="quote">lambda expressions.</p>
    </blockquote>
    <p class="normal">In this chapter, we will cover the following topics:</p>
    <ul>
      <li class="bulletList">Event handling</li>
      <li class="bulletList">Attribute splatting</li>
      <li class="bulletList">Arbitrary parameters</li>
      <li class="bulletList">Creating the Kanban board project</li>
    </ul>
    <h1 id="_idParaDest-246" class="heading-1">Technical requirements</h1>
    <p class="normal">To complete this project, you need to have Visual Studio 2022 installed on your PC. For instructions on how to install the free Community Edition of Visual Studio 2022, refer to <em class="chapterRef">Chapter 1</em>, <em class="italic">Introduction to Blazor WebAssembly</em>.</p>
    <p class="normal">The source code for this chapter is available in the following GitHub repository: <a href="https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter08"><span class="url">https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter08</span></a>.</p>
    <p class="normal">The Code in Action video is available here: <a href="https://packt.link/Ch8"><span class="url">https://packt.link/Ch8</span></a>.</p>
    <h1 id="_idParaDest-247" class="heading-1">Event handling</h1>
    <p class="normal">Razor components handle events <a id="_idIndexMarker582"></a>by using an HTML element attribute named <code class="inlineCode">@on{EVENT}</code>, where <code class="inlineCode">EVENT</code> is the name of the event.</p>
    <p class="normal">The following code calls the <code class="inlineCode">OnClickHandler</code> method when the <strong class="screenText">Click Me</strong> button is clicked:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"button"</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"OnClickHandler"</span><span class="hljs-tag">&gt;</span>
    Click Me
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
@code {
    private void OnClickHandler()
    {
        // ...
    }
}
</code></pre>
    <p class="normal">Event handlers automatically trigger a UI render. Therefore, we do not need to call <code class="inlineCode">StateHasChanged</code> when processing them. Event handlers can reference any arguments that are associated with the event. Also, they can be used to call both synchronous and asynchronous methods.</p>
    <p class="normal">The following code calls the asynchronous <code class="inlineCode">OnChangeHandlerAsync</code> method when the checkbox is changed:</p>
    <pre class="programlisting code"><code class="hljs-code">&lt;input type=<span class="hljs-string">"checkbox"</span> @onchange=<span class="hljs-string">"</span><span class="hljs-string">OnChangedHandlerAsync"</span> /&gt;Is OK?
@code {
    <span class="hljs-built_in">bool</span> isOk;
    <span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">OnChangedHandlerAsync</span><span class="hljs-function">(</span><span class="hljs-params">ChangeEventArgs e</span><span class="hljs-function">)</span>
    {
        isOk = (<span class="hljs-built_in">bool</span>)e.Value!; 
        <span class="hljs-comment">// await ...</span>
    }
}
</code></pre>
    <p class="normal">In the preceding code, the <code class="inlineCode">ChangeEventArgs</code> class is used to supply information about the change event. The <code class="inlineCode">ChangeEventArgs</code> class only had one property. It is the <code class="inlineCode">Value</code> property and for this object, it is either <code class="inlineCode">true</code> or <code class="inlineCode">false</code>.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">The event arguments are optional and should only be included if they are used by the method.</p>
    </div>
    <p class="normal">The <code class="inlineCode">ChangeEventArgs</code> class inherits from the <code class="inlineCode">EventArgs</code> class. All of the <code class="inlineCode">EventArgs</code> classes that are <a id="_idIndexMarker583"></a>supported by the ASP.NET Core framework are also supported by the Blazor WebAssembly framework. This is a list of the supported <code class="inlineCode">EventArgs</code>:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">ClipboardEventArgs</code></li>
      <li class="bulletList"><code class="inlineCode">DragEventArgs</code></li>
      <li class="bulletList"><code class="inlineCode">ErrorEventArgs</code></li>
      <li class="bulletList"><code class="inlineCode">EventArgs</code></li>
      <li class="bulletList"><code class="inlineCode">FocusEventArgs</code></li>
      <li class="bulletList"><code class="inlineCode">ChangeEventArgs</code></li>
      <li class="bulletList"><code class="inlineCode">KeyboardEventArgs</code></li>
      <li class="bulletList"><code class="inlineCode">MouseEventArgs</code></li>
      <li class="bulletList"><code class="inlineCode">PointerEventArgs</code></li>
      <li class="bulletList"><code class="inlineCode">WheelEventArgs</code></li>
      <li class="bulletList"><code class="inlineCode">ProgressEventArgs</code></li>
      <li class="bulletList"><code class="inlineCode">TouchEventArgs</code></li>
    </ul>
    <p class="normal">The <code class="inlineCode">EventArgs</code> class is inherited by each of the preceding classes. We can create our own custom event data class by <a id="_idIndexMarker584"></a>creating a class that derives from the <code class="inlineCode">EventArgs</code> class.</p>
    <p class="normal">So far, we have looked at ways to call a method without any arguments or with arguments that are automatically supplied by the event. However, sometimes we need to provide our own arguments.</p>
    <h2 id="_idParaDest-248" class="heading-2">Lambda expressions</h2>
    <p class="normal">When we need to provide <a id="_idIndexMarker585"></a>arguments to a method, we can use a lambda expression. Lambda expressions are used to create anonymous functions. They use the <code class="inlineCode">=&gt;</code> operator <a id="_idIndexMarker586"></a>to separate the parameters from the body of the expression.</p>
    <p class="normal">There are two forms that the body of a lambda expression can use. They can either use an expression or a statement block for their body. In the following example, the first button uses an expression and the second button uses a <code class="inlineCode">statement</code> block:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>@message<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"button"</span>
<span class="hljs-tag">        @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"@(() =&gt; SetMessage("</span><span class="hljs-attr">Blazor</span><span class="hljs-tag"> </span><span class="hljs-attr">is</span><span class="hljs-tag"> </span><span class="hljs-attr">Awesome</span><span class="hljs-tag">!"))"&gt;</span>
    Who Is Awesome?
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"button"</span>
<span class="hljs-tag">        @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"@(() =&gt; { @message = "</span><span class="hljs-attr">Blazor</span><span class="hljs-tag"> </span><span class="hljs-attr">Rocks</span><span class="hljs-tag">!"; })"&gt;</span>
    Who Rocks?
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
@code{
    private string? message;
    private void SetMessage(string newMessage)
    {
        message = newMessage;
    }
}
</code></pre>
    <p class="normal">In the preceding code, when the <strong class="screenText">Who Is Awesome?</strong> button is clicked, the lambda expression calls the <code class="inlineCode">SetMessage</code> method to update the value of the <code class="inlineCode">message</code> field. When the <strong class="screenText">Who Rocks?</strong> button is <a id="_idIndexMarker587"></a>clicked, the statement lambda expression uses a statement to update the <a id="_idIndexMarker588"></a>value of the <code class="inlineCode">message</code> field.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">If the body of a statement lambda only includes one statement, the parentheses are optional. Also, although you can include any number of statements in the body of a statement lambda, we recommend limiting the number of statements to two or three at most.</p>
    </div>
    <h2 id="_idParaDest-249" class="heading-2">Preventing default actions</h2>
    <p class="normal">Occasionally, we need to prevent the default action associated with an event. We can do that by <a id="_idIndexMarker589"></a>using the <code class="inlineCode">@on{EVENT}:preventDefault</code> directive attribute, where <code class="inlineCode">EVENT</code> is the name of the event.</p>
    <p class="normal">For example, when dragging an element, the default behavior prevents it from being dropped into another element. However, for the Kanban board project in this chapter, we will need to drop items into various dropzones. Therefore, we will need to prevent that default behavior.</p>
    <p class="normal">The following code prevents the <code class="inlineCode">ondragover</code> default behavior from occurring. By preventing the default behavior, we will be allowed to drop elements into the <code class="inlineCode">div</code> element that is being used as the dropzone:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"dropzone"</span>
<span class="hljs-tag">     </span><span class="hljs-attr">dropzone</span><span class="hljs-tag">=</span><span class="hljs-string">"true"</span>
<span class="hljs-tag">     </span><span class="hljs-attr">ondragover</span><span class="hljs-tag">=</span><span class="hljs-string">"event.preventDefault();"</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <h2 id="_idParaDest-250" class="heading-2">Focusing an element</h2>
    <p class="normal">There are times when we need to programmatically give focus to an HTML element. In those cases, we <a id="_idIndexMarker590"></a>use the <code class="inlineCode">FocusAsync</code> method of the <code class="inlineCode">ElementReference</code> type. The <code class="inlineCode">ElementReference</code> is identified by adding an <code class="inlineCode">@ref</code> attribute to the HTML element that we want to give focus to. To assign focus to the HTML element a field of type <code class="inlineCode">ElementReference</code> must be defined.</p>
    <p class="normal">The following code adds the value of the input element to the list of tasks and sets the focus back to the input element each time the button is clicked:</p>
    <p class="normal"><strong class="keyWord">Focus.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@page <span class="hljs-string">"/focus"</span>     
&lt;input type=<span class="hljs-string">"</span><span class="hljs-string">text"</span> @ref=<span class="hljs-string">"taskInput"</span> @bind-<span class="hljs-keyword">value</span>=<span class="hljs-string">"@taskName"</span> /&gt;
&lt;button type=<span class="hljs-string">"button"</span> @onclick=<span class="hljs-string">"OnClickHandlerAsync"</span>&gt;
     Add Task
 &lt;/button&gt;
@foreach (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> tasks)
{
    &lt;div&gt;@item&lt;/div&gt;
}
@code {
    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span>? taskName;
    <span class="hljs-keyword">private</span> ElementReference taskInput;
    <span class="hljs-keyword">private</span> List&lt;<span class="hljs-built_in">string</span>&gt; tasks = <span class="hljs-keyword">new</span>();
    <span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">OnClickHandlerAsync</span><span class="hljs-function">()</span>
    {
        tasks.Add(taskName!);
        taskName = <span class="hljs-string">""</span>;
        <span class="hljs-keyword">await</span> taskInput.FocusAsync();
    }
}
</code></pre>
    <p class="normal">In the preceding <a id="_idIndexMarker591"></a>code, <code class="inlineCode">taskInput</code> is defined as an <code class="inlineCode">ElementReference</code>. It is associated with the <code class="inlineCode">input</code> element via the <code class="inlineCode">@ref</code> attribute. In the <code class="inlineCode">OnClickHandlerAsync</code> event, the <code class="inlineCode">FocusAsync</code> method is called. The result is that each time the button is clicked, the focus is returned to the <code class="inlineCode">input</code> element.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Since the <code class="inlineCode">FocusAsync</code> method relies on the DOM, it only works on elements after they have been rendered.</p>
    </div>
    <p class="normal">The Blazor WebAssembly framework makes it easy for us to access events by using the <code class="inlineCode">@on{EVENT}</code> attribute. All the <code class="inlineCode">EventArgs</code> that we are used to using in the ASP.NET framework are supported. We use lambda expressions to provide arguments for the methods that are called by the event. We use the <code class="inlineCode">preventDefault</code> directive attribute to prevent default actions. Finally, the <code class="inlineCode">FocusAsync</code> method of the <code class="inlineCode">ElementReference</code> type is used to <a id="_idIndexMarker592"></a>programmatically assign focus to an HTML element.</p>
    <p class="normal">When working with components, we usually need to supply multiple attributes. Using attribute splatting, we can avoid assigning the attributes directly in the HTML markup.</p>
    <h1 id="_idParaDest-251" class="heading-1">Attribute splatting</h1>
    <p class="normal">When a child component has <a id="_idIndexMarker593"></a>many parameters, it can be tedious to assign each of the values in HTML. To avoid having to do that, we can use attribute splatting.</p>
    <p class="normal">With attribute splatting, the attributes are captured in a dictionary and then passed to the component as a unit. One attribute is added per dictionary entry. The dictionary must implement <code class="inlineCode">IEnumerable&lt;KeyValuePair&lt;string,object&gt;&gt;</code> or <code class="inlineCode">IReadOnlyDictionary&lt;string</code><code class="inlineCode">, object&gt;</code> with string keys. We reference the dictionary using the <code class="inlineCode">@attributes</code> directive.</p>
    <p class="normal">This is the code for a component called <code class="inlineCode">BweButton</code> that has a bunch of different parameters:</p>
    <p class="normal"><strong class="keyWord">BweButton.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">&lt;button type=<span class="hljs-string">"@Type"</span>
        <span class="hljs-keyword">class</span>=<span class="hljs-string">"@Class"</span> 
        disabled=<span class="hljs-string">"@Disabled"</span> 
        title=<span class="hljs-string">"@Title"</span> 
        @onclick=<span class="hljs-string">"@ClickEvent"</span>&gt;
    @ChildContent
&lt;/button&gt;
@code {
  [<span class="hljs-meta">Parameter</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? Class { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
  [<span class="hljs-meta">Parameter</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> Disabled { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
  [<span class="hljs-meta">Parameter</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? Title { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
  [<span class="hljs-meta">Parameter</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? Type { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
  [<span class="hljs-meta">Parameter</span>] <span class="hljs-keyword">public</span> EventCallback ClickEvent { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
  [<span class="hljs-meta">Parameter</span>] <span class="hljs-keyword">public</span> RenderFragment? ChildContent { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
}
</code></pre>
    <p class="normal">This is sample markup to render a <code class="inlineCode">BweButton</code> component without using attribute splatting:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">BweButton</span><span class="hljs-tag"> </span><span class="hljs-attr">Class</span><span class="hljs-tag">=</span><span class="hljs-string">"button button-red"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">           </span><span class="hljs-attr">Disabled</span><span class="hljs-tag">=</span><span class="hljs-string">"false"</span>
<span class="hljs-tag">           </span><span class="hljs-attr">Title</span><span class="hljs-tag">=</span><span class="hljs-string">"This is a red button"</span>
<span class="hljs-tag">           </span><span class="hljs-attr">Type</span><span class="hljs-tag">=</span><span class="hljs-string">"button"</span>
<span class="hljs-tag">           </span><span class="hljs-attr">ClickEvent</span><span class="hljs-tag">=</span><span class="hljs-string">"OnClickHandler"</span><span class="hljs-tag">&gt;</span>
    Submit
<span class="hljs-tag">&lt;/</span><span class="hljs-name">BweButton</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">This is the button that is rendered by the preceding markup:</p>
    <figure class="mediaobject"><img src="../Images/B18471_08_01.png" alt="A picture containing graphical user interface

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 8.1: Rendered BweButton</p>
    <p class="normal">This is the CSS that <a id="_idIndexMarker594"></a>we are using to style the buttons in this section:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-selector-class">.button</span> {
    <span class="hljs-attribute">color</span>: white;
    <span class="hljs-attribute">cursor</span>: pointer;
    <span class="hljs-attribute">padding</span>: <span class="hljs-number">2em</span>;
}
<span class="hljs-selector-class">.button-red</span> {
    <span class="hljs-attribute">background-color</span>: red;
}
<span class="hljs-selector-class">.button-black</span> {
    <span class="hljs-attribute">background-color</span>: black;
}
</code></pre>
    <p class="normal">In the preceding CSS, all the elements in the <code class="inlineCode">button</code> class will have white text and 2em of padding. The elements in the <code class="inlineCode">button-red</code> class will have a background color of red, and the elements in the <code class="inlineCode">button-black</code> class will have a background color of black.</p>
    <p class="normal">By using attribute splatting, we can simplify the preceding markup to the following:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">BweButton</span><span class="hljs-tag"> @</span><span class="hljs-attr">attributes</span><span class="hljs-tag">=</span><span class="hljs-string">"InputAttributes"</span>
<span class="hljs-tag">           </span><span class="hljs-attr">ClickEvent</span><span class="hljs-tag">=</span><span class="hljs-string">"</span><span class="hljs-string">OnClickHandler"</span><span class="hljs-tag">&gt;</span>
    Submit
<span class="hljs-tag">&lt;/</span><span class="hljs-name">BweButton</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">This is the definition of <code class="inlineCode">InputAttributes</code> used by the preceding markup:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; InputAttributes { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; } =
    <span class="hljs-keyword">new</span> ()  
    {
        { <span class="hljs-string">"Class"</span>, <span class="hljs-string">"button button-red"</span>},
        { <span class="hljs-string">"Disabled"</span>, <span class="hljs-literal">false</span>},
        { <span class="hljs-string">"Title"</span>, <span class="hljs-string">"This is a red button"</span> },
        { <span class="hljs-string">"Type"</span>, <span class="hljs-string">"submit"</span> }
    };
</code></pre>
    <p class="normal">The preceding code <a id="_idIndexMarker595"></a>defines the <code class="inlineCode">InputAttributes</code> that are passed to <code class="inlineCode">BweButton</code>. The resulting button is identical to the previous one where we set the attributes directly without using <code class="inlineCode">InputAttributes</code>.</p>
    <p class="normal">The real power of attribute splatting is realized when it is combined with arbitrary parameters.</p>
    <h1 id="_idParaDest-252" class="heading-1">Arbitrary parameters</h1>
    <p class="normal">In the preceding example, we <a id="_idIndexMarker596"></a>used explicitly defined parameters to assign the button’s attributes. A much more efficient way of assigning values to attributes is to use arbitrary parameters. An arbitrary parameter is a parameter that is not explicitly defined by the component. The <code class="inlineCode">Parameter</code> attribute has a <code class="inlineCode">CaptureUnmatchedValues</code> property that is used to allow the parameter to capture values that don’t match any of the other parameters.</p>
    <p class="normal">This is a new version of our button called <code class="inlineCode">BweButton2</code>. It uses arbitrary parameters:</p>
    <p class="normal"><strong class="keyWord">BweButton2.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> @</span><span class="hljs-attr">attributes</span><span class="hljs-tag">=</span><span class="hljs-string">"InputAttributes"</span><span class="hljs-tag"> &gt;</span>
    @ChildContent
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary&lt;string, object&gt;? InputAttributes{get; set;}
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
}
</code></pre>
    <p class="normal">The preceding code includes a parameter named <code class="inlineCode">InputAttributes</code> that has its <code class="inlineCode">CaptureUnmatchedValues</code> property set to <code class="inlineCode">true</code>. </p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">A component can only have one parameter with its <code class="inlineCode">CaptureUnmatchedValues</code> property set to <code class="inlineCode">true</code>.</p>
    </div>
    <p class="normal">This is the <a id="_idIndexMarker597"></a>updated markup used to render the new version of our button:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">BweButton2</span><span class="hljs-tag"> @</span><span class="hljs-attr">attributes</span><span class="hljs-tag">=</span><span class="hljs-string">"InputAttributes2"</span>
<span class="hljs-tag">            @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"OnClickHandler"</span>
<span class="hljs-tag">            </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"button button-black"</span><span class="hljs-tag">&gt;</span>
    Submit
<span class="hljs-tag">&lt;/</span><span class="hljs-name">BweButton2</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">This is the definition of <code class="inlineCode">InputAttributes2</code> used by the preceding markup:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; InputAttributes2 { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; } =
    <span class="hljs-keyword">new</span>()
    {
        { <span class="hljs-string">"class"</span>, <span class="hljs-string">"button button-red"</span> },
        { <span class="hljs-string">"title"</span>, <span class="hljs-string">"This is another button"</span> },
        { <span class="hljs-string">"name"</span>, <span class="hljs-string">"btnSubmit"</span> },
        { <span class="hljs-string">"type"</span>, <span class="hljs-string">"button"</span> },
        { <span class="hljs-string">"myAttribute"</span>, <span class="hljs-string">"123"</span>}
    };
</code></pre>
    <p class="normal">Although none of the attributes in the dictionary have been explicitly defined in the new version of our button, <code class="inlineCode">BweButton2</code> is still rendered. In the preceding example, the class attribute is set twice.</p>
    <p class="normal">This is the button that is rendered by the preceding code:</p>
    <figure class="mediaobject"><img src="../Images/B18471_08_02.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 8.2: Rendered BweButton2 using arbitrary parameters</p>
    <p class="normal">The reason the button is now black is due to the position of the <code class="inlineCode">@attributes</code> directive in the button’s markup. When attributes are splatted onto an element, they are processed from left to right. Therefore, if there are duplicate attributes assigned, the one that appears later in the order will be the one that is used.</p>
    <p class="normal">Arbitrary parameters are <a id="_idIndexMarker598"></a>used to allow previously undefined attributes to be rendered by the component. This is useful with components that support a large variety of customizations, such as a component that includes an <code class="inlineCode">input</code> element.</p>
    <p class="normal">Now, let’s get a quick overview of the project that we are going to build in this chapter.</p>
    <h1 id="_idParaDest-253" class="heading-1">Creating the Kanban board project</h1>
    <p class="normal">The Blazor WebAssembly <a id="_idIndexMarker599"></a>application that we are going to build in this chapter is a Kanban board. The Kanban board will have three dropzones: <code class="inlineCode">High Priority</code>, <code class="inlineCode">Mid</code> <code class="inlineCode">Priority</code>, and <code class="inlineCode">Low Priority</code>. We will be able to drag and drop tasks between the dropzones and add additional tasks. As each task is dragged to a different dropzone, the badge indicator on the task will be updated to match the dropzone’s priority.</p>
    <p class="normal">The following is a screenshot of the completed application:</p>
    <figure class="mediaobject"><img src="../Images/B18471_08_03.png" alt="Graphical user interface, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 8.3: Kanban board app</p>
    <p class="normal">The build <a id="_idIndexMarker600"></a>time for this project is approximately 45 minutes.</p>
    <h2 id="_idParaDest-254" class="heading-2">Project overview</h2>
    <p class="normal">The <code class="inlineCode">KanbanBoard</code> project will be created by using Microsoft’s <strong class="keyWord">Blazor WebAssembly App Empty</strong> project template <a id="_idIndexMarker601"></a>to create an empty Blazor WebAssembly project. First, we will add <code class="inlineCode">Bootstrap</code> to the project. Then, we will create both the <code class="inlineCode">TaskItem</code> class and a <code class="inlineCode">Dropzone</code> component. We will add three of the <code class="inlineCode">Dropzone</code> components to the <code class="inlineCode">Home</code> page to create the Kanban board. Finally, we will add the <code class="inlineCode">NewTask</code> component so that we are able to add new tasks to the Kanban board.</p>
    <h2 id="_idParaDest-255" class="heading-2">Create the Kanban board project</h2>
    <p class="normal">We need to <a id="_idIndexMarker602"></a>create a new Blazor WebAssembly app. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open Visual Studio 2022.</li>
      <li class="numberedList">Click the <strong class="screenText">Create a new project</strong> button.</li>
      <li class="numberedList">Press <em class="keystroke">Alt</em>+<em class="keystroke">S</em> to enter the search for templates textbox.</li>
      <li class="numberedList">Enter <code class="inlineCode">Blazor</code> and press the <em class="keystroke">Enter</em> key.
    <p class="normal">The following screenshot shows the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template.</p>
    <figure class="mediaobject"> <img src="../Images/B18471_08_04.png" alt="Graphical user interface, text, application, chat or text message

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 8.4: Blazor WebAssembly App Empty project template</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Select <a id="_idIndexMarker603"></a>the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template and click the <strong class="screenText">Next</strong> button.</li>
      <li class="numberedList">Enter <code class="inlineCode">KanbanBoard</code> in the <strong class="screenText">Project name</strong> textbox and click the <strong class="screenText">Next</strong> button.
    <p class="normal">This is a screenshot of the dialog used to configure our new project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_08_05.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 8.5: Configure your new project dialog</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">In the preceding example, we placed the <code class="inlineCode">KanbanBoard</code> project into the <code class="inlineCode">E:/Blazor</code> folder. However, the location of this project is not important.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Select <strong class="screenText">.NET 7.0</strong> as the version of the <strong class="screenText">Framework</strong> to use.</li>
      <li class="numberedList">Check <a id="_idIndexMarker604"></a>the <strong class="screenText">Configure for HTTPS</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">ASP.NET Core Hosted</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">Progressive Web Application</strong> checkbox.
    <p class="normal">This is a screenshot of the dialog used to collect additional information about our new project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_07_04.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 8.6: Additional information dialog</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="11">Click the <strong class="screenText">Create</strong> button.</li>
    </ol>
    <p class="normal">We have created <a id="_idIndexMarker605"></a>an empty <code class="inlineCode">KanbanBoard</code> Blazor WebAssembly project. We will use Bootstrap’s grid system to lay out our board.</p>
    <h2 id="_idParaDest-256" class="heading-2">Install Bootstrap</h2>
    <p class="normal">We need <a id="_idIndexMarker606"></a>to install <code class="inlineCode">Bootstrap</code> into our web app. We <a id="_idIndexMarker607"></a>do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">wwwroot/css</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Client-Side Library</strong> option from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">bootstrap</code> into the <strong class="screenText">Library</strong> search textbox and press the <em class="keystroke">Enter</em> key.</li>
      <li class="numberedList">Select <strong class="screenText">Choose specific files</strong>.</li>
      <li class="numberedList">Select only the <strong class="screenText">css</strong> files as shown in the following screenshot.
    <figure class="mediaobject"><img src="../Images/B18471_08_07.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 8.7: Add Client-Side Library dialog</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">Although the preceding screenshot has version 5.2.2 of <code class="inlineCode">Bootstrap</code> selected, you can use any version of <code class="inlineCode">Bootstrap</code> to complete this project.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Click <a id="_idIndexMarker608"></a>the <strong class="screenText">Install</strong> button.<div class="note">
          <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
          <p class="normal">After you install <code class="inlineCode">Bootstrap</code>, a new folder will be added to the <code class="inlineCode">wwwroot/css</code> folder. This new folder contains all the CSS files needed for <code class="inlineCode">Bootstrap</code>. We will only be using the <code class="inlineCode">bootstrap.min.css</code> file in this project. </p>
        </div>
      </li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Open <a id="_idIndexMarker609"></a>the <code class="inlineCode">wwwroot/index.html</code> file.</li>
      <li class="numberedList">Add the following markup to the <code class="inlineCode">head</code> element before the link to the <code class="inlineCode">css/app.css</code> stylesheet:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">link</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"css/bootstrap/css/bootstrap.min.css"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">        </span><span class="hljs-attr">rel</span><span class="hljs-tag">=</span><span class="hljs-string">"stylesheet"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Open the <code class="inlineCode">MainLayout.razor</code> file.</li>
      <li class="numberedList">Update the <code class="inlineCode">main</code> element to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">main</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"container"</span><span class="hljs-tag">&gt;</span>
    @Body
<span class="hljs-tag">&lt;/</span><span class="hljs-name">main</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
    </ol>
    <p class="normal">The preceding <a id="_idIndexMarker610"></a>code adds a <code class="inlineCode">container</code> around the body <a id="_idIndexMarker611"></a>of the page. In this project, we will be using Bootstrap’s grid system to lay out our content. It relies on a series of containers, rows, and columns. We will add the rows and columns later.</p>
    <p class="normal">We will use the Kanban board to prioritize our tasks. But first, we need a way to define our tasks.</p>
    <h2 id="_idParaDest-257" class="heading-2">Add the classes</h2>
    <p class="normal">We need to <a id="_idIndexMarker612"></a>add a <code class="inlineCode">TaskPriority</code> enum and a <code class="inlineCode">TaskItem</code> class. We <a id="_idIndexMarker613"></a>do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">KanbanBoard</code> project and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Folder</strong> option from the menu.</li>
      <li class="numberedList">Name the new folder <code class="inlineCode">Models</code>.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">Models</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Class</strong> option from the menu.</li>
      <li class="numberedList">Name the new class <code class="inlineCode">TaskPriority</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Replace the class with the following <code class="inlineCode">TaskPriority</code> enum:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> TaskPriority
{
    High,
    Mid,
    Low
}
</code></pre>
      </li>
      <li class="numberedList">Right-click the <code class="inlineCode">Models</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Class</strong> option from the menu.</li>
      <li class="numberedList">Name the new class <code class="inlineCode">TaskItem</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Add the following properties to the <code class="inlineCode">TaskItem</code> class:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span>? TaskName { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
<span class="hljs-keyword">public</span> TaskPriority Priority { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      </li>
    </ol>
    <p class="normal">We have <a id="_idIndexMarker614"></a>added the <code class="inlineCode">TaskPriority</code> enum and the <code class="inlineCode">TaskItem</code> class to <a id="_idIndexMarker615"></a>represent the tasks on the Kanban board. Next, we need to create the dropzones.</p>
    <h2 id="_idParaDest-258" class="heading-2">Create the Dropzone component</h2>
    <p class="normal">We need <a id="_idIndexMarker616"></a>to add a <code class="inlineCode">Dropzone</code> component. We <a id="_idIndexMarker617"></a>do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">KanbanBoard</code> project and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Folder</strong> option from the menu.</li>
      <li class="numberedList">Name the new folder <code class="inlineCode">Shared</code>.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">Shared</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Razor Component</strong> option from the menu.</li>
      <li class="numberedList">Name the new component <code class="inlineCode">Dropzone</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Remove the <code class="inlineCode">h3</code> element.</li>
      <li class="numberedList">Add the following <code class="inlineCode">@using</code> directive:
        <pre class="programlisting code"><code class="hljs-code">@using KanbanBoard.Models
</code></pre>
      </li>
      <li class="numberedList">Add the following parameters to the code block:
        <pre class="programlisting code"><code class="hljs-code">[<span class="hljs-meta">Parameter</span>]
<span class="hljs-keyword">public</span> List&lt;TaskItem&gt; TaskItems { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; } = <span class="hljs-keyword">new</span>();
[<span class="hljs-meta">Parameter</span>]
<span class="hljs-keyword">public</span> TaskPriority Priority { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
[<span class="hljs-meta">Parameter</span>]
<span class="hljs-keyword">public</span> EventCallback&lt;TaskPriority&gt; OnDrop { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
[<span class="hljs-meta">Parameter</span>]
<span class="hljs-keyword">public</span> EventCallback&lt;TaskItem&gt; OnStartDrag { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      
    <p class="normal">In the preceding code, the <code class="inlineCode">TaskItems</code> parameter is used to keep track of the tasks that have been dropped into the <code class="inlineCode">Dropzone</code>. The <code class="inlineCode">Priority</code> parameter is used to indicate the priority of the tasks that are in the <code class="inlineCode">Dropzone</code>. </p>
    <p class="normal">The <code class="inlineCode">OnDrop</code> event indicates the event that is invoked when a task is dropped into the <code class="inlineCode">Dropzone</code>, and the <code class="inlineCode">OnStartDrag</code> event indicates the event that is invoked <a id="_idIndexMarker618"></a>when a task <a id="_idIndexMarker619"></a>is dragged from the <code class="inlineCode">Dropzone</code>.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Add the following markup:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"col"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">h2</span><span class="hljs-tag"> </span><span class="hljs-attr">style</span><span class="hljs-tag">=</span><span class="hljs-string">""</span><span class="hljs-tag">&gt;</span>@Priority.ToString() Priority<span class="hljs-tag">&lt;/</span><span class="hljs-name">h2</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"dropzone"</span>
<span class="hljs-tag">         </span><span class="hljs-attr">ondragover</span><span class="hljs-tag">=</span><span class="hljs-string">"event.preventDefault();"</span>
<span class="hljs-tag">         @</span><span class="hljs-attr">ondrop</span><span class="hljs-tag">=</span><span class="hljs-string">"OnDropHandler"</span><span class="hljs-tag">&gt;</span>
        @foreach (var item in TaskItems
            .Where(q =&gt; q.Priority == Priority))
            {
            
            }
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      
    <p class="normal">The preceding markup labels the <code class="inlineCode">Dropzone</code> by its priority and allows elements to be dropped into it by preventing the default value of the <code class="inlineCode">ondragover</code> event. The <code class="inlineCode">OnDropHandler</code> method is called when an element is dropped into the <code class="inlineCode">Dropzone</code>. Finally, it loops through all the items in the <code class="inlineCode">TaskItems</code> class with the matching <code class="inlineCode">Priority</code>.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="10">Add the following markup within the <code class="inlineCode">@foreach</code> loop:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"draggable"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">    </span><span class="hljs-attr">draggable</span><span class="hljs-tag">=</span><span class="hljs-string">"true"</span><span class="hljs-tag"> </span>
<span class="hljs-tag">    @</span><span class="hljs-attr">ondragstart</span><span class="hljs-tag">=</span><span class="hljs-string">"@(() =&gt; OnDragStartHandler(item))"</span><span class="hljs-tag">&gt;</span>
    @item.TaskName
    <span class="hljs-tag">&lt;</span><span class="hljs-name">span</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"badge text-bg-secondary"</span><span class="hljs-tag">&gt;</span>
        @item.Priority
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">span</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      
    <p class="normal">The preceding markup makes the <code class="inlineCode">div</code> element draggable by setting the <code class="inlineCode">draggable</code> attribute to <code class="inlineCode">true</code>. The <code class="inlineCode">OnDragStartHandler</code> method is called when the element is dragged.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="11">Add the following <code class="inlineCode">OnDropHandler</code> method to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">OnDropHandler</span><span class="hljs-function">()</span>
{
    OnDrop.InvokeAsync(Priority);
}
</code></pre>
      
    <p class="normal">The <a id="_idIndexMarker620"></a>preceding code <a id="_idIndexMarker621"></a>invokes the <code class="inlineCode">OnDrop</code> method.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="12">Add the following <code class="inlineCode">OnDragStartHandler</code> method to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">OnDragStartHandler</span><span class="hljs-function">(</span><span class="hljs-params">TaskItem task</span><span class="hljs-function">)</span>
{
    OnStartDrag.InvokeAsync(task);
}
</code></pre>
      </li>
    </ol>
    <p class="normal">The preceding code invokes the <code class="inlineCode">OnStartDrag</code> method.</p>
    <p class="normal">We have added a <code class="inlineCode">Dropzone</code> component. Now we need to add some styling to the component.</p>
    <h2 id="_idParaDest-259" class="heading-2">Add a stylesheet</h2>
    <p class="normal">We will add <a id="_idIndexMarker622"></a>a stylesheet to the <code class="inlineCode">Dropzone</code> component using CSS isolation. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">Shared</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Item</strong> option from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">css</code> in the <strong class="screenText">Search</strong> box.</li>
      <li class="numberedList">Select <strong class="screenText">Style Sheet</strong>.</li>
      <li class="numberedList">Name the style sheet <code class="inlineCode">Dropzone.razor.css</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Enter the following styles:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-selector-class">.draggable</span> {
    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;
    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">25px</span>;
    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#424d5c</span>;
    <span class="hljs-attribute">background</span>: <span class="hljs-number">#ff6a00</span>;
    <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;
    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;
    <span class="hljs-attribute">cursor</span>: grab;
}
    <span class="hljs-selector-class">.draggable</span><span class="hljs-selector-pseudo">:active</span> {
        <span class="hljs-attribute">cursor</span>: grabbing;
    }
<span class="hljs-selector-class">.dropzone</span> {
    <span class="hljs-attribute">padding</span>: .<span class="hljs-number">75rem</span>;
    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid black;
    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">20rem</span>;
}
</code></pre>
      
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">You can copy the <code class="inlineCode">Dropzone.razor.css</code> file from the GitHub repository.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Open the <code class="inlineCode">wwwroot/index.html</code> file.</li>
      <li class="numberedList">Uncomment the following <code class="inlineCode">link</code> element at the bottom of the <code class="inlineCode">head</code> element:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">link</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"KanbanBoard.styles.css"</span><span class="hljs-tag"> </span><span class="hljs-attr">rel</span><span class="hljs-tag">=</span><span class="hljs-string">"stylesheet"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
    </ol>
    <p class="normal">We have <a id="_idIndexMarker623"></a>finished styling the <code class="inlineCode">Dropzone</code> component. Now we can put the Kanban board together.</p>
    <h2 id="_idParaDest-260" class="heading-2">Create the Kanban board</h2>
    <p class="normal">We need to <a id="_idIndexMarker624"></a>add three <code class="inlineCode">Dropzone</code> components to create our Kanban board, one for each of the three types of tasks. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">_Imports.razor</code> file.</li>
      <li class="numberedList">Add the following <code class="inlineCode">using</code> statements:
        <pre class="programlisting code"><code class="hljs-code">@using KanbanBoard.Models
@using KanbanBoard.Shared
</code></pre>
      </li>
      <li class="numberedList">Open the <code class="inlineCode">Pages\Index.razor</code> file.</li>
      <li class="numberedList">Remove the <code class="inlineCode">h1</code> element.</li>
      <li class="numberedList">Add the following markup:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>Kanban Board<span class="hljs-tag">&lt;/</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"row"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">Dropzone</span><span class="hljs-tag"> </span><span class="hljs-attr">Priority</span><span class="hljs-tag">=</span><span class="hljs-string">"TaskPriority.High"</span>
<span class="hljs-tag">              </span><span class="hljs-attr">TaskItems</span><span class="hljs-tag">=</span><span class="hljs-string">"TaskItems"</span>
<span class="hljs-tag">              </span><span class="hljs-attr">OnDrop</span><span class="hljs-tag">=</span><span class="hljs-string">"OnDrop"</span>
<span class="hljs-tag">              </span><span class="hljs-attr">OnStartDrag</span><span class="hljs-tag">=</span><span class="hljs-string">"OnStartDrag"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">Dropzone</span><span class="hljs-tag"> </span><span class="hljs-attr">Priority</span><span class="hljs-tag">=</span><span class="hljs-string">"TaskPriority.Mid"</span>
<span class="hljs-tag">              </span><span class="hljs-attr">TaskItems</span><span class="hljs-tag">=</span><span class="hljs-string">"TaskItems"</span>
<span class="hljs-tag">              </span><span class="hljs-attr">OnDrop</span><span class="hljs-tag">=</span><span class="hljs-string">"OnDrop"</span>
<span class="hljs-tag">              </span><span class="hljs-attr">OnStartDrag</span><span class="hljs-tag">=</span><span class="hljs-string">"OnStartDrag"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">Dropzone</span><span class="hljs-tag"> </span><span class="hljs-attr">Priority</span><span class="hljs-tag">=</span><span class="hljs-string">"TaskPriority.Low"</span>
<span class="hljs-tag">              </span><span class="hljs-attr">TaskItems</span><span class="hljs-tag">=</span><span class="hljs-string">"TaskItems"</span>
<span class="hljs-tag">              </span><span class="hljs-attr">OnDrop</span><span class="hljs-tag">=</span><span class="hljs-string">"OnDrop"</span>
<span class="hljs-tag">              </span><span class="hljs-attr">OnStartDrag</span><span class="hljs-tag">=</span><span class="hljs-string">"OnStartDrag"</span><span class="hljs-tag"> /&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      
    <p class="normal">The preceding <a id="_idIndexMarker625"></a>code adds three <code class="inlineCode">Dropzone</code> components, one for each priority.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Add the following code block:
        <pre class="programlisting code"><code class="hljs-code">@code {
    <span class="hljs-keyword">public</span> TaskItem? CurrentItem;
    List&lt;TaskItem&gt; TaskItems = <span class="hljs-keyword">new</span>();
    
    <span class="hljs-keyword">protected</span><span class="hljs-function"> </span><span class="hljs-keyword">override</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">OnInitialized</span><span class="hljs-function">()</span>
    {
        TaskItems.Add(<span class="hljs-keyword">new</span> TaskItem
        {
            TaskName = <span class="hljs-string">"Call Mom"</span>,
            Priority = TaskPriority.High
        });
       TaskItems.Add(<span class="hljs-keyword">new</span> TaskItem
       {
           TaskName = <span class="hljs-string">"Buy milk"</span>,
           Priority = TaskPriority.Mid
        });
        TaskItems.Add(<span class="hljs-keyword">new</span> TaskItem
        {
            TaskName = <span class="hljs-string">"Exercise"</span>,
            Priority = TaskPriority.Low
        });    
    }
}
</code></pre>
     
    <p class="normal">The preceding code initializes the <code class="inlineCode">TaskItems</code> object with three tasks.</p> </li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Add the <code class="inlineCode">OnStartDrag</code> method to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">OnStartDrag</span><span class="hljs-function">(</span><span class="hljs-params">TaskItem item</span><span class="hljs-function">)</span>
{
    CurrentItem = item;
}
</code></pre>
      
    <p class="normal">The preceding <a id="_idIndexMarker626"></a>code sets the value of <code class="inlineCode">CurrentItem</code> to the item that is currently being dragged. We will use this value when the item is subsequently dropped. The <code class="inlineCode">Dropzone</code> component invokes this method when the <code class="inlineCode">@ondragstart</code> event is triggered.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Add the <code class="inlineCode">OnDrop</code> method to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">OnDrop</span><span class="hljs-function">(</span><span class="hljs-params">TaskPriority priority</span><span class="hljs-function">)</span>
{
    CurrentItem!.Priority = priority;
}
</code></pre>
     
    <p class="normal">The preceding code sets the <code class="inlineCode">Priority</code> property of the <code class="inlineCode">CurrentItem</code> to the priority associated with the <code class="inlineCode">Dropzone</code> that <code class="inlineCode">CurrentItem</code> is dropped into. The <code class="inlineCode">Dropzone</code> component invokes this method when the <code class="inlineCode">@ondrop</code> event is triggered.</p> </li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Drag all the tasks to the <strong class="screenText">High Priority</strong> dropzone.</li>
    </ol>
    <p class="normal">After you drop each task into the <strong class="screenText">High Priority</strong> dropzone, verify that the badge on the task is updated to <strong class="screenText">High</strong>.</p>
    <p class="normal">We have created a very simple Kanban board with three items. Let’s add the ability to add more items through the UI.</p>
    <h2 id="_idParaDest-261" class="heading-2">Create the NewTask component</h2>
    <p class="normal">We need to <a id="_idIndexMarker627"></a>add a <code class="inlineCode">NewTask</code> component. We <a id="_idIndexMarker628"></a>do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">Shared</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Razor Component</strong> option from the menu.</li>
      <li class="numberedList">Name the new component <code class="inlineCode">NewTask</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Remove the <code class="inlineCode">h3</code> element.</li>
      <li class="numberedList">Add the following markup:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"row pt-3"</span><span class="hljs-tag"> &gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"input-group mb-3"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">label</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"input-group-text"</span>
<span class="hljs-tag">          </span><span class="hljs-attr">for</span><span class="hljs-tag">=</span><span class="hljs-string">"inputTask"</span><span class="hljs-tag">&gt;</span>
            Task
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">label</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">input</span><span class="hljs-tag"> @</span><span class="hljs-attr">ref</span><span class="hljs-tag">=</span><span class="hljs-string">"taskInput"</span>
<span class="hljs-tag">               </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"text"</span>
<span class="hljs-tag">               </span><span class="hljs-attr">id</span><span class="hljs-tag">=</span><span class="hljs-string">"inputTask"</span>
<span class="hljs-tag">               </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"form-control"</span>
<span class="hljs-tag">               @</span><span class="hljs-attr">bind-value</span><span class="hljs-tag">=</span><span class="hljs-string">"@taskName"</span>
<span class="hljs-tag">               @</span><span class="hljs-attr">attributes</span><span class="hljs-tag">=</span><span class="hljs-string">"InputParameters"</span><span class="hljs-tag"> /&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="hljs-attr">type</span><span class="hljs-tag">=</span><span class="hljs-string">"button"</span>
<span class="hljs-tag">                </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"btn btn-outline-secondary"</span>
<span class="hljs-tag">                @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"OnClickHandlerAsync"</span><span class="hljs-tag">&gt;</span>
            Add Task
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      
    <p class="normal">The preceding markup includes a label, a textbox, and a button. The textbox includes an <code class="inlineCode">@ref</code> attribute that we will use later to set focus to the textbox.</p>
    <p class="normal">This is a screenshot of the <code class="inlineCode">NewTask</code> component that we are working on:</p>
    <figure class="mediaobject"><img src="../Images/B18471_08_08.png" alt=""/></figure>
    <p class="packt_figref">Figure 8.8: NewTask component</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Add the following code to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span>? taskName;
<span class="hljs-keyword">private</span> ElementReference taskInput;
[<span class="hljs-meta">Parameter(CaptureUnmatchedValues = true)</span>]
<span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt;? 
    InputParameters{ <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
[<span class="hljs-meta">Parameter</span>]
<span class="hljs-keyword">public</span> EventCallback&lt;<span class="hljs-built_in">string</span>&gt; OnSubmit { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      
    <p class="normal">The preceding <a id="_idIndexMarker629"></a>code defines <a id="_idIndexMarker630"></a>a parameter, <code class="inlineCode">InputParameters</code>, that will be used for attribute splatting.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Add the <code class="inlineCode">OnClickHandlerAsync</code> method to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">async</span><span class="hljs-function"> Task </span><span class="hljs-title">OnClickHandlerAsync</span><span class="hljs-function">()</span>
{
    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrWhiteSpace(taskName))
    {
        <span class="hljs-keyword">await</span> OnSubmit.InvokeAsync(taskName);
        taskName = <span class="hljs-literal">null</span>;
        <span class="hljs-keyword">await</span> taskInput.FocusAsync();
    }
}
</code></pre>
      </li>
    </ol>
    <p class="normal">The preceding code invokes the <code class="inlineCode">OnSubmit</code> method, sets the <code class="inlineCode">taskName</code> field to <code class="inlineCode">null</code>, and sets the focus to the <code class="inlineCode">taskInput</code> object.</p>
    <p class="normal">We have now created the <code class="inlineCode">NewTask</code> component. Next, we need to start using it.</p>
    <h2 id="_idParaDest-262" class="heading-2">Use the NewTask component</h2>
    <p class="normal">We need <a id="_idIndexMarker631"></a>to add the <code class="inlineCode">NewTask</code> component <a id="_idIndexMarker632"></a>to the <code class="inlineCode">Home</code> page. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">Pages\Index.razor</code> file.</li>
      <li class="numberedList">Add the following markup below the <code class="inlineCode">PageTitle</code> component:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">NewTask</span><span class="hljs-tag"> </span><span class="hljs-attr">OnSubmit</span><span class="hljs-tag">=</span><span class="hljs-string">"AddTask"</span>
<span class="hljs-tag">         @</span><span class="hljs-attr">attributes</span><span class="hljs-tag">=</span><span class="hljs-string">"InputAttributes"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following code to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; InputAttributes = <span class="hljs-keyword">new</span> ()
{
    { <span class="hljs-string">"maxlength"</span>, <span class="hljs-string">"25"</span> },
    { <span class="hljs-string">"placeholder"</span>, <span class="hljs-string">"enter new task"</span> },
    { <span class="hljs-string">"title"</span>, <span class="hljs-string">"This textbox is for adding your tasks."</span> }
};
</code></pre>
      
    <p class="normal">In the preceding code, properties are being set without being explicitly defined.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="4">Add the <code class="inlineCode">AddTask</code> method to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">AddTask</span><span class="hljs-function">(</span><span class="hljs-built_in">string</span><span class="hljs-params"> taskName</span><span class="hljs-function">)</span>
{
    <span class="hljs-keyword">var</span> taskItem = <span class="hljs-keyword">new</span> TaskItem()
        {
            TaskName = taskName,
            Priority = TaskPriority.High
        };
    TaskItems.Add(taskItem);
}
</code></pre>
      
    <p class="normal">The preceding code sets the priority of the new item to <code class="inlineCode">High</code> and adds it to the <code class="inlineCode">TaskItems</code> object.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Enter a new task and click the <strong class="screenText">Add Task</strong> button.
    <p class="normal">When the <strong class="screenText">Add Task</strong> button of the <code class="inlineCode">NewTask</code> component is clicked, the <code class="inlineCode">AddTask</code> method is invoked. The textbox is cleared, and the focus is returned to the textbox.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Enter another new task and click the <strong class="screenText">Add Task</strong> button.</li>
      <li class="numberedList">Drag <a id="_idIndexMarker633"></a>and drop the tasks to <a id="_idIndexMarker634"></a>change their priorities.</li>
    </ol>
    <p class="normal">We have added the ability to add new tasks to the Kanban board.</p>
    <h1 id="_idParaDest-263" class="heading-1">Summary</h1>
    <p class="normal">You should now be able to handle events in your Blazor WebAssembly app. Also, you should be comfortable with using attribute splatting and arbitrary parameters.</p>
    <p class="normal">In this chapter, we introduced event handling. We explained how to use <code class="inlineCode">EventArgs</code> and how to use lambda expressions to provide arguments to a method. We also explained how to prevent default actions and how to use the <code class="inlineCode">@ref</code> attribute to programmatically set the focus to a particular element. Finally, we introduced both attribute splatting and arbitrary parameters.</p>
    <p class="normal">After that, we used the <strong class="keyWord">Blazor WebAssembly App Empty</strong> project template to create a new project and added <code class="inlineCode">Bootstrap</code> to the project. Next, we added a <code class="inlineCode">Dropzone</code> component to the project and used it to create a Kanban board. Finally, we added the ability to add tasks to the Kanban board while demonstrating both attribute splatting and arbitrary parameters.</p>
    <p class="normal">Now that you know how to handle different types of events in your Blazor WebAssembly app, you can create more responsive applications. And, since you can use a dictionary to pass both explicitly declared attributes and implicit attributes to a component, you can create components faster since you do not need to explicitly define each parameter.</p>
    <p class="normal">In the next chapter, we will create an application that can upload and read an Excel file.</p>
    <h1 id="_idParaDest-264" class="heading-1">Questions</h1>
    <p class="normal">The following questions are provided for your consideration:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">How can you update the Kanban board to allow the user to delete a task?</li>
      <li class="numberedList">Why would you want to include an attribute in the dictionary used for attribute splatting that is not defined on the component, either explicitly or implicitly?</li>
      <li class="numberedList">What is the base class of the <code class="inlineCode">DragEventArgs</code> class?</li>
    </ol>
    <h1 id="_idParaDest-265" class="heading-1">Further reading</h1>
    <p class="normal">The following resources provide more information concerning the topics covered in this chapter:</p>
    <ul>
      <li class="bulletList">For more information on <strong class="keyWord">Document Object Model</strong> (<strong class="keyWord">DOM</strong>) events, refer to <a href="https://developer.mozilla.org/en-US/docs/Web/Events"><span class="url">https://developer.mozilla.org/en-US/docs/Web/Events</span></a>.</li>
      <li class="bulletList">For more information on the <code class="inlineCode">EventArgs</code> class, refer to <a href="https://learn.microsoft.com/en-us/dotnet/api/system.eventargs"><span class="url">https://learn.microsoft.com/en-us/dotnet/api/system.eventargs</span></a>.</li>
      <li class="bulletList">For more information on the <code class="inlineCode">DragEventArgs</code> class, refer to <a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.drageventargs"><span class="url">https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.drageventargs</span></a>.</li>
    </ul>
  </div>
</body>
</html>