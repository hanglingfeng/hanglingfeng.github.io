<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
  <title>Chapter_4</title>
  <link href="../Styles/syntax-highlighting.css" rel="stylesheet" type="text/css"/>
  <link href="../Styles/epub.css" rel="stylesheet" type="text/css"/>
</head>

<body id="Chapter_4" lang="en-US" xml:lang="en-US">
  <div id="_idContainer135" class="Basic-Text-Frame">
    <h1 class="chapterNumber">4</h1>
    <h1 id="_idParaDest-130" class="chapterTitle">Building a Modal Dialog Using Templated Components</h1>
    <p class="normal">A modal dialog is a dialog box that appears on top of all other content in a window and requires user interaction to close it. A templated component is a component that accepts one or more UI templates as parameters. The UI templates of a templated component can contain any Razor markup.</p>
    <p class="normal">In this chapter, we will learn about <strong class="keyWord">RenderFragment</strong> parameters, <strong class="keyWord">EventCallback</strong> parameters, and CSS isolation. <code class="inlineCode">RenderFragment</code> parameters are used when a parent component needs to share information with a child component, and conversely, <code class="inlineCode">EventCallback</code> parameters are used when a child component needs to share information with its parent component. CSS isolation is used to scope CSS styles to a specific component.</p>
    <p class="normal">In this chapter, we will create a modal dialog component. The component will be a templated component that can render different HTML based on its parameters. It will use event callbacks to return events to the calling component. It will use CSS isolation to add the formatting that will make it behave like a modal dialog. We will test the modal dialog component by adding it to another component. Finally, we will move the component to a <strong class="keyWord">Razor class library</strong> so that it can be easily shared with other projects.</p>
    <blockquote class="packt_quote">
      <p class="quote"> Custom components</p>
      <p class="quote">can be used over again.</p>
      <p class="quote">Make a library!</p>
    </blockquote>
    <p class="normal">In this chapter, we will cover the following topics:</p>
    <ul>
      <li class="bulletList">Using <code class="inlineCode">RenderFragment</code> parameters</li>
      <li class="bulletList">Using <code class="inlineCode">EventCallback</code> parameters</li>
      <li class="bulletList">Understanding CSS isolation</li>
      <li class="bulletList">Creating a Razor class library</li>
      <li class="bulletList">Creating the modal dialog project</li>
    </ul>
    <h1 id="_idParaDest-131" class="heading-1">Technical requirements</h1>
    <p class="normal">To complete this project, you need to have Visual Studio 2022 installed on your PC. For instructions on how to install the free Community Edition of Visual Studio 2022, refer to <em class="chapterRef">Chapter 1</em>, <em class="italic">Introduction to Blazor WebAssembly</em>.</p>
    <p class="normal">The source code for this chapter is available in the following GitHub repository: <a href="https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter04"><span class="url">https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/</span><span class="url">Chapter04</span></a>.</p>
    <p class="normal">The Code in Action video is available here: <a href="https://packt.link/Ch4"><span class="url">https://packt.link/Ch4</span></a>.</p>
    <h1 id="_idParaDest-132" class="heading-1">Using RenderFragment parameters</h1>
    <p class="normal">A <code class="inlineCode">RenderFragment</code> parameter is <a id="_idIndexMarker297"></a>a segment of UI content. It is used to communicate UI content from the parent to the child. The UI content can include plain text, HTML markup, Razor markup, or another component.</p>
    <p class="normal">The following code is for the <code class="inlineCode">Alert</code> component. The UI content of the <code class="inlineCode">Alert</code> component is displayed when the value of its <code class="inlineCode">Show</code> property is <code class="inlineCode">true</code>:</p>
    <p class="normal"><strong class="keyWord">Alert.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@if (Show)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
                @ChildContent
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"OnOk"</span><span class="hljs-tag">&gt;</span>
                    OK
                <span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
}
@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback OnOk { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set;} 
}
</code></pre>
    <p class="normal">The preceding <a id="_idIndexMarker298"></a>code, for the <code class="inlineCode">Alert</code> component, includes three different types of parameters: simple type, <code class="inlineCode">EventCallback</code>, and <code class="inlineCode">RenderFragment</code>:</p>
    <ul>
      <li class="bulletList">The first parameter is the <code class="inlineCode">Show</code> property. It is of type <code class="inlineCode">Boolean</code>, which is a simple type. For more information on using simple types as parameters, see <em class="chapterRef">Chapter 2</em>, <em class="italic">Building Your First Blazor WebAssembly Application</em>.</li>
      <li class="bulletList">The second parameter is the <code class="inlineCode">OnOk</code> property. It is of type <code class="inlineCode">EventCallback</code>. We will learn more about <code class="inlineCode">EventCallback</code> parameters in the next section.</li>
      <li class="bulletList">The last parameter is the <code class="inlineCode">ChildContent</code> property. It is of type <code class="inlineCode">RenderFragment</code> and is the subject of this section.</li>
    </ul>
    <p class="normal">The following markup uses the <code class="inlineCode">Alert</code> component to display the current day of the week in a dialog when the <strong class="screenText">Show Alert</strong> button is clicked. The Razor markup between the opening tag and the closing tag of the <code class="inlineCode">Alert</code> element is bound to the <code class="inlineCode">ChildContent</code> property of the <code class="inlineCode">Alert</code> component:</p>
    <pre class="programlisting code"><code class="hljs-code">@page "/"
<span class="hljs-tag">&lt;</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>Home<span class="hljs-tag">&lt;/</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">Alert</span><span class="hljs-tag"> </span><span class="hljs-attr">Show</span><span class="hljs-tag">=</span><span class="hljs-string">"showAlert"</span><span class="hljs-tag"> </span><span class="hljs-attr">OnOk</span><span class="hljs-tag">=</span><span class="hljs-string">"@(() =&gt; showAlert = false)"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Alert<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>Today is @DateTime.Now.DayOfWeek.<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">Alert</span><span class="hljs-tag">&gt;</span>
@if (!showAlert)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"@(() =&gt; showAlert = true)"</span><span class="hljs-tag">&gt;</span>
        Show Alert
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
}
@code {
    private bool showAlert = false;
}
</code></pre>
    <p class="normal">The following screenshot shows the dialog that is displayed when the <strong class="screenText">Show Alert</strong> button is clicked:</p>
    <figure class="mediaobject"><img src="../Images/B18471_04_01.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 4.1: Sample alert</p>
    <p class="normal">The name of the <code class="inlineCode">RenderFragment</code> parameter must be <code class="inlineCode">ChildContent</code> to use the content of the element <a id="_idIndexMarker299"></a>without explicitly specifying the parameter’s name. For example, the following markup results in the same output as the preceding markup that did not explicitly specify the <code class="inlineCode">ChildContent</code> element:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">Alert</span><span class="hljs-tag"> </span><span class="hljs-attr">Show</span><span class="hljs-tag">=</span><span class="hljs-string">"showAlert"</span><span class="hljs-tag"> </span><span class="hljs-attr">OnOk</span><span class="hljs-tag">=</span><span class="hljs-string">"@(() =&gt; showAlert = false)"</span><span class="hljs-tag">&gt;</span>
    <span class="code-highlight"><strong class="hljs-tag-slc">&lt;</strong><strong class="hljs-name-slc">ChildContent</strong><strong class="hljs-tag-slc">&gt;</strong></span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Alert<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>Today is @DateTime.Now.DayOfWeek.<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
    <span class="code-highlight"><strong class="hljs-tag-slc">&lt;/</strong><strong class="hljs-name-slc">ChildContent</strong><strong class="hljs-tag-slc">&gt;</strong></span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">Alert</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">The <code class="inlineCode">ChildContent</code> element is highlighted in the preceding markup.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">By convention, the name of the <code class="inlineCode">RenderFragment</code> parameter used to capture the content of a parent element must be <code class="inlineCode">ChildContent</code>.</p>
    </div>
    <p class="normal">It is possible to include multiple <code class="inlineCode">RenderFragment</code> parameters in a component by explicitly specifying each parameter’s name in the markup. We will use multiple <code class="inlineCode">RenderFragment</code> parameters to complete the project in this chapter.</p>
    <p class="normal">A <code class="inlineCode">RenderFragment</code> parameter enables a parent component to communicate the UI content to be used <a id="_idIndexMarker300"></a>by its child component, while an <code class="inlineCode">EventCallback</code> parameter is used to communicate from the child component back to the parent component. In the next section, we will explain how to use <code class="inlineCode">EventCallback</code> parameters.</p>
    <h1 id="_idParaDest-133" class="heading-1">Using EventCallback parameters</h1>
    <p class="normal">An event callback is <a id="_idIndexMarker301"></a>a method that is passed to another method when a particular event occurs. For example, when the <a id="_idIndexMarker302"></a>button on the <code class="inlineCode">Alert</code> component is clicked, the <code class="inlineCode">@onclick</code> event uses the <code class="inlineCode">OnOk</code> parameter to determine the method that should be called. The method that the <code class="inlineCode">OnOK</code> parameter references is defined in the parent component.</p>
    <p class="normal">As previously stated, <code class="inlineCode">EventCallback</code> parameters are used to share information from the child component to the parent component. They share information with their parent and notify their parent when something, such as a button click, has occurred. The parent component simply specifies the method to call when the event is triggered.</p>
    <p class="normal">This is an example of an <code class="inlineCode">EventCallback</code> parameter:</p>
    <pre class="programlisting code"><code class="hljs-code">[<span class="hljs-meta">Parameter</span>] <span class="hljs-keyword">public</span> EventCallback OnOk { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
    <p class="normal">The following example uses a <strong class="keyWord">lambda expression</strong> for the <code class="inlineCode">OnOk</code> method. When the <code class="inlineCode">OnOk</code> method is called, the value of the <code class="inlineCode">showAlert</code> property is set to <code class="inlineCode">false</code>:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">Alert</span><span class="hljs-tag"> </span><span class="hljs-attr">Show</span><span class="hljs-tag">=</span><span class="hljs-string">"showAlert"</span><span class="hljs-tag"> </span><span class="hljs-attr">OnOk</span><span class="hljs-tag">=</span><span class="hljs-string">"@(() =&gt; showAlert = false)"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Alert<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>Today is @DateTime.Now.DayOfWeek.<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">Alert</span><span class="hljs-tag">&gt;</span>
@code {
    private bool showAlert = false;
}
</code></pre>
    <p class="normal">A lambda expression is used to create an anonymous function. However, we do not need to use anonymous functions when using <code class="inlineCode">EventCallback</code> parameters. The following example shows how to use a method for the <code class="inlineCode">OnOk</code> method instead of an anonymous function:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">Alert</span><span class="hljs-tag"> </span><span class="hljs-attr">Show</span><span class="hljs-tag">=</span><span class="hljs-string">"showAlert"</span><span class="hljs-tag"> </span><span class="hljs-attr">OnOk</span><span class="hljs-tag">=</span><span class="hljs-string">"OkClickHandler"</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>Alert<span class="hljs-tag">&lt;/</span><span class="hljs-name">h1</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>Today is @DateTime.Now.DayOfWeek.<span class="hljs-tag">&lt;/</span><span class="hljs-name">p</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">Alert</span><span class="hljs-tag">&gt;</span>
@code {
    private bool showAlert = false;
    private void OkClickHandler()
    {
        showAlert = false;
    }
}
</code></pre>
    <p class="normal">The preceding code defines a new <code class="inlineCode">OkClickHandler</code> method that is called when the button is clicked.</p>
    <p class="normal">When writing the <code class="inlineCode">Alert</code> component, you might be tempted to update the <code class="inlineCode">Show</code> parameter <a id="_idIndexMarker303"></a>directly from the <code class="inlineCode">OnOk</code> event on the component. You must not do so because if you update the values directly in the component and the component needs to be re-rendered, any state changes will be lost. If you need to maintain state in the component, you should add a private field to the component.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Components should never write to their own parameters.</p>
    </div>
    <p class="normal">For more information on using events, refer to <em class="chapterRef">Chapter 8</em>, <em class="italic">Building a Kanban Board Using Events</em>.</p>
    <p class="normal">The <code class="inlineCode">Alert</code> component displays text on the page, but it does not yet work like a modal dialog. To make it work like a modal dialog, we need to update the style sheets that are used by the component. We can do that by using CSS isolation. In the next section, we will explain how to use CSS isolation.</p>
    <h1 id="_idParaDest-134" class="heading-1">Understanding CSS isolation</h1>
    <p class="normal">The location <a id="_idIndexMarker304"></a>of the <strong class="keyWord">cascading style sheets</strong> (<strong class="keyWord">CSS</strong>) used to style our Blazor WebAssembly apps is usually <a id="_idIndexMarker305"></a>the <code class="inlineCode">wwwroot</code> folder. Usually, the styles defined in those CSS files are applied to all the components in the web app. However, there are times when we want more control over the styles that are applied to a <a id="_idIndexMarker306"></a>particular component. To achieve that, we use CSS isolation. With CSS isolation, the styles in the designated CSS file will override the global styles and will target only a specific component and its child components.</p>
    <h2 id="_idParaDest-135" class="heading-2">Enabling CSS isolation</h2>
    <p class="normal">To add a CSS file <a id="_idIndexMarker307"></a>that is scoped to a specific component, create a CSS file in the same folder as the component with the same name as the component, but with a CSS file extension. For example, the CSS file for the <code class="inlineCode">Alert.razor</code> component would be called <code class="inlineCode">Alert.razor.css</code>.</p>
    <p class="normal">The following markup is for an updated version of the <code class="inlineCode">Alert</code> component. In this version, we have added the two highlighted classes:</p>
    <p class="normal"><strong class="keyWord">Alert.razor</strong></p>
    <pre class="programlisting code"><code class="hljs-code">@if (Show)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="code-highlight"><strong class="hljs-attr-slc">class</strong><strong class="hljs-tag-slc">=</strong><strong class="hljs-string-slc">"dialog-container"</strong></span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="code-highlight"><strong class="hljs-attr-slc">class</strong><strong class="hljs-tag-slc">=</strong><strong class="hljs-string-slc">"dialog"</strong></span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
                @ChildContent
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"OnOk"</span><span class="hljs-tag">&gt;</span>
                    OK
                <span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
}
</code></pre>
    <p class="normal">The following <code class="inlineCode">Alert.razor.css</code> file defines the styles used by the new classes:</p>
    <p class="normal"><strong class="keyWord">Alert.razor.css</strong></p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-selector-class">.dialog-container</span> {
    <span class="hljs-attribute">position</span>: absolute;
    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.6</span>);
    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2000</span>;
}
<span class="hljs-selector-class">.dialog</span> {
    <span class="hljs-attribute">background-color</span>: white;
    <span class="hljs-attribute">margin</span>: auto;
    <span class="hljs-attribute">width</span>: <span class="hljs-number">15rem</span>;
    <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5rem</span>
}
</code></pre>
    <p class="normal">The preceding CSS includes styles for both the <code class="inlineCode">dialog-container</code> class and the <code class="inlineCode">dialog</code> class:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">dialog-container</code>: This class sets the background color of the element to black with 60% opacity <a id="_idIndexMarker308"></a>and places it on top of the other elements, by setting its z-index to 2,000.</li>
      <li class="bulletList"><code class="inlineCode">dialog</code>: This class sets <a id="_idIndexMarker309"></a>the background color of the element white, centers it horizontally within its parent, and sets its width to 15 REM.</li>
    </ul>
    <p class="normal">To enable the <a id="_idIndexMarker310"></a>project to use the CSS, we need to add a link to the <code class="inlineCode">wwwroot/index.html</code> file. By convention, the name of the CSS file that needs to be linked is the assembly’s name followed by <code class="inlineCode">.styles.css</code>. For example, if the name of the project is <code class="inlineCode">Demo4</code>, a link to <code class="inlineCode">Demo4.styles.css</code> needs to be added to the <code class="inlineCode">wwwroot/index.html</code> file. The following highlighted markup shows the link to apply the styles defined in the <code class="inlineCode">Alert.razor.css</code> file:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">head</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">meta</span><span class="hljs-tag"> </span><span class="hljs-attr">charset</span><span class="hljs-tag">=</span><span class="hljs-string">"utf-8"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">base</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"/"</span><span class="hljs-tag"> /&gt;</span>
    <span class="hljs-tag">&lt;</span><span class="hljs-name">link</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"css/app.css"</span><span class="hljs-tag"> </span><span class="hljs-attr">rel</span><span class="hljs-tag">=</span><span class="hljs-string">"stylesheet"</span><span class="hljs-tag"> /&gt;</span>
    <span class="code-highlight"><strong class="hljs-tag-slc">&lt;</strong><strong class="hljs-name-slc">link</strong><strong class="hljs-tag-slc"> </strong><strong class="hljs-attr-slc">href</strong><strong class="hljs-tag-slc">=</strong><strong class="hljs-string-slc">"Demo4.styles.css"</strong><strong class="hljs-tag-slc"> </strong><strong class="hljs-attr-slc">rel</strong><strong class="hljs-tag-slc">=</strong><strong class="hljs-string-slc">"</strong><strong class="hljs-string-slc">stylesheet"</strong><strong class="hljs-tag-slc"> /&gt;</strong></span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">head</span><span class="hljs-tag">&gt;</span>
</code></pre>
    <p class="normal">The following screenshot shows the <code class="inlineCode">Alert</code> component using the preceding <code class="inlineCode">Alert.razor.css</code> file:</p>
    <figure class="mediaobject"><img src="../Images/B18471_04_02.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 4.2: Alert component</p>
    <p class="normal">In the preceding example, the linked <code class="inlineCode">Demo4.style.css</code> file is created at build time. When it is created, the <a id="_idIndexMarker311"></a>Blazor engine rewrites the CSS and HTML for each component by appending a string generated by the framework that is unique for each component. The rewritten CSS styles are bundled into one file and saved as a static resource.</p>
    <p class="normal">This is a portion of the <code class="inlineCode">Demo4.styles.css</code> file:</p>
    <pre class="programlisting code"><code class="hljs-code"><span class="hljs-selector-class">.dialog-container</span><span class="hljs-selector-attr">[b-j4grw2wm7a]</span> {
    <span class="hljs-attribute">position</span>: absolute;
    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.6</span>);
    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2000</span>;
}
<span class="hljs-selector-class">.dialog</span><span class="hljs-selector-attr">[b-j4grw2wm7a]</span> {
    <span class="hljs-attribute">background-color</span>: white;
    <span class="hljs-attribute">margin</span>: auto;
    <span class="hljs-attribute">width</span>: <span class="hljs-number">15rem</span>;
    <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5rem</span>
}
</code></pre>
    <p class="normal">This is the rewritten HTML that references the rewritten styles:</p>
    <figure class="mediaobject"><img src="../Images/B18471_04_03.png" alt="A picture containing text

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 4.3: Rewritten HTML</p>
    <p class="normal">By convention, the <a id="_idIndexMarker312"></a>contents of the <code class="inlineCode">Demo4.styles.css</code> file are in the <code class="inlineCode">obj/{CONFIGURATION}/{TARGET FRAMEWORK}/scopedcss/projectbundle/{ASSEMBLY NAME}.bundle.scp.css</code> file. In the preceding example, the file was in the <code class="inlineCode">\Demo4\obj\Debug\net7.0\scopedcss\bundle</code> folder.</p>
    <h2 id="_idParaDest-136" class="heading-2">Supporting child components</h2>
    <p class="normal">By default, when using CSS isolation, the CSS styles only apply to the current component. If we <a id="_idIndexMarker313"></a>want the CSS styles to apply to a child component of the current component, we need to use the <code class="inlineCode">::deep</code> pseudo-element within our style. This pseudo-element selects the elements that are descendants of the element’s identifier.</p>
    <p class="normal">For example, the following style will be applied to any <code class="inlineCode">H1</code> headings within the current component, as well as any <code class="inlineCode">H1</code> headings within the child components of the current component:</p>
    <pre class="programlisting code"><code class="hljs-code">::deep h1 {
    <span class="hljs-attribute">color</span>: red;
}
</code></pre>
    <p class="normal">CSS isolation is useful if you don’t want your component to use the global styles or want to share your <a id="_idIndexMarker314"></a>component via a Razor class library.</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Scoped CSS does not apply to Razor components. It only applies to the HTML elements that are rendered by the Razor component.</p>
    </div>
    <p class="normal">Now let’s take a look at the project that we will be building in this chapter.</p>
    <h1 id="_idParaDest-137" class="heading-1">Creating the modal dialog project</h1>
    <p class="normal">In this chapter, we <a id="_idIndexMarker315"></a>will build a modal dialog component. We will enable both the <code class="inlineCode">Title</code> and the <code class="inlineCode">Body</code> of the modal dialog component to be customized using Razor markup. We will add the modal dialog component to another component.</p>
    <p class="normal">This is a screenshot of the modal dialog:</p>
    <figure class="mediaobject"><img src="../Images/B18471_04_04.png" alt="Graphical user interface

Description automatically generated with low confidence"/></figure>
    <p class="packt_figref">Figure 4.4: Modal dialog</p>
    <p class="normal">After we have completed the modal dialog component, we will move it into a Razor class library so that it can be shared with other projects.</p>
    <p class="normal">The build time for this project is approximately 90 minutes.</p>
    <h2 id="_idParaDest-138" class="heading-2">Project overview</h2>
    <p class="normal">The <code class="inlineCode">ModalDialog</code> project will be created by using Microsoft’s <strong class="keyWord">Blazor WebAssembly App Empty</strong> project <a id="_idIndexMarker316"></a>template to create an empty Blazor WebAssembly project. We will add a <code class="inlineCode">Dialog</code> component that includes multiple sections and use CSS isolation to apply styles that make it behave like a modal dialog. We will use <code class="inlineCode">EventCallback</code> parameters to communicate from the component back to the parent when a button is clicked. We will use <code class="inlineCode">RenderFragment</code> parameters to allow Razor markup to be communicated from the parent to the component. Finally, we will create a Razor <a id="_idIndexMarker317"></a>class library and move the <code class="inlineCode">Dialog</code> component into it so that the modal dialog can be shared with other projects.</p>
    <h2 id="_idParaDest-139" class="heading-2">Getting started with the project</h2>
    <p class="normal">We need <a id="_idIndexMarker318"></a>to create a new Blazor WebAssembly app. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open Visual Studio 2022.</li>
      <li class="numberedList">Click the <strong class="screenText">Create a new project</strong> button.</li>
      <li class="numberedList">Press <em class="keystroke">Alt</em>+<em class="keystroke">S</em> to enter the search for the templates textbox.</li>
      <li class="numberedList">Enter <code class="inlineCode">Blazor</code> and press the <em class="keystroke">Enter</em> key.
    <p class="normal">The following screenshot shows the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template.</p>
    <figure class="mediaobject"><img src="../Images/B18471_04_05.png" alt="Graphical user interface, text, application, chat or text message

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 4.5: Blazor WebAssembly App Empty project template</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Select the <strong class="screenText">Blazor WebAssembly App Empty</strong> project template and click the <strong class="screenText">Next</strong> button.</li>
      <li class="numberedList">Enter <code class="inlineCode">ModalDialog</code> in the <strong class="screenText">Project name</strong> textbox and click the <strong class="screenText">Next</strong> button.
    <p class="normal">This is a screenshot of the dialog used to configure our new project:</p>
    <figure class="mediaobject"><img src="../Images/B18471_04_06.png" alt=""/></figure>
    <p class="packt_figref">Figure 4.6: Configure your new project dialog</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">In the preceding example, we placed the <code class="inlineCode">ModalDialog</code> project into the <code class="inlineCode">E:\Blazor</code> folder. However, the location of this project is not important.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="7">Select <strong class="screenText">.NET 7.0</strong> as the version of the <strong class="screenText">Framework</strong> to use.</li>
      <li class="numberedList">Check <a id="_idIndexMarker319"></a>the <strong class="screenText">Configure for HTTPS</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">ASP.NET Core Hosted</strong> checkbox.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">Progressive Web Application</strong> checkbox.
    <p class="normal">This is a screenshot of the dialog used to collect additional information about our new project.</p>
    <figure class="mediaobject"><img src="../Images/B18471_04_07.png" alt="Graphical user interface, text, application, email

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 4.7: Additional information dialog</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="11">Click the <strong class="screenText">Create</strong> button.</li>
    </ol>
    <p class="normal">We have <a id="_idIndexMarker320"></a>created the <code class="inlineCode">ModalDialog</code> Blazor WebAssembly project. However, it is practically empty. Let’s add the <code class="inlineCode">Dialog</code> component.</p>
    <h2 id="_idParaDest-140" class="heading-2">Adding the Dialog component</h2>
    <p class="normal">The <code class="inlineCode">Dialog</code> component <a id="_idIndexMarker321"></a>will be shared. Therefore, we will add it to the <code class="inlineCode">Shared</code> folder. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">ModalDialog</code> project and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Folder</strong> option from the menu.</li>
      <li class="numberedList">Name the new folder <code class="inlineCode">Shared</code>.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">Shared</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">Razor Component</strong> option from the menu.</li>
      <li class="numberedList">Name the new component <code class="inlineCode">Dialog</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Replace the markup in the <code class="inlineCode">Dialog.razor</code> file with the following markup:
        <pre class="programlisting code"><code class="hljs-code">@if (Show)
{
    <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"dialog-container"</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"dialog"</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"dialog-title"</span><span class="hljs-tag">&gt;</span>Title<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"dialog-body"</span><span class="hljs-tag">&gt;</span>Body<span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"dialog-buttons"</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
                    Ok
                <span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
                <span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
                    Cancel
                <span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
            <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
        <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
    <span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
}
@code {
    [Parameter] public bool Show { get; set; }
}
</code></pre>
      </li>
    </ol>
    <p class="normal">In the <a id="_idIndexMarker322"></a>preceding code, the <code class="inlineCode">Show</code> property is used to show and hide the contents of the component. </p>
    <p class="normal">We have added a <code class="inlineCode">Dialog</code> component, but it will not behave like a modal dialog box until the appropriate styles have been added to the project.</p>
    <h2 id="_idParaDest-141" class="heading-2">Add a CSS file</h2>
    <p class="normal">The preceding <a id="_idIndexMarker323"></a>markup includes five classes that we will use to style the <code class="inlineCode">Dialog</code> component to make it behave like a modal dialog:</p>
    <ul>
      <li class="bulletList"><code class="inlineCode">dialog-container</code>: This class is used to set the background color of the element to black with 60% opacity and place it on top of the other elements, by setting its z-index to 2,000.</li>
      <li class="bulletList"><code class="inlineCode">dialog</code>: This class is used to set the background color of the element to white, center it horizontally within its parent, and set its width to 25 REM.</li>
      <li class="bulletList"><code class="inlineCode">dialog-title</code>: This class is used to set the background color to dark gray, set the text to white, and add some padding.</li>
      <li class="bulletList"><code class="inlineCode">dialog-body</code>: This class is used to add some padding to the body.</li>
      <li class="bulletList"><code class="inlineCode">dialog-buttons</code>: This class is used to set the background color to silver and add some padding.</li>
    </ul>
    <p class="normal">We need to <a id="_idIndexMarker324"></a>create a <code class="inlineCode">CSS</code> file to define how to style each of these classes. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">Shared</code> folder and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Item</strong> option from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">css</code> in the <strong class="screenText">Search</strong> box.</li>
      <li class="numberedList">Select <strong class="screenText">Style Sheet</strong>.</li>
      <li class="numberedList">Name the style sheet <code class="inlineCode">Dialog.razor.css</code>.</li>
      <li class="numberedList">Click the <strong class="screenText">Add</strong> button.</li>
      <li class="numberedList">Enter the following styles into the <code class="inlineCode">Dialog.razor.css</code> file:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-selector-class">.dialog-container</span> {
    <span class="hljs-attribute">position</span>: absolute;
    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;
    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.6</span>);
    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2000</span>;
}
<span class="hljs-selector-class">.dialog</span> {
    <span class="hljs-attribute">background-color</span>: white;
    <span class="hljs-attribute">margin</span>: auto;
    <span class="hljs-attribute">width</span>: <span class="hljs-number">25rem</span>;
}
<span class="hljs-selector-class">.dialog-title</span> {
    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#343a40</span>;
    <span class="hljs-attribute">color</span>: white;
    <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5rem</span>;
}
<span class="hljs-selector-class">.dialog-body</span> {
    <span class="hljs-attribute">padding</span>: <span class="hljs-number">2rem</span>;
}
<span class="hljs-selector-class">.dialog-buttons</span> {
    <span class="hljs-attribute">background-color</span>: silver;
    <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5rem</span>;
}
</code></pre>
      </li>
      <li class="numberedList">Open the <code class="inlineCode">wwwroot/index.html</code> file.</li>
      <li class="numberedList">Uncomment the following <code class="inlineCode">link</code> element to the bottom of the <code class="inlineCode">head</code> element:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">link</span><span class="hljs-tag"> </span><span class="hljs-attr">href</span><span class="hljs-tag">=</span><span class="hljs-string">"ModalDialog.styles.css"</span><span class="hljs-tag"> </span><span class="hljs-attr">rel</span><span class="hljs-tag">=</span><span class="hljs-string">"stylesheet"</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
    </ol>
    <p class="normal">The styles <a id="_idIndexMarker325"></a>in the <code class="inlineCode">Dialog.razor.cs</code> file will only be used by the <code class="inlineCode">Dialog</code> component due to CSS isolation. Next, let’s test the <code class="inlineCode">Dialog</code> component.</p>
    <h2 id="_idParaDest-142" class="heading-2">Test the Dialog component</h2>
    <p class="normal">To test the <code class="inlineCode">Dialog</code> component, we <a id="_idIndexMarker326"></a>need to add it to another component. We will add it to the <code class="inlineCode">Index</code> component that is used as the <code class="inlineCode">Home</code> page of the application. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">_Imports.razor</code> file.</li>
      <li class="numberedList">Add the following <code class="inlineCode">using</code> statement:
        <pre class="programlisting code"><code class="hljs-code">@using ModalDialog.Shared
</code></pre>
      </li>
      <li class="numberedList">Open the <code class="inlineCode">Pages/Index.razor</code> file.</li>
      <li class="numberedList">Remove the <code class="inlineCode">h1</code> element from the <code class="inlineCode">Index.razor</code> file.</li>
      <li class="numberedList">Add the following markup to the <code class="inlineCode">Index.razor</code> file:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>Home<span class="hljs-tag">&lt;/</span><span class="hljs-name">PageTitle</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">Dialog</span><span class="hljs-tag"> </span><span class="hljs-attr">Show</span><span class="hljs-tag">=</span><span class="hljs-string">"showDialog"</span><span class="hljs-tag">&gt;&lt;/</span><span class="hljs-name">Dialog</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> @</span><span class="hljs-attr">onclick</span><span class="hljs-tag">=</span><span class="hljs-string">"OpenDialog"</span><span class="hljs-tag">&gt;</span>Show Dialog<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
@code {
    private bool showDialog = false;
    private void OpenDialog()
    {
        showDialog = true;
    }
}
</code></pre>
      </li>
    </ol>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">Do not remove the <code class="inlineCode">@page</code> directive from the top of the file while editing the <code class="inlineCode">Index</code> component.</p>
    </div>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="6">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Click the <strong class="screenText">Show Dialog </strong>button.
    <p class="normal">This is the modal dialog that is displayed:</p>
    <figure class="mediaobject"><img src="../Images/B18471_04_08.png" alt="Shape, rectangle

Description automatically generated with medium confidence"/></figure>
    <p class="packt_figref">Figure 4.8: Sample modal dialog</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Click the <strong class="screenText">Ok</strong> button.
    <p class="normal">Nothing <a id="_idIndexMarker327"></a>happens when you click the <strong class="screenText">Ok</strong> button because we have not yet added an <code class="inlineCode">@onclick</code> event. </p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Close the browser.</li>
    </ol>
    <p class="normal">We will add a couple of <code class="inlineCode">EventCallback</code> parameters to communicate from the <code class="inlineCode">Dialog</code> component back to the <code class="inlineCode">Index</code> component.</p>
    <h2 id="_idParaDest-143" class="heading-2">Add EventCallback parameters</h2>
    <p class="normal">We <a id="_idIndexMarker328"></a>need to add <code class="inlineCode">@onclick</code> events for both the <strong class="screenText">Ok</strong> button and the <strong class="screenText">Cancel</strong> button. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Open the <code class="inlineCode">Shared/Dialog.razor</code> file.</li>
      <li class="numberedList">Add <code class="inlineCode">@onclick</code> events to each of the buttons as indicated by the following highlighted code:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="code-highlight"><strong class="hljs-tag-slc">@</strong><strong class="hljs-attr-slc">onclick</strong><strong class="hljs-tag-slc">=</strong><strong class="hljs-string-slc">"OnOk"</strong></span><span class="hljs-tag">&gt;</span>
    OK
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
<span class="hljs-tag">&lt;</span><span class="hljs-name">button</span><span class="hljs-tag"> </span><span class="code-highlight"><strong class="hljs-tag-slc">@</strong><strong class="hljs-attr-slc">onclick</strong><strong class="hljs-tag-slc">=</strong><strong class="hljs-string-slc">"OnCancel"</strong></span><span class="hljs-tag">&gt;</span>
    Cancel
<span class="hljs-tag">&lt;/</span><span class="hljs-name">button</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following parameters to the code block:
        <pre class="programlisting code"><code class="hljs-code">[<span class="hljs-meta">Parameter</span>]
<span class="hljs-keyword">public</span> EventCallback&lt;MouseEventArgs&gt; OnOk { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
[<span class="hljs-meta">Parameter</span>]
<span class="hljs-keyword">public</span> EventCallback&lt;MouseEventArgs&gt; OnCancel { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      </li>
    </ol>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">The <code class="inlineCode">Parameter</code> attribute does not need to be on the same line as the property that it applies to.</p>
    </div>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Open <a id="_idIndexMarker329"></a>the <code class="inlineCode">Pages/Index.razor</code> file.</li>
      <li class="numberedList">Update the markup for the <code class="inlineCode">Dialog</code> element by adding the highlighted markup:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">Dialog</span><span class="hljs-tag"> </span><span class="hljs-attr">Show</span><span class="hljs-tag">=</span><span class="hljs-string">"</span><span class="hljs-string">showDialog"</span>
<span class="code-highlight"><strong class="hljs-tag-slc">        </strong><strong class="hljs-attr-slc">OnCancel</strong><strong class="hljs-tag-slc">=</strong><strong class="hljs-string-slc">"DialogCancelHandler"</strong></span>
<span class="code-highlight"><strong class="hljs-tag-slc">        </strong><strong class="hljs-attr-slc">OnOk</strong><strong class="hljs-tag-slc">=</strong><strong class="hljs-string-slc">"DialogOkHandler"</strong><strong class="hljs-tag-slc">&gt;</strong></span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">Dialog</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following methods to the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">DialogCancelHandler</span><span class="hljs-function">(</span><span class="hljs-params">MouseEventArgs e</span><span class="hljs-function">)</span>
{
    showDialog = <span class="hljs-literal">false</span>;
}
<span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">DialogOkHandler</span><span class="hljs-function">(</span><span class="hljs-params">MouseEventArgs e</span><span class="hljs-function">)</span>
{
    showDialog = <span class="hljs-literal">false</span>;
}
</code></pre>
      </li>
    </ol>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">Since <code class="inlineCode">e</code> is not being used in the preceding methods, we do not need to specify <code class="inlineCode">MouseEventArgs</code> in the method’s definition. We have included it for demonstration purposes.</p>
    </div>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Press <em class="keystroke">Ctrl+F5</em> to start the application without debugging.</li>
      <li class="numberedList">Click the <strong class="screenText">Show Dialog</strong> button.</li>
      <li class="numberedList">Click the <strong class="screenText">Ok</strong> button.</li>
    </ol>
    <p class="normal">The dialog <a id="_idIndexMarker330"></a>box closes when you click the <strong class="screenText">Ok</strong> button. </p>
    <p class="normal">Now let’s update the <code class="inlineCode">Dialog</code> component to allow us to customize both the <code class="inlineCode">Title</code> and <code class="inlineCode">Body</code> properties of the modal dialog that it creates.</p>
    <h2 id="_idParaDest-144" class="heading-2">Add RenderFragment parameters</h2>
    <p class="normal">We will <a id="_idIndexMarker331"></a>use <code class="inlineCode">RenderFragment</code> parameters for both the <code class="inlineCode">Title</code> and <code class="inlineCode">Body</code> properties of the <code class="inlineCode">Dialog</code> component. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Return to Visual Studio.</li>
      <li class="numberedList">Open the <code class="inlineCode">Shared/Dialog.razor</code> file.</li>
      <li class="numberedList">Update the markup for <code class="inlineCode">dialog-title</code> to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"dialog-title"</span><span class="hljs-tag">&gt;</span><span class="code-highlight"><strong class="hljs-slc">@Title</strong></span><span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Update the markup for <code class="inlineCode">dialog-body</code> to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">div</span><span class="hljs-tag"> </span><span class="hljs-attr">class</span><span class="hljs-tag">=</span><span class="hljs-string">"dialog-body"</span><span class="hljs-tag">&gt;</span><span class="code-highlight"><strong class="hljs-slc">@Body</strong></span><span class="hljs-tag">&lt;/</span><span class="hljs-name">div</span><span class="hljs-tag">&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Add the following parameters to the code block:
        <pre class="programlisting code"><code class="hljs-code">[<span class="hljs-meta">Parameter</span>]
<span class="hljs-keyword">public</span> RenderFragment Title { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
[<span class="hljs-meta">Parameter</span>]
<span class="hljs-keyword">public</span> RenderFragment Body { <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; }
</code></pre>
      </li>
      <li class="numberedList">Open the <code class="inlineCode">Pages/Index.razor</code> file.</li>
      <li class="numberedList">Update the markup for the <code class="inlineCode">Dialog</code> element to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">Dialog</span><span class="hljs-tag"> </span><span class="hljs-attr">Show</span><span class="hljs-tag">=</span><span class="hljs-string">"showDialog"</span>
<span class="hljs-tag">        </span><span class="hljs-attr">OnCancel</span><span class="hljs-tag">=</span><span class="hljs-string">"DialogCancelHandler"</span>
<span class="hljs-tag">        </span><span class="hljs-attr">OnOk</span><span class="hljs-tag">=</span><span class="hljs-string">"DialogOkHandler"</span><span class="hljs-tag">&gt;</span>
<span class="code-highlight"><strong class="hljs-slc">    </strong><strong class="hljs-tag-slc">&lt;</strong><strong class="hljs-name-slc">Title</strong><strong class="hljs-tag-slc">&gt;</strong><strong class="hljs-slc">Quick List [@(Items.Count + 1)]</strong><strong class="hljs-tag-slc">&lt;/</strong><strong class="hljs-name-slc">Title</strong><strong class="hljs-tag-slc">&gt;</strong></span>
<span class="code-highlight"><strong class="hljs-slc">    </strong><strong class="hljs-tag-slc">&lt;</strong><strong class="hljs-name-slc">Body</strong><strong class="hljs-tag-slc">&gt;</strong></span>
<span class="code-highlight"><strong class="hljs-slc">        Enter New Item: </strong><strong class="hljs-tag-slc">&lt;</strong><strong class="hljs-name-slc">input</strong><strong class="hljs-tag-slc"> @</strong><strong class="hljs-attr-slc">bind</strong><strong class="hljs-tag-slc">=</strong><strong class="hljs-string-slc">"</strong><strong class="hljs-string-slc">NewItem"</strong><strong class="hljs-tag-slc"> /&gt;</strong></span>
<span class="code-highlight"><strong class="hljs-slc">    </strong><strong class="hljs-tag-slc">&lt;/</strong><strong class="hljs-name-slc">Body</strong><strong class="hljs-tag-slc">&gt;</strong></span>
<span class="hljs-tag">&lt;/</span><span class="hljs-name">Dialog</span><span class="hljs-tag">&gt;</span>
</code></pre>
      
    <p class="normal">The preceding markup will change the title of the dialog to <code class="inlineCode">Quick List</code> and provide a textbox for the user to enter items for a list.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="8">Add <a id="_idIndexMarker332"></a>the following markup under the <code class="inlineCode">Dialog</code> element:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">ol</span><span class="hljs-tag">&gt;</span>
    @foreach (var item in Items)
    {
        <span class="hljs-tag">&lt;</span><span class="hljs-name">li</span><span class="hljs-tag">&gt;</span>@item<span class="hljs-tag">&lt;/</span><span class="hljs-name">li</span><span class="hljs-tag">&gt;</span>
    }
<span class="hljs-tag">&lt;/</span><span class="hljs-name">ol</span><span class="hljs-tag">&gt;</span>
</code></pre>
      
    <p class="normal">The preceding code will display each of the items in the <code class="inlineCode">Items</code> list in an ordered list.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="9">Add the following variables to the top of the code block:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span>? NewItem;
<span class="hljs-keyword">private</span> List&lt;<span class="hljs-built_in">string</span>&gt; Items = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();
</code></pre>
      </li>
      <li class="numberedList">Update <code class="inlineCode">DialogCancelHandler</code> to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">DialogCancelHandler</span><span class="hljs-function">(</span><span class="hljs-params">MouseEventArgs e</span><span class="hljs-function">)</span>
{
    <span class="code-highlight"><strong class="hljs-slc">NewItem = </strong><strong class="hljs-string-slc">""</strong><strong class="hljs-slc">;</strong></span>
    showDialog = <span class="hljs-literal">false</span>;
}
</code></pre>
      
    <p class="normal">The preceding code will clear the textbox and hide the contents of the <code class="inlineCode">Dialog</code> component.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="11">Update <code class="inlineCode">DialogOkHandler</code> to the following:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-keyword">private</span><span class="hljs-function"> </span><span class="hljs-keyword">void</span><span class="hljs-function"> </span><span class="hljs-title">DialogOkHandler</span><span class="hljs-function">(</span><span class="hljs-params">MouseEventArgs e</span><span class="hljs-function">)</span>
{
<span class="code-highlight"><strong class="hljs-slc">    </strong><strong class="hljs-keyword-slc">if</strong><strong class="hljs-slc"> (!</strong><strong class="hljs-built_in-slc">string</strong><strong class="hljs-slc">.IsNullOrEmpty(NewItem))</strong></span>
<span class="code-highlight"><strong class="hljs-slc">    {</strong></span>
<span class="code-highlight"><strong class="hljs-slc">        Items.Add(NewItem);</strong></span>
<span class="code-highlight"><strong class="hljs-slc">        NewItem = </strong><strong class="hljs-string-slc">""</strong><strong class="hljs-slc">;</strong></span>
<span class="code-highlight"><strong class="hljs-slc">    };</strong></span>
    showDialog = <span class="hljs-literal">false</span>;
}
</code></pre>
      
    <p class="normal">The preceding code will add <code class="inlineCode">NewItem</code> to the <code class="inlineCode">Items</code> list, clear the textbox, and hide the contents of the <code class="inlineCode">Dialog</code> component.</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="12">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Click the <strong class="screenText">Show Dialog</strong> button.</li>
      <li class="numberedList">Enter some text in the <strong class="screenText">Enter New Item</strong> field.</li>
      <li class="numberedList">Click the <strong class="screenText">Ok</strong> button.</li>
      <li class="numberedList">Repeat.
    <p class="normal">Each <a id="_idIndexMarker333"></a>time the <strong class="screenText">Ok</strong> button is clicked, the text in the <strong class="screenText">Enter New Item</strong> field will be added to the list. The following screenshot shows a list where three items have already been added and a fourth item is about to be added using the modal dialog:</p>
    <figure class="mediaobject"><img src="../Images/B18471_04_09.png" alt="Graphical user interface, text, application

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 4.9: Sample Quick List</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="17">Close the browser.</li>
    </ol>
    <p class="normal">To share <a id="_idIndexMarker334"></a>this new component with other projects, we need to add it to a Razor class library.</p>
    <h2 id="_idParaDest-145" class="heading-2">Create a Razor class library</h2>
    <p class="normal">We can <a id="_idIndexMarker335"></a>share components across projects by using a Razor class library. To create a Razor class library, we will use the <strong class="screenText">Razor Class Library</strong> project template. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the solution and select the <strong class="screenText">Add</strong>, <strong class="screenText">New Project</strong> option from the menu.</li>
      <li class="numberedList">Enter <code class="inlineCode">Razor Class Library</code> in the <strong class="screenText">Search for templates</strong> textbox to locate the <strong class="screenText">Razor Class Library</strong> project template.
    <p class="normal">The following screenshot shows the <strong class="screenText">Razor Class Library</strong> project template:</p>
    <figure class="mediaobject"><img src="../Images/B18471_04_10.png" alt="Graphical user interface, text, chat or text message

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 4.10: Razor Class Library project template</p></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="3">Select the <strong class="screenText">Razor Class Library</strong> project template.</li>
      <li class="numberedList">Click the <strong class="screenText">Next</strong> button.</li>
      <li class="numberedList">Name the project <code class="inlineCode">MyComponents</code> and click the <strong class="screenText">Next</strong> button.</li>
      <li class="numberedList">Select <strong class="screenText">.NET 7.0</strong> as the version of the <strong class="screenText">Framework</strong> to use.</li>
      <li class="numberedList">Uncheck the <strong class="screenText">Support pages and views</strong> checkbox.</li>
      <li class="numberedList">Click the <strong class="screenText">Create</strong> button.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">ModalDialog</code> project and select the <strong class="screenText">Add</strong>, <strong class="screenText">Project Reference</strong> option from the menu.</li>
      <li class="numberedList">Check the <code class="inlineCode">MyComponents</code> checkbox and click the <strong class="screenText">OK</strong> button.</li>
    </ol>
    <p class="normal">We have created the <code class="inlineCode">MyComponents</code> Razor class library, and we have added a reference to it from the <code class="inlineCode">ModalDialog</code> project. Let’s test it.</p>
    <h2 id="_idParaDest-146" class="heading-2">Test the Razor class library</h2>
    <p class="normal">The <code class="inlineCode">MyComponents</code> Razor class library that we have just created using the project template <a id="_idIndexMarker336"></a>includes one component, called <code class="inlineCode">Component1</code>. Before we continue, we need to test that the new Razor class library is working properly. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Open the <code class="inlineCode">ModalDialog.Pages/Index.razor</code> file.</li>
      <li class="numberedList">Add the following using statement right below the <code class="inlineCode">@page</code> directive:
        <pre class="programlisting code"><code class="hljs-code">@using MyComponents;
</code></pre>
      
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">If you will be using this project on multiple pages, you should consider adding the <code class="inlineCode">using</code> statement to the <code class="inlineCode">ModalDialog._Imports.razor</code> file so that you do not need to include it in every component that uses it.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="3">Add the following markup below the <code class="inlineCode">PageTitle</code> element:
        <pre class="programlisting code"><code class="hljs-code"><span class="hljs-tag">&lt;</span><span class="hljs-name">Component1</span><span class="hljs-tag"> /&gt;</span>
</code></pre>
      </li>
      <li class="numberedList">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.
    <p class="normal">The following screenshot shows how the <code class="inlineCode">Component1</code> component should render:</p>
    <figure class="mediaobject"><img src="../Images/B18471_04_11.png" alt="A picture containing shape

Description automatically generated"/></figure>
    <p class="packt_figref">Figure 4.11: Component1</p>
    <div class="note">
      <p class="normal"><strong class="keyWord">IMPORTANT NOTE</strong></p>
      <p class="normal">If the <code class="inlineCode">Component1</code> component is missing its styling, it is because the CSS file is cached. Use the following key combination, <em class="keystroke">Ctrl</em>+<em class="keystroke">Shift</em>+<em class="keystroke">R</em>, to empty the cache and reload the page.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Close the browser.</li>
      <li class="numberedList">Return to Visual Studio.</li>
      <li class="numberedList">Delete the <code class="inlineCode">Component1</code> element from the <code class="inlineCode">Index</code> component.</li>
    </ol>
    <p class="normal">We have <a id="_idIndexMarker337"></a>finished testing the <code class="inlineCode">MyComponents</code> Razor class library. Now it’s time to add our custom <code class="inlineCode">Dialog</code> component to the <code class="inlineCode">MyComponents</code> Razor class library.</p>
    <h2 id="_idParaDest-147" class="heading-2">Add a component to the Razor class library</h2>
    <p class="normal">To share <a id="_idIndexMarker338"></a>the <code class="inlineCode">Dialog</code> component, we need to move it into the Razor class library that we just created and tested. We do this as follows:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">Right-click the <code class="inlineCode">ModalDialog.Shared/Dialog.razor</code> file and select the <strong class="screenText">Copy</strong> option from the menu.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">MyComponents</code> project and select the <strong class="screenText">Paste</strong> option from the menu.</li>
      <li class="numberedList">Right-click the <code class="inlineCode">MyComponents.Dialog.razor</code> file and select the <strong class="screenText">Rename</strong> option from the menu.</li>
      <li class="numberedList">Rename the file <code class="inlineCode">BweDialog.razor</code>.
    <p class="normal">In this case, <code class="inlineCode">Bwe</code> stands for <em class="italic">Blazor WebAssembly by Example</em>.</p>
    <div class="packt_tip">
      <p class="normal"><strong class="keyWord">TIP</strong></p>
      <p class="normal">When naming components in a Razor class library, you should give them unique names to avoid ambiguous reference errors. Most organizations prefix all their shared components with the same text. For example, a company named <strong class="keyWord">One Stop Designs</strong> (<strong class="keyWord">OSD</strong>) might prefix all their shared components with <code class="inlineCode">Osd</code>.</p>
    </div></li>
    </ol>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="5">Open the <code class="inlineCode">ModalDialog.Pages/Index.razor</code> file.</li>
      <li class="numberedList">Rename the <code class="inlineCode">Dialog</code> element <code class="inlineCode">BweDialog</code>.</li>
      <li class="numberedList">Press <em class="keystroke">Ctrl</em>+<em class="keystroke">F5</em> to start the application without debugging.</li>
      <li class="numberedList">Click the <strong class="screenText">Show Dialog</strong> button.</li>
      <li class="numberedList">Enter some text in the <strong class="screenText">Enter New Item</strong> field.</li>
      <li class="numberedList">Click the <strong class="screenText">Ok</strong> button.</li>
      <li class="numberedList">Repeat.</li>
    </ol>
    <p class="normal">The <code class="inlineCode">BweDialog</code> component is now being used from the <code class="inlineCode">MyComponents</code> Razor class library. Since <a id="_idIndexMarker339"></a>the <code class="inlineCode">BweDialog</code> component is included in a Razor class library, it can easily be shared with other projects.</p>
    <h1 id="_idParaDest-148" class="heading-1">Summary</h1>
    <p class="normal">You should now be able to create a modal dialog and share it with multiple projects by using a Razor class library.</p>
    <p class="normal">In this chapter, we introduced <code class="inlineCode">RenderFragment</code> parameters, <code class="inlineCode">EventCallback</code> parameters, and CSS isolation.</p>
    <p class="normal">After that, we used the <strong class="keyWord">Blazor WebAssembly App Empty</strong> project template to create a new project. We created a <code class="inlineCode">Dialog</code> component that acts like a modal dialog. The <code class="inlineCode">Dialog</code> component uses both <code class="inlineCode">RenderFragment</code> parameters and <code class="inlineCode">EventCallback</code> parameters to share information between it and its parent. Also, it uses CSS isolation for its styles.</p>
    <p class="normal">In the last part of the chapter, we created a Razor custom library and moved the <code class="inlineCode">Dialog</code> component to the new library.</p>
    <p class="normal">So far, in this book, we have avoided using JavaScript. Unfortunately, there are still some functions that we can only accomplish with JavaScript. In the next chapter of this book, we will learn how to use JavaScript interop to use JavaScript in a Blazor WebAssembly app.</p>
    <h1 id="_idParaDest-149" class="heading-1">Questions</h1>
    <p class="normal">The following questions are provided for your consideration:</p>
    <ol class="numberedList" style="list-style-type: decimal;">
      <li class="numberedList" value="1">How can you replace a table with a templated component?</li>
      <li class="numberedList">How would you add default values for the <code class="inlineCode">Title</code> property and the <code class="inlineCode">Body</code> property of the <code class="inlineCode">Dialog</code> component?</li>
      <li class="numberedList">How can you determine which button was clicked when handling the <code class="inlineCode">@onclick</code> event?</li>
      <li class="numberedList">Can you distribute your <code class="inlineCode">Dialog</code> component using a NuGet package?</li>
    </ol>
    <h1 id="_idParaDest-150" class="heading-1">Further reading</h1>
    <p class="normal">The following resources provide more information concerning the topics in this chapter:</p>
    <ul>
      <li class="bulletList">For more information on CSS, refer to <a href="https://www.w3schools.com/css/default.asp"><span class="url">https://www.w3schools.com/css/default.asp</span></a>.</li>
      <li class="bulletList">For more information on lambda expressions, refer to <a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions"><span class="url">https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions</span></a>.</li>
      <li class="bulletList">For more information on ASP.NET Core Razor components class libraries, refer to <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/components/class-libraries"><span class="url">https://learn.microsoft.com/en-us/aspnet/core/blazor/components/class-libraries</span></a>.</li>
      <li class="bulletList">For more information on NuGet, refer to <a href="https://www.nuget.org"><span class="url">https://www.nuget.org</span></a>.</li>
    </ul>
  </div>
  <div id="_idContainer137" class="Basic-Text-Frame">
    <h1 id="_idParaDest-151" class="heading-1">Join our community on Discord</h1>
    <p class="normal">Join our community’s Discord space for discussions with the author and other readers:</p>
    <p class="normal"><a href="https://packt.link/BlazorWASM2e"><span class="url">https://packt.link/BlazorWASM2e</span></a></p>
    <p class="normal"><img src="../Images/Discord_QR.png" alt=""/></p>
  </div>
</body>
</html>